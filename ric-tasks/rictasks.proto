syntax = "proto3";

package ric.tasks;

option go_package = "./ric-tasks;rictasks";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

service TaskService {
  // create task. if parent field exists than add it to the end of
  // parent subtasks
  rpc Create(CreateTaskRequest) returns (CreateTaskResponse);
  // get task by it id
  rpc Get(GetTaskRequest) returns (GetTaskResponse);
  // update task
  // this method can't update (return error):
  // 1. tasks status (use ChangeStatus)
  // 2. tasks deadlines if status not equal to CREATED or ASSIGNED
  // 3. subtasks order (use UpdateOrder)
  // 4. begin and end location if status not equal to CREATED or ASSIGNED
  //
  // new subtasks can be added but they always append to end of subtasks list
  // use UpdateOrder after this if you need add subtask to specific position
  rpc Update(UpdateTaskRequest) returns (UpdateTaskResponse);
  // delete task
  rpc Delete(DeleteTaskRequest) returns (DeleteTaskResponse);
  // update subtasks order
  // order can be updated only if following true:
  // 1. all subtasks has status CREATED or ASSIGNED
  // 2. all subtasks has no deadlines
  //    (if subtask have deadline you can unset it via Update method)
  rpc UpdateOrder(UpdateTaskOrderRequest) returns (UpdateTaskOrderResponse);
  // change subtask status
  // if parent field exists than check parent constrain before change status
  // so if constraint ordered you can't take in work this task if previous task
  // not closed
  //
  // the following status change is allowed:
  // CREATED -> ASSIGNED
  // ASSIGNED -> IN_WORK
  // IN_WORK -> CLOSED (with success flag)
  // CLOSED -> CREATED
  // ASSIGNED -> CREATED
  // ASSIGNED -> CLOSED (method always set success flag to false)
  // CREATED -> CLOSED (method always set success flag to false)
  //
  // if task has begin location -> change status to IN_WORK can be done only
  // in this location
  //
  // if task has end location -> change status to CLOSED can be done only
  // in this location
  rpc ChangeStatus(ChangeTaskStatusRequest) returns (ChangeTaskStatusResponse);
}

service KindService {
  rpc Create(CreateKindRequest) returns (CreateKindResponse);
  rpc Get(GetKindRequest) returns (GetKindResponse);
  rpc Update(UpdateKindRequest) returns (UpdateKindResponse);
  rpc Delete(DeleteKindRequest) returns (DeleteKindResponse);
}

message UserContext {
  string group_id = 1;
  string user_id = 2;
  string span_id = 3;
}

message ObjectId {
  string id = 1;
}

message Location {
  double lat = 1;
  double lng = 2;
  double radius = 3;
  // @inject_tag: bson:",omitempty"
  string address = 4;
  // @inject_tag: bson:",omitempty"
  IndoorLocation indoor = 5;
}

message IndoorLocation {
  double x = 1;
  double y = 2;
  double z = 3;
  double radius = 4;
}

message Task {
  enum Constrain {
    INVALID = 0; // error
    UNORDERED = 1; // all subtasks should be done (order doesn't matter)
    ORDERED = 2; // all subtasks shuld be done step by step
  }
  enum Status {
    NOT_SET = 0; // error
    CREATED = 1;
    ASSIGNED = 2;
    IN_WORK = 3;
    CLOSED = 4;
  }
  // @inject_tag: bson:"_id,omitempty"
  ObjectId oid = 1;
  // @inject_tag: bson:",omitempty"
  ObjectId owner = 2;
  // @inject_tag: bson:",omitempty"
  ObjectId group = 3;
  // @inject_tag: bson:",omitempty"
  ObjectId parent = 4;
  // @inject_tag: bson:"-"
  repeated Task subtasks = 5;
  // @inject_tag: bson:",omitempty"
  repeated string tags = 6;
  // @inject_tag: bson:",omitempty"
  Constrain constrain = 7;
  // @inject_tag: bson:",omitempty"
  int32 priority = 8;
  // @inject_tag: bson:"created_at,omitempty"
  int64 created_at = 9; // milliseconds
  // @inject_tag: bson:",omitempty"
  string name = 10;
  // @inject_tag: bson:",omitempty"
  string description = 11;
  // @inject_tag: bson:",omitempty"
  Status status = 12;
  // @inject_tag: bson:",omitempty"
  ObjectId object = 13;
  // @inject_tag: bson:",omitempty"
  ObjectId kind = 14;
  // overwride task kind report_format
  // @inject_tag: bson:"report_format,omitempty"
  repeated ReportFormat report_format = 15;
  // @inject_tag: bson:",omitempty"
  repeated Report report = 16;
  // @inject_tag: bson:",omitempty"
  Location begin = 17;
  // @inject_tag: bson:",omitempty"
  Location end = 18;
  // @inject_tag: bson:",omitempty"
  repeated Deadline deadlines = 19;
  // @inject_tag: bson:",omitempty"
  google.protobuf.BoolValue success = 20;
  // @inject_tag: bson:",omitempty"
  ObjectId assignee = 21;
  // @inject_tag: bson:"assignee_type,omitempty"
  string assignee_type = 22; // mb enum
  // @inject_tag: bson:",omitempty"
  Review review = 23;
  // @inject_tag: bson:",omitempty"
  bytes json = 24; // json blob
}

message Review {
  ObjectId reviewer = 1;
  int32 rating = 2; // rating when task approved
  // @inject_tag: bson:",omitempty"
  string comment = 3;
}

message Deadline {
  int64 timestamp = 1; // milliseconds
  // number of milliseconds before deadline when service should send
  // notification
  // @inject_tag: bson:"notify_until,omitempty"
  google.protobuf.Int64Value notify_until = 2;
  Task.Status status = 3;
}

message ReportFormat {
  enum FieldType {
    INVALID = 0;
    BOOLEAN = 1; //checkbox
    TEXT = 2;
    NUMBER = 3;
    FILE = 4;
  }
  string name = 1;
  FieldType field = 2;
  google.protobuf.BoolValue required = 5; // flag of require for this field
}

message Report {
  string name = 1;
  google.protobuf.Any value = 2;
}

message Kind {
  // @inject_tag: bson:"_id"
  ObjectId oid = 1;
  // @inject_tag: bson:",omitempty"
  string name = 2;
  // @inject_tag: bson:",omitempty"
  string discription = 3;
  // @inject_tag: bson:",omitempty"
  string svg = 4; // svg for task this type
  // @inject_tag: bson:",omitempty"
  repeated ObjectId role = 5; // roles for access
  // @inject_tag: bson:"report_format,omitempty"
  repeated ReportFormat report_format = 6;
}

message CreateTaskRequest {
  UserContext ctx = 1;
  Task task = 2;
}

message CreateTaskResponse {
  Task task = 1;
}

message GetTaskRequest {
  UserContext ctx = 1;
  ObjectId oid = 2;
}

message GetTaskResponse {
  Task task = 1;
}

message DeleteTaskRequest {
  UserContext ctx = 1;
  ObjectId oid = 2;
}

message DeleteTaskResponse {}

message UpdateTaskRequest {
  UserContext ctx = 1;
  Task task = 2;
}

message UpdateTaskResponse {
  Task task = 1;
}

message UpdateTaskOrderRequest {
  UserContext ctx = 1;
  ObjectId oid = 2;
  // new position to task id
  // if new position greater then subtasks length
  // error returned
  map<string, int32> positions = 3;
}

message UpdateTaskOrderResponse {
  Task task = 1;
}

message ChangeTaskStatusRequest {
  UserContext ctx = 1;
  ObjectId oid = 2;
  Task.Status new_status = 3;
  // current location
  Location location = 4;
  // required only if new_status == CLOSED
  google.protobuf.BoolValue success = 5;
  string comment = 6;
  repeated Report report = 7;
}

message ChangeTaskStatusResponse {
  Task task = 1;
}

message CreateKindRequest {
  UserContext ctx = 1;
  Kind kind = 2;
}

message CreateKindResponse {
  Kind kind = 1;
}

message GetKindRequest {
  UserContext ctx = 1;
  ObjectId oid = 2;
}

message GetKindResponse {
  Kind kind = 1;
}

message UpdateKindRequest {
  UserContext ctx = 1;
  Kind kind = 2;
}

message UpdateKindResponse {
  Kind kind = 1;
}

message DeleteKindRequest {
  UserContext ctx = 1;
  ObjectId oid = 2;
}

message DeleteKindResponse {}
