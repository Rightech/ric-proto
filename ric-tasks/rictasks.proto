syntax = "proto3";

package ric.tasks;

option go_package = "./ric-tasks;rictasks";

import "google/protobuf/wrappers.proto";

service Tasks {
  rpc Create(CreateRequest) returns (CreateResponse);
  // get master task by it's id or by some subtask id
  // this request always return full master task
  rpc Get(GetRequest) returns (GetResponse);
  // this method can update master task and subtasks information
  // this method can't update (return error):
  // 1. subtasks status (use ChangeStatus)
  // 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
  // 3. subtasks order (use UpdateOrder)
  // 4. begin and end location if status not equal to CREATED or ASSIGNED
  //
  // new subtasks can be added but they always append to end of subtasks list
  // use UpdateOrder after this if you need add subtask to specific position
  //
  // to update subtask -> TaskId should be present in request
  // if no TaskId then subtask treated as new
  rpc Update(UpdateRequest) returns (UpdateResponse);
  // this method can delete master task or specific subtask
  // if it is a last subtask then master task also will be deleted
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  // update subtasks order
  // order can be updated only if following true:
  // 1. all subtasks has status CREATED or ASSIGNED
  // 2. all subtasks has no deadlines
  //    (if subtask have deadline you can unset it via Update method)
  rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse);
  // change subtask status
  // this method checks master task constrain before change status
  // so if constraint ordered you can't take in work subtask if previous subtask
  // not closed
  //
  // the following status change is allowed:
  // CREATED -> ASSIGNED
  // ASSIGNED -> IN_WORK
  // IN_WORK -> CLOSED (with success flag)
  // CLOSED -> CREATED
  // ASSIGNED -> CREATED
  // ASSIGNED -> CLOSED (method always set success flag to false)
  // CREATED -> CLOSED (method always set success flag to false)
  //
  // if subtask has begin location -> change status to IN_WORK can be done only
  // in this location
  //
  // if subtask has end location -> change status to CLOSED can be done only
  // in this location
  rpc ChangeStatus(ChangeStatusRequest) returns (ChangeStatusResponse);
}

message UserContext {
  string group_id = 1;
  string user_id = 2;
  string span_id = 3;
}

message ObjectId {
  string id = 1;
}

message TaskId {
  string id = 1;
}

message Location {
  double lat = 1;
  double lng = 2;
  double radius = 3;
  // @inject_tag: bson:",omitempty"
  string address = 4;
  // @inject_tag: bson:",omitempty"
  IndoorLocation indoor = 5;
}

message IndoorLocation {
  double x = 1;
  double y = 2;
  double z = 3;
  double radius = 4;
}

message Task{
    enum Constrain {
      INVALID = 0; // error
      UNORDERED = 1; // all subtasks should be done (order doesn't matter)
      ORDERED = 2; // all subtasks shuld be done step by step
    }
    enum Status {
      INVALID = 0; // error
      CREATED = 1;
      ASSIGNED = 2;
      IN_WORK = 3;
      CLOSED = 4;
    }
    // @inject_tag: bson:"_id"
    ObjectId oid = 1;
    // @inject_tag: bson:",omitempty"
    ObjectId owner = 2;
    // @inject_tag: bson:",omitempty"
    ObjectId group = 3;
    repeated Task subtasks = 4;
    Constrain constrain = 5;
    // @inject_tag: bson:",omitempty"
    repeated string tags = 6;
    int32 priority = 7;
    int64 created_at = 8; // milliseconds
    // @inject_tag: bson:",omitempty"
    ObjectId object = 9;
  
    ObjectId parent = 10;
  
    string name = 11;

    string description = 12;

    Status status = 13;
    string task_kind = 14;
    repeated ReportField report_field = 15;
    // TaskType task_type = 14; 
    // @inject_tag: bson:",omitempty"
    Location begin = 16;
    // @inject_tag: bson:",omitempty"
    Location end = 17;
  
    repeated Deadline deadlines = 18;
  
    google.protobuf.BoolValue success = 19;
    // @inject_tag: bson:",omitempty"
    ObjectId assignee = 20;
    string assignee_type = 21; // mb enum

    Review review = 22;
    
    bytes json = 23; // json blob
}

message Review {
  ObjectId reviewer = 1;
  int32 rating = 2; // Оценка при приеме задачи
  string comment = 3; // комментарий при приеме
}

message Deadline {
  int64 timestamp = 1; // milliseconds
  // number of milliseconds before deadline when service should send
  // notification
  // @inject_tag: bson:"notify_until,omitempty"
  google.protobuf.Int64Value notify_until = 2;
  Task.Status status = 3;
}
message ReportField{ // TODO: Не уверен как в такой структуре лучше файлы определить
  enum FieldType {
      INVALID = 0;
      BOOLEAN = 1; //checkbox
      TEXT = 2;
      NUMBER = 3;
      FILE = 4;
  }
  string name = 1; 
  FieldType field = 2;
  string value = 3; // text, number, boolean
  ObjectId file = 4;
  google.protobuf.BoolValue required = 5; // flag of require for this field
}

message TaskType { // like a Operation in old tasks. 

  string name = 1; 
  string discription = 2;
  string svg = 3; // svg for task this type

  repeated ObjectId role = 4; // roles for access

  repeated ReportField report = 5; // list of fields that can be included in report of task

}

message CreateRequest {
  UserContext ctx = 1;
  Task task = 2;
}

message CreateResponse {
  ObjectId oid = 1;
  repeated TaskId sub_ids = 2;
}

message GetRequest {
  oneof payload {
    ObjectId oid = 1;
    TaskId tid = 2;
  }
}

message GetResponse {
  Task task = 1;
}

message DeleteRequest {
  UserContext ctx = 1;
  oneof payload {
    ObjectId oid = 2;
    TaskId tid = 3;
  }
}

message DeleteResponse {}

message UpdateRequest {
  UserContext ctx = 1;
  Task task = 2;
}

message UpdateResponse {
  Task task = 1;
}

message UpdateOrderRequest {
  UserContext ctx = 1;
  ObjectId id = 2; // master task id
  // new position to task id
  // if new position greater then subtasks length
  // error returned
  map<string, int32> positions = 3;
}

message UpdateOrderResponse {}

message ChangeStatusRequest {
  UserContext ctx = 1;
  TaskId id = 2;
  Task.Status new_status = 3;
  // current location
  Location location = 4;
  // required only if new_status == CLOSED
  google.protobuf.BoolValue success = 5;
  string comment = 6;
  repeated string files = 7;
}

message ChangeStatusResponse {}
