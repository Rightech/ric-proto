syntax = "proto3";

package ric.auth;

option go_package = "./ric-auth;ricauth";

service RicAuth {
  rpc AuthObject(AuthObjectRequest) returns (AuthObjectResponse);
  rpc GetModelInfo(ModelInfoRequest) returns (ModelInfoResponse);
  rpc IssueCert(IssueCertRequest) returns (IssueCertResponse);
  rpc SendOffline(ObjectGateRequest) returns (ObjectGateResponse);
  rpc SendModelUpdate(ObjectGateRequest) returns (ObjectGateResponse);
}

message AuthObjectRequest {
  string protocol = 1;
  string object = 2;
  string client_id = 3;
  string username = 4;
  string password = 5;
  message AuthObjectCert {
    string cn = 1;
    string fingerprint = 2;
  }
  AuthObjectCert cert = 6;
  string ipv4 = 7;
  string ipv6 = 8;
}

message AuthObjectResponse {
  string session = 1;
  string model_id = 2;
  string object_id = 3;
  string group_id = 4;
  string group_key = 5;
  repeated AuthObjectArgument arguments = 6;
  string config = 7;
  int64 issued_at = 8;
  int64 expires_at = 9;
  repeated string acl = 10;
  string license_id = 11;
  map<string, int64> license = 12;
  map<string, StatRecord> stats = 13;
}

message AuthObjectArgument {
  string id = 1;
  string data_type = 2;
  string reference = 3;
  string parser = 4;
}

message StatRecord {
  int64 value = 1;
  int64 left = 2;
  int64 from = 3;
  int64 to = 4;
}

message IssueCertRequest {
  string object_id = 1;
  string ttl = 2;
}

message IssueCertResponse {
  string certificate = 1;
  string private_key = 2;
  string serial = 3;
  int64 issued_at = 4;
  int64 expires_at = 5;
}

message ModelInfoRequest {
  string model_id = 1;
}

message ModelInfoResponse {
  string model_id = 1;
  repeated AuthObjectArgument arguments = 2;
}

message ObjectGateRequest {
  string object_id = 1;
}

message ObjectGateResponse {}
