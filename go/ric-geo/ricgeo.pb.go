// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.7.0
// source: ric-geo/ricgeo.proto

package ricgeo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WatchGeofenceRequest_EventType int32

const (
	WatchGeofenceRequest_ALL            WatchGeofenceRequest_EventType = 0
	WatchGeofenceRequest_GEOFENCE_ENTER WatchGeofenceRequest_EventType = 1
	WatchGeofenceRequest_GEOFENCE_LEAVE WatchGeofenceRequest_EventType = 2
)

// Enum value maps for WatchGeofenceRequest_EventType.
var (
	WatchGeofenceRequest_EventType_name = map[int32]string{
		0: "ALL",
		1: "GEOFENCE_ENTER",
		2: "GEOFENCE_LEAVE",
	}
	WatchGeofenceRequest_EventType_value = map[string]int32{
		"ALL":            0,
		"GEOFENCE_ENTER": 1,
		"GEOFENCE_LEAVE": 2,
	}
)

func (x WatchGeofenceRequest_EventType) Enum() *WatchGeofenceRequest_EventType {
	p := new(WatchGeofenceRequest_EventType)
	*p = x
	return p
}

func (x WatchGeofenceRequest_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchGeofenceRequest_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_geo_ricgeo_proto_enumTypes[0].Descriptor()
}

func (WatchGeofenceRequest_EventType) Type() protoreflect.EnumType {
	return &file_ric_geo_ricgeo_proto_enumTypes[0]
}

func (x WatchGeofenceRequest_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchGeofenceRequest_EventType.Descriptor instead.
func (WatchGeofenceRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{1, 0}
}

type WatchRoomRequest_EventType int32

const (
	WatchRoomRequest_ALL        WatchRoomRequest_EventType = 0
	WatchRoomRequest_ROOM_ENTER WatchRoomRequest_EventType = 1
	WatchRoomRequest_ROOM_LEAVE WatchRoomRequest_EventType = 2
)

// Enum value maps for WatchRoomRequest_EventType.
var (
	WatchRoomRequest_EventType_name = map[int32]string{
		0: "ALL",
		1: "ROOM_ENTER",
		2: "ROOM_LEAVE",
	}
	WatchRoomRequest_EventType_value = map[string]int32{
		"ALL":        0,
		"ROOM_ENTER": 1,
		"ROOM_LEAVE": 2,
	}
)

func (x WatchRoomRequest_EventType) Enum() *WatchRoomRequest_EventType {
	p := new(WatchRoomRequest_EventType)
	*p = x
	return p
}

func (x WatchRoomRequest_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchRoomRequest_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_geo_ricgeo_proto_enumTypes[1].Descriptor()
}

func (WatchRoomRequest_EventType) Type() protoreflect.EnumType {
	return &file_ric_geo_ricgeo_proto_enumTypes[1]
}

func (x WatchRoomRequest_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchRoomRequest_EventType.Descriptor instead.
func (WatchRoomRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{2, 0}
}

type WatchRouteRequest_EventType int32

const (
	WatchRouteRequest_ALL       WatchRouteRequest_EventType = 0
	WatchRouteRequest_ROUTE_ON  WatchRouteRequest_EventType = 1
	WatchRouteRequest_ROUTE_OFF WatchRouteRequest_EventType = 2
)

// Enum value maps for WatchRouteRequest_EventType.
var (
	WatchRouteRequest_EventType_name = map[int32]string{
		0: "ALL",
		1: "ROUTE_ON",
		2: "ROUTE_OFF",
	}
	WatchRouteRequest_EventType_value = map[string]int32{
		"ALL":       0,
		"ROUTE_ON":  1,
		"ROUTE_OFF": 2,
	}
)

func (x WatchRouteRequest_EventType) Enum() *WatchRouteRequest_EventType {
	p := new(WatchRouteRequest_EventType)
	*p = x
	return p
}

func (x WatchRouteRequest_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchRouteRequest_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_geo_ricgeo_proto_enumTypes[2].Descriptor()
}

func (WatchRouteRequest_EventType) Type() protoreflect.EnumType {
	return &file_ric_geo_ricgeo_proto_enumTypes[2]
}

func (x WatchRouteRequest_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchRouteRequest_EventType.Descriptor instead.
func (WatchRouteRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{4, 0}
}

type WatchRequest_EventType int32

const (
	WatchRequest_UNDEFINED      WatchRequest_EventType = 0
	WatchRequest_GEOFENCE_ENTER WatchRequest_EventType = 1
	WatchRequest_GEOFENCE_LEAVE WatchRequest_EventType = 2
	WatchRequest_GEOFENCE_BOTH  WatchRequest_EventType = 3
	WatchRequest_ROUTE_ON       WatchRequest_EventType = 5
	WatchRequest_ROUTE_OFF      WatchRequest_EventType = 6
	WatchRequest_ROUTE_BOTH     WatchRequest_EventType = 7
	WatchRequest_ROOM_ENTER     WatchRequest_EventType = 9
	WatchRequest_ROOM_LEAVE     WatchRequest_EventType = 10
	WatchRequest_ROOM_BOTH      WatchRequest_EventType = 11
)

// Enum value maps for WatchRequest_EventType.
var (
	WatchRequest_EventType_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "GEOFENCE_ENTER",
		2:  "GEOFENCE_LEAVE",
		3:  "GEOFENCE_BOTH",
		5:  "ROUTE_ON",
		6:  "ROUTE_OFF",
		7:  "ROUTE_BOTH",
		9:  "ROOM_ENTER",
		10: "ROOM_LEAVE",
		11: "ROOM_BOTH",
	}
	WatchRequest_EventType_value = map[string]int32{
		"UNDEFINED":      0,
		"GEOFENCE_ENTER": 1,
		"GEOFENCE_LEAVE": 2,
		"GEOFENCE_BOTH":  3,
		"ROUTE_ON":       5,
		"ROUTE_OFF":      6,
		"ROUTE_BOTH":     7,
		"ROOM_ENTER":     9,
		"ROOM_LEAVE":     10,
		"ROOM_BOTH":      11,
	}
)

func (x WatchRequest_EventType) Enum() *WatchRequest_EventType {
	p := new(WatchRequest_EventType)
	*p = x
	return p
}

func (x WatchRequest_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchRequest_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_geo_ricgeo_proto_enumTypes[3].Descriptor()
}

func (WatchRequest_EventType) Type() protoreflect.EnumType {
	return &file_ric_geo_ricgeo_proto_enumTypes[3]
}

func (x WatchRequest_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchRequest_EventType.Descriptor instead.
func (WatchRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{8, 0}
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{0}
}

type WatchGeofenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId     string                         `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	EventType    WatchGeofenceRequest_EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=ric.geo.WatchGeofenceRequest_EventType" json:"event_type,omitempty"`
	GeofencesIds []string                       `protobuf:"bytes,3,rep,name=geofences_ids,json=geofencesIds,proto3" json:"geofences_ids,omitempty"`
	Tags         []string                       `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *WatchGeofenceRequest) Reset() {
	*x = WatchGeofenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchGeofenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchGeofenceRequest) ProtoMessage() {}

func (x *WatchGeofenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchGeofenceRequest.ProtoReflect.Descriptor instead.
func (*WatchGeofenceRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{1}
}

func (x *WatchGeofenceRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *WatchGeofenceRequest) GetEventType() WatchGeofenceRequest_EventType {
	if x != nil {
		return x.EventType
	}
	return WatchGeofenceRequest_ALL
}

func (x *WatchGeofenceRequest) GetGeofencesIds() []string {
	if x != nil {
		return x.GeofencesIds
	}
	return nil
}

func (x *WatchGeofenceRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type WatchRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  string                     `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	EventType WatchRoomRequest_EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=ric.geo.WatchRoomRequest_EventType" json:"event_type,omitempty"`
	Fences    []*Fence                   `protobuf:"bytes,3,rep,name=fences,proto3" json:"fences,omitempty"`
	Tags      []string                   `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *WatchRoomRequest) Reset() {
	*x = WatchRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRoomRequest) ProtoMessage() {}

func (x *WatchRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRoomRequest.ProtoReflect.Descriptor instead.
func (*WatchRoomRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{2}
}

func (x *WatchRoomRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *WatchRoomRequest) GetEventType() WatchRoomRequest_EventType {
	if x != nil {
		return x.EventType
	}
	return WatchRoomRequest_ALL
}

func (x *WatchRoomRequest) GetFences() []*Fence {
	if x != nil {
		return x.Fences
	}
	return nil
}

func (x *WatchRoomRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Fence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeofenceId string `protobuf:"bytes,1,opt,name=geofence_id,json=geofenceId,proto3" json:"geofence_id,omitempty"`
	ShapeId    string `protobuf:"bytes,2,opt,name=shape_id,json=shapeId,proto3" json:"shape_id,omitempty"`
	RoomId     string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *Fence) Reset() {
	*x = Fence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fence) ProtoMessage() {}

func (x *Fence) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fence.ProtoReflect.Descriptor instead.
func (*Fence) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{3}
}

func (x *Fence) GetGeofenceId() string {
	if x != nil {
		return x.GeofenceId
	}
	return ""
}

func (x *Fence) GetShapeId() string {
	if x != nil {
		return x.ShapeId
	}
	return ""
}

func (x *Fence) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type WatchRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  string                      `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	EventType WatchRouteRequest_EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=ric.geo.WatchRouteRequest_EventType" json:"event_type,omitempty"`
	RoutesIds []string                    `protobuf:"bytes,3,rep,name=routes_ids,json=routesIds,proto3" json:"routes_ids,omitempty"`
	Tags      []string                    `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *WatchRouteRequest) Reset() {
	*x = WatchRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRouteRequest) ProtoMessage() {}

func (x *WatchRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRouteRequest.ProtoReflect.Descriptor instead.
func (*WatchRouteRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{4}
}

func (x *WatchRouteRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *WatchRouteRequest) GetEventType() WatchRouteRequest_EventType {
	if x != nil {
		return x.EventType
	}
	return WatchRouteRequest_ALL
}

func (x *WatchRouteRequest) GetRoutesIds() []string {
	if x != nil {
		return x.RoutesIds
	}
	return nil
}

func (x *WatchRouteRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateGeoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeofenceId string `protobuf:"bytes,1,opt,name=geofence_id,json=geofenceId,proto3" json:"geofence_id,omitempty"`
	ShapeId    string `protobuf:"bytes,2,opt,name=shape_id,json=shapeId,proto3" json:"shape_id,omitempty"`
}

func (x *UpdateGeoRequest) Reset() {
	*x = UpdateGeoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGeoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeoRequest) ProtoMessage() {}

func (x *UpdateGeoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeoRequest.ProtoReflect.Descriptor instead.
func (*UpdateGeoRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateGeoRequest) GetGeofenceId() string {
	if x != nil {
		return x.GeofenceId
	}
	return ""
}

func (x *UpdateGeoRequest) GetShapeId() string {
	if x != nil {
		return x.ShapeId
	}
	return ""
}

type GetObjectInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *GetObjectInfoRequest) Reset() {
	*x = GetObjectInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectInfoRequest) ProtoMessage() {}

func (x *GetObjectInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectInfoRequest.ProtoReflect.Descriptor instead.
func (*GetObjectInfoRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{6}
}

func (x *GetObjectInfoRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type GetObjectInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geofences []*GetObjectInfoResponse_ObjectGeofenceInfo `protobuf:"bytes,1,rep,name=geofences,proto3" json:"geofences,omitempty"`
}

func (x *GetObjectInfoResponse) Reset() {
	*x = GetObjectInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectInfoResponse) ProtoMessage() {}

func (x *GetObjectInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectInfoResponse.ProtoReflect.Descriptor instead.
func (*GetObjectInfoResponse) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{7}
}

func (x *GetObjectInfoResponse) GetGeofences() []*GetObjectInfoResponse_ObjectGeofenceInfo {
	if x != nil {
		return x.Geofences
	}
	return nil
}

type WatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  string                 `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	EventType WatchRequest_EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=ric.geo.WatchRequest_EventType" json:"event_type,omitempty"`
	Fences    []*Fence               `protobuf:"bytes,3,rep,name=fences,proto3" json:"fences,omitempty"`
	Tags      []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{8}
}

func (x *WatchRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *WatchRequest) GetEventType() WatchRequest_EventType {
	if x != nil {
		return x.EventType
	}
	return WatchRequest_UNDEFINED
}

func (x *WatchRequest) GetFences() []*Fence {
	if x != nil {
		return x.Fences
	}
	return nil
}

func (x *WatchRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Fences   []*Fence `protobuf:"bytes,2,rep,name=fences,proto3" json:"fences,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{9}
}

func (x *StopRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *StopRequest) GetFences() []*Fence {
	if x != nil {
		return x.Fences
	}
	return nil
}

func (x *StopRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Time     *Time    `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Circle   *Circle  `protobuf:"bytes,3,opt,name=circle,proto3" json:"circle,omitempty"`
	Tags     []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ControlRequest) Reset() {
	*x = ControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlRequest) ProtoMessage() {}

func (x *ControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlRequest.ProtoReflect.Descriptor instead.
func (*ControlRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{10}
}

func (x *ControlRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ControlRequest) GetTime() *Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ControlRequest) GetCircle() *Circle {
	if x != nil {
		return x.Circle
	}
	return nil
}

func (x *ControlRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Interval int64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{11}
}

func (x *Time) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Time) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Circle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat    float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon    float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	Radius float64 `protobuf:"fixed64,3,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *Circle) Reset() {
	*x = Circle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{12}
}

func (x *Circle) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Circle) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Circle) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type OsmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // json
}

func (x *OsmResponse) Reset() {
	*x = OsmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsmResponse) ProtoMessage() {}

func (x *OsmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsmResponse.ProtoReflect.Descriptor instead.
func (*OsmResponse) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{13}
}

func (x *OsmResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GeocodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GeocodeRequest) Reset() {
	*x = GeocodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeocodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeocodeRequest) ProtoMessage() {}

func (x *GeocodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeocodeRequest.ProtoReflect.Descriptor instead.
func (*GeocodeRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{14}
}

func (x *GeocodeRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GeocodeRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{15}
}

func (x *Point) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Point) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type GeocodeReverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point    *Point `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GeocodeReverseRequest) Reset() {
	*x = GeocodeReverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeocodeReverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeocodeReverseRequest) ProtoMessage() {}

func (x *GeocodeReverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeocodeReverseRequest.ProtoReflect.Descriptor instead.
func (*GeocodeReverseRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{16}
}

func (x *GeocodeReverseRequest) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *GeocodeReverseRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates []*Point `protobuf:"bytes,1,rep,name=coordinates,proto3" json:"coordinates,omitempty"`
	Options     []byte   `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"` // json
}

func (x *GetRouteRequest) Reset() {
	*x = GetRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRequest) ProtoMessage() {}

func (x *GetRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRequest.ProtoReflect.Descriptor instead.
func (*GetRouteRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{17}
}

func (x *GetRouteRequest) GetCoordinates() []*Point {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *GetRouteRequest) GetOptions() []byte {
	if x != nil {
		return x.Options
	}
	return nil
}

type IndoorCircle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z      float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	Radius float64 `protobuf:"fixed64,4,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *IndoorCircle) Reset() {
	*x = IndoorCircle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndoorCircle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndoorCircle) ProtoMessage() {}

func (x *IndoorCircle) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndoorCircle.ProtoReflect.Descriptor instead.
func (*IndoorCircle) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{18}
}

func (x *IndoorCircle) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IndoorCircle) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *IndoorCircle) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *IndoorCircle) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Circle       *Circle       `protobuf:"bytes,1,opt,name=circle,proto3" json:"circle,omitempty"`
	IndoorCircle *IndoorCircle `protobuf:"bytes,2,opt,name=indoor_circle,json=indoorCircle,proto3" json:"indoor_circle,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{19}
}

func (x *Zone) GetCircle() *Circle {
	if x != nil {
		return x.Circle
	}
	return nil
}

func (x *Zone) GetIndoorCircle() *IndoorCircle {
	if x != nil {
		return x.IndoorCircle
	}
	return nil
}

type IndoorPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *IndoorPoint) Reset() {
	*x = IndoorPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndoorPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndoorPoint) ProtoMessage() {}

func (x *IndoorPoint) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndoorPoint.ProtoReflect.Descriptor instead.
func (*IndoorPoint) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{20}
}

func (x *IndoorPoint) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IndoorPoint) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *IndoorPoint) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location       *Point       `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	IndoorLocation *IndoorPoint `protobuf:"bytes,2,opt,name=indoor_location,json=indoorLocation,proto3" json:"indoor_location,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{21}
}

func (x *Position) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Position) GetIndoorLocation() *IndoorPoint {
	if x != nil {
		return x.IndoorLocation
	}
	return nil
}

type CheckInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Zone     *Zone     `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *CheckInRequest) Reset() {
	*x = CheckInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInRequest) ProtoMessage() {}

func (x *CheckInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInRequest.ProtoReflect.Descriptor instead.
func (*CheckInRequest) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{22}
}

func (x *CheckInRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CheckInRequest) GetZone() *Zone {
	if x != nil {
		return x.Zone
	}
	return nil
}

type CheckInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	In bool `protobuf:"varint,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (x *CheckInResponse) Reset() {
	*x = CheckInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInResponse) ProtoMessage() {}

func (x *CheckInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInResponse.ProtoReflect.Descriptor instead.
func (*CheckInResponse) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{23}
}

func (x *CheckInResponse) GetIn() bool {
	if x != nil {
		return x.In
	}
	return false
}

type GetObjectInfoResponse_ObjectGeofenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeofenceId     string `protobuf:"bytes,1,opt,name=geofence_id,json=geofenceId,proto3" json:"geofence_id,omitempty"`
	IsIn           bool   `protobuf:"varint,2,opt,name=is_in,json=isIn,proto3" json:"is_in,omitempty"`
	LastPacketTime int64  `protobuf:"varint,3,opt,name=last_packet_time,json=lastPacketTime,proto3" json:"last_packet_time,omitempty"`
	LastEnterTime  int64  `protobuf:"varint,4,opt,name=last_enter_time,json=lastEnterTime,proto3" json:"last_enter_time,omitempty"`
	LastLeaveTime  int64  `protobuf:"varint,5,opt,name=last_leave_time,json=lastLeaveTime,proto3" json:"last_leave_time,omitempty"`
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) Reset() {
	*x = GetObjectInfoResponse_ObjectGeofenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_geo_ricgeo_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectInfoResponse_ObjectGeofenceInfo) ProtoMessage() {}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ric_geo_ricgeo_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectInfoResponse_ObjectGeofenceInfo.ProtoReflect.Descriptor instead.
func (*GetObjectInfoResponse_ObjectGeofenceInfo) Descriptor() ([]byte, []int) {
	return file_ric_geo_ricgeo_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) GetGeofenceId() string {
	if x != nil {
		return x.GeofenceId
	}
	return ""
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) GetIsIn() bool {
	if x != nil {
		return x.IsIn
	}
	return false
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) GetLastPacketTime() int64 {
	if x != nil {
		return x.LastPacketTime
	}
	return 0
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) GetLastEnterTime() int64 {
	if x != nil {
		return x.LastEnterTime
	}
	return 0
}

func (x *GetObjectInfoResponse_ObjectGeofenceInfo) GetLastLeaveTime() int64 {
	if x != nil {
		return x.LastLeaveTime
	}
	return 0
}

var File_ric_geo_ricgeo_proto protoreflect.FileDescriptor

var file_ric_geo_ricgeo_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x69, 0x63, 0x2d, 0x67, 0x65, 0x6f, 0x2f, 0x72, 0x69, 0x63, 0x67, 0x65, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x22,
	0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf2, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x45, 0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x10, 0x02, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x02, 0x22, 0x5c, 0x0a,
	0x05, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6f,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x11,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x22, 0x4e, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xaf,
	0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x12, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x49, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xdb, 0x02, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4f, 0x46, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x45, 0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x0a, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x0b, 0x22, 0x66,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x06, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x44, 0x0a, 0x06, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x4f, 0x73, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x6f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a,
	0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65,
	0x6f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x6b, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52,
	0x06, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x6f, 0x6f,
	0x72, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x75, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x6e, 0x32, 0xe4, 0x04, 0x0a, 0x05, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x4b, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6f,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02,
	0x01, 0x12, 0x4f, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88,
	0x02, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x47, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01,
	0x12, 0x45, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x67, 0x65, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88,
	0x02, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x12,
	0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x1a, 0x03, 0x88, 0x02,
	0x01, 0x32, 0x87, 0x02, 0x0a, 0x07, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x32, 0x12, 0x36, 0x0a,
	0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x12, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4f, 0x0a, 0x11, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x17, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc3, 0x01, 0x0a,
	0x03, 0x4f, 0x73, 0x6d, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x4f, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x12, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4f, 0x73, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4f, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x45, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x72,
	0x69, 0x63, 0x2d, 0x67, 0x65, 0x6f, 0x3b, 0x72, 0x69, 0x63, 0x67, 0x65, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_geo_ricgeo_proto_rawDescOnce sync.Once
	file_ric_geo_ricgeo_proto_rawDescData = file_ric_geo_ricgeo_proto_rawDesc
)

func file_ric_geo_ricgeo_proto_rawDescGZIP() []byte {
	file_ric_geo_ricgeo_proto_rawDescOnce.Do(func() {
		file_ric_geo_ricgeo_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_geo_ricgeo_proto_rawDescData)
	})
	return file_ric_geo_ricgeo_proto_rawDescData
}

var file_ric_geo_ricgeo_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ric_geo_ricgeo_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ric_geo_ricgeo_proto_goTypes = []interface{}{
	(WatchGeofenceRequest_EventType)(0),              // 0: ric.geo.WatchGeofenceRequest.EventType
	(WatchRoomRequest_EventType)(0),                  // 1: ric.geo.WatchRoomRequest.EventType
	(WatchRouteRequest_EventType)(0),                 // 2: ric.geo.WatchRouteRequest.EventType
	(WatchRequest_EventType)(0),                      // 3: ric.geo.WatchRequest.EventType
	(*EmptyResponse)(nil),                            // 4: ric.geo.EmptyResponse
	(*WatchGeofenceRequest)(nil),                     // 5: ric.geo.WatchGeofenceRequest
	(*WatchRoomRequest)(nil),                         // 6: ric.geo.WatchRoomRequest
	(*Fence)(nil),                                    // 7: ric.geo.Fence
	(*WatchRouteRequest)(nil),                        // 8: ric.geo.WatchRouteRequest
	(*UpdateGeoRequest)(nil),                         // 9: ric.geo.UpdateGeoRequest
	(*GetObjectInfoRequest)(nil),                     // 10: ric.geo.GetObjectInfoRequest
	(*GetObjectInfoResponse)(nil),                    // 11: ric.geo.GetObjectInfoResponse
	(*WatchRequest)(nil),                             // 12: ric.geo.WatchRequest
	(*StopRequest)(nil),                              // 13: ric.geo.StopRequest
	(*ControlRequest)(nil),                           // 14: ric.geo.ControlRequest
	(*Time)(nil),                                     // 15: ric.geo.Time
	(*Circle)(nil),                                   // 16: ric.geo.Circle
	(*OsmResponse)(nil),                              // 17: ric.geo.OsmResponse
	(*GeocodeRequest)(nil),                           // 18: ric.geo.GeocodeRequest
	(*Point)(nil),                                    // 19: ric.geo.Point
	(*GeocodeReverseRequest)(nil),                    // 20: ric.geo.GeocodeReverseRequest
	(*GetRouteRequest)(nil),                          // 21: ric.geo.GetRouteRequest
	(*IndoorCircle)(nil),                             // 22: ric.geo.IndoorCircle
	(*Zone)(nil),                                     // 23: ric.geo.Zone
	(*IndoorPoint)(nil),                              // 24: ric.geo.IndoorPoint
	(*Position)(nil),                                 // 25: ric.geo.Position
	(*CheckInRequest)(nil),                           // 26: ric.geo.CheckInRequest
	(*CheckInResponse)(nil),                          // 27: ric.geo.CheckInResponse
	(*GetObjectInfoResponse_ObjectGeofenceInfo)(nil), // 28: ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo
}
var file_ric_geo_ricgeo_proto_depIdxs = []int32{
	0,  // 0: ric.geo.WatchGeofenceRequest.event_type:type_name -> ric.geo.WatchGeofenceRequest.EventType
	1,  // 1: ric.geo.WatchRoomRequest.event_type:type_name -> ric.geo.WatchRoomRequest.EventType
	7,  // 2: ric.geo.WatchRoomRequest.fences:type_name -> ric.geo.Fence
	2,  // 3: ric.geo.WatchRouteRequest.event_type:type_name -> ric.geo.WatchRouteRequest.EventType
	28, // 4: ric.geo.GetObjectInfoResponse.geofences:type_name -> ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo
	3,  // 5: ric.geo.WatchRequest.event_type:type_name -> ric.geo.WatchRequest.EventType
	7,  // 6: ric.geo.WatchRequest.fences:type_name -> ric.geo.Fence
	7,  // 7: ric.geo.StopRequest.fences:type_name -> ric.geo.Fence
	15, // 8: ric.geo.ControlRequest.time:type_name -> ric.geo.Time
	16, // 9: ric.geo.ControlRequest.circle:type_name -> ric.geo.Circle
	19, // 10: ric.geo.GeocodeReverseRequest.point:type_name -> ric.geo.Point
	19, // 11: ric.geo.GetRouteRequest.coordinates:type_name -> ric.geo.Point
	16, // 12: ric.geo.Zone.circle:type_name -> ric.geo.Circle
	22, // 13: ric.geo.Zone.indoor_circle:type_name -> ric.geo.IndoorCircle
	19, // 14: ric.geo.Position.location:type_name -> ric.geo.Point
	24, // 15: ric.geo.Position.indoor_location:type_name -> ric.geo.IndoorPoint
	25, // 16: ric.geo.CheckInRequest.position:type_name -> ric.geo.Position
	23, // 17: ric.geo.CheckInRequest.zone:type_name -> ric.geo.Zone
	5,  // 18: ric.geo.Watch.WatchGeofence:input_type -> ric.geo.WatchGeofenceRequest
	5,  // 19: ric.geo.Watch.StopWatchGeofence:input_type -> ric.geo.WatchGeofenceRequest
	6,  // 20: ric.geo.Watch.WatchRoom:input_type -> ric.geo.WatchRoomRequest
	6,  // 21: ric.geo.Watch.StopWatchRoom:input_type -> ric.geo.WatchRoomRequest
	8,  // 22: ric.geo.Watch.WatchRoute:input_type -> ric.geo.WatchRouteRequest
	8,  // 23: ric.geo.Watch.StopWatchRoute:input_type -> ric.geo.WatchRouteRequest
	9,  // 24: ric.geo.Watch.UpdateGeo:input_type -> ric.geo.UpdateGeoRequest
	10, // 25: ric.geo.Watch.GetObjectInfo:input_type -> ric.geo.GetObjectInfoRequest
	12, // 26: ric.geo.WatchV2.Watch:input_type -> ric.geo.WatchRequest
	13, // 27: ric.geo.WatchV2.Stop:input_type -> ric.geo.StopRequest
	9,  // 28: ric.geo.WatchV2.UpdateGeo:input_type -> ric.geo.UpdateGeoRequest
	10, // 29: ric.geo.WatchV2.GetObjectInfo:input_type -> ric.geo.GetObjectInfoRequest
	14, // 30: ric.geo.AttendanceControl.Control:input_type -> ric.geo.ControlRequest
	18, // 31: ric.geo.Osm.Geocode:input_type -> ric.geo.GeocodeRequest
	20, // 32: ric.geo.Osm.GeocodeReverse:input_type -> ric.geo.GeocodeReverseRequest
	21, // 33: ric.geo.Osm.GetRoute:input_type -> ric.geo.GetRouteRequest
	26, // 34: ric.geo.Check.CheckIn:input_type -> ric.geo.CheckInRequest
	4,  // 35: ric.geo.Watch.WatchGeofence:output_type -> ric.geo.EmptyResponse
	4,  // 36: ric.geo.Watch.StopWatchGeofence:output_type -> ric.geo.EmptyResponse
	4,  // 37: ric.geo.Watch.WatchRoom:output_type -> ric.geo.EmptyResponse
	4,  // 38: ric.geo.Watch.StopWatchRoom:output_type -> ric.geo.EmptyResponse
	4,  // 39: ric.geo.Watch.WatchRoute:output_type -> ric.geo.EmptyResponse
	4,  // 40: ric.geo.Watch.StopWatchRoute:output_type -> ric.geo.EmptyResponse
	4,  // 41: ric.geo.Watch.UpdateGeo:output_type -> ric.geo.EmptyResponse
	11, // 42: ric.geo.Watch.GetObjectInfo:output_type -> ric.geo.GetObjectInfoResponse
	4,  // 43: ric.geo.WatchV2.Watch:output_type -> ric.geo.EmptyResponse
	4,  // 44: ric.geo.WatchV2.Stop:output_type -> ric.geo.EmptyResponse
	4,  // 45: ric.geo.WatchV2.UpdateGeo:output_type -> ric.geo.EmptyResponse
	11, // 46: ric.geo.WatchV2.GetObjectInfo:output_type -> ric.geo.GetObjectInfoResponse
	4,  // 47: ric.geo.AttendanceControl.Control:output_type -> ric.geo.EmptyResponse
	17, // 48: ric.geo.Osm.Geocode:output_type -> ric.geo.OsmResponse
	17, // 49: ric.geo.Osm.GeocodeReverse:output_type -> ric.geo.OsmResponse
	17, // 50: ric.geo.Osm.GetRoute:output_type -> ric.geo.OsmResponse
	27, // 51: ric.geo.Check.CheckIn:output_type -> ric.geo.CheckInResponse
	35, // [35:52] is the sub-list for method output_type
	18, // [18:35] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ric_geo_ricgeo_proto_init() }
func file_ric_geo_ricgeo_proto_init() {
	if File_ric_geo_ricgeo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_geo_ricgeo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchGeofenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGeoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeocodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeocodeReverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndoorCircle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndoorPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_geo_ricgeo_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectInfoResponse_ObjectGeofenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_geo_ricgeo_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_ric_geo_ricgeo_proto_goTypes,
		DependencyIndexes: file_ric_geo_ricgeo_proto_depIdxs,
		EnumInfos:         file_ric_geo_ricgeo_proto_enumTypes,
		MessageInfos:      file_ric_geo_ricgeo_proto_msgTypes,
	}.Build()
	File_ric_geo_ricgeo_proto = out.File
	file_ric_geo_ricgeo_proto_rawDesc = nil
	file_ric_geo_ricgeo_proto_goTypes = nil
	file_ric_geo_ricgeo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WatchClient is the client API for Watch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
//
// Deprecated: Do not use.
type WatchClient interface {
	// Deprecated: Do not use.
	WatchGeofence(ctx context.Context, in *WatchGeofenceRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	StopWatchGeofence(ctx context.Context, in *WatchGeofenceRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	WatchRoom(ctx context.Context, in *WatchRoomRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	StopWatchRoom(ctx context.Context, in *WatchRoomRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	WatchRoute(ctx context.Context, in *WatchRouteRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	StopWatchRoute(ctx context.Context, in *WatchRouteRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	UpdateGeo(ctx context.Context, in *UpdateGeoRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Deprecated: Do not use.
	GetObjectInfo(ctx context.Context, in *GetObjectInfoRequest, opts ...grpc.CallOption) (*GetObjectInfoResponse, error)
}

type watchClient struct {
	cc grpc.ClientConnInterface
}

// Deprecated: Do not use.
func NewWatchClient(cc grpc.ClientConnInterface) WatchClient {
	return &watchClient{cc}
}

// Deprecated: Do not use.
func (c *watchClient) WatchGeofence(ctx context.Context, in *WatchGeofenceRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/WatchGeofence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) StopWatchGeofence(ctx context.Context, in *WatchGeofenceRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/StopWatchGeofence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) WatchRoom(ctx context.Context, in *WatchRoomRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/WatchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) StopWatchRoom(ctx context.Context, in *WatchRoomRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/StopWatchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) WatchRoute(ctx context.Context, in *WatchRouteRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/WatchRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) StopWatchRoute(ctx context.Context, in *WatchRouteRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/StopWatchRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) UpdateGeo(ctx context.Context, in *UpdateGeoRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/UpdateGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *watchClient) GetObjectInfo(ctx context.Context, in *GetObjectInfoRequest, opts ...grpc.CallOption) (*GetObjectInfoResponse, error) {
	out := new(GetObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Watch/GetObjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServer is the server API for Watch service.
//
// Deprecated: Do not use.
type WatchServer interface {
	// Deprecated: Do not use.
	WatchGeofence(context.Context, *WatchGeofenceRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	StopWatchGeofence(context.Context, *WatchGeofenceRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	WatchRoom(context.Context, *WatchRoomRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	StopWatchRoom(context.Context, *WatchRoomRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	WatchRoute(context.Context, *WatchRouteRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	StopWatchRoute(context.Context, *WatchRouteRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	UpdateGeo(context.Context, *UpdateGeoRequest) (*EmptyResponse, error)
	// Deprecated: Do not use.
	GetObjectInfo(context.Context, *GetObjectInfoRequest) (*GetObjectInfoResponse, error)
}

// UnimplementedWatchServer can be embedded to have forward compatible implementations.
type UnimplementedWatchServer struct {
}

func (*UnimplementedWatchServer) WatchGeofence(context.Context, *WatchGeofenceRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchGeofence not implemented")
}
func (*UnimplementedWatchServer) StopWatchGeofence(context.Context, *WatchGeofenceRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWatchGeofence not implemented")
}
func (*UnimplementedWatchServer) WatchRoom(context.Context, *WatchRoomRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchRoom not implemented")
}
func (*UnimplementedWatchServer) StopWatchRoom(context.Context, *WatchRoomRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWatchRoom not implemented")
}
func (*UnimplementedWatchServer) WatchRoute(context.Context, *WatchRouteRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchRoute not implemented")
}
func (*UnimplementedWatchServer) StopWatchRoute(context.Context, *WatchRouteRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWatchRoute not implemented")
}
func (*UnimplementedWatchServer) UpdateGeo(context.Context, *UpdateGeoRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeo not implemented")
}
func (*UnimplementedWatchServer) GetObjectInfo(context.Context, *GetObjectInfoRequest) (*GetObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInfo not implemented")
}

// Deprecated: Do not use.
func RegisterWatchServer(s *grpc.Server, srv WatchServer) {
	s.RegisterService(&_Watch_serviceDesc, srv)
}

func _Watch_WatchGeofence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchGeofenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).WatchGeofence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/WatchGeofence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).WatchGeofence(ctx, req.(*WatchGeofenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_StopWatchGeofence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchGeofenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).StopWatchGeofence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/StopWatchGeofence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).StopWatchGeofence(ctx, req.(*WatchGeofenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_WatchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).WatchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/WatchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).WatchRoom(ctx, req.(*WatchRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_StopWatchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).StopWatchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/StopWatchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).StopWatchRoom(ctx, req.(*WatchRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_WatchRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).WatchRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/WatchRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).WatchRoute(ctx, req.(*WatchRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_StopWatchRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).StopWatchRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/StopWatchRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).StopWatchRoute(ctx, req.(*WatchRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_UpdateGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).UpdateGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/UpdateGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).UpdateGeo(ctx, req.(*UpdateGeoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watch_GetObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServer).GetObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Watch/GetObjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServer).GetObjectInfo(ctx, req.(*GetObjectInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.Watch",
	HandlerType: (*WatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchGeofence",
			Handler:    _Watch_WatchGeofence_Handler,
		},
		{
			MethodName: "StopWatchGeofence",
			Handler:    _Watch_StopWatchGeofence_Handler,
		},
		{
			MethodName: "WatchRoom",
			Handler:    _Watch_WatchRoom_Handler,
		},
		{
			MethodName: "StopWatchRoom",
			Handler:    _Watch_StopWatchRoom_Handler,
		},
		{
			MethodName: "WatchRoute",
			Handler:    _Watch_WatchRoute_Handler,
		},
		{
			MethodName: "StopWatchRoute",
			Handler:    _Watch_StopWatchRoute_Handler,
		},
		{
			MethodName: "UpdateGeo",
			Handler:    _Watch_UpdateGeo_Handler,
		},
		{
			MethodName: "GetObjectInfo",
			Handler:    _Watch_GetObjectInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}

// WatchV2Client is the client API for WatchV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchV2Client interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateGeo(ctx context.Context, in *UpdateGeoRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetObjectInfo(ctx context.Context, in *GetObjectInfoRequest, opts ...grpc.CallOption) (*GetObjectInfoResponse, error)
}

type watchV2Client struct {
	cc grpc.ClientConnInterface
}

func NewWatchV2Client(cc grpc.ClientConnInterface) WatchV2Client {
	return &watchV2Client{cc}
}

func (c *watchV2Client) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.WatchV2/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchV2Client) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.WatchV2/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchV2Client) UpdateGeo(ctx context.Context, in *UpdateGeoRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.WatchV2/UpdateGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchV2Client) GetObjectInfo(ctx context.Context, in *GetObjectInfoRequest, opts ...grpc.CallOption) (*GetObjectInfoResponse, error) {
	out := new(GetObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.WatchV2/GetObjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchV2Server is the server API for WatchV2 service.
type WatchV2Server interface {
	Watch(context.Context, *WatchRequest) (*EmptyResponse, error)
	Stop(context.Context, *StopRequest) (*EmptyResponse, error)
	UpdateGeo(context.Context, *UpdateGeoRequest) (*EmptyResponse, error)
	GetObjectInfo(context.Context, *GetObjectInfoRequest) (*GetObjectInfoResponse, error)
}

// UnimplementedWatchV2Server can be embedded to have forward compatible implementations.
type UnimplementedWatchV2Server struct {
}

func (*UnimplementedWatchV2Server) Watch(context.Context, *WatchRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedWatchV2Server) Stop(context.Context, *StopRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedWatchV2Server) UpdateGeo(context.Context, *UpdateGeoRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeo not implemented")
}
func (*UnimplementedWatchV2Server) GetObjectInfo(context.Context, *GetObjectInfoRequest) (*GetObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInfo not implemented")
}

func RegisterWatchV2Server(s *grpc.Server, srv WatchV2Server) {
	s.RegisterService(&_WatchV2_serviceDesc, srv)
}

func _WatchV2_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchV2Server).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.WatchV2/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchV2Server).Watch(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchV2_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchV2Server).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.WatchV2/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchV2Server).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchV2_UpdateGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchV2Server).UpdateGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.WatchV2/UpdateGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchV2Server).UpdateGeo(ctx, req.(*UpdateGeoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchV2_GetObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchV2Server).GetObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.WatchV2/GetObjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchV2Server).GetObjectInfo(ctx, req.(*GetObjectInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WatchV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.WatchV2",
	HandlerType: (*WatchV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Watch",
			Handler:    _WatchV2_Watch_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _WatchV2_Stop_Handler,
		},
		{
			MethodName: "UpdateGeo",
			Handler:    _WatchV2_UpdateGeo_Handler,
		},
		{
			MethodName: "GetObjectInfo",
			Handler:    _WatchV2_GetObjectInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}

// AttendanceControlClient is the client API for AttendanceControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttendanceControlClient interface {
	Control(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type attendanceControlClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceControlClient(cc grpc.ClientConnInterface) AttendanceControlClient {
	return &attendanceControlClient{cc}
}

func (c *attendanceControlClient) Control(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.AttendanceControl/Control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceControlServer is the server API for AttendanceControl service.
type AttendanceControlServer interface {
	Control(context.Context, *ControlRequest) (*EmptyResponse, error)
}

// UnimplementedAttendanceControlServer can be embedded to have forward compatible implementations.
type UnimplementedAttendanceControlServer struct {
}

func (*UnimplementedAttendanceControlServer) Control(context.Context, *ControlRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}

func RegisterAttendanceControlServer(s *grpc.Server, srv AttendanceControlServer) {
	s.RegisterService(&_AttendanceControl_serviceDesc, srv)
}

func _AttendanceControl_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceControlServer).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.AttendanceControl/Control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceControlServer).Control(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttendanceControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.AttendanceControl",
	HandlerType: (*AttendanceControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Control",
			Handler:    _AttendanceControl_Control_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}

// OsmClient is the client API for Osm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OsmClient interface {
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*OsmResponse, error)
	GeocodeReverse(ctx context.Context, in *GeocodeReverseRequest, opts ...grpc.CallOption) (*OsmResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*OsmResponse, error)
}

type osmClient struct {
	cc grpc.ClientConnInterface
}

func NewOsmClient(cc grpc.ClientConnInterface) OsmClient {
	return &osmClient{cc}
}

func (c *osmClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*OsmResponse, error) {
	out := new(OsmResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Osm/Geocode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmClient) GeocodeReverse(ctx context.Context, in *GeocodeReverseRequest, opts ...grpc.CallOption) (*OsmResponse, error) {
	out := new(OsmResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Osm/GeocodeReverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *osmClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*OsmResponse, error) {
	out := new(OsmResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Osm/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OsmServer is the server API for Osm service.
type OsmServer interface {
	Geocode(context.Context, *GeocodeRequest) (*OsmResponse, error)
	GeocodeReverse(context.Context, *GeocodeReverseRequest) (*OsmResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*OsmResponse, error)
}

// UnimplementedOsmServer can be embedded to have forward compatible implementations.
type UnimplementedOsmServer struct {
}

func (*UnimplementedOsmServer) Geocode(context.Context, *GeocodeRequest) (*OsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geocode not implemented")
}
func (*UnimplementedOsmServer) GeocodeReverse(context.Context, *GeocodeReverseRequest) (*OsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeocodeReverse not implemented")
}
func (*UnimplementedOsmServer) GetRoute(context.Context, *GetRouteRequest) (*OsmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}

func RegisterOsmServer(s *grpc.Server, srv OsmServer) {
	s.RegisterService(&_Osm_serviceDesc, srv)
}

func _Osm_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Osm/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Osm_GeocodeReverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeReverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmServer).GeocodeReverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Osm/GeocodeReverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmServer).GeocodeReverse(ctx, req.(*GeocodeReverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Osm_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OsmServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Osm/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OsmServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Osm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.Osm",
	HandlerType: (*OsmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _Osm_Geocode_Handler,
		},
		{
			MethodName: "GeocodeReverse",
			Handler:    _Osm_GeocodeReverse_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _Osm_GetRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}

// CheckClient is the client API for Check service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckClient interface {
	CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error)
}

type checkClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckClient(cc grpc.ClientConnInterface) CheckClient {
	return &checkClient{cc}
}

func (c *checkClient) CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error) {
	out := new(CheckInResponse)
	err := c.cc.Invoke(ctx, "/ric.geo.Check/CheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServer is the server API for Check service.
type CheckServer interface {
	CheckIn(context.Context, *CheckInRequest) (*CheckInResponse, error)
}

// UnimplementedCheckServer can be embedded to have forward compatible implementations.
type UnimplementedCheckServer struct {
}

func (*UnimplementedCheckServer) CheckIn(context.Context, *CheckInRequest) (*CheckInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}

func RegisterCheckServer(s *grpc.Server, srv CheckServer) {
	s.RegisterService(&_Check_serviceDesc, srv)
}

func _Check_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.geo.Check/CheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).CheckIn(ctx, req.(*CheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Check_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.geo.Check",
	HandlerType: (*CheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIn",
			Handler:    _Check_CheckIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-geo/ricgeo.proto",
}
