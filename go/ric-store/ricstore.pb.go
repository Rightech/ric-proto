// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.7.0
// source: ric-store/ricstore.proto

package ricstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Mode int32

const (
	Mode_UNKNOWN Mode = 0
	Mode_NOMERGE Mode = 1
	Mode_MERGE   Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOMERGE",
		2: "MERGE",
	}
	Mode_value = map[string]int32{
		"UNKNOWN": 0,
		"NOMERGE": 1,
		"MERGE":   2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_store_ricstore_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_ric_store_ricstore_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{0}
}

type EmptyRespone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRespone) Reset() {
	*x = EmptyRespone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRespone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRespone) ProtoMessage() {}

func (x *EmptyRespone) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRespone.ProtoReflect.Descriptor instead.
func (*EmptyRespone) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{0}
}

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db   string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Col  string `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	Ts   uint64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *Packet) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *Packet) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db     string   `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Col    string   `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	From   uint64   `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	To     uint64   `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *QueryRequest) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *QueryRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *QueryRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type CreateCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db   string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Col  string `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Mode Mode   `protobuf:"varint,4,opt,name=mode,proto3,enum=ric.store.Mode" json:"mode,omitempty"`
}

func (x *CreateCollectionRequest) Reset() {
	*x = CreateCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectionRequest) ProtoMessage() {}

func (x *CreateCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectionRequest.ProtoReflect.Descriptor instead.
func (*CreateCollectionRequest) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCollectionRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *CreateCollectionRequest) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

func (x *CreateCollectionRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateCollectionRequest) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_UNKNOWN
}

type RemoveCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db  string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Col string `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
}

func (x *RemoveCollectionRequest) Reset() {
	*x = RemoveCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollectionRequest) ProtoMessage() {}

func (x *RemoveCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveCollectionRequest) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveCollectionRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *RemoveCollectionRequest) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

type CreateDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *CreateDatabaseRequest) Reset() {
	*x = CreateDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatabaseRequest) ProtoMessage() {}

func (x *CreateDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatabaseRequest.ProtoReflect.Descriptor instead.
func (*CreateDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDatabaseRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

type RemoveDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *RemoveDatabaseRequest) Reset() {
	*x = RemoveDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDatabaseRequest) ProtoMessage() {}

func (x *RemoveDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDatabaseRequest.ProtoReflect.Descriptor instead.
func (*RemoveDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveDatabaseRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db  string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Col string `protobuf:"bytes,2,opt,name=col,proto3" json:"col,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{7}
}

func (x *StatusRequest) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *StatusRequest) GetCol() string {
	if x != nil {
		return x.Col
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinTs   uint64 `protobuf:"varint,1,opt,name=min_ts,json=minTs,proto3" json:"min_ts,omitempty"`
	MaxTs   uint64 `protobuf:"varint,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
	Count   uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Size    uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	MaxSize uint64 `protobuf:"varint,5,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	Mode    Mode   `protobuf:"varint,6,opt,name=mode,proto3,enum=ric.store.Mode" json:"mode,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_store_ricstore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_store_ricstore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_ric_store_ricstore_proto_rawDescGZIP(), []int{8}
}

func (x *StatusResponse) GetMinTs() uint64 {
	if x != nil {
		return x.MinTs
	}
	return 0
}

func (x *StatusResponse) GetMaxTs() uint64 {
	if x != nil {
		return x.MaxTs
	}
	return 0
}

func (x *StatusResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatusResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StatusResponse) GetMaxSize() uint64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *StatusResponse) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_UNKNOWN
}

var File_ric_store_ricstore_proto protoreflect.FileDescriptor

var file_ric_store_ricstore_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x69, 0x63, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x69, 0x63, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x69, 0x63, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6f,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x74, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x64, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x22,
	0x27, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x54, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x2a, 0x2b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x10, 0x02, 0x32, 0xf4, 0x03, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x17, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x28, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x30, 0x01, 0x12,
	0x3d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12,
	0x4f, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65,
	0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x4b, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f,
	0x72, 0x69, 0x63, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3b, 0x72, 0x69, 0x63, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_store_ricstore_proto_rawDescOnce sync.Once
	file_ric_store_ricstore_proto_rawDescData = file_ric_store_ricstore_proto_rawDesc
)

func file_ric_store_ricstore_proto_rawDescGZIP() []byte {
	file_ric_store_ricstore_proto_rawDescOnce.Do(func() {
		file_ric_store_ricstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_store_ricstore_proto_rawDescData)
	})
	return file_ric_store_ricstore_proto_rawDescData
}

var file_ric_store_ricstore_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ric_store_ricstore_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ric_store_ricstore_proto_goTypes = []interface{}{
	(Mode)(0),                       // 0: ric.store.Mode
	(*EmptyRespone)(nil),            // 1: ric.store.EmptyRespone
	(*Packet)(nil),                  // 2: ric.store.Packet
	(*QueryRequest)(nil),            // 3: ric.store.QueryRequest
	(*CreateCollectionRequest)(nil), // 4: ric.store.CreateCollectionRequest
	(*RemoveCollectionRequest)(nil), // 5: ric.store.RemoveCollectionRequest
	(*CreateDatabaseRequest)(nil),   // 6: ric.store.CreateDatabaseRequest
	(*RemoveDatabaseRequest)(nil),   // 7: ric.store.RemoveDatabaseRequest
	(*StatusRequest)(nil),           // 8: ric.store.StatusRequest
	(*StatusResponse)(nil),          // 9: ric.store.StatusResponse
}
var file_ric_store_ricstore_proto_depIdxs = []int32{
	0, // 0: ric.store.CreateCollectionRequest.mode:type_name -> ric.store.Mode
	0, // 1: ric.store.StatusResponse.mode:type_name -> ric.store.Mode
	2, // 2: ric.store.RicStore.Insert:input_type -> ric.store.Packet
	3, // 3: ric.store.RicStore.Query:input_type -> ric.store.QueryRequest
	8, // 4: ric.store.RicStore.Status:input_type -> ric.store.StatusRequest
	4, // 5: ric.store.RicStore.CreateCollection:input_type -> ric.store.CreateCollectionRequest
	5, // 6: ric.store.RicStore.RemoveCollection:input_type -> ric.store.RemoveCollectionRequest
	6, // 7: ric.store.RicStore.CreateDatabase:input_type -> ric.store.CreateDatabaseRequest
	7, // 8: ric.store.RicStore.RemoveDatabase:input_type -> ric.store.RemoveDatabaseRequest
	1, // 9: ric.store.RicStore.Insert:output_type -> ric.store.EmptyRespone
	2, // 10: ric.store.RicStore.Query:output_type -> ric.store.Packet
	9, // 11: ric.store.RicStore.Status:output_type -> ric.store.StatusResponse
	1, // 12: ric.store.RicStore.CreateCollection:output_type -> ric.store.EmptyRespone
	1, // 13: ric.store.RicStore.RemoveCollection:output_type -> ric.store.EmptyRespone
	1, // 14: ric.store.RicStore.CreateDatabase:output_type -> ric.store.EmptyRespone
	1, // 15: ric.store.RicStore.RemoveDatabase:output_type -> ric.store.EmptyRespone
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ric_store_ricstore_proto_init() }
func file_ric_store_ricstore_proto_init() {
	if File_ric_store_ricstore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_store_ricstore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRespone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_store_ricstore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_store_ricstore_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ric_store_ricstore_proto_goTypes,
		DependencyIndexes: file_ric_store_ricstore_proto_depIdxs,
		EnumInfos:         file_ric_store_ricstore_proto_enumTypes,
		MessageInfos:      file_ric_store_ricstore_proto_msgTypes,
	}.Build()
	File_ric_store_ricstore_proto = out.File
	file_ric_store_ricstore_proto_rawDesc = nil
	file_ric_store_ricstore_proto_goTypes = nil
	file_ric_store_ricstore_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RicStoreClient is the client API for RicStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RicStoreClient interface {
	Insert(ctx context.Context, opts ...grpc.CallOption) (RicStore_InsertClient, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (RicStore_QueryClient, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*EmptyRespone, error)
	RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...grpc.CallOption) (*EmptyRespone, error)
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*EmptyRespone, error)
	RemoveDatabase(ctx context.Context, in *RemoveDatabaseRequest, opts ...grpc.CallOption) (*EmptyRespone, error)
}

type ricStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewRicStoreClient(cc grpc.ClientConnInterface) RicStoreClient {
	return &ricStoreClient{cc}
}

func (c *ricStoreClient) Insert(ctx context.Context, opts ...grpc.CallOption) (RicStore_InsertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RicStore_serviceDesc.Streams[0], "/ric.store.RicStore/Insert", opts...)
	if err != nil {
		return nil, err
	}
	x := &ricStoreInsertClient{stream}
	return x, nil
}

type RicStore_InsertClient interface {
	Send(*Packet) error
	CloseAndRecv() (*EmptyRespone, error)
	grpc.ClientStream
}

type ricStoreInsertClient struct {
	grpc.ClientStream
}

func (x *ricStoreInsertClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ricStoreInsertClient) CloseAndRecv() (*EmptyRespone, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyRespone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ricStoreClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (RicStore_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RicStore_serviceDesc.Streams[1], "/ric.store.RicStore/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &ricStoreQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RicStore_QueryClient interface {
	Recv() (*Packet, error)
	grpc.ClientStream
}

type ricStoreQueryClient struct {
	grpc.ClientStream
}

func (x *ricStoreQueryClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ricStoreClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ric.store.RicStore/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricStoreClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*EmptyRespone, error) {
	out := new(EmptyRespone)
	err := c.cc.Invoke(ctx, "/ric.store.RicStore/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricStoreClient) RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...grpc.CallOption) (*EmptyRespone, error) {
	out := new(EmptyRespone)
	err := c.cc.Invoke(ctx, "/ric.store.RicStore/RemoveCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricStoreClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*EmptyRespone, error) {
	out := new(EmptyRespone)
	err := c.cc.Invoke(ctx, "/ric.store.RicStore/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricStoreClient) RemoveDatabase(ctx context.Context, in *RemoveDatabaseRequest, opts ...grpc.CallOption) (*EmptyRespone, error) {
	out := new(EmptyRespone)
	err := c.cc.Invoke(ctx, "/ric.store.RicStore/RemoveDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RicStoreServer is the server API for RicStore service.
type RicStoreServer interface {
	Insert(RicStore_InsertServer) error
	Query(*QueryRequest, RicStore_QueryServer) error
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	CreateCollection(context.Context, *CreateCollectionRequest) (*EmptyRespone, error)
	RemoveCollection(context.Context, *RemoveCollectionRequest) (*EmptyRespone, error)
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*EmptyRespone, error)
	RemoveDatabase(context.Context, *RemoveDatabaseRequest) (*EmptyRespone, error)
}

// UnimplementedRicStoreServer can be embedded to have forward compatible implementations.
type UnimplementedRicStoreServer struct {
}

func (*UnimplementedRicStoreServer) Insert(RicStore_InsertServer) error {
	return status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedRicStoreServer) Query(*QueryRequest, RicStore_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedRicStoreServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedRicStoreServer) CreateCollection(context.Context, *CreateCollectionRequest) (*EmptyRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedRicStoreServer) RemoveCollection(context.Context, *RemoveCollectionRequest) (*EmptyRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollection not implemented")
}
func (*UnimplementedRicStoreServer) CreateDatabase(context.Context, *CreateDatabaseRequest) (*EmptyRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (*UnimplementedRicStoreServer) RemoveDatabase(context.Context, *RemoveDatabaseRequest) (*EmptyRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDatabase not implemented")
}

func RegisterRicStoreServer(s *grpc.Server, srv RicStoreServer) {
	s.RegisterService(&_RicStore_serviceDesc, srv)
}

func _RicStore_Insert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RicStoreServer).Insert(&ricStoreInsertServer{stream})
}

type RicStore_InsertServer interface {
	SendAndClose(*EmptyRespone) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type ricStoreInsertServer struct {
	grpc.ServerStream
}

func (x *ricStoreInsertServer) SendAndClose(m *EmptyRespone) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ricStoreInsertServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RicStore_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RicStoreServer).Query(m, &ricStoreQueryServer{stream})
}

type RicStore_QueryServer interface {
	Send(*Packet) error
	grpc.ServerStream
}

type ricStoreQueryServer struct {
	grpc.ServerStream
}

func (x *ricStoreQueryServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func _RicStore_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicStoreServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.store.RicStore/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicStoreServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicStore_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicStoreServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.store.RicStore/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicStoreServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicStore_RemoveCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicStoreServer).RemoveCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.store.RicStore/RemoveCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicStoreServer).RemoveCollection(ctx, req.(*RemoveCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicStore_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicStoreServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.store.RicStore/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicStoreServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicStore_RemoveDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicStoreServer).RemoveDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.store.RicStore/RemoveDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicStoreServer).RemoveDatabase(ctx, req.(*RemoveDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RicStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.store.RicStore",
	HandlerType: (*RicStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _RicStore_Status_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _RicStore_CreateCollection_Handler,
		},
		{
			MethodName: "RemoveCollection",
			Handler:    _RicStore_RemoveCollection_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _RicStore_CreateDatabase_Handler,
		},
		{
			MethodName: "RemoveDatabase",
			Handler:    _RicStore_RemoveDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Insert",
			Handler:       _RicStore_Insert_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _RicStore_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ric-store/ricstore.proto",
}
