// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.7.0
// source: ric-tasks/rictasks.proto

package rictasks

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Task_Constrain int32

const (
	Task_INVALID   Task_Constrain = 0 // error
	Task_UNORDERED Task_Constrain = 1 // all subtasks should be done (order doesn't matter)
	Task_ORDERED   Task_Constrain = 2 // all subtasks shuld be done step by step
)

// Enum value maps for Task_Constrain.
var (
	Task_Constrain_name = map[int32]string{
		0: "INVALID",
		1: "UNORDERED",
		2: "ORDERED",
	}
	Task_Constrain_value = map[string]int32{
		"INVALID":   0,
		"UNORDERED": 1,
		"ORDERED":   2,
	}
)

func (x Task_Constrain) Enum() *Task_Constrain {
	p := new(Task_Constrain)
	*p = x
	return p
}

func (x Task_Constrain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Constrain) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_tasks_rictasks_proto_enumTypes[0].Descriptor()
}

func (Task_Constrain) Type() protoreflect.EnumType {
	return &file_ric_tasks_rictasks_proto_enumTypes[0]
}

func (x Task_Constrain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Constrain.Descriptor instead.
func (Task_Constrain) EnumDescriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{4, 0}
}

type Task_Status int32

const (
	Task_NOT_SET  Task_Status = 0 // error
	Task_CREATED  Task_Status = 1
	Task_ASSIGNED Task_Status = 2
	Task_IN_WORK  Task_Status = 3
	Task_CLOSED   Task_Status = 4
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0: "NOT_SET",
		1: "CREATED",
		2: "ASSIGNED",
		3: "IN_WORK",
		4: "CLOSED",
	}
	Task_Status_value = map[string]int32{
		"NOT_SET":  0,
		"CREATED":  1,
		"ASSIGNED": 2,
		"IN_WORK":  3,
		"CLOSED":   4,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_tasks_rictasks_proto_enumTypes[1].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_ric_tasks_rictasks_proto_enumTypes[1]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{4, 1}
}

type ReportTemplate_FieldType int32

const (
	ReportTemplate_INVALID ReportTemplate_FieldType = 0
	ReportTemplate_BOOLEAN ReportTemplate_FieldType = 1 //checkbox
	ReportTemplate_TEXT    ReportTemplate_FieldType = 2
	ReportTemplate_NUMBER  ReportTemplate_FieldType = 3
	ReportTemplate_FILE    ReportTemplate_FieldType = 4
)

// Enum value maps for ReportTemplate_FieldType.
var (
	ReportTemplate_FieldType_name = map[int32]string{
		0: "INVALID",
		1: "BOOLEAN",
		2: "TEXT",
		3: "NUMBER",
		4: "FILE",
	}
	ReportTemplate_FieldType_value = map[string]int32{
		"INVALID": 0,
		"BOOLEAN": 1,
		"TEXT":    2,
		"NUMBER":  3,
		"FILE":    4,
	}
)

func (x ReportTemplate_FieldType) Enum() *ReportTemplate_FieldType {
	p := new(ReportTemplate_FieldType)
	*p = x
	return p
}

func (x ReportTemplate_FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportTemplate_FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_tasks_rictasks_proto_enumTypes[2].Descriptor()
}

func (ReportTemplate_FieldType) Type() protoreflect.EnumType {
	return &file_ric_tasks_rictasks_proto_enumTypes[2]
}

func (x ReportTemplate_FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportTemplate_FieldType.Descriptor instead.
func (ReportTemplate_FieldType) EnumDescriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{8, 0}
}

type ObjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ObjectId) Reset() {
	*x = ObjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId) ProtoMessage() {}

func (x *ObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId.ProtoReflect.Descriptor instead.
func (*ObjectId) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *ObjectId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  *ObjectId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpanId  string    `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{1}
}

func (x *UserContext) GetGroupId() *ObjectId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *UserContext) GetUserId() *ObjectId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserContext) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat    float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng    float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	Radius float64 `protobuf:"fixed64,3,opt,name=radius,proto3" json:"radius,omitempty"`
	// @inject_tag: bson:",omitempty"
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// @inject_tag: bson:",omitempty"
	Indoor *IndoorLocation `protobuf:"bytes,5,opt,name=indoor,proto3" json:"indoor,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Location) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Location) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Location) GetIndoor() *IndoorLocation {
	if x != nil {
		return x.Indoor
	}
	return nil
}

type IndoorLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z      float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	Radius float64 `protobuf:"fixed64,4,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *IndoorLocation) Reset() {
	*x = IndoorLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndoorLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndoorLocation) ProtoMessage() {}

func (x *IndoorLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndoorLocation.ProtoReflect.Descriptor instead.
func (*IndoorLocation) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{3}
}

func (x *IndoorLocation) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IndoorLocation) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *IndoorLocation) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *IndoorLocation) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id,omitempty"
	Oid *ObjectId `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// @inject_tag: bson:",omitempty"
	Owner *ObjectId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// @inject_tag: bson:",omitempty"
	Group *ObjectId `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// @inject_tag: bson:",omitempty"
	Parent *ObjectId `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// @inject_tag: bson:"-"
	Subtasks []*Task `protobuf:"bytes,5,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
	// @inject_tag: bson:",omitempty"
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// @inject_tag: bson:",omitempty"
	Constrain Task_Constrain `protobuf:"varint,7,opt,name=constrain,proto3,enum=ric.tasks.Task_Constrain" json:"constrain,omitempty"`
	// @inject_tag: bson:",omitempty"
	Priority int32 `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// @inject_tag: bson:"created_at,omitempty"
	CreatedAt int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // milliseconds
	// @inject_tag: bson:",omitempty"
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: bson:",omitempty"
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// @inject_tag: bson:",omitempty"
	Status Task_Status `protobuf:"varint,12,opt,name=status,proto3,enum=ric.tasks.Task_Status" json:"status,omitempty"`
	// @inject_tag: bson:",omitempty"
	Object *ObjectId `protobuf:"bytes,13,opt,name=object,proto3" json:"object,omitempty"`
	// @inject_tag: bson:",omitempty"
	Kind *ObjectId `protobuf:"bytes,14,opt,name=kind,proto3" json:"kind,omitempty"`
	// overwride task kind report_format
	// @inject_tag: bson:"report_templates,omitempty"
	ReportTemplates []*ReportTemplate `protobuf:"bytes,15,rep,name=report_templates,json=reportTemplates,proto3" json:"report_templates,omitempty"`
	// @inject_tag: bson:",omitempty"
	Reports []*Report `protobuf:"bytes,16,rep,name=reports,proto3" json:"reports,omitempty"`
	// @inject_tag: bson:",omitempty"
	Begin *Location `protobuf:"bytes,17,opt,name=begin,proto3" json:"begin,omitempty"`
	// @inject_tag: bson:",omitempty"
	End *Location `protobuf:"bytes,18,opt,name=end,proto3" json:"end,omitempty"`
	// @inject_tag: bson:",omitempty"
	Deadlines []*Deadline `protobuf:"bytes,19,rep,name=deadlines,proto3" json:"deadlines,omitempty"`
	// @inject_tag: bson:",omitempty"
	Success *wrappers.BoolValue `protobuf:"bytes,20,opt,name=success,proto3" json:"success,omitempty"`
	// @inject_tag: bson:",omitempty"
	Assignee *ObjectId `protobuf:"bytes,21,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// @inject_tag: bson:"assignee_type,omitempty"
	AssigneeType string `protobuf:"bytes,22,opt,name=assignee_type,json=assigneeType,proto3" json:"assignee_type,omitempty"`
	// @inject_tag: bson:",omitempty"
	Review *Review `protobuf:"bytes,23,opt,name=review,proto3" json:"review,omitempty"`
	// @inject_tag: bson:",omitempty"
	Json []byte `protobuf:"bytes,24,opt,name=json,proto3" json:"json,omitempty"` // json blob
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *Task) GetOwner() *ObjectId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Task) GetGroup() *ObjectId {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Task) GetParent() *ObjectId {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Task) GetSubtasks() []*Task {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

func (x *Task) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Task) GetConstrain() Task_Constrain {
	if x != nil {
		return x.Constrain
	}
	return Task_INVALID
}

func (x *Task) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Task) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_NOT_SET
}

func (x *Task) GetObject() *ObjectId {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Task) GetKind() *ObjectId {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Task) GetReportTemplates() []*ReportTemplate {
	if x != nil {
		return x.ReportTemplates
	}
	return nil
}

func (x *Task) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *Task) GetBegin() *Location {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *Task) GetEnd() *Location {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Task) GetDeadlines() []*Deadline {
	if x != nil {
		return x.Deadlines
	}
	return nil
}

func (x *Task) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *Task) GetAssignee() *ObjectId {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *Task) GetAssigneeType() string {
	if x != nil {
		return x.AssigneeType
	}
	return ""
}

func (x *Task) GetReview() *Review {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Task) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

// nil values ignored
// zero value remove field in database
type TaskEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner           *ObjectId             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Group           *ObjectId             `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Parent          *ObjectId             `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Tags            []string              `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Constrain       Task_Constrain        `protobuf:"varint,5,opt,name=constrain,proto3,enum=ric.tasks.Task_Constrain" json:"constrain,omitempty"`
	Priority        *wrappers.Int32Value  `protobuf:"bytes,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Name            *wrappers.StringValue `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description     *wrappers.StringValue `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Object          *ObjectId             `protobuf:"bytes,9,opt,name=object,proto3" json:"object,omitempty"`
	Kind            *ObjectId             `protobuf:"bytes,10,opt,name=kind,proto3" json:"kind,omitempty"`
	ReportTemplates []*ReportTemplate     `protobuf:"bytes,11,rep,name=report_templates,json=reportTemplates,proto3" json:"report_templates,omitempty"`
	Begin           *Location             `protobuf:"bytes,12,opt,name=begin,proto3" json:"begin,omitempty"`
	End             *Location             `protobuf:"bytes,13,opt,name=end,proto3" json:"end,omitempty"`
	Deadlines       []*Deadline           `protobuf:"bytes,14,rep,name=deadlines,proto3" json:"deadlines,omitempty"`
	Assignee        *ObjectId             `protobuf:"bytes,15,opt,name=assignee,proto3" json:"assignee,omitempty"`
	AssigneeType    *wrappers.StringValue `protobuf:"bytes,16,opt,name=assignee_type,json=assigneeType,proto3" json:"assignee_type,omitempty"`
	Review          *Review               `protobuf:"bytes,17,opt,name=review,proto3" json:"review,omitempty"`
	Json            *wrappers.BytesValue  `protobuf:"bytes,18,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *TaskEdit) Reset() {
	*x = TaskEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEdit) ProtoMessage() {}

func (x *TaskEdit) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEdit.ProtoReflect.Descriptor instead.
func (*TaskEdit) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{5}
}

func (x *TaskEdit) GetOwner() *ObjectId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TaskEdit) GetGroup() *ObjectId {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *TaskEdit) GetParent() *ObjectId {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *TaskEdit) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskEdit) GetConstrain() Task_Constrain {
	if x != nil {
		return x.Constrain
	}
	return Task_INVALID
}

func (x *TaskEdit) GetPriority() *wrappers.Int32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *TaskEdit) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TaskEdit) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TaskEdit) GetObject() *ObjectId {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *TaskEdit) GetKind() *ObjectId {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *TaskEdit) GetReportTemplates() []*ReportTemplate {
	if x != nil {
		return x.ReportTemplates
	}
	return nil
}

func (x *TaskEdit) GetBegin() *Location {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *TaskEdit) GetEnd() *Location {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *TaskEdit) GetDeadlines() []*Deadline {
	if x != nil {
		return x.Deadlines
	}
	return nil
}

func (x *TaskEdit) GetAssignee() *ObjectId {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *TaskEdit) GetAssigneeType() *wrappers.StringValue {
	if x != nil {
		return x.AssigneeType
	}
	return nil
}

func (x *TaskEdit) GetReview() *Review {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *TaskEdit) GetJson() *wrappers.BytesValue {
	if x != nil {
		return x.Json
	}
	return nil
}

type Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reviewer *ObjectId `protobuf:"bytes,1,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	Rating   int32     `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"` // rating when task approved
	// @inject_tag: bson:",omitempty"
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Review) Reset() {
	*x = Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Review) ProtoMessage() {}

func (x *Review) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Review.ProtoReflect.Descriptor instead.
func (*Review) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{6}
}

func (x *Review) GetReviewer() *ObjectId {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *Review) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Review) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Deadline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // milliseconds
	// number of milliseconds before deadline when service should send
	// notification
	// @inject_tag: bson:"notify_until,omitempty"
	NotifyUntil *wrappers.Int64Value `protobuf:"bytes,2,opt,name=notify_until,json=notifyUntil,proto3" json:"notify_until,omitempty"`
	Status      Task_Status          `protobuf:"varint,3,opt,name=status,proto3,enum=ric.tasks.Task_Status" json:"status,omitempty"`
}

func (x *Deadline) Reset() {
	*x = Deadline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deadline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deadline) ProtoMessage() {}

func (x *Deadline) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deadline.ProtoReflect.Descriptor instead.
func (*Deadline) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{7}
}

func (x *Deadline) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Deadline) GetNotifyUntil() *wrappers.Int64Value {
	if x != nil {
		return x.NotifyUntil
	}
	return nil
}

func (x *Deadline) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_NOT_SET
}

type ReportTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Field    ReportTemplate_FieldType `protobuf:"varint,2,opt,name=field,proto3,enum=ric.tasks.ReportTemplate_FieldType" json:"field,omitempty"`
	Required bool                     `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"` // flag of require for this field
}

func (x *ReportTemplate) Reset() {
	*x = ReportTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTemplate) ProtoMessage() {}

func (x *ReportTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTemplate.ProtoReflect.Descriptor instead.
func (*ReportTemplate) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{8}
}

func (x *ReportTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportTemplate) GetField() ReportTemplate_FieldType {
	if x != nil {
		return x.Field
	}
	return ReportTemplate_INVALID
}

func (x *ReportTemplate) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *any.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{9}
}

func (x *Report) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Report) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Oid *ObjectId `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// @inject_tag: bson:",omitempty"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: bson:",omitempty"
	Discription string `protobuf:"bytes,3,opt,name=discription,proto3" json:"discription,omitempty"`
	// @inject_tag: bson:",omitempty"
	Svg string `protobuf:"bytes,4,opt,name=svg,proto3" json:"svg,omitempty"` // svg for task this type
	// @inject_tag: bson:",omitempty"
	Roles []*ObjectId `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"` // roles for access
	// @inject_tag: bson:"report_remplates,omitempty"
	ReportTemplates []*ReportTemplate `protobuf:"bytes,6,rep,name=report_templates,json=reportTemplates,proto3" json:"report_templates,omitempty"`
}

func (x *Kind) Reset() {
	*x = Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind) ProtoMessage() {}

func (x *Kind) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind.ProtoReflect.Descriptor instead.
func (*Kind) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{10}
}

func (x *Kind) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *Kind) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Kind) GetDiscription() string {
	if x != nil {
		return x.Discription
	}
	return ""
}

func (x *Kind) GetSvg() string {
	if x != nil {
		return x.Svg
	}
	return ""
}

func (x *Kind) GetRoles() []*ObjectId {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Kind) GetReportTemplates() []*ReportTemplate {
	if x != nil {
		return x.ReportTemplates
	}
	return nil
}

// nil values ignored
// zero value remove field in database
type KindEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *wrappers.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Discription     *wrappers.StringValue `protobuf:"bytes,2,opt,name=discription,proto3" json:"discription,omitempty"`
	Svg             *wrappers.StringValue `protobuf:"bytes,3,opt,name=svg,proto3" json:"svg,omitempty"`
	Roles           []*ObjectId           `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	ReportTemplates []*ReportTemplate     `protobuf:"bytes,5,rep,name=report_templates,json=reportTemplates,proto3" json:"report_templates,omitempty"`
}

func (x *KindEdit) Reset() {
	*x = KindEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindEdit) ProtoMessage() {}

func (x *KindEdit) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindEdit.ProtoReflect.Descriptor instead.
func (*KindEdit) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{11}
}

func (x *KindEdit) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *KindEdit) GetDiscription() *wrappers.StringValue {
	if x != nil {
		return x.Discription
	}
	return nil
}

func (x *KindEdit) GetSvg() *wrappers.StringValue {
	if x != nil {
		return x.Svg
	}
	return nil
}

func (x *KindEdit) GetRoles() []*ObjectId {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *KindEdit) GetReportTemplates() []*ReportTemplate {
	if x != nil {
		return x.ReportTemplates
	}
	return nil
}

type CreateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Task *Task        `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{12}
}

func (x *CreateTaskRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CreateTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CreateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{13}
}

func (x *CreateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{14}
}

func (x *GetTaskRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *GetTaskRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{15}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteTaskRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteTaskRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

type DeleteTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTaskResponse) Reset() {
	*x = DeleteTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskResponse) ProtoMessage() {}

func (x *DeleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{17}
}

type UpdateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid  *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Task *TaskEdit    `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTaskRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateTaskRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *UpdateTaskRequest) GetTask() *TaskEdit {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// new position to task id
	// if new position greater then subtasks length
	// error returned
	Positions map[string]int32 `protobuf:"bytes,3,rep,name=positions,proto3" json:"positions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UpdateTaskOrderRequest) Reset() {
	*x = UpdateTaskOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskOrderRequest) ProtoMessage() {}

func (x *UpdateTaskOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskOrderRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateTaskOrderRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateTaskOrderRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *UpdateTaskOrderRequest) GetPositions() map[string]int32 {
	if x != nil {
		return x.Positions
	}
	return nil
}

type UpdateTaskOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UpdateTaskOrderResponse) Reset() {
	*x = UpdateTaskOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskOrderResponse) ProtoMessage() {}

func (x *UpdateTaskOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskOrderResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateTaskOrderResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ChangeTaskStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid       *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	NewStatus Task_Status  `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=ric.tasks.Task_Status" json:"new_status,omitempty"`
	// current location
	Location *Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// required only if new_status == CLOSED
	Success *wrappers.BoolValue `protobuf:"bytes,5,opt,name=success,proto3" json:"success,omitempty"`
	Comment string              `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	Reports []*Report           `protobuf:"bytes,7,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *ChangeTaskStatusRequest) Reset() {
	*x = ChangeTaskStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTaskStatusRequest) ProtoMessage() {}

func (x *ChangeTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*ChangeTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{22}
}

func (x *ChangeTaskStatusRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ChangeTaskStatusRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *ChangeTaskStatusRequest) GetNewStatus() Task_Status {
	if x != nil {
		return x.NewStatus
	}
	return Task_NOT_SET
}

func (x *ChangeTaskStatusRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ChangeTaskStatusRequest) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *ChangeTaskStatusRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ChangeTaskStatusRequest) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ChangeTaskStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ChangeTaskStatusResponse) Reset() {
	*x = ChangeTaskStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTaskStatusResponse) ProtoMessage() {}

func (x *ChangeTaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTaskStatusResponse.ProtoReflect.Descriptor instead.
func (*ChangeTaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{23}
}

func (x *ChangeTaskStatusResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CreateKindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Kind *Kind        `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *CreateKindRequest) Reset() {
	*x = CreateKindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKindRequest) ProtoMessage() {}

func (x *CreateKindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKindRequest.ProtoReflect.Descriptor instead.
func (*CreateKindRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{24}
}

func (x *CreateKindRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CreateKindRequest) GetKind() *Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type CreateKindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *Kind `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *CreateKindResponse) Reset() {
	*x = CreateKindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKindResponse) ProtoMessage() {}

func (x *CreateKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKindResponse.ProtoReflect.Descriptor instead.
func (*CreateKindResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{25}
}

func (x *CreateKindResponse) GetKind() *Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type GetKindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *GetKindRequest) Reset() {
	*x = GetKindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindRequest) ProtoMessage() {}

func (x *GetKindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindRequest.ProtoReflect.Descriptor instead.
func (*GetKindRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{26}
}

func (x *GetKindRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *GetKindRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

type GetKindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *Kind `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *GetKindResponse) Reset() {
	*x = GetKindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKindResponse) ProtoMessage() {}

func (x *GetKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKindResponse.ProtoReflect.Descriptor instead.
func (*GetKindResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{27}
}

func (x *GetKindResponse) GetKind() *Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type UpdateKindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid  *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Kind *KindEdit    `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *UpdateKindRequest) Reset() {
	*x = UpdateKindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKindRequest) ProtoMessage() {}

func (x *UpdateKindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKindRequest.ProtoReflect.Descriptor instead.
func (*UpdateKindRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateKindRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateKindRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *UpdateKindRequest) GetKind() *KindEdit {
	if x != nil {
		return x.Kind
	}
	return nil
}

type UpdateKindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *Kind `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *UpdateKindResponse) Reset() {
	*x = UpdateKindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKindResponse) ProtoMessage() {}

func (x *UpdateKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKindResponse.ProtoReflect.Descriptor instead.
func (*UpdateKindResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateKindResponse) GetKind() *Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type DeleteKindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Oid *ObjectId    `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *DeleteKindRequest) Reset() {
	*x = DeleteKindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKindRequest) ProtoMessage() {}

func (x *DeleteKindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKindRequest.ProtoReflect.Descriptor instead.
func (*DeleteKindRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteKindRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeleteKindRequest) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

type DeleteKindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKindResponse) Reset() {
	*x = DeleteKindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKindResponse) ProtoMessage() {}

func (x *DeleteKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKindResponse.ProtoReflect.Descriptor instead.
func (*DeleteKindResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{31}
}

var File_ric_tasks_rictasks_proto protoreflect.FileDescriptor

var file_ric_tasks_rictasks_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x69, 0x63, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x72, 0x69, 0x63, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x0e, 0x49, 0x6e, 0x64,
	0x6f, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0xe5, 0x08,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2f, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x04, 0x22, 0xf6, 0x06, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x09, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2f, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x6b,
	0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x08,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x06, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x76, 0x67, 0x12, 0x29, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x9d,
	0x02, 0x0a, 0x08, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x03, 0x73, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x76, 0x67, 0x12, 0x29, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x62,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x39, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x61, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x36, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64, 0x69, 0x74, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x39, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0xf7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xcf, 0x02, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x18, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x62, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x23, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x39, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x61, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x36,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x39, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcf, 0x03,
	0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xa0, 0x02, 0x0a, 0x0b, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x72, 0x69, 0x63, 0x2d, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x3b, 0x72, 0x69, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ric_tasks_rictasks_proto_rawDescOnce sync.Once
	file_ric_tasks_rictasks_proto_rawDescData = file_ric_tasks_rictasks_proto_rawDesc
)

func file_ric_tasks_rictasks_proto_rawDescGZIP() []byte {
	file_ric_tasks_rictasks_proto_rawDescOnce.Do(func() {
		file_ric_tasks_rictasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_tasks_rictasks_proto_rawDescData)
	})
	return file_ric_tasks_rictasks_proto_rawDescData
}

var file_ric_tasks_rictasks_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ric_tasks_rictasks_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_ric_tasks_rictasks_proto_goTypes = []interface{}{
	(Task_Constrain)(0),              // 0: ric.tasks.Task.Constrain
	(Task_Status)(0),                 // 1: ric.tasks.Task.Status
	(ReportTemplate_FieldType)(0),    // 2: ric.tasks.ReportTemplate.FieldType
	(*ObjectId)(nil),                 // 3: ric.tasks.ObjectId
	(*UserContext)(nil),              // 4: ric.tasks.UserContext
	(*Location)(nil),                 // 5: ric.tasks.Location
	(*IndoorLocation)(nil),           // 6: ric.tasks.IndoorLocation
	(*Task)(nil),                     // 7: ric.tasks.Task
	(*TaskEdit)(nil),                 // 8: ric.tasks.TaskEdit
	(*Review)(nil),                   // 9: ric.tasks.Review
	(*Deadline)(nil),                 // 10: ric.tasks.Deadline
	(*ReportTemplate)(nil),           // 11: ric.tasks.ReportTemplate
	(*Report)(nil),                   // 12: ric.tasks.Report
	(*Kind)(nil),                     // 13: ric.tasks.Kind
	(*KindEdit)(nil),                 // 14: ric.tasks.KindEdit
	(*CreateTaskRequest)(nil),        // 15: ric.tasks.CreateTaskRequest
	(*CreateTaskResponse)(nil),       // 16: ric.tasks.CreateTaskResponse
	(*GetTaskRequest)(nil),           // 17: ric.tasks.GetTaskRequest
	(*GetTaskResponse)(nil),          // 18: ric.tasks.GetTaskResponse
	(*DeleteTaskRequest)(nil),        // 19: ric.tasks.DeleteTaskRequest
	(*DeleteTaskResponse)(nil),       // 20: ric.tasks.DeleteTaskResponse
	(*UpdateTaskRequest)(nil),        // 21: ric.tasks.UpdateTaskRequest
	(*UpdateTaskResponse)(nil),       // 22: ric.tasks.UpdateTaskResponse
	(*UpdateTaskOrderRequest)(nil),   // 23: ric.tasks.UpdateTaskOrderRequest
	(*UpdateTaskOrderResponse)(nil),  // 24: ric.tasks.UpdateTaskOrderResponse
	(*ChangeTaskStatusRequest)(nil),  // 25: ric.tasks.ChangeTaskStatusRequest
	(*ChangeTaskStatusResponse)(nil), // 26: ric.tasks.ChangeTaskStatusResponse
	(*CreateKindRequest)(nil),        // 27: ric.tasks.CreateKindRequest
	(*CreateKindResponse)(nil),       // 28: ric.tasks.CreateKindResponse
	(*GetKindRequest)(nil),           // 29: ric.tasks.GetKindRequest
	(*GetKindResponse)(nil),          // 30: ric.tasks.GetKindResponse
	(*UpdateKindRequest)(nil),        // 31: ric.tasks.UpdateKindRequest
	(*UpdateKindResponse)(nil),       // 32: ric.tasks.UpdateKindResponse
	(*DeleteKindRequest)(nil),        // 33: ric.tasks.DeleteKindRequest
	(*DeleteKindResponse)(nil),       // 34: ric.tasks.DeleteKindResponse
	nil,                              // 35: ric.tasks.UpdateTaskOrderRequest.PositionsEntry
	(*wrappers.BoolValue)(nil),       // 36: google.protobuf.BoolValue
	(*wrappers.Int32Value)(nil),      // 37: google.protobuf.Int32Value
	(*wrappers.StringValue)(nil),     // 38: google.protobuf.StringValue
	(*wrappers.BytesValue)(nil),      // 39: google.protobuf.BytesValue
	(*wrappers.Int64Value)(nil),      // 40: google.protobuf.Int64Value
	(*any.Any)(nil),                  // 41: google.protobuf.Any
}
var file_ric_tasks_rictasks_proto_depIdxs = []int32{
	3,  // 0: ric.tasks.UserContext.group_id:type_name -> ric.tasks.ObjectId
	3,  // 1: ric.tasks.UserContext.user_id:type_name -> ric.tasks.ObjectId
	6,  // 2: ric.tasks.Location.indoor:type_name -> ric.tasks.IndoorLocation
	3,  // 3: ric.tasks.Task.oid:type_name -> ric.tasks.ObjectId
	3,  // 4: ric.tasks.Task.owner:type_name -> ric.tasks.ObjectId
	3,  // 5: ric.tasks.Task.group:type_name -> ric.tasks.ObjectId
	3,  // 6: ric.tasks.Task.parent:type_name -> ric.tasks.ObjectId
	7,  // 7: ric.tasks.Task.subtasks:type_name -> ric.tasks.Task
	0,  // 8: ric.tasks.Task.constrain:type_name -> ric.tasks.Task.Constrain
	1,  // 9: ric.tasks.Task.status:type_name -> ric.tasks.Task.Status
	3,  // 10: ric.tasks.Task.object:type_name -> ric.tasks.ObjectId
	3,  // 11: ric.tasks.Task.kind:type_name -> ric.tasks.ObjectId
	11, // 12: ric.tasks.Task.report_templates:type_name -> ric.tasks.ReportTemplate
	12, // 13: ric.tasks.Task.reports:type_name -> ric.tasks.Report
	5,  // 14: ric.tasks.Task.begin:type_name -> ric.tasks.Location
	5,  // 15: ric.tasks.Task.end:type_name -> ric.tasks.Location
	10, // 16: ric.tasks.Task.deadlines:type_name -> ric.tasks.Deadline
	36, // 17: ric.tasks.Task.success:type_name -> google.protobuf.BoolValue
	3,  // 18: ric.tasks.Task.assignee:type_name -> ric.tasks.ObjectId
	9,  // 19: ric.tasks.Task.review:type_name -> ric.tasks.Review
	3,  // 20: ric.tasks.TaskEdit.owner:type_name -> ric.tasks.ObjectId
	3,  // 21: ric.tasks.TaskEdit.group:type_name -> ric.tasks.ObjectId
	3,  // 22: ric.tasks.TaskEdit.parent:type_name -> ric.tasks.ObjectId
	0,  // 23: ric.tasks.TaskEdit.constrain:type_name -> ric.tasks.Task.Constrain
	37, // 24: ric.tasks.TaskEdit.priority:type_name -> google.protobuf.Int32Value
	38, // 25: ric.tasks.TaskEdit.name:type_name -> google.protobuf.StringValue
	38, // 26: ric.tasks.TaskEdit.description:type_name -> google.protobuf.StringValue
	3,  // 27: ric.tasks.TaskEdit.object:type_name -> ric.tasks.ObjectId
	3,  // 28: ric.tasks.TaskEdit.kind:type_name -> ric.tasks.ObjectId
	11, // 29: ric.tasks.TaskEdit.report_templates:type_name -> ric.tasks.ReportTemplate
	5,  // 30: ric.tasks.TaskEdit.begin:type_name -> ric.tasks.Location
	5,  // 31: ric.tasks.TaskEdit.end:type_name -> ric.tasks.Location
	10, // 32: ric.tasks.TaskEdit.deadlines:type_name -> ric.tasks.Deadline
	3,  // 33: ric.tasks.TaskEdit.assignee:type_name -> ric.tasks.ObjectId
	38, // 34: ric.tasks.TaskEdit.assignee_type:type_name -> google.protobuf.StringValue
	9,  // 35: ric.tasks.TaskEdit.review:type_name -> ric.tasks.Review
	39, // 36: ric.tasks.TaskEdit.json:type_name -> google.protobuf.BytesValue
	3,  // 37: ric.tasks.Review.reviewer:type_name -> ric.tasks.ObjectId
	40, // 38: ric.tasks.Deadline.notify_until:type_name -> google.protobuf.Int64Value
	1,  // 39: ric.tasks.Deadline.status:type_name -> ric.tasks.Task.Status
	2,  // 40: ric.tasks.ReportTemplate.field:type_name -> ric.tasks.ReportTemplate.FieldType
	41, // 41: ric.tasks.Report.value:type_name -> google.protobuf.Any
	3,  // 42: ric.tasks.Kind.oid:type_name -> ric.tasks.ObjectId
	3,  // 43: ric.tasks.Kind.roles:type_name -> ric.tasks.ObjectId
	11, // 44: ric.tasks.Kind.report_templates:type_name -> ric.tasks.ReportTemplate
	38, // 45: ric.tasks.KindEdit.name:type_name -> google.protobuf.StringValue
	38, // 46: ric.tasks.KindEdit.discription:type_name -> google.protobuf.StringValue
	38, // 47: ric.tasks.KindEdit.svg:type_name -> google.protobuf.StringValue
	3,  // 48: ric.tasks.KindEdit.roles:type_name -> ric.tasks.ObjectId
	11, // 49: ric.tasks.KindEdit.report_templates:type_name -> ric.tasks.ReportTemplate
	4,  // 50: ric.tasks.CreateTaskRequest.ctx:type_name -> ric.tasks.UserContext
	7,  // 51: ric.tasks.CreateTaskRequest.task:type_name -> ric.tasks.Task
	7,  // 52: ric.tasks.CreateTaskResponse.task:type_name -> ric.tasks.Task
	4,  // 53: ric.tasks.GetTaskRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 54: ric.tasks.GetTaskRequest.oid:type_name -> ric.tasks.ObjectId
	7,  // 55: ric.tasks.GetTaskResponse.task:type_name -> ric.tasks.Task
	4,  // 56: ric.tasks.DeleteTaskRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 57: ric.tasks.DeleteTaskRequest.oid:type_name -> ric.tasks.ObjectId
	4,  // 58: ric.tasks.UpdateTaskRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 59: ric.tasks.UpdateTaskRequest.oid:type_name -> ric.tasks.ObjectId
	8,  // 60: ric.tasks.UpdateTaskRequest.task:type_name -> ric.tasks.TaskEdit
	7,  // 61: ric.tasks.UpdateTaskResponse.task:type_name -> ric.tasks.Task
	4,  // 62: ric.tasks.UpdateTaskOrderRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 63: ric.tasks.UpdateTaskOrderRequest.oid:type_name -> ric.tasks.ObjectId
	35, // 64: ric.tasks.UpdateTaskOrderRequest.positions:type_name -> ric.tasks.UpdateTaskOrderRequest.PositionsEntry
	7,  // 65: ric.tasks.UpdateTaskOrderResponse.task:type_name -> ric.tasks.Task
	4,  // 66: ric.tasks.ChangeTaskStatusRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 67: ric.tasks.ChangeTaskStatusRequest.oid:type_name -> ric.tasks.ObjectId
	1,  // 68: ric.tasks.ChangeTaskStatusRequest.new_status:type_name -> ric.tasks.Task.Status
	5,  // 69: ric.tasks.ChangeTaskStatusRequest.location:type_name -> ric.tasks.Location
	36, // 70: ric.tasks.ChangeTaskStatusRequest.success:type_name -> google.protobuf.BoolValue
	12, // 71: ric.tasks.ChangeTaskStatusRequest.reports:type_name -> ric.tasks.Report
	7,  // 72: ric.tasks.ChangeTaskStatusResponse.task:type_name -> ric.tasks.Task
	4,  // 73: ric.tasks.CreateKindRequest.ctx:type_name -> ric.tasks.UserContext
	13, // 74: ric.tasks.CreateKindRequest.kind:type_name -> ric.tasks.Kind
	13, // 75: ric.tasks.CreateKindResponse.kind:type_name -> ric.tasks.Kind
	4,  // 76: ric.tasks.GetKindRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 77: ric.tasks.GetKindRequest.oid:type_name -> ric.tasks.ObjectId
	13, // 78: ric.tasks.GetKindResponse.kind:type_name -> ric.tasks.Kind
	4,  // 79: ric.tasks.UpdateKindRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 80: ric.tasks.UpdateKindRequest.oid:type_name -> ric.tasks.ObjectId
	14, // 81: ric.tasks.UpdateKindRequest.kind:type_name -> ric.tasks.KindEdit
	13, // 82: ric.tasks.UpdateKindResponse.kind:type_name -> ric.tasks.Kind
	4,  // 83: ric.tasks.DeleteKindRequest.ctx:type_name -> ric.tasks.UserContext
	3,  // 84: ric.tasks.DeleteKindRequest.oid:type_name -> ric.tasks.ObjectId
	15, // 85: ric.tasks.TaskService.Create:input_type -> ric.tasks.CreateTaskRequest
	17, // 86: ric.tasks.TaskService.Get:input_type -> ric.tasks.GetTaskRequest
	21, // 87: ric.tasks.TaskService.Update:input_type -> ric.tasks.UpdateTaskRequest
	19, // 88: ric.tasks.TaskService.Delete:input_type -> ric.tasks.DeleteTaskRequest
	23, // 89: ric.tasks.TaskService.UpdateOrder:input_type -> ric.tasks.UpdateTaskOrderRequest
	25, // 90: ric.tasks.TaskService.ChangeStatus:input_type -> ric.tasks.ChangeTaskStatusRequest
	27, // 91: ric.tasks.KindService.Create:input_type -> ric.tasks.CreateKindRequest
	29, // 92: ric.tasks.KindService.Get:input_type -> ric.tasks.GetKindRequest
	31, // 93: ric.tasks.KindService.Update:input_type -> ric.tasks.UpdateKindRequest
	33, // 94: ric.tasks.KindService.Delete:input_type -> ric.tasks.DeleteKindRequest
	16, // 95: ric.tasks.TaskService.Create:output_type -> ric.tasks.CreateTaskResponse
	18, // 96: ric.tasks.TaskService.Get:output_type -> ric.tasks.GetTaskResponse
	22, // 97: ric.tasks.TaskService.Update:output_type -> ric.tasks.UpdateTaskResponse
	20, // 98: ric.tasks.TaskService.Delete:output_type -> ric.tasks.DeleteTaskResponse
	24, // 99: ric.tasks.TaskService.UpdateOrder:output_type -> ric.tasks.UpdateTaskOrderResponse
	26, // 100: ric.tasks.TaskService.ChangeStatus:output_type -> ric.tasks.ChangeTaskStatusResponse
	28, // 101: ric.tasks.KindService.Create:output_type -> ric.tasks.CreateKindResponse
	30, // 102: ric.tasks.KindService.Get:output_type -> ric.tasks.GetKindResponse
	32, // 103: ric.tasks.KindService.Update:output_type -> ric.tasks.UpdateKindResponse
	34, // 104: ric.tasks.KindService.Delete:output_type -> ric.tasks.DeleteKindResponse
	95, // [95:105] is the sub-list for method output_type
	85, // [85:95] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_ric_tasks_rictasks_proto_init() }
func file_ric_tasks_rictasks_proto_init() {
	if File_ric_tasks_rictasks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_tasks_rictasks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndoorLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deadline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTaskStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTaskStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_tasks_rictasks_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ric_tasks_rictasks_proto_goTypes,
		DependencyIndexes: file_ric_tasks_rictasks_proto_depIdxs,
		EnumInfos:         file_ric_tasks_rictasks_proto_enumTypes,
		MessageInfos:      file_ric_tasks_rictasks_proto_msgTypes,
	}.Build()
	File_ric_tasks_rictasks_proto = out.File
	file_ric_tasks_rictasks_proto_rawDesc = nil
	file_ric_tasks_rictasks_proto_goTypes = nil
	file_ric_tasks_rictasks_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// create task. if parent field exists than add it to the end of
	// parent subtasks
	Create(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// get task by it id
	Get(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// update task
	// this method can't update (return error):
	// 1. tasks status (use ChangeStatus)
	// 2. tasks deadlines if status not equal to CREATED or ASSIGNED
	// 3. add/remove subtasks or update subtasks order (use UpdateOrder)
	// 4. begin and end location if status not equal to CREATED or ASSIGNED
	//
	// new subtasks can be added but they always append to end of subtasks list
	// use UpdateOrder after this if you need add subtask to specific position
	Update(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	// delete task
	Delete(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	// update subtasks order
	// order can be updated only if following true:
	// 1. all subtasks has status CREATED or ASSIGNED
	// 2. all subtasks has no deadlines
	//    (if subtask have deadline you can unset it via Update method)
	UpdateOrder(ctx context.Context, in *UpdateTaskOrderRequest, opts ...grpc.CallOption) (*UpdateTaskOrderResponse, error)
	// change subtask status
	// if parent field exists than check parent constrain before change status
	// so if constraint ordered you can't take in work this task if previous task
	// not closed
	//
	// the following status change is allowed:
	// CREATED -> ASSIGNED
	// ASSIGNED -> IN_WORK
	// IN_WORK -> CLOSED (with success flag)
	// CLOSED -> CREATED
	// ASSIGNED -> CREATED
	// ASSIGNED -> CLOSED (method always set success flag to false)
	// CREATED -> CLOSED (method always set success flag to false)
	//
	// if task has begin location -> change status to IN_WORK can be done only
	// in this location
	//
	// if task has end location -> change status to CLOSED can be done only
	// in this location
	ChangeStatus(ctx context.Context, in *ChangeTaskStatusRequest, opts ...grpc.CallOption) (*ChangeTaskStatusResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Create(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.TaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Get(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.TaskService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Update(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.TaskService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Delete(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.TaskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateOrder(ctx context.Context, in *UpdateTaskOrderRequest, opts ...grpc.CallOption) (*UpdateTaskOrderResponse, error) {
	out := new(UpdateTaskOrderResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.TaskService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ChangeStatus(ctx context.Context, in *ChangeTaskStatusRequest, opts ...grpc.CallOption) (*ChangeTaskStatusResponse, error) {
	out := new(ChangeTaskStatusResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.TaskService/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// create task. if parent field exists than add it to the end of
	// parent subtasks
	Create(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// get task by it id
	Get(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// update task
	// this method can't update (return error):
	// 1. tasks status (use ChangeStatus)
	// 2. tasks deadlines if status not equal to CREATED or ASSIGNED
	// 3. add/remove subtasks or update subtasks order (use UpdateOrder)
	// 4. begin and end location if status not equal to CREATED or ASSIGNED
	//
	// new subtasks can be added but they always append to end of subtasks list
	// use UpdateOrder after this if you need add subtask to specific position
	Update(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	// delete task
	Delete(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	// update subtasks order
	// order can be updated only if following true:
	// 1. all subtasks has status CREATED or ASSIGNED
	// 2. all subtasks has no deadlines
	//    (if subtask have deadline you can unset it via Update method)
	UpdateOrder(context.Context, *UpdateTaskOrderRequest) (*UpdateTaskOrderResponse, error)
	// change subtask status
	// if parent field exists than check parent constrain before change status
	// so if constraint ordered you can't take in work this task if previous task
	// not closed
	//
	// the following status change is allowed:
	// CREATED -> ASSIGNED
	// ASSIGNED -> IN_WORK
	// IN_WORK -> CLOSED (with success flag)
	// CLOSED -> CREATED
	// ASSIGNED -> CREATED
	// ASSIGNED -> CLOSED (method always set success flag to false)
	// CREATED -> CLOSED (method always set success flag to false)
	//
	// if task has begin location -> change status to IN_WORK can be done only
	// in this location
	//
	// if task has end location -> change status to CLOSED can be done only
	// in this location
	ChangeStatus(context.Context, *ChangeTaskStatusRequest) (*ChangeTaskStatusResponse, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) Create(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTaskServiceServer) Get(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTaskServiceServer) Update(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTaskServiceServer) Delete(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTaskServiceServer) UpdateOrder(context.Context, *UpdateTaskOrderRequest) (*UpdateTaskOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedTaskServiceServer) ChangeStatus(context.Context, *ChangeTaskStatusRequest) (*ChangeTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.TaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Create(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.TaskService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Get(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.TaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Update(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.TaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Delete(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.TaskService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateOrder(ctx, req.(*UpdateTaskOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.TaskService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ChangeStatus(ctx, req.(*ChangeTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.tasks.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TaskService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TaskService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskService_Delete_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _TaskService_UpdateOrder_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _TaskService_ChangeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-tasks/rictasks.proto",
}

// KindServiceClient is the client API for KindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KindServiceClient interface {
	Create(ctx context.Context, in *CreateKindRequest, opts ...grpc.CallOption) (*CreateKindResponse, error)
	Get(ctx context.Context, in *GetKindRequest, opts ...grpc.CallOption) (*GetKindResponse, error)
	Update(ctx context.Context, in *UpdateKindRequest, opts ...grpc.CallOption) (*UpdateKindResponse, error)
	Delete(ctx context.Context, in *DeleteKindRequest, opts ...grpc.CallOption) (*DeleteKindResponse, error)
}

type kindServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKindServiceClient(cc grpc.ClientConnInterface) KindServiceClient {
	return &kindServiceClient{cc}
}

func (c *kindServiceClient) Create(ctx context.Context, in *CreateKindRequest, opts ...grpc.CallOption) (*CreateKindResponse, error) {
	out := new(CreateKindResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.KindService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) Get(ctx context.Context, in *GetKindRequest, opts ...grpc.CallOption) (*GetKindResponse, error) {
	out := new(GetKindResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.KindService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) Update(ctx context.Context, in *UpdateKindRequest, opts ...grpc.CallOption) (*UpdateKindResponse, error) {
	out := new(UpdateKindResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.KindService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) Delete(ctx context.Context, in *DeleteKindRequest, opts ...grpc.CallOption) (*DeleteKindResponse, error) {
	out := new(DeleteKindResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.KindService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KindServiceServer is the server API for KindService service.
type KindServiceServer interface {
	Create(context.Context, *CreateKindRequest) (*CreateKindResponse, error)
	Get(context.Context, *GetKindRequest) (*GetKindResponse, error)
	Update(context.Context, *UpdateKindRequest) (*UpdateKindResponse, error)
	Delete(context.Context, *DeleteKindRequest) (*DeleteKindResponse, error)
}

// UnimplementedKindServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKindServiceServer struct {
}

func (*UnimplementedKindServiceServer) Create(context.Context, *CreateKindRequest) (*CreateKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedKindServiceServer) Get(context.Context, *GetKindRequest) (*GetKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedKindServiceServer) Update(context.Context, *UpdateKindRequest) (*UpdateKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedKindServiceServer) Delete(context.Context, *DeleteKindRequest) (*DeleteKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterKindServiceServer(s *grpc.Server, srv KindServiceServer) {
	s.RegisterService(&_KindService_serviceDesc, srv)
}

func _KindService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.KindService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).Create(ctx, req.(*CreateKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.KindService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).Get(ctx, req.(*GetKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.KindService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).Update(ctx, req.(*UpdateKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.KindService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).Delete(ctx, req.(*DeleteKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KindService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.tasks.KindService",
	HandlerType: (*KindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _KindService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KindService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KindService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KindService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-tasks/rictasks.proto",
}
