// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.7.0
// source: ric-tasks/rictasks.proto

package rictasks

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Task_Status int32

const (
	Task_INVALID  Task_Status = 0 // error
	Task_CREATED  Task_Status = 1
	Task_ASSIGNED Task_Status = 2
	Task_IN_WORK  Task_Status = 3
	Task_CLOSED   Task_Status = 4
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0: "INVALID",
		1: "CREATED",
		2: "ASSIGNED",
		3: "IN_WORK",
		4: "CLOSED",
	}
	Task_Status_value = map[string]int32{
		"INVALID":  0,
		"CREATED":  1,
		"ASSIGNED": 2,
		"IN_WORK":  3,
		"CLOSED":   4,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_tasks_rictasks_proto_enumTypes[0].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_ric_tasks_rictasks_proto_enumTypes[0]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{5, 0}
}

type MasterTask_Constrain int32

const (
	MasterTask_INVALID   MasterTask_Constrain = 0 // error
	MasterTask_UNORDERED MasterTask_Constrain = 1 // all subtasks should be done (order doesn't matter)
	MasterTask_ORDERED   MasterTask_Constrain = 2 // all subtasks shuld be done step by step
)

// Enum value maps for MasterTask_Constrain.
var (
	MasterTask_Constrain_name = map[int32]string{
		0: "INVALID",
		1: "UNORDERED",
		2: "ORDERED",
	}
	MasterTask_Constrain_value = map[string]int32{
		"INVALID":   0,
		"UNORDERED": 1,
		"ORDERED":   2,
	}
)

func (x MasterTask_Constrain) Enum() *MasterTask_Constrain {
	p := new(MasterTask_Constrain)
	*p = x
	return p
}

func (x MasterTask_Constrain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterTask_Constrain) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_tasks_rictasks_proto_enumTypes[1].Descriptor()
}

func (MasterTask_Constrain) Type() protoreflect.EnumType {
	return &file_ric_tasks_rictasks_proto_enumTypes[1]
}

func (x MasterTask_Constrain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasterTask_Constrain.Descriptor instead.
func (MasterTask_Constrain) EnumDescriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{7, 0}
}

type MasterTask_Priority int32

const (
	MasterTask_UNDEFINED MasterTask_Priority = 0
	MasterTask_LOW       MasterTask_Priority = 1
	MasterTask_NORMAL    MasterTask_Priority = 2
	MasterTask_HIGH      MasterTask_Priority = 3
)

// Enum value maps for MasterTask_Priority.
var (
	MasterTask_Priority_name = map[int32]string{
		0: "UNDEFINED",
		1: "LOW",
		2: "NORMAL",
		3: "HIGH",
	}
	MasterTask_Priority_value = map[string]int32{
		"UNDEFINED": 0,
		"LOW":       1,
		"NORMAL":    2,
		"HIGH":      3,
	}
)

func (x MasterTask_Priority) Enum() *MasterTask_Priority {
	p := new(MasterTask_Priority)
	*p = x
	return p
}

func (x MasterTask_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterTask_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_tasks_rictasks_proto_enumTypes[2].Descriptor()
}

func (MasterTask_Priority) Type() protoreflect.EnumType {
	return &file_ric_tasks_rictasks_proto_enumTypes[2]
}

func (x MasterTask_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasterTask_Priority.Descriptor instead.
func (MasterTask_Priority) EnumDescriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{7, 1}
}

type UserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpanId  string `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{0}
}

func (x *UserContext) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserContext) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserContext) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

type ObjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ObjectId) Reset() {
	*x = ObjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId) ProtoMessage() {}

func (x *ObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId.ProtoReflect.Descriptor instead.
func (*ObjectId) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TaskId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskId) Reset() {
	*x = TaskId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskId) ProtoMessage() {}

func (x *TaskId) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskId.ProtoReflect.Descriptor instead.
func (*TaskId) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{2}
}

func (x *TaskId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat    float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng    float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	Radius float64 `protobuf:"fixed64,3,opt,name=radius,proto3" json:"radius,omitempty"`
	// @inject_tag: bson:",omitempty"
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Indoor *IndoorLocation `protobuf:"bytes,5,opt,name=indoor,proto3" json:"indoor,omitempty" bson:",omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Location) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Location) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Location) GetIndoor() *IndoorLocation {
	if x != nil {
		return x.Indoor
	}
	return nil
}

type IndoorLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z      float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	Radius float64 `protobuf:"fixed64,4,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *IndoorLocation) Reset() {
	*x = IndoorLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndoorLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndoorLocation) ProtoMessage() {}

func (x *IndoorLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndoorLocation.ProtoReflect.Descriptor instead.
func (*IndoorLocation) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{4}
}

func (x *IndoorLocation) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IndoorLocation) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *IndoorLocation) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *IndoorLocation) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *TaskId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: bson:",omitempty"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Description string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:",omitempty"`
	Status      Task_Status `protobuf:"varint,5,opt,name=status,proto3,enum=ric.tasks.Task_Status" json:"status,omitempty"`
	// @inject_tag: bson:",omitempty"
	Object *ObjectId `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Begin *Location `protobuf:"bytes,7,opt,name=begin,proto3" json:"begin,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	End *Location `protobuf:"bytes,8,opt,name=end,proto3" json:"end,omitempty" bson:",omitempty"`
	// @inject_tag: bson:"created_at"
	CreatedAt int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at"` // milliseconds
	// @inject_tag: bson:",omitempty"
	Deadlines []*Deadline `protobuf:"bytes,10,rep,name=deadlines,proto3" json:"deadlines,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Owner *ObjectId `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Success *wrappers.BoolValue `protobuf:"bytes,12,opt,name=success,proto3" json:"success,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Comment string `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Files []string `protobuf:"bytes,14,rep,name=files,proto3" json:"files,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Assignee *ObjectId `protobuf:"bytes,15,opt,name=assignee,proto3" json:"assignee,omitempty" bson:",omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{5}
}

func (x *Task) GetId() *TaskId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_INVALID
}

func (x *Task) GetObject() *ObjectId {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Task) GetBegin() *Location {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *Task) GetEnd() *Location {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Task) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Task) GetDeadlines() []*Deadline {
	if x != nil {
		return x.Deadlines
	}
	return nil
}

func (x *Task) GetOwner() *ObjectId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Task) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *Task) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Task) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Task) GetAssignee() *ObjectId {
	if x != nil {
		return x.Assignee
	}
	return nil
}

type Deadline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // milliseconds
	// number of milliseconds before deadline when service should send
	// notification
	// @inject_tag: bson:"notify_until,omitempty"
	NotifyUntil *wrappers.Int64Value `protobuf:"bytes,2,opt,name=notify_until,json=notifyUntil,proto3" json:"notify_until,omitempty" bson:"notify_until,omitempty"`
	Status      Task_Status          `protobuf:"varint,3,opt,name=status,proto3,enum=ric.tasks.Task_Status" json:"status,omitempty"`
}

func (x *Deadline) Reset() {
	*x = Deadline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deadline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deadline) ProtoMessage() {}

func (x *Deadline) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deadline.ProtoReflect.Descriptor instead.
func (*Deadline) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{6}
}

func (x *Deadline) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Deadline) GetNotifyUntil() *wrappers.Int64Value {
	if x != nil {
		return x.NotifyUntil
	}
	return nil
}

func (x *Deadline) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_INVALID
}

type MasterTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Oid *ObjectId `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty" bson:"_id"`
	// @inject_tag: bson:",omitempty"
	Owner *ObjectId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" bson:",omitempty"`
	// @inject_tag: bson:",omitempty"
	Group     *ObjectId            `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty" bson:",omitempty"`
	Subtasks  []*Task              `protobuf:"bytes,4,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
	Constrain MasterTask_Constrain `protobuf:"varint,5,opt,name=constrain,proto3,enum=ric.tasks.MasterTask_Constrain" json:"constrain,omitempty"`
	// @inject_tag: bson:",omitempty"
	Tags     []string            `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" bson:",omitempty"`
	Priority MasterTask_Priority `protobuf:"varint,7,opt,name=priority,proto3,enum=ric.tasks.MasterTask_Priority" json:"priority,omitempty"`
	Time     int64               `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"` // milliseconds
	// @inject_tag: bson:",omitempty"
	Object *ObjectId `protobuf:"bytes,9,opt,name=object,proto3" json:"object,omitempty" bson:",omitempty"`
}

func (x *MasterTask) Reset() {
	*x = MasterTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterTask) ProtoMessage() {}

func (x *MasterTask) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterTask.ProtoReflect.Descriptor instead.
func (*MasterTask) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{7}
}

func (x *MasterTask) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *MasterTask) GetOwner() *ObjectId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *MasterTask) GetGroup() *ObjectId {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MasterTask) GetSubtasks() []*Task {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

func (x *MasterTask) GetConstrain() MasterTask_Constrain {
	if x != nil {
		return x.Constrain
	}
	return MasterTask_INVALID
}

func (x *MasterTask) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MasterTask) GetPriority() MasterTask_Priority {
	if x != nil {
		return x.Priority
	}
	return MasterTask_UNDEFINED
}

func (x *MasterTask) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MasterTask) GetObject() *ObjectId {
	if x != nil {
		return x.Object
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	MasterTask *MasterTask  `protobuf:"bytes,2,opt,name=master_task,json=masterTask,proto3" json:"master_task,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CreateRequest) GetMasterTask() *MasterTask {
	if x != nil {
		return x.MasterTask
	}
	return nil
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid    *ObjectId `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SubIds []*TaskId `protobuf:"bytes,2,rep,name=sub_ids,json=subIds,proto3" json:"sub_ids,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{9}
}

func (x *CreateResponse) GetOid() *ObjectId {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *CreateResponse) GetSubIds() []*TaskId {
	if x != nil {
		return x.SubIds
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*GetRequest_Oid
	//	*GetRequest_Tid
	Payload isGetRequest_Payload `protobuf_oneof:"payload"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{10}
}

func (m *GetRequest) GetPayload() isGetRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GetRequest) GetOid() *ObjectId {
	if x, ok := x.GetPayload().(*GetRequest_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *GetRequest) GetTid() *TaskId {
	if x, ok := x.GetPayload().(*GetRequest_Tid); ok {
		return x.Tid
	}
	return nil
}

type isGetRequest_Payload interface {
	isGetRequest_Payload()
}

type GetRequest_Oid struct {
	Oid *ObjectId `protobuf:"bytes,1,opt,name=oid,proto3,oneof"`
}

type GetRequest_Tid struct {
	Tid *TaskId `protobuf:"bytes,2,opt,name=tid,proto3,oneof"`
}

func (*GetRequest_Oid) isGetRequest_Payload() {}

func (*GetRequest_Tid) isGetRequest_Payload() {}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterTask *MasterTask `protobuf:"bytes,1,opt,name=master_task,json=masterTask,proto3" json:"master_task,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{11}
}

func (x *GetResponse) GetMasterTask() *MasterTask {
	if x != nil {
		return x.MasterTask
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	// Types that are assignable to Payload:
	//	*DeleteRequest_Oid
	//	*DeleteRequest_Tid
	Payload isDeleteRequest_Payload `protobuf_oneof:"payload"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (m *DeleteRequest) GetPayload() isDeleteRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *DeleteRequest) GetOid() *ObjectId {
	if x, ok := x.GetPayload().(*DeleteRequest_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *DeleteRequest) GetTid() *TaskId {
	if x, ok := x.GetPayload().(*DeleteRequest_Tid); ok {
		return x.Tid
	}
	return nil
}

type isDeleteRequest_Payload interface {
	isDeleteRequest_Payload()
}

type DeleteRequest_Oid struct {
	Oid *ObjectId `protobuf:"bytes,2,opt,name=oid,proto3,oneof"`
}

type DeleteRequest_Tid struct {
	Tid *TaskId `protobuf:"bytes,3,opt,name=tid,proto3,oneof"`
}

func (*DeleteRequest_Oid) isDeleteRequest_Payload() {}

func (*DeleteRequest_Tid) isDeleteRequest_Payload() {}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{13}
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	MasterTask *MasterTask  `protobuf:"bytes,2,opt,name=master_task,json=masterTask,proto3" json:"master_task,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateRequest) GetMasterTask() *MasterTask {
	if x != nil {
		return x.MasterTask
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterTask *MasterTask `protobuf:"bytes,1,opt,name=master_task,json=masterTask,proto3" json:"master_task,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateResponse) GetMasterTask() *MasterTask {
	if x != nil {
		return x.MasterTask
	}
	return nil
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id  *ObjectId    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // master task id
	// new position to task id
	// if new position greater then subtasks length
	// error returned
	Positions map[string]int32 `protobuf:"bytes,3,rep,name=positions,proto3" json:"positions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateOrderRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateOrderRequest) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateOrderRequest) GetPositions() map[string]int32 {
	if x != nil {
		return x.Positions
	}
	return nil
}

type UpdateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrderResponse) Reset() {
	*x = UpdateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponse) ProtoMessage() {}

func (x *UpdateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{17}
}

type ChangeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id        *TaskId      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	NewStatus Task_Status  `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=ric.tasks.Task_Status" json:"new_status,omitempty"`
	// current location
	Location *Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// required only if new_status == CLOSED
	Success *wrappers.BoolValue `protobuf:"bytes,5,opt,name=success,proto3" json:"success,omitempty"`
	Comment string              `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	Files   []string            `protobuf:"bytes,7,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ChangeStatusRequest) Reset() {
	*x = ChangeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStatusRequest) ProtoMessage() {}

func (x *ChangeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStatusRequest.ProtoReflect.Descriptor instead.
func (*ChangeStatusRequest) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{18}
}

func (x *ChangeStatusRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ChangeStatusRequest) GetId() *TaskId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ChangeStatusRequest) GetNewStatus() Task_Status {
	if x != nil {
		return x.NewStatus
	}
	return Task_INVALID
}

func (x *ChangeStatusRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ChangeStatusRequest) GetSuccess() *wrappers.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *ChangeStatusRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ChangeStatusRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type ChangeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeStatusResponse) Reset() {
	*x = ChangeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_tasks_rictasks_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStatusResponse) ProtoMessage() {}

func (x *ChangeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_tasks_rictasks_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStatusResponse.ProtoReflect.Descriptor instead.
func (*ChangeStatusResponse) Descriptor() ([]byte, []int) {
	return file_ric_tasks_rictasks_proto_rawDescGZIP(), []int{19}
}

var File_ric_tasks_rictasks_proto protoreflect.FileDescriptor

var file_ric_tasks_rictasks_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x69, 0x63, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x72, 0x69, 0x63, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49,
	0x64, 0x22, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e,
	0x64, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x22, 0x52, 0x0a,
	0x0e, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x22, 0x81, 0x05, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x04, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3e, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xf6, 0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x34, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x38, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x22, 0x71, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x63, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x73, 0x22, 0x67, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x48, 0x00, 0x52, 0x03, 0x74, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x45, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x27, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x48, 0x00, 0x52, 0x03, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xed, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0,
	0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x99, 0x03, 0x0a, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x72, 0x69, 0x63, 0x2d, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x3b, 0x72, 0x69, 0x63, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_tasks_rictasks_proto_rawDescOnce sync.Once
	file_ric_tasks_rictasks_proto_rawDescData = file_ric_tasks_rictasks_proto_rawDesc
)

func file_ric_tasks_rictasks_proto_rawDescGZIP() []byte {
	file_ric_tasks_rictasks_proto_rawDescOnce.Do(func() {
		file_ric_tasks_rictasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_tasks_rictasks_proto_rawDescData)
	})
	return file_ric_tasks_rictasks_proto_rawDescData
}

var file_ric_tasks_rictasks_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ric_tasks_rictasks_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_ric_tasks_rictasks_proto_goTypes = []interface{}{
	(Task_Status)(0),             // 0: ric.tasks.Task.Status
	(MasterTask_Constrain)(0),    // 1: ric.tasks.MasterTask.Constrain
	(MasterTask_Priority)(0),     // 2: ric.tasks.MasterTask.Priority
	(*UserContext)(nil),          // 3: ric.tasks.UserContext
	(*ObjectId)(nil),             // 4: ric.tasks.ObjectId
	(*TaskId)(nil),               // 5: ric.tasks.TaskId
	(*Location)(nil),             // 6: ric.tasks.Location
	(*IndoorLocation)(nil),       // 7: ric.tasks.IndoorLocation
	(*Task)(nil),                 // 8: ric.tasks.Task
	(*Deadline)(nil),             // 9: ric.tasks.Deadline
	(*MasterTask)(nil),           // 10: ric.tasks.MasterTask
	(*CreateRequest)(nil),        // 11: ric.tasks.CreateRequest
	(*CreateResponse)(nil),       // 12: ric.tasks.CreateResponse
	(*GetRequest)(nil),           // 13: ric.tasks.GetRequest
	(*GetResponse)(nil),          // 14: ric.tasks.GetResponse
	(*DeleteRequest)(nil),        // 15: ric.tasks.DeleteRequest
	(*DeleteResponse)(nil),       // 16: ric.tasks.DeleteResponse
	(*UpdateRequest)(nil),        // 17: ric.tasks.UpdateRequest
	(*UpdateResponse)(nil),       // 18: ric.tasks.UpdateResponse
	(*UpdateOrderRequest)(nil),   // 19: ric.tasks.UpdateOrderRequest
	(*UpdateOrderResponse)(nil),  // 20: ric.tasks.UpdateOrderResponse
	(*ChangeStatusRequest)(nil),  // 21: ric.tasks.ChangeStatusRequest
	(*ChangeStatusResponse)(nil), // 22: ric.tasks.ChangeStatusResponse
	nil,                          // 23: ric.tasks.UpdateOrderRequest.PositionsEntry
	(*wrappers.BoolValue)(nil),   // 24: google.protobuf.BoolValue
	(*wrappers.Int64Value)(nil),  // 25: google.protobuf.Int64Value
}
var file_ric_tasks_rictasks_proto_depIdxs = []int32{
	7,  // 0: ric.tasks.Location.indoor:type_name -> ric.tasks.IndoorLocation
	5,  // 1: ric.tasks.Task.id:type_name -> ric.tasks.TaskId
	0,  // 2: ric.tasks.Task.status:type_name -> ric.tasks.Task.Status
	4,  // 3: ric.tasks.Task.object:type_name -> ric.tasks.ObjectId
	6,  // 4: ric.tasks.Task.begin:type_name -> ric.tasks.Location
	6,  // 5: ric.tasks.Task.end:type_name -> ric.tasks.Location
	9,  // 6: ric.tasks.Task.deadlines:type_name -> ric.tasks.Deadline
	4,  // 7: ric.tasks.Task.owner:type_name -> ric.tasks.ObjectId
	24, // 8: ric.tasks.Task.success:type_name -> google.protobuf.BoolValue
	4,  // 9: ric.tasks.Task.assignee:type_name -> ric.tasks.ObjectId
	25, // 10: ric.tasks.Deadline.notify_until:type_name -> google.protobuf.Int64Value
	0,  // 11: ric.tasks.Deadline.status:type_name -> ric.tasks.Task.Status
	4,  // 12: ric.tasks.MasterTask.oid:type_name -> ric.tasks.ObjectId
	4,  // 13: ric.tasks.MasterTask.owner:type_name -> ric.tasks.ObjectId
	4,  // 14: ric.tasks.MasterTask.group:type_name -> ric.tasks.ObjectId
	8,  // 15: ric.tasks.MasterTask.subtasks:type_name -> ric.tasks.Task
	1,  // 16: ric.tasks.MasterTask.constrain:type_name -> ric.tasks.MasterTask.Constrain
	2,  // 17: ric.tasks.MasterTask.priority:type_name -> ric.tasks.MasterTask.Priority
	4,  // 18: ric.tasks.MasterTask.object:type_name -> ric.tasks.ObjectId
	3,  // 19: ric.tasks.CreateRequest.ctx:type_name -> ric.tasks.UserContext
	10, // 20: ric.tasks.CreateRequest.master_task:type_name -> ric.tasks.MasterTask
	4,  // 21: ric.tasks.CreateResponse.oid:type_name -> ric.tasks.ObjectId
	5,  // 22: ric.tasks.CreateResponse.sub_ids:type_name -> ric.tasks.TaskId
	4,  // 23: ric.tasks.GetRequest.oid:type_name -> ric.tasks.ObjectId
	5,  // 24: ric.tasks.GetRequest.tid:type_name -> ric.tasks.TaskId
	10, // 25: ric.tasks.GetResponse.master_task:type_name -> ric.tasks.MasterTask
	3,  // 26: ric.tasks.DeleteRequest.ctx:type_name -> ric.tasks.UserContext
	4,  // 27: ric.tasks.DeleteRequest.oid:type_name -> ric.tasks.ObjectId
	5,  // 28: ric.tasks.DeleteRequest.tid:type_name -> ric.tasks.TaskId
	3,  // 29: ric.tasks.UpdateRequest.ctx:type_name -> ric.tasks.UserContext
	10, // 30: ric.tasks.UpdateRequest.master_task:type_name -> ric.tasks.MasterTask
	10, // 31: ric.tasks.UpdateResponse.master_task:type_name -> ric.tasks.MasterTask
	3,  // 32: ric.tasks.UpdateOrderRequest.ctx:type_name -> ric.tasks.UserContext
	4,  // 33: ric.tasks.UpdateOrderRequest.id:type_name -> ric.tasks.ObjectId
	23, // 34: ric.tasks.UpdateOrderRequest.positions:type_name -> ric.tasks.UpdateOrderRequest.PositionsEntry
	3,  // 35: ric.tasks.ChangeStatusRequest.ctx:type_name -> ric.tasks.UserContext
	5,  // 36: ric.tasks.ChangeStatusRequest.id:type_name -> ric.tasks.TaskId
	0,  // 37: ric.tasks.ChangeStatusRequest.new_status:type_name -> ric.tasks.Task.Status
	6,  // 38: ric.tasks.ChangeStatusRequest.location:type_name -> ric.tasks.Location
	24, // 39: ric.tasks.ChangeStatusRequest.success:type_name -> google.protobuf.BoolValue
	11, // 40: ric.tasks.Tasks.Create:input_type -> ric.tasks.CreateRequest
	13, // 41: ric.tasks.Tasks.Get:input_type -> ric.tasks.GetRequest
	17, // 42: ric.tasks.Tasks.Update:input_type -> ric.tasks.UpdateRequest
	15, // 43: ric.tasks.Tasks.Delete:input_type -> ric.tasks.DeleteRequest
	19, // 44: ric.tasks.Tasks.UpdateOrder:input_type -> ric.tasks.UpdateOrderRequest
	21, // 45: ric.tasks.Tasks.ChangeStatus:input_type -> ric.tasks.ChangeStatusRequest
	12, // 46: ric.tasks.Tasks.Create:output_type -> ric.tasks.CreateResponse
	14, // 47: ric.tasks.Tasks.Get:output_type -> ric.tasks.GetResponse
	18, // 48: ric.tasks.Tasks.Update:output_type -> ric.tasks.UpdateResponse
	16, // 49: ric.tasks.Tasks.Delete:output_type -> ric.tasks.DeleteResponse
	20, // 50: ric.tasks.Tasks.UpdateOrder:output_type -> ric.tasks.UpdateOrderResponse
	22, // 51: ric.tasks.Tasks.ChangeStatus:output_type -> ric.tasks.ChangeStatusResponse
	46, // [46:52] is the sub-list for method output_type
	40, // [40:46] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_ric_tasks_rictasks_proto_init() }
func file_ric_tasks_rictasks_proto_init() {
	if File_ric_tasks_rictasks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_tasks_rictasks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndoorLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deadline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_tasks_rictasks_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ric_tasks_rictasks_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GetRequest_Oid)(nil),
		(*GetRequest_Tid)(nil),
	}
	file_ric_tasks_rictasks_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*DeleteRequest_Oid)(nil),
		(*DeleteRequest_Tid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_tasks_rictasks_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ric_tasks_rictasks_proto_goTypes,
		DependencyIndexes: file_ric_tasks_rictasks_proto_depIdxs,
		EnumInfos:         file_ric_tasks_rictasks_proto_enumTypes,
		MessageInfos:      file_ric_tasks_rictasks_proto_msgTypes,
	}.Build()
	File_ric_tasks_rictasks_proto = out.File
	file_ric_tasks_rictasks_proto_rawDesc = nil
	file_ric_tasks_rictasks_proto_goTypes = nil
	file_ric_tasks_rictasks_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TasksClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// get master task by it's id or by some subtask id
	// this request always return full master task
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// this method can update master task and subtasks information
	// this method can't update (return error):
	// 1. subtasks status (use ChangeStatus)
	// 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
	// 3. subtasks order (use UpdateOrder)
	// 4. begin and end location if status not equal to CREATED or ASSIGNED
	//
	// new subtasks can be added but they always append to end of subtasks list
	// use UpdateOrder after this if you need add subtask to specific position
	//
	// to update subtask -> TaskId should be present in request
	// if no TaskId then subtask treated as new
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// this method can delete master task or specific subtask
	// if it is a last subtask then master task also will be deleted
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// update subtasks order
	// order can be updated only if following true:
	// 1. all subtasks has status CREATED or ASSIGNED
	// 2. all subtasks has no deadlines
	//    (if subtask have deadline you can unset it via Update method)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	// change subtask status
	// this method checks master task constrain before change status
	// so if constraint ordered you can't take in work subtask if previous subtask
	// not closed
	//
	// the following status change is allowed:
	// CREATED -> ASSIGNED
	// ASSIGNED -> IN_WORK
	// IN_WORK -> CLOSED (with success flag)
	// CLOSED -> CREATED
	// ASSIGNED -> CREATED
	// ASSIGNED -> CLOSED (method always set success flag to false)
	// CREATED -> CLOSED (method always set success flag to false)
	//
	// if subtask has begin location -> change status to IN_WORK can be done only
	// in this location
	//
	// if subtask has end location -> change status to CLOSED can be done only
	// in this location
	ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.Tasks/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.Tasks/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.Tasks/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.Tasks/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.Tasks/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/ric.tasks.Tasks/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
type TasksServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// get master task by it's id or by some subtask id
	// this request always return full master task
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// this method can update master task and subtasks information
	// this method can't update (return error):
	// 1. subtasks status (use ChangeStatus)
	// 2. subtasks deadlines if status not equal to CREATED or ASSIGNED
	// 3. subtasks order (use UpdateOrder)
	// 4. begin and end location if status not equal to CREATED or ASSIGNED
	//
	// new subtasks can be added but they always append to end of subtasks list
	// use UpdateOrder after this if you need add subtask to specific position
	//
	// to update subtask -> TaskId should be present in request
	// if no TaskId then subtask treated as new
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// this method can delete master task or specific subtask
	// if it is a last subtask then master task also will be deleted
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// update subtasks order
	// order can be updated only if following true:
	// 1. all subtasks has status CREATED or ASSIGNED
	// 2. all subtasks has no deadlines
	//    (if subtask have deadline you can unset it via Update method)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	// change subtask status
	// this method checks master task constrain before change status
	// so if constraint ordered you can't take in work subtask if previous subtask
	// not closed
	//
	// the following status change is allowed:
	// CREATED -> ASSIGNED
	// ASSIGNED -> IN_WORK
	// IN_WORK -> CLOSED (with success flag)
	// CLOSED -> CREATED
	// ASSIGNED -> CREATED
	// ASSIGNED -> CLOSED (method always set success flag to false)
	// CREATED -> CLOSED (method always set success flag to false)
	//
	// if subtask has begin location -> change status to IN_WORK can be done only
	// in this location
	//
	// if subtask has end location -> change status to CLOSED can be done only
	// in this location
	ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
}

// UnimplementedTasksServer can be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (*UnimplementedTasksServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTasksServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTasksServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTasksServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTasksServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedTasksServer) ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.Tasks/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.Tasks/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.Tasks/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.Tasks/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.Tasks/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.tasks.Tasks/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).ChangeStatus(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.tasks.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Tasks_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tasks_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tasks_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Tasks_Delete_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Tasks_UpdateOrder_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _Tasks_ChangeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-tasks/rictasks.proto",
}
