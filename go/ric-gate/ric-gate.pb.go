// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.7.0
// source: ric-gate/ric-gate.proto

package ricgate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataRequest_DataType int32

const (
	DataRequest_UNKNOWN DataRequest_DataType = 0 // default
	DataRequest_PARAMS  DataRequest_DataType = 1
	DataRequest_FILE    DataRequest_DataType = 2
	DataRequest_EVENT   DataRequest_DataType = 3
	DataRequest_RPC     DataRequest_DataType = 4
)

// Enum value maps for DataRequest_DataType.
var (
	DataRequest_DataType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PARAMS",
		2: "FILE",
		3: "EVENT",
		4: "RPC",
	}
	DataRequest_DataType_value = map[string]int32{
		"UNKNOWN": 0,
		"PARAMS":  1,
		"FILE":    2,
		"EVENT":   3,
		"RPC":     4,
	}
)

func (x DataRequest_DataType) Enum() *DataRequest_DataType {
	p := new(DataRequest_DataType)
	*p = x
	return p
}

func (x DataRequest_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataRequest_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_gate_ric_gate_proto_enumTypes[0].Descriptor()
}

func (DataRequest_DataType) Type() protoreflect.EnumType {
	return &file_ric_gate_ric_gate_proto_enumTypes[0]
}

func (x DataRequest_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataRequest_DataType.Descriptor instead.
func (DataRequest_DataType) EnumDescriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{4, 0}
}

type CommandReplyRequest_Stage int32

const (
	CommandReplyRequest_UNKNOWN CommandReplyRequest_Stage = 0 // default stage
	CommandReplyRequest_ERROR   CommandReplyRequest_Stage = 1 // wrong command
	CommandReplyRequest_INLET   CommandReplyRequest_Stage = 2 // inlet got command
	CommandReplyRequest_OBJECT  CommandReplyRequest_Stage = 3 // device got command
	CommandReplyRequest_PACKET  CommandReplyRequest_Stage = 4 // packet from device
)

// Enum value maps for CommandReplyRequest_Stage.
var (
	CommandReplyRequest_Stage_name = map[int32]string{
		0: "UNKNOWN",
		1: "ERROR",
		2: "INLET",
		3: "OBJECT",
		4: "PACKET",
	}
	CommandReplyRequest_Stage_value = map[string]int32{
		"UNKNOWN": 0,
		"ERROR":   1,
		"INLET":   2,
		"OBJECT":  3,
		"PACKET":  4,
	}
)

func (x CommandReplyRequest_Stage) Enum() *CommandReplyRequest_Stage {
	p := new(CommandReplyRequest_Stage)
	*p = x
	return p
}

func (x CommandReplyRequest_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandReplyRequest_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_gate_ric_gate_proto_enumTypes[1].Descriptor()
}

func (CommandReplyRequest_Stage) Type() protoreflect.EnumType {
	return &file_ric_gate_ric_gate_proto_enumTypes[1]
}

func (x CommandReplyRequest_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandReplyRequest_Stage.Descriptor instead.
func (CommandReplyRequest_Stage) EnumDescriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{6, 0}
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // grpc client id
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{0}
}

func (x *InitRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Login      string `protobuf:"bytes,3,opt,name=login,proto3" json:"login,omitempty"`
	Password   string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	IsBot      bool   `protobuf:"varint,5,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{1}
}

func (x *AuthRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AuthRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *AuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthRequest) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

type LimitingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketSize      float32 `protobuf:"fixed32,1,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	PacketFrequency float32 `protobuf:"fixed32,2,opt,name=packet_frequency,json=packetFrequency,proto3" json:"packet_frequency,omitempty"`
	ExcessesAllowed float32 `protobuf:"fixed32,3,opt,name=excesses_allowed,json=excessesAllowed,proto3" json:"excesses_allowed,omitempty"`
	CurrentPackets  float32 `protobuf:"fixed32,4,opt,name=current_packets,json=currentPackets,proto3" json:"current_packets,omitempty"`
	CurrentExcesses float32 `protobuf:"fixed32,5,opt,name=current_excesses,json=currentExcesses,proto3" json:"current_excesses,omitempty"`
}

func (x *LimitingParams) Reset() {
	*x = LimitingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitingParams) ProtoMessage() {}

func (x *LimitingParams) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitingParams.ProtoReflect.Descriptor instead.
func (*LimitingParams) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{2}
}

func (x *LimitingParams) GetPacketSize() float32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *LimitingParams) GetPacketFrequency() float32 {
	if x != nil {
		return x.PacketFrequency
	}
	return 0
}

func (x *LimitingParams) GetExcessesAllowed() float32 {
	if x != nil {
		return x.ExcessesAllowed
	}
	return 0
}

func (x *LimitingParams) GetCurrentPackets() float32 {
	if x != nil {
		return x.CurrentPackets
	}
	return 0
}

func (x *LimitingParams) GetCurrentExcesses() float32 {
	if x != nil {
		return x.CurrentExcesses
	}
	return 0
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  string          `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	GroupId   string          `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	LicenseId string          `protobuf:"bytes,3,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	SessionId string          `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Config    []byte          `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Limits    *LimitingParams `protobuf:"bytes,6,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{3}
}

func (x *AuthResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AuthResponse) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AuthResponse) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *AuthResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AuthResponse) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AuthResponse) GetLimits() *LimitingParams {
	if x != nil {
		return x.Limits
	}
	return nil
}

type DataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string               `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ObjectId   string               `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Data       []byte               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BinaryData []byte               `protobuf:"bytes,4,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	DataType   DataRequest_DataType `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=ric.gate.DataRequest_DataType" json:"data_type,omitempty"`
}

func (x *DataRequest) Reset() {
	*x = DataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest) ProtoMessage() {}

func (x *DataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest.ProtoReflect.Descriptor instead.
func (*DataRequest) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{4}
}

func (x *DataRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DataRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *DataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataRequest) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

func (x *DataRequest) GetDataType() DataRequest_DataType {
	if x != nil {
		return x.DataType
	}
	return DataRequest_UNKNOWN
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{5}
}

func (x *Ping) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type CommandReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId string                    `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	ObjectId  string                    `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Data      []byte                    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // show answer in command interface
	Stage     CommandReplyRequest_Stage `protobuf:"varint,4,opt,name=stage,proto3,enum=ric.gate.CommandReplyRequest_Stage" json:"stage,omitempty"`
	Error     string                    `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CommandReplyRequest) Reset() {
	*x = CommandReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplyRequest) ProtoMessage() {}

func (x *CommandReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplyRequest.ProtoReflect.Descriptor instead.
func (*CommandReplyRequest) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{6}
}

func (x *CommandReplyRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *CommandReplyRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *CommandReplyRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommandReplyRequest) GetStage() CommandReplyRequest_Stage {
	if x != nil {
		return x.Stage
	}
	return CommandReplyRequest_UNKNOWN
}

func (x *CommandReplyRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type OfflineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ObjectId   string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *OfflineRequest) Reset() {
	*x = OfflineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineRequest) ProtoMessage() {}

func (x *OfflineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineRequest.ProtoReflect.Descriptor instead.
func (*OfflineRequest) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{7}
}

func (x *OfflineRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OfflineRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId string `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	ObjectId  string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Method    string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Params    []byte `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{8}
}

func (x *Command) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *Command) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *Command) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Command) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_gate_ric_gate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_gate_ric_gate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_ric_gate_ric_gate_proto_rawDescGZIP(), []int{9}
}

var File_ric_gate_ric_gate_proto protoreflect.FileDescriptor

var file_ric_gate_ric_gate_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x69, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x69, 0x63, 0x2d, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x69, 0x63, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x22, 0xdb, 0x01,
	0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0c,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x80, 0x02, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x10, 0x04, 0x22,
	0x27, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x42, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0x04, 0x22, 0x4e, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x0f, 0x0a, 0x0d,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfc, 0x02,
	0x0a, 0x09, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6c, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x30, 0x01, 0x12,
	0x35, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x15, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x0e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4a,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4a, 0x0a, 0x0b,
	0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x70, 0x63, 0x12, 0x11, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x72, 0x69,
	0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x3b, 0x72, 0x69, 0x63, 0x67, 0x61, 0x74, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_gate_ric_gate_proto_rawDescOnce sync.Once
	file_ric_gate_ric_gate_proto_rawDescData = file_ric_gate_ric_gate_proto_rawDesc
)

func file_ric_gate_ric_gate_proto_rawDescGZIP() []byte {
	file_ric_gate_ric_gate_proto_rawDescOnce.Do(func() {
		file_ric_gate_ric_gate_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_gate_ric_gate_proto_rawDescData)
	})
	return file_ric_gate_ric_gate_proto_rawDescData
}

var file_ric_gate_ric_gate_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ric_gate_ric_gate_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ric_gate_ric_gate_proto_goTypes = []interface{}{
	(DataRequest_DataType)(0),      // 0: ric.gate.DataRequest.DataType
	(CommandReplyRequest_Stage)(0), // 1: ric.gate.CommandReplyRequest.Stage
	(*InitRequest)(nil),            // 2: ric.gate.InitRequest
	(*AuthRequest)(nil),            // 3: ric.gate.AuthRequest
	(*LimitingParams)(nil),         // 4: ric.gate.LimitingParams
	(*AuthResponse)(nil),           // 5: ric.gate.AuthResponse
	(*DataRequest)(nil),            // 6: ric.gate.DataRequest
	(*Ping)(nil),                   // 7: ric.gate.Ping
	(*CommandReplyRequest)(nil),    // 8: ric.gate.CommandReplyRequest
	(*OfflineRequest)(nil),         // 9: ric.gate.OfflineRequest
	(*Command)(nil),                // 10: ric.gate.Command
	(*EmptyResponse)(nil),          // 11: ric.gate.EmptyResponse
}
var file_ric_gate_ric_gate_proto_depIdxs = []int32{
	4,  // 0: ric.gate.AuthResponse.limits:type_name -> ric.gate.LimitingParams
	0,  // 1: ric.gate.DataRequest.data_type:type_name -> ric.gate.DataRequest.DataType
	1,  // 2: ric.gate.CommandReplyRequest.stage:type_name -> ric.gate.CommandReplyRequest.Stage
	2,  // 3: ric.gate.GateInlet.Init:input_type -> ric.gate.InitRequest
	3,  // 4: ric.gate.GateInlet.Auth:input_type -> ric.gate.AuthRequest
	6,  // 5: ric.gate.GateInlet.SendData:input_type -> ric.gate.DataRequest
	7,  // 6: ric.gate.GateInlet.SendHeartbeat:input_type -> ric.gate.Ping
	8,  // 7: ric.gate.GateInlet.SendCommandReply:input_type -> ric.gate.CommandReplyRequest
	9,  // 8: ric.gate.GateInlet.SendOffline:input_type -> ric.gate.OfflineRequest
	10, // 9: ric.gate.GateCommand.SendRpc:input_type -> ric.gate.Command
	10, // 10: ric.gate.GateInlet.Init:output_type -> ric.gate.Command
	5,  // 11: ric.gate.GateInlet.Auth:output_type -> ric.gate.AuthResponse
	11, // 12: ric.gate.GateInlet.SendData:output_type -> ric.gate.EmptyResponse
	11, // 13: ric.gate.GateInlet.SendHeartbeat:output_type -> ric.gate.EmptyResponse
	11, // 14: ric.gate.GateInlet.SendCommandReply:output_type -> ric.gate.EmptyResponse
	11, // 15: ric.gate.GateInlet.SendOffline:output_type -> ric.gate.EmptyResponse
	8,  // 16: ric.gate.GateCommand.SendRpc:output_type -> ric.gate.CommandReplyRequest
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_ric_gate_ric_gate_proto_init() }
func file_ric_gate_ric_gate_proto_init() {
	if File_ric_gate_ric_gate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_gate_ric_gate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_gate_ric_gate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_gate_ric_gate_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ric_gate_ric_gate_proto_goTypes,
		DependencyIndexes: file_ric_gate_ric_gate_proto_depIdxs,
		EnumInfos:         file_ric_gate_ric_gate_proto_enumTypes,
		MessageInfos:      file_ric_gate_ric_gate_proto_msgTypes,
	}.Build()
	File_ric_gate_ric_gate_proto = out.File
	file_ric_gate_ric_gate_proto_rawDesc = nil
	file_ric_gate_ric_gate_proto_goTypes = nil
	file_ric_gate_ric_gate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GateInletClient is the client API for GateInlet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateInletClient interface {
	// Init and subscribes to commands from gate
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (GateInlet_InitClient, error)
	// Auth new device
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Send data from device
	SendData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Send heartbeats from client
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GateInlet_SendHeartbeatClient, error)
	// Send command reply
	SendCommandReply(ctx context.Context, in *CommandReplyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Send info about offline
	SendOffline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type gateInletClient struct {
	cc grpc.ClientConnInterface
}

func NewGateInletClient(cc grpc.ClientConnInterface) GateInletClient {
	return &gateInletClient{cc}
}

func (c *gateInletClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (GateInlet_InitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GateInlet_serviceDesc.Streams[0], "/ric.gate.GateInlet/Init", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateInletInitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GateInlet_InitClient interface {
	Recv() (*Command, error)
	grpc.ClientStream
}

type gateInletInitClient struct {
	grpc.ClientStream
}

func (x *gateInletInitClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateInletClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/ric.gate.GateInlet/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateInletClient) SendData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.gate.GateInlet/SendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateInletClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GateInlet_SendHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GateInlet_serviceDesc.Streams[1], "/ric.gate.GateInlet/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateInletSendHeartbeatClient{stream}
	return x, nil
}

type GateInlet_SendHeartbeatClient interface {
	Send(*Ping) error
	CloseAndRecv() (*EmptyResponse, error)
	grpc.ClientStream
}

type gateInletSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gateInletSendHeartbeatClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateInletSendHeartbeatClient) CloseAndRecv() (*EmptyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateInletClient) SendCommandReply(ctx context.Context, in *CommandReplyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.gate.GateInlet/SendCommandReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateInletClient) SendOffline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/ric.gate.GateInlet/SendOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateInletServer is the server API for GateInlet service.
type GateInletServer interface {
	// Init and subscribes to commands from gate
	Init(*InitRequest, GateInlet_InitServer) error
	// Auth new device
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	// Send data from device
	SendData(context.Context, *DataRequest) (*EmptyResponse, error)
	// Send heartbeats from client
	SendHeartbeat(GateInlet_SendHeartbeatServer) error
	// Send command reply
	SendCommandReply(context.Context, *CommandReplyRequest) (*EmptyResponse, error)
	// Send info about offline
	SendOffline(context.Context, *OfflineRequest) (*EmptyResponse, error)
}

// UnimplementedGateInletServer can be embedded to have forward compatible implementations.
type UnimplementedGateInletServer struct {
}

func (*UnimplementedGateInletServer) Init(*InitRequest, GateInlet_InitServer) error {
	return status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedGateInletServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedGateInletServer) SendData(context.Context, *DataRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (*UnimplementedGateInletServer) SendHeartbeat(GateInlet_SendHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (*UnimplementedGateInletServer) SendCommandReply(context.Context, *CommandReplyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandReply not implemented")
}
func (*UnimplementedGateInletServer) SendOffline(context.Context, *OfflineRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffline not implemented")
}

func RegisterGateInletServer(s *grpc.Server, srv GateInletServer) {
	s.RegisterService(&_GateInlet_serviceDesc, srv)
}

func _GateInlet_Init_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GateInletServer).Init(m, &gateInletInitServer{stream})
}

type GateInlet_InitServer interface {
	Send(*Command) error
	grpc.ServerStream
}

type gateInletInitServer struct {
	grpc.ServerStream
}

func (x *gateInletInitServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func _GateInlet_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateInletServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.gate.GateInlet/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateInletServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateInlet_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateInletServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.gate.GateInlet/SendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateInletServer).SendData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateInlet_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateInletServer).SendHeartbeat(&gateInletSendHeartbeatServer{stream})
}

type GateInlet_SendHeartbeatServer interface {
	SendAndClose(*EmptyResponse) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type gateInletSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gateInletSendHeartbeatServer) SendAndClose(m *EmptyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateInletSendHeartbeatServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GateInlet_SendCommandReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateInletServer).SendCommandReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.gate.GateInlet/SendCommandReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateInletServer).SendCommandReply(ctx, req.(*CommandReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateInlet_SendOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateInletServer).SendOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.gate.GateInlet/SendOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateInletServer).SendOffline(ctx, req.(*OfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GateInlet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.gate.GateInlet",
	HandlerType: (*GateInletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _GateInlet_Auth_Handler,
		},
		{
			MethodName: "SendData",
			Handler:    _GateInlet_SendData_Handler,
		},
		{
			MethodName: "SendCommandReply",
			Handler:    _GateInlet_SendCommandReply_Handler,
		},
		{
			MethodName: "SendOffline",
			Handler:    _GateInlet_SendOffline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Init",
			Handler:       _GateInlet_Init_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendHeartbeat",
			Handler:       _GateInlet_SendHeartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ric-gate/ric-gate.proto",
}

// GateCommandClient is the client API for GateCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateCommandClient interface {
	// Method to send grpc command from other service to gate
	SendRpc(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReplyRequest, error)
}

type gateCommandClient struct {
	cc grpc.ClientConnInterface
}

func NewGateCommandClient(cc grpc.ClientConnInterface) GateCommandClient {
	return &gateCommandClient{cc}
}

func (c *gateCommandClient) SendRpc(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReplyRequest, error) {
	out := new(CommandReplyRequest)
	err := c.cc.Invoke(ctx, "/ric.gate.GateCommand/SendRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateCommandServer is the server API for GateCommand service.
type GateCommandServer interface {
	// Method to send grpc command from other service to gate
	SendRpc(context.Context, *Command) (*CommandReplyRequest, error)
}

// UnimplementedGateCommandServer can be embedded to have forward compatible implementations.
type UnimplementedGateCommandServer struct {
}

func (*UnimplementedGateCommandServer) SendRpc(context.Context, *Command) (*CommandReplyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRpc not implemented")
}

func RegisterGateCommandServer(s *grpc.Server, srv GateCommandServer) {
	s.RegisterService(&_GateCommand_serviceDesc, srv)
}

func _GateCommand_SendRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateCommandServer).SendRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.gate.GateCommand/SendRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateCommandServer).SendRpc(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _GateCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.gate.GateCommand",
	HandlerType: (*GateCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRpc",
			Handler:    _GateCommand_SendRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-gate/ric-gate.proto",
}
