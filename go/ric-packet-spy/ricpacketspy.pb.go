// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.7.0
// source: ric-packet-spy/ricpacketspy.proto

package ricpacketspy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{0}
}

func (x *GetStateRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{1}
}

func (x *GetStateResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type StartWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Timeout  int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *StartWatchRequest) Reset() {
	*x = StartWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWatchRequest) ProtoMessage() {}

func (x *StartWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWatchRequest.ProtoReflect.Descriptor instead.
func (*StartWatchRequest) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{2}
}

func (x *StartWatchRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *StartWatchRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type StartWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout int64 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *StartWatchResponse) Reset() {
	*x = StartWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWatchResponse) ProtoMessage() {}

func (x *StartWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWatchResponse.ProtoReflect.Descriptor instead.
func (*StartWatchResponse) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{3}
}

func (x *StartWatchResponse) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type CancelWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *CancelWatchRequest) Reset() {
	*x = CancelWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWatchRequest) ProtoMessage() {}

func (x *CancelWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWatchRequest.ProtoReflect.Descriptor instead.
func (*CancelWatchRequest) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{4}
}

func (x *CancelWatchRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type CancelWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelWatchResponse) Reset() {
	*x = CancelWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWatchResponse) ProtoMessage() {}

func (x *CancelWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWatchResponse.ProtoReflect.Descriptor instead.
func (*CancelWatchResponse) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{5}
}

type CommitModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Fields   []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *CommitModelRequest) Reset() {
	*x = CommitModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitModelRequest) ProtoMessage() {}

func (x *CommitModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitModelRequest.ProtoReflect.Descriptor instead.
func (*CommitModelRequest) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{6}
}

func (x *CommitModelRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *CommitModelRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type CommitModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitModelResponse) Reset() {
	*x = CommitModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitModelResponse) ProtoMessage() {}

func (x *CommitModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitModelResponse.ProtoReflect.Descriptor instead.
func (*CommitModelResponse) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{7}
}

type WatchUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *WatchUpdateRequest) Reset() {
	*x = WatchUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUpdateRequest) ProtoMessage() {}

func (x *WatchUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUpdateRequest.ProtoReflect.Descriptor instead.
func (*WatchUpdateRequest) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{8}
}

func (x *WatchUpdateRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type ObjectUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ObjectUpdate) Reset() {
	*x = ObjectUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUpdate) ProtoMessage() {}

func (x *ObjectUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_ric_packet_spy_ricpacketspy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUpdate.ProtoReflect.Descriptor instead.
func (*ObjectUpdate) Descriptor() ([]byte, []int) {
	return file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP(), []int{9}
}

func (x *ObjectUpdate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_ric_packet_spy_ricpacketspy_proto protoreflect.FileDescriptor

var file_ric_packet_spy_ricpacketspy_proto_rawDesc = []byte{
	0x0a, 0x21, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x73, 0x70, 0x79,
	0x2f, 0x72, 0x69, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x70, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x73, 0x70, 0x79, 0x22, 0x2e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x31, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x49, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x15, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xb5, 0x03, 0x0a, 0x0c, 0x52,
	0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x73, 0x70, 0x79, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x79, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x73, 0x70, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x30, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x2e, 0x2f, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2d, 0x73, 0x70, 0x79, 0x3b, 0x72, 0x69, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x70, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_packet_spy_ricpacketspy_proto_rawDescOnce sync.Once
	file_ric_packet_spy_ricpacketspy_proto_rawDescData = file_ric_packet_spy_ricpacketspy_proto_rawDesc
)

func file_ric_packet_spy_ricpacketspy_proto_rawDescGZIP() []byte {
	file_ric_packet_spy_ricpacketspy_proto_rawDescOnce.Do(func() {
		file_ric_packet_spy_ricpacketspy_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_packet_spy_ricpacketspy_proto_rawDescData)
	})
	return file_ric_packet_spy_ricpacketspy_proto_rawDescData
}

var file_ric_packet_spy_ricpacketspy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ric_packet_spy_ricpacketspy_proto_goTypes = []interface{}{
	(*GetStateRequest)(nil),     // 0: ric.packet.spy.GetStateRequest
	(*GetStateResponse)(nil),    // 1: ric.packet.spy.GetStateResponse
	(*StartWatchRequest)(nil),   // 2: ric.packet.spy.StartWatchRequest
	(*StartWatchResponse)(nil),  // 3: ric.packet.spy.StartWatchResponse
	(*CancelWatchRequest)(nil),  // 4: ric.packet.spy.CancelWatchRequest
	(*CancelWatchResponse)(nil), // 5: ric.packet.spy.CancelWatchResponse
	(*CommitModelRequest)(nil),  // 6: ric.packet.spy.CommitModelRequest
	(*CommitModelResponse)(nil), // 7: ric.packet.spy.CommitModelResponse
	(*WatchUpdateRequest)(nil),  // 8: ric.packet.spy.WatchUpdateRequest
	(*ObjectUpdate)(nil),        // 9: ric.packet.spy.ObjectUpdate
}
var file_ric_packet_spy_ricpacketspy_proto_depIdxs = []int32{
	0, // 0: ric.packet.spy.RicPacketSpy.GetState:input_type -> ric.packet.spy.GetStateRequest
	2, // 1: ric.packet.spy.RicPacketSpy.StartWatch:input_type -> ric.packet.spy.StartWatchRequest
	4, // 2: ric.packet.spy.RicPacketSpy.CancelWatch:input_type -> ric.packet.spy.CancelWatchRequest
	6, // 3: ric.packet.spy.RicPacketSpy.CommitModel:input_type -> ric.packet.spy.CommitModelRequest
	8, // 4: ric.packet.spy.RicPacketSpy.WatchUpdate:input_type -> ric.packet.spy.WatchUpdateRequest
	1, // 5: ric.packet.spy.RicPacketSpy.GetState:output_type -> ric.packet.spy.GetStateResponse
	3, // 6: ric.packet.spy.RicPacketSpy.StartWatch:output_type -> ric.packet.spy.StartWatchResponse
	5, // 7: ric.packet.spy.RicPacketSpy.CancelWatch:output_type -> ric.packet.spy.CancelWatchResponse
	7, // 8: ric.packet.spy.RicPacketSpy.CommitModel:output_type -> ric.packet.spy.CommitModelResponse
	9, // 9: ric.packet.spy.RicPacketSpy.WatchUpdate:output_type -> ric.packet.spy.ObjectUpdate
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ric_packet_spy_ricpacketspy_proto_init() }
func file_ric_packet_spy_ricpacketspy_proto_init() {
	if File_ric_packet_spy_ricpacketspy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_packet_spy_ricpacketspy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_packet_spy_ricpacketspy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ric_packet_spy_ricpacketspy_proto_goTypes,
		DependencyIndexes: file_ric_packet_spy_ricpacketspy_proto_depIdxs,
		MessageInfos:      file_ric_packet_spy_ricpacketspy_proto_msgTypes,
	}.Build()
	File_ric_packet_spy_ricpacketspy_proto = out.File
	file_ric_packet_spy_ricpacketspy_proto_rawDesc = nil
	file_ric_packet_spy_ricpacketspy_proto_goTypes = nil
	file_ric_packet_spy_ricpacketspy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RicPacketSpyClient is the client API for RicPacketSpy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RicPacketSpyClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	StartWatch(ctx context.Context, in *StartWatchRequest, opts ...grpc.CallOption) (*StartWatchResponse, error)
	CancelWatch(ctx context.Context, in *CancelWatchRequest, opts ...grpc.CallOption) (*CancelWatchResponse, error)
	CommitModel(ctx context.Context, in *CommitModelRequest, opts ...grpc.CallOption) (*CommitModelResponse, error)
	WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...grpc.CallOption) (RicPacketSpy_WatchUpdateClient, error)
}

type ricPacketSpyClient struct {
	cc grpc.ClientConnInterface
}

func NewRicPacketSpyClient(cc grpc.ClientConnInterface) RicPacketSpyClient {
	return &ricPacketSpyClient{cc}
}

func (c *ricPacketSpyClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/ric.packet.spy.RicPacketSpy/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricPacketSpyClient) StartWatch(ctx context.Context, in *StartWatchRequest, opts ...grpc.CallOption) (*StartWatchResponse, error) {
	out := new(StartWatchResponse)
	err := c.cc.Invoke(ctx, "/ric.packet.spy.RicPacketSpy/StartWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricPacketSpyClient) CancelWatch(ctx context.Context, in *CancelWatchRequest, opts ...grpc.CallOption) (*CancelWatchResponse, error) {
	out := new(CancelWatchResponse)
	err := c.cc.Invoke(ctx, "/ric.packet.spy.RicPacketSpy/CancelWatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricPacketSpyClient) CommitModel(ctx context.Context, in *CommitModelRequest, opts ...grpc.CallOption) (*CommitModelResponse, error) {
	out := new(CommitModelResponse)
	err := c.cc.Invoke(ctx, "/ric.packet.spy.RicPacketSpy/CommitModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricPacketSpyClient) WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...grpc.CallOption) (RicPacketSpy_WatchUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RicPacketSpy_serviceDesc.Streams[0], "/ric.packet.spy.RicPacketSpy/WatchUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &ricPacketSpyWatchUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RicPacketSpy_WatchUpdateClient interface {
	Recv() (*ObjectUpdate, error)
	grpc.ClientStream
}

type ricPacketSpyWatchUpdateClient struct {
	grpc.ClientStream
}

func (x *ricPacketSpyWatchUpdateClient) Recv() (*ObjectUpdate, error) {
	m := new(ObjectUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RicPacketSpyServer is the server API for RicPacketSpy service.
type RicPacketSpyServer interface {
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	StartWatch(context.Context, *StartWatchRequest) (*StartWatchResponse, error)
	CancelWatch(context.Context, *CancelWatchRequest) (*CancelWatchResponse, error)
	CommitModel(context.Context, *CommitModelRequest) (*CommitModelResponse, error)
	WatchUpdate(*WatchUpdateRequest, RicPacketSpy_WatchUpdateServer) error
}

// UnimplementedRicPacketSpyServer can be embedded to have forward compatible implementations.
type UnimplementedRicPacketSpyServer struct {
}

func (*UnimplementedRicPacketSpyServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedRicPacketSpyServer) StartWatch(context.Context, *StartWatchRequest) (*StartWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWatch not implemented")
}
func (*UnimplementedRicPacketSpyServer) CancelWatch(context.Context, *CancelWatchRequest) (*CancelWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWatch not implemented")
}
func (*UnimplementedRicPacketSpyServer) CommitModel(context.Context, *CommitModelRequest) (*CommitModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitModel not implemented")
}
func (*UnimplementedRicPacketSpyServer) WatchUpdate(*WatchUpdateRequest, RicPacketSpy_WatchUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUpdate not implemented")
}

func RegisterRicPacketSpyServer(s *grpc.Server, srv RicPacketSpyServer) {
	s.RegisterService(&_RicPacketSpy_serviceDesc, srv)
}

func _RicPacketSpy_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicPacketSpyServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.packet.spy.RicPacketSpy/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicPacketSpyServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicPacketSpy_StartWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicPacketSpyServer).StartWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.packet.spy.RicPacketSpy/StartWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicPacketSpyServer).StartWatch(ctx, req.(*StartWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicPacketSpy_CancelWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicPacketSpyServer).CancelWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.packet.spy.RicPacketSpy/CancelWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicPacketSpyServer).CancelWatch(ctx, req.(*CancelWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicPacketSpy_CommitModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicPacketSpyServer).CommitModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.packet.spy.RicPacketSpy/CommitModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicPacketSpyServer).CommitModel(ctx, req.(*CommitModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicPacketSpy_WatchUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RicPacketSpyServer).WatchUpdate(m, &ricPacketSpyWatchUpdateServer{stream})
}

type RicPacketSpy_WatchUpdateServer interface {
	Send(*ObjectUpdate) error
	grpc.ServerStream
}

type ricPacketSpyWatchUpdateServer struct {
	grpc.ServerStream
}

func (x *ricPacketSpyWatchUpdateServer) Send(m *ObjectUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _RicPacketSpy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.packet.spy.RicPacketSpy",
	HandlerType: (*RicPacketSpyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _RicPacketSpy_GetState_Handler,
		},
		{
			MethodName: "StartWatch",
			Handler:    _RicPacketSpy_StartWatch_Handler,
		},
		{
			MethodName: "CancelWatch",
			Handler:    _RicPacketSpy_CancelWatch_Handler,
		},
		{
			MethodName: "CommitModel",
			Handler:    _RicPacketSpy_CommitModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchUpdate",
			Handler:       _RicPacketSpy_WatchUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ric-packet-spy/ricpacketspy.proto",
}
