// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.7.0
// source: ric-notify/ricnotify.proto

package ricnotify

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SMPPStatusResponse_State int32

const (
	SMPPStatusResponse_UNKNOWN              SMPPStatusResponse_State = 0
	SMPPStatusResponse_SCHEDULE             SMPPStatusResponse_State = 1
	SMPPStatusResponse_SEND_ERROR           SMPPStatusResponse_State = 2
	SMPPStatusResponse_MAX_RETRIES_EXCEEDED SMPPStatusResponse_State = 3
	SMPPStatusResponse_SENT                 SMPPStatusResponse_State = 4
	SMPPStatusResponse_ERROR                SMPPStatusResponse_State = 5
)

// Enum value maps for SMPPStatusResponse_State.
var (
	SMPPStatusResponse_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "SCHEDULE",
		2: "SEND_ERROR",
		3: "MAX_RETRIES_EXCEEDED",
		4: "SENT",
		5: "ERROR",
	}
	SMPPStatusResponse_State_value = map[string]int32{
		"UNKNOWN":              0,
		"SCHEDULE":             1,
		"SEND_ERROR":           2,
		"MAX_RETRIES_EXCEEDED": 3,
		"SENT":                 4,
		"ERROR":                5,
	}
)

func (x SMPPStatusResponse_State) Enum() *SMPPStatusResponse_State {
	p := new(SMPPStatusResponse_State)
	*p = x
	return p
}

func (x SMPPStatusResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMPPStatusResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_ric_notify_ricnotify_proto_enumTypes[0].Descriptor()
}

func (SMPPStatusResponse_State) Type() protoreflect.EnumType {
	return &file_ric_notify_ricnotify_proto_enumTypes[0]
}

func (x SMPPStatusResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMPPStatusResponse_State.Descriptor instead.
func (SMPPStatusResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{4, 0}
}

type UserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpanId  string `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{0}
}

func (x *UserContext) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserContext) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserContext) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

type SMPPSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	GatewayId string       `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Phone     string       `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Message   string       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SMPPSendRequest) Reset() {
	*x = SMPPSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPSendRequest) ProtoMessage() {}

func (x *SMPPSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPSendRequest.ProtoReflect.Descriptor instead.
func (*SMPPSendRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{1}
}

func (x *SMPPSendRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SMPPSendRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *SMPPSendRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SMPPSendRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SMPPSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SMPPSendResponse) Reset() {
	*x = SMPPSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPSendResponse) ProtoMessage() {}

func (x *SMPPSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPSendResponse.ProtoReflect.Descriptor instead.
func (*SMPPSendResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{2}
}

func (x *SMPPSendResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type SMPPStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SMPPStatusRequest) Reset() {
	*x = SMPPStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPStatusRequest) ProtoMessage() {}

func (x *SMPPStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPStatusRequest.ProtoReflect.Descriptor instead.
func (*SMPPStatusRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{3}
}

func (x *SMPPStatusRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *SMPPStatusRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type SMPPStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       SMPPStatusResponse_State       `protobuf:"varint,1,opt,name=state,proto3,enum=ric.notify.SMPPStatusResponse_State" json:"state,omitempty"`
	Description string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SmppStatus  *SMPPStatusResponse_SMPPStatus `protobuf:"bytes,3,opt,name=smpp_status,json=smppStatus,proto3" json:"smpp_status,omitempty"`
}

func (x *SMPPStatusResponse) Reset() {
	*x = SMPPStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPStatusResponse) ProtoMessage() {}

func (x *SMPPStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPStatusResponse.ProtoReflect.Descriptor instead.
func (*SMPPStatusResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{4}
}

func (x *SMPPStatusResponse) GetState() SMPPStatusResponse_State {
	if x != nil {
		return x.State
	}
	return SMPPStatusResponse_UNKNOWN
}

func (x *SMPPStatusResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SMPPStatusResponse) GetSmppStatus() *SMPPStatusResponse_SMPPStatus {
	if x != nil {
		return x.SmppStatus
	}
	return nil
}

type SMPPGatewayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *SMPPGatewayInfoRequest) Reset() {
	*x = SMPPGatewayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPGatewayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPGatewayInfoRequest) ProtoMessage() {}

func (x *SMPPGatewayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPGatewayInfoRequest.ProtoReflect.Descriptor instead.
func (*SMPPGatewayInfoRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{5}
}

func (x *SMPPGatewayInfoRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type SMPPGatewayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool  `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Uptime int64 `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *SMPPGatewayInfoResponse) Reset() {
	*x = SMPPGatewayInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPGatewayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPGatewayInfoResponse) ProtoMessage() {}

func (x *SMPPGatewayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPGatewayInfoResponse.ProtoReflect.Descriptor instead.
func (*SMPPGatewayInfoResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{6}
}

func (x *SMPPGatewayInfoResponse) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *SMPPGatewayInfoResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type SMPPCheckGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host       string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port       int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Username   string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	SystemType string `protobuf:"bytes,5,opt,name=system_type,json=systemType,proto3" json:"system_type,omitempty"`
}

func (x *SMPPCheckGatewayRequest) Reset() {
	*x = SMPPCheckGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPCheckGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPCheckGatewayRequest) ProtoMessage() {}

func (x *SMPPCheckGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPCheckGatewayRequest.ProtoReflect.Descriptor instead.
func (*SMPPCheckGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{7}
}

func (x *SMPPCheckGatewayRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SMPPCheckGatewayRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SMPPCheckGatewayRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SMPPCheckGatewayRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SMPPCheckGatewayRequest) GetSystemType() string {
	if x != nil {
		return x.SystemType
	}
	return ""
}

type SMPPCheckGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SMPPCheckGatewayResponse) Reset() {
	*x = SMPPCheckGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPCheckGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPCheckGatewayResponse) ProtoMessage() {}

func (x *SMPPCheckGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPCheckGatewayResponse.ProtoReflect.Descriptor instead.
func (*SMPPCheckGatewayResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{8}
}

func (x *SMPPCheckGatewayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Content     []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{9}
}

func (x *Attachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Attachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Attachment) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SMTPSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	GatewayId string       `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// following fields override default gateway info
	To          []string            `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
	Sender      string              `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	Subject     string              `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	TextBody    string              `protobuf:"bytes,6,opt,name=text_body,json=textBody,proto3" json:"text_body,omitempty"`
	HtmlBody    string              `protobuf:"bytes,7,opt,name=html_body,json=htmlBody,proto3" json:"html_body,omitempty"`
	Host        string              `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32               `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`
	Username    string              `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Password    string              `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	UseStarttls *wrappers.BoolValue `protobuf:"bytes,12,opt,name=use_starttls,json=useStarttls,proto3" json:"use_starttls,omitempty"`
	UseSsl      *wrappers.BoolValue `protobuf:"bytes,13,opt,name=use_ssl,json=useSsl,proto3" json:"use_ssl,omitempty"`
	Attachments []*Attachment       `protobuf:"bytes,14,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *SMTPSendRequest) Reset() {
	*x = SMTPSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPSendRequest) ProtoMessage() {}

func (x *SMTPSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPSendRequest.ProtoReflect.Descriptor instead.
func (*SMTPSendRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{10}
}

func (x *SMTPSendRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SMTPSendRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *SMTPSendRequest) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SMTPSendRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SMTPSendRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SMTPSendRequest) GetTextBody() string {
	if x != nil {
		return x.TextBody
	}
	return ""
}

func (x *SMTPSendRequest) GetHtmlBody() string {
	if x != nil {
		return x.HtmlBody
	}
	return ""
}

func (x *SMTPSendRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SMTPSendRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SMTPSendRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SMTPSendRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SMTPSendRequest) GetUseStarttls() *wrappers.BoolValue {
	if x != nil {
		return x.UseStarttls
	}
	return nil
}

func (x *SMTPSendRequest) GetUseSsl() *wrappers.BoolValue {
	if x != nil {
		return x.UseSsl
	}
	return nil
}

func (x *SMTPSendRequest) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type SMTPSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SMTPSendResponse) Reset() {
	*x = SMTPSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPSendResponse) ProtoMessage() {}

func (x *SMTPSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPSendResponse.ProtoReflect.Descriptor instead.
func (*SMTPSendResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{11}
}

type SMTPGatewayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *SMTPGatewayInfoRequest) Reset() {
	*x = SMTPGatewayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPGatewayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPGatewayInfoRequest) ProtoMessage() {}

func (x *SMTPGatewayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPGatewayInfoRequest.ProtoReflect.Descriptor instead.
func (*SMTPGatewayInfoRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{12}
}

func (x *SMTPGatewayInfoRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type SMTPGatewayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default gateway info
	GatewayId   string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Sender      string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Host        string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Username    string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	UseStarttls bool   `protobuf:"varint,7,opt,name=use_starttls,json=useStarttls,proto3" json:"use_starttls,omitempty"`
	UseSsl      bool   `protobuf:"varint,8,opt,name=use_ssl,json=useSsl,proto3" json:"use_ssl,omitempty"`
	System      bool   `protobuf:"varint,9,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *SMTPGatewayInfoResponse) Reset() {
	*x = SMTPGatewayInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPGatewayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPGatewayInfoResponse) ProtoMessage() {}

func (x *SMTPGatewayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPGatewayInfoResponse.ProtoReflect.Descriptor instead.
func (*SMTPGatewayInfoResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{13}
}

func (x *SMTPGatewayInfoResponse) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *SMTPGatewayInfoResponse) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SMTPGatewayInfoResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SMTPGatewayInfoResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SMTPGatewayInfoResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SMTPGatewayInfoResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SMTPGatewayInfoResponse) GetUseStarttls() bool {
	if x != nil {
		return x.UseStarttls
	}
	return false
}

func (x *SMTPGatewayInfoResponse) GetUseSsl() bool {
	if x != nil {
		return x.UseSsl
	}
	return false
}

func (x *SMTPGatewayInfoResponse) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

type SMTPCheckGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host        string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Username    string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	UseStarttls bool   `protobuf:"varint,5,opt,name=use_starttls,json=useStarttls,proto3" json:"use_starttls,omitempty"`
	UseSsl      bool   `protobuf:"varint,6,opt,name=use_ssl,json=useSsl,proto3" json:"use_ssl,omitempty"`
}

func (x *SMTPCheckGatewayRequest) Reset() {
	*x = SMTPCheckGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPCheckGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPCheckGatewayRequest) ProtoMessage() {}

func (x *SMTPCheckGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPCheckGatewayRequest.ProtoReflect.Descriptor instead.
func (*SMTPCheckGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{14}
}

func (x *SMTPCheckGatewayRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SMTPCheckGatewayRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SMTPCheckGatewayRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SMTPCheckGatewayRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SMTPCheckGatewayRequest) GetUseStarttls() bool {
	if x != nil {
		return x.UseStarttls
	}
	return false
}

func (x *SMTPCheckGatewayRequest) GetUseSsl() bool {
	if x != nil {
		return x.UseSsl
	}
	return false
}

type SMTPCheckGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SMTPCheckGatewayResponse) Reset() {
	*x = SMTPCheckGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPCheckGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPCheckGatewayResponse) ProtoMessage() {}

func (x *SMTPCheckGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPCheckGatewayResponse.ProtoReflect.Descriptor instead.
func (*SMTPCheckGatewayResponse) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{15}
}

func (x *SMTPCheckGatewayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SMPPStatusResponse_SMPPStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId     string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgState  string `protobuf:"bytes,2,opt,name=msg_state,json=msgState,proto3" json:"msg_state,omitempty"`
	FinalDate string `protobuf:"bytes,3,opt,name=final_date,json=finalDate,proto3" json:"final_date,omitempty"`
	ErrCode   int32  `protobuf:"varint,4,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (x *SMPPStatusResponse_SMPPStatus) Reset() {
	*x = SMPPStatusResponse_SMPPStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_notify_ricnotify_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMPPStatusResponse_SMPPStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMPPStatusResponse_SMPPStatus) ProtoMessage() {}

func (x *SMPPStatusResponse_SMPPStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ric_notify_ricnotify_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMPPStatusResponse_SMPPStatus.ProtoReflect.Descriptor instead.
func (*SMPPStatusResponse_SMPPStatus) Descriptor() ([]byte, []int) {
	return file_ric_notify_ricnotify_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SMPPStatusResponse_SMPPStatus) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *SMPPStatusResponse_SMPPStatus) GetMsgState() string {
	if x != nil {
		return x.MsgState
	}
	return ""
}

func (x *SMPPStatusResponse_SMPPStatus) GetFinalDate() string {
	if x != nil {
		return x.FinalDate
	}
	return ""
}

func (x *SMPPStatusResponse_SMPPStatus) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

var File_ric_notify_ricnotify_proto protoreflect.FileDescriptor

var file_ric_notify_ricnotify_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x69, 0x63, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x72, 0x69, 0x63,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x69,
	0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70,
	0x61, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x11, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x12, 0x53, 0x4d, 0x50,
	0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x0b, 0x73, 0x6d, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x53, 0x4d, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73,
	0x6d, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x7a, 0x0a, 0x0a, 0x53, 0x4d, 0x50,
	0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58,
	0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x37, 0x0a, 0x16, 0x53, 0x4d, 0x50, 0x50,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x17, 0x53, 0x4d, 0x50, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a,
	0x17, 0x53, 0x4d, 0x50, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x53, 0x4d, 0x50,
	0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x65, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x0f, 0x53, 0x4d, 0x54, 0x50, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x6c, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x53, 0x73, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x12,
	0x0a, 0x10, 0x53, 0x4d, 0x54, 0x50, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x53, 0x4d, 0x54, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x17,
	0x53, 0x4d, 0x54, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x73, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x53, 0x4d, 0x54, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x73, 0x6c, 0x22, 0x34, 0x0a, 0x18, 0x53, 0x4d,
	0x54, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x32, 0xc5, 0x02, 0x0a, 0x04, 0x53, 0x4d, 0x50, 0x50, 0x12, 0x41, 0x0a, 0x04, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x1b, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53,
	0x4d, 0x50, 0x50, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x50, 0x50, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x53, 0x4d, 0x50, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfc, 0x01, 0x0a, 0x04, 0x53, 0x4d, 0x54,
	0x50, 0x12, 0x41, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x53, 0x4d, 0x54, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53,
	0x4d, 0x54, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x2e, 0x2f, 0x72, 0x69, 0x63,
	0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x3b, 0x72, 0x69, 0x63, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_notify_ricnotify_proto_rawDescOnce sync.Once
	file_ric_notify_ricnotify_proto_rawDescData = file_ric_notify_ricnotify_proto_rawDesc
)

func file_ric_notify_ricnotify_proto_rawDescGZIP() []byte {
	file_ric_notify_ricnotify_proto_rawDescOnce.Do(func() {
		file_ric_notify_ricnotify_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_notify_ricnotify_proto_rawDescData)
	})
	return file_ric_notify_ricnotify_proto_rawDescData
}

var file_ric_notify_ricnotify_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ric_notify_ricnotify_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ric_notify_ricnotify_proto_goTypes = []interface{}{
	(SMPPStatusResponse_State)(0),         // 0: ric.notify.SMPPStatusResponse.State
	(*UserContext)(nil),                   // 1: ric.notify.UserContext
	(*SMPPSendRequest)(nil),               // 2: ric.notify.SMPPSendRequest
	(*SMPPSendResponse)(nil),              // 3: ric.notify.SMPPSendResponse
	(*SMPPStatusRequest)(nil),             // 4: ric.notify.SMPPStatusRequest
	(*SMPPStatusResponse)(nil),            // 5: ric.notify.SMPPStatusResponse
	(*SMPPGatewayInfoRequest)(nil),        // 6: ric.notify.SMPPGatewayInfoRequest
	(*SMPPGatewayInfoResponse)(nil),       // 7: ric.notify.SMPPGatewayInfoResponse
	(*SMPPCheckGatewayRequest)(nil),       // 8: ric.notify.SMPPCheckGatewayRequest
	(*SMPPCheckGatewayResponse)(nil),      // 9: ric.notify.SMPPCheckGatewayResponse
	(*Attachment)(nil),                    // 10: ric.notify.Attachment
	(*SMTPSendRequest)(nil),               // 11: ric.notify.SMTPSendRequest
	(*SMTPSendResponse)(nil),              // 12: ric.notify.SMTPSendResponse
	(*SMTPGatewayInfoRequest)(nil),        // 13: ric.notify.SMTPGatewayInfoRequest
	(*SMTPGatewayInfoResponse)(nil),       // 14: ric.notify.SMTPGatewayInfoResponse
	(*SMTPCheckGatewayRequest)(nil),       // 15: ric.notify.SMTPCheckGatewayRequest
	(*SMTPCheckGatewayResponse)(nil),      // 16: ric.notify.SMTPCheckGatewayResponse
	(*SMPPStatusResponse_SMPPStatus)(nil), // 17: ric.notify.SMPPStatusResponse.SMPPStatus
	(*wrappers.BoolValue)(nil),            // 18: google.protobuf.BoolValue
}
var file_ric_notify_ricnotify_proto_depIdxs = []int32{
	1,  // 0: ric.notify.SMPPSendRequest.ctx:type_name -> ric.notify.UserContext
	0,  // 1: ric.notify.SMPPStatusResponse.state:type_name -> ric.notify.SMPPStatusResponse.State
	17, // 2: ric.notify.SMPPStatusResponse.smpp_status:type_name -> ric.notify.SMPPStatusResponse.SMPPStatus
	1,  // 3: ric.notify.SMTPSendRequest.ctx:type_name -> ric.notify.UserContext
	18, // 4: ric.notify.SMTPSendRequest.use_starttls:type_name -> google.protobuf.BoolValue
	18, // 5: ric.notify.SMTPSendRequest.use_ssl:type_name -> google.protobuf.BoolValue
	10, // 6: ric.notify.SMTPSendRequest.attachments:type_name -> ric.notify.Attachment
	2,  // 7: ric.notify.SMPP.Send:input_type -> ric.notify.SMPPSendRequest
	4,  // 8: ric.notify.SMPP.Status:input_type -> ric.notify.SMPPStatusRequest
	6,  // 9: ric.notify.SMPP.GatewayInfo:input_type -> ric.notify.SMPPGatewayInfoRequest
	8,  // 10: ric.notify.SMPP.CheckGateway:input_type -> ric.notify.SMPPCheckGatewayRequest
	11, // 11: ric.notify.SMTP.Send:input_type -> ric.notify.SMTPSendRequest
	13, // 12: ric.notify.SMTP.GatewayInfo:input_type -> ric.notify.SMTPGatewayInfoRequest
	15, // 13: ric.notify.SMTP.CheckGateway:input_type -> ric.notify.SMTPCheckGatewayRequest
	3,  // 14: ric.notify.SMPP.Send:output_type -> ric.notify.SMPPSendResponse
	5,  // 15: ric.notify.SMPP.Status:output_type -> ric.notify.SMPPStatusResponse
	7,  // 16: ric.notify.SMPP.GatewayInfo:output_type -> ric.notify.SMPPGatewayInfoResponse
	9,  // 17: ric.notify.SMPP.CheckGateway:output_type -> ric.notify.SMPPCheckGatewayResponse
	12, // 18: ric.notify.SMTP.Send:output_type -> ric.notify.SMTPSendResponse
	14, // 19: ric.notify.SMTP.GatewayInfo:output_type -> ric.notify.SMTPGatewayInfoResponse
	16, // 20: ric.notify.SMTP.CheckGateway:output_type -> ric.notify.SMTPCheckGatewayResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_ric_notify_ricnotify_proto_init() }
func file_ric_notify_ricnotify_proto_init() {
	if File_ric_notify_ricnotify_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_notify_ricnotify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPGatewayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPGatewayInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPCheckGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPCheckGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPGatewayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPGatewayInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPCheckGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPCheckGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_notify_ricnotify_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMPPStatusResponse_SMPPStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_notify_ricnotify_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ric_notify_ricnotify_proto_goTypes,
		DependencyIndexes: file_ric_notify_ricnotify_proto_depIdxs,
		EnumInfos:         file_ric_notify_ricnotify_proto_enumTypes,
		MessageInfos:      file_ric_notify_ricnotify_proto_msgTypes,
	}.Build()
	File_ric_notify_ricnotify_proto = out.File
	file_ric_notify_ricnotify_proto_rawDesc = nil
	file_ric_notify_ricnotify_proto_goTypes = nil
	file_ric_notify_ricnotify_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SMPPClient is the client API for SMPP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SMPPClient interface {
	Send(ctx context.Context, in *SMPPSendRequest, opts ...grpc.CallOption) (*SMPPSendResponse, error)
	Status(ctx context.Context, in *SMPPStatusRequest, opts ...grpc.CallOption) (*SMPPStatusResponse, error)
	GatewayInfo(ctx context.Context, in *SMPPGatewayInfoRequest, opts ...grpc.CallOption) (*SMPPGatewayInfoResponse, error)
	CheckGateway(ctx context.Context, in *SMPPCheckGatewayRequest, opts ...grpc.CallOption) (*SMPPCheckGatewayResponse, error)
}

type sMPPClient struct {
	cc grpc.ClientConnInterface
}

func NewSMPPClient(cc grpc.ClientConnInterface) SMPPClient {
	return &sMPPClient{cc}
}

func (c *sMPPClient) Send(ctx context.Context, in *SMPPSendRequest, opts ...grpc.CallOption) (*SMPPSendResponse, error) {
	out := new(SMPPSendResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMPP/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMPPClient) Status(ctx context.Context, in *SMPPStatusRequest, opts ...grpc.CallOption) (*SMPPStatusResponse, error) {
	out := new(SMPPStatusResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMPP/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMPPClient) GatewayInfo(ctx context.Context, in *SMPPGatewayInfoRequest, opts ...grpc.CallOption) (*SMPPGatewayInfoResponse, error) {
	out := new(SMPPGatewayInfoResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMPP/GatewayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMPPClient) CheckGateway(ctx context.Context, in *SMPPCheckGatewayRequest, opts ...grpc.CallOption) (*SMPPCheckGatewayResponse, error) {
	out := new(SMPPCheckGatewayResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMPP/CheckGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMPPServer is the server API for SMPP service.
type SMPPServer interface {
	Send(context.Context, *SMPPSendRequest) (*SMPPSendResponse, error)
	Status(context.Context, *SMPPStatusRequest) (*SMPPStatusResponse, error)
	GatewayInfo(context.Context, *SMPPGatewayInfoRequest) (*SMPPGatewayInfoResponse, error)
	CheckGateway(context.Context, *SMPPCheckGatewayRequest) (*SMPPCheckGatewayResponse, error)
}

// UnimplementedSMPPServer can be embedded to have forward compatible implementations.
type UnimplementedSMPPServer struct {
}

func (*UnimplementedSMPPServer) Send(context.Context, *SMPPSendRequest) (*SMPPSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedSMPPServer) Status(context.Context, *SMPPStatusRequest) (*SMPPStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSMPPServer) GatewayInfo(context.Context, *SMPPGatewayInfoRequest) (*SMPPGatewayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayInfo not implemented")
}
func (*UnimplementedSMPPServer) CheckGateway(context.Context, *SMPPCheckGatewayRequest) (*SMPPCheckGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGateway not implemented")
}

func RegisterSMPPServer(s *grpc.Server, srv SMPPServer) {
	s.RegisterService(&_SMPP_serviceDesc, srv)
}

func _SMPP_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMPPSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMPP/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).Send(ctx, req.(*SMPPSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMPP_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMPPStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMPP/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).Status(ctx, req.(*SMPPStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMPP_GatewayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMPPGatewayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).GatewayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMPP/GatewayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).GatewayInfo(ctx, req.(*SMPPGatewayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMPP_CheckGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMPPCheckGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMPPServer).CheckGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMPP/CheckGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMPPServer).CheckGateway(ctx, req.(*SMPPCheckGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SMPP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.notify.SMPP",
	HandlerType: (*SMPPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SMPP_Send_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SMPP_Status_Handler,
		},
		{
			MethodName: "GatewayInfo",
			Handler:    _SMPP_GatewayInfo_Handler,
		},
		{
			MethodName: "CheckGateway",
			Handler:    _SMPP_CheckGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-notify/ricnotify.proto",
}

// SMTPClient is the client API for SMTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SMTPClient interface {
	Send(ctx context.Context, in *SMTPSendRequest, opts ...grpc.CallOption) (*SMTPSendResponse, error)
	GatewayInfo(ctx context.Context, in *SMTPGatewayInfoRequest, opts ...grpc.CallOption) (*SMTPGatewayInfoResponse, error)
	CheckGateway(ctx context.Context, in *SMTPCheckGatewayRequest, opts ...grpc.CallOption) (*SMTPCheckGatewayResponse, error)
}

type sMTPClient struct {
	cc grpc.ClientConnInterface
}

func NewSMTPClient(cc grpc.ClientConnInterface) SMTPClient {
	return &sMTPClient{cc}
}

func (c *sMTPClient) Send(ctx context.Context, in *SMTPSendRequest, opts ...grpc.CallOption) (*SMTPSendResponse, error) {
	out := new(SMTPSendResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMTP/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMTPClient) GatewayInfo(ctx context.Context, in *SMTPGatewayInfoRequest, opts ...grpc.CallOption) (*SMTPGatewayInfoResponse, error) {
	out := new(SMTPGatewayInfoResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMTP/GatewayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMTPClient) CheckGateway(ctx context.Context, in *SMTPCheckGatewayRequest, opts ...grpc.CallOption) (*SMTPCheckGatewayResponse, error) {
	out := new(SMTPCheckGatewayResponse)
	err := c.cc.Invoke(ctx, "/ric.notify.SMTP/CheckGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMTPServer is the server API for SMTP service.
type SMTPServer interface {
	Send(context.Context, *SMTPSendRequest) (*SMTPSendResponse, error)
	GatewayInfo(context.Context, *SMTPGatewayInfoRequest) (*SMTPGatewayInfoResponse, error)
	CheckGateway(context.Context, *SMTPCheckGatewayRequest) (*SMTPCheckGatewayResponse, error)
}

// UnimplementedSMTPServer can be embedded to have forward compatible implementations.
type UnimplementedSMTPServer struct {
}

func (*UnimplementedSMTPServer) Send(context.Context, *SMTPSendRequest) (*SMTPSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedSMTPServer) GatewayInfo(context.Context, *SMTPGatewayInfoRequest) (*SMTPGatewayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayInfo not implemented")
}
func (*UnimplementedSMTPServer) CheckGateway(context.Context, *SMTPCheckGatewayRequest) (*SMTPCheckGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGateway not implemented")
}

func RegisterSMTPServer(s *grpc.Server, srv SMTPServer) {
	s.RegisterService(&_SMTP_serviceDesc, srv)
}

func _SMTP_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMTPSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMTPServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMTP/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMTPServer).Send(ctx, req.(*SMTPSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMTP_GatewayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMTPGatewayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMTPServer).GatewayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMTP/GatewayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMTPServer).GatewayInfo(ctx, req.(*SMTPGatewayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMTP_CheckGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMTPCheckGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMTPServer).CheckGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.notify.SMTP/CheckGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMTPServer).CheckGateway(ctx, req.(*SMTPCheckGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SMTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.notify.SMTP",
	HandlerType: (*SMTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SMTP_Send_Handler,
		},
		{
			MethodName: "GatewayInfo",
			Handler:    _SMTP_GatewayInfo_Handler,
		},
		{
			MethodName: "CheckGateway",
			Handler:    _SMTP_CheckGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ric-notify/ricnotify.proto",
}
