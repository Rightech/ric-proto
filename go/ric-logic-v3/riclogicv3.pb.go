// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.7.0
// source: ric-logic-v3/riclogicv3.proto

package riclogicv3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpanId  string `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (x *UserContext) Reset() {
	*x = UserContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContext) ProtoMessage() {}

func (x *UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContext.ProtoReflect.Descriptor instead.
func (*UserContext) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{0}
}

func (x *UserContext) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UserContext) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserContext) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

type StatsCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Mean  float32 `protobuf:"fixed32,2,opt,name=mean,proto3" json:"mean,omitempty"`
}

func (x *StatsCounter) Reset() {
	*x = StatsCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsCounter) ProtoMessage() {}

func (x *StatsCounter) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsCounter.ProtoReflect.Descriptor instead.
func (*StatsCounter) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{1}
}

func (x *StatsCounter) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatsCounter) GetMean() float32 {
	if x != nil {
		return x.Mean
	}
	return 0
}

type AutomatonStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartedAt      int64         `protobuf:"varint,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	StoppedAt      int64         `protobuf:"varint,2,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	TransitionedAt int64         `protobuf:"varint,3,opt,name=transitioned_at,json=transitionedAt,proto3" json:"transitioned_at,omitempty"`
	Transitions    *StatsCounter `protobuf:"bytes,4,opt,name=transitions,proto3" json:"transitions,omitempty"`
	Actions        *StatsCounter `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
	Packets        *StatsCounter `protobuf:"bytes,6,opt,name=packets,proto3" json:"packets,omitempty"`
	Events         *StatsCounter `protobuf:"bytes,7,opt,name=events,proto3" json:"events,omitempty"`
	Halted         string        `protobuf:"bytes,8,opt,name=halted,proto3" json:"halted,omitempty"`
}

func (x *AutomatonStats) Reset() {
	*x = AutomatonStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomatonStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomatonStats) ProtoMessage() {}

func (x *AutomatonStats) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomatonStats.ProtoReflect.Descriptor instead.
func (*AutomatonStats) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{2}
}

func (x *AutomatonStats) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *AutomatonStats) GetStoppedAt() int64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *AutomatonStats) GetTransitionedAt() int64 {
	if x != nil {
		return x.TransitionedAt
	}
	return 0
}

func (x *AutomatonStats) GetTransitions() *StatsCounter {
	if x != nil {
		return x.Transitions
	}
	return nil
}

func (x *AutomatonStats) GetActions() *StatsCounter {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AutomatonStats) GetPackets() *StatsCounter {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *AutomatonStats) GetEvents() *StatsCounter {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AutomatonStats) GetHalted() string {
	if x != nil {
		return x.Halted
	}
	return ""
}

type AutomatonVarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*AutomatonVarValue_StringVal
	//	*AutomatonVarValue_DoubleVal
	//	*AutomatonVarValue_BoolVal
	Type isAutomatonVarValue_Type `protobuf_oneof:"type"`
}

func (x *AutomatonVarValue) Reset() {
	*x = AutomatonVarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomatonVarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomatonVarValue) ProtoMessage() {}

func (x *AutomatonVarValue) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomatonVarValue.ProtoReflect.Descriptor instead.
func (*AutomatonVarValue) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{3}
}

func (m *AutomatonVarValue) GetType() isAutomatonVarValue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AutomatonVarValue) GetStringVal() string {
	if x, ok := x.GetType().(*AutomatonVarValue_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *AutomatonVarValue) GetDoubleVal() float64 {
	if x, ok := x.GetType().(*AutomatonVarValue_DoubleVal); ok {
		return x.DoubleVal
	}
	return 0
}

func (x *AutomatonVarValue) GetBoolVal() bool {
	if x, ok := x.GetType().(*AutomatonVarValue_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

type isAutomatonVarValue_Type interface {
	isAutomatonVarValue_Type()
}

type AutomatonVarValue_StringVal struct {
	StringVal string `protobuf:"bytes,1,opt,name=string_val,json=stringVal,proto3,oneof"`
}

type AutomatonVarValue_DoubleVal struct {
	DoubleVal float64 `protobuf:"fixed64,2,opt,name=double_val,json=doubleVal,proto3,oneof"`
}

type AutomatonVarValue_BoolVal struct {
	BoolVal bool `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

func (*AutomatonVarValue_StringVal) isAutomatonVarValue_Type() {}

func (*AutomatonVarValue_DoubleVal) isAutomatonVarValue_Type() {}

func (*AutomatonVarValue_BoolVal) isAutomatonVarValue_Type() {}

type AutomatonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId    string                        `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string                        `protobuf:"bytes,2,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
	HashId      string                        `protobuf:"bytes,3,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	Revision    string                        `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Status      string                        `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	State       string                        `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	PrevState   string                        `protobuf:"bytes,7,opt,name=prev_state,json=prevState,proto3" json:"prev_state,omitempty"`
	PrevEvent   string                        `protobuf:"bytes,8,opt,name=prev_event,json=prevEvent,proto3" json:"prev_event,omitempty"`
	Stats       *AutomatonStats               `protobuf:"bytes,9,opt,name=stats,proto3" json:"stats,omitempty"`
	Logs        []*LogEntry                   `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
	Vars        map[string]*AutomatonVarValue `protobuf:"bytes,11,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AutomatonInfo) Reset() {
	*x = AutomatonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomatonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomatonInfo) ProtoMessage() {}

func (x *AutomatonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomatonInfo.ProtoReflect.Descriptor instead.
func (*AutomatonInfo) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{4}
}

func (x *AutomatonInfo) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *AutomatonInfo) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

func (x *AutomatonInfo) GetHashId() string {
	if x != nil {
		return x.HashId
	}
	return ""
}

func (x *AutomatonInfo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *AutomatonInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AutomatonInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AutomatonInfo) GetPrevState() string {
	if x != nil {
		return x.PrevState
	}
	return ""
}

func (x *AutomatonInfo) GetPrevEvent() string {
	if x != nil {
		return x.PrevEvent
	}
	return ""
}

func (x *AutomatonInfo) GetStats() *AutomatonStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *AutomatonInfo) GetLogs() []*LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *AutomatonInfo) GetVars() map[string]*AutomatonVarValue {
	if x != nil {
		return x.Vars
	}
	return nil
}

type AutomatonEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AutomatonEvent) Reset() {
	*x = AutomatonEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomatonEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomatonEvent) ProtoMessage() {}

func (x *AutomatonEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomatonEvent.ProtoReflect.Descriptor instead.
func (*AutomatonEvent) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{5}
}

func (x *AutomatonEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AutomatonEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type ActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Ms      int32  `protobuf:"varint,3,opt,name=ms,proto3" json:"ms,omitempty"`
}

func (x *ActionResult) Reset() {
	*x = ActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResult) ProtoMessage() {}

func (x *ActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResult.ProtoReflect.Descriptor instead.
func (*ActionResult) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{6}
}

func (x *ActionResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ActionResult) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *ActionResult) GetMs() int32 {
	if x != nil {
		return x.Ms
	}
	return 0
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ts          int64           `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	ObjectId    string          `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string          `protobuf:"bytes,4,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
	HashId      string          `protobuf:"bytes,5,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	Revision    string          `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
	Instance    string          `protobuf:"bytes,7,opt,name=instance,proto3" json:"instance,omitempty"`
	Category    string          `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
	Message     string          `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	Event       *AutomatonEvent `protobuf:"bytes,10,opt,name=event,proto3" json:"event,omitempty"`
	State       string          `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	PrevState   string          `protobuf:"bytes,12,opt,name=prev_state,json=prevState,proto3" json:"prev_state,omitempty"`
	Ctx         *UserContext    `protobuf:"bytes,13,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Result      *ActionResult   `protobuf:"bytes,14,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{7}
}

func (x *LogEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogEntry) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *LogEntry) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *LogEntry) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

func (x *LogEntry) GetHashId() string {
	if x != nil {
		return x.HashId
	}
	return ""
}

func (x *LogEntry) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *LogEntry) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *LogEntry) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *LogEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogEntry) GetEvent() *AutomatonEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *LogEntry) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LogEntry) GetPrevState() string {
	if x != nil {
		return x.PrevState
	}
	return ""
}

func (x *LogEntry) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *LogEntry) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetInstanceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInstanceInfoRequest) Reset() {
	*x = GetInstanceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceInfoRequest) ProtoMessage() {}

func (x *GetInstanceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceInfoRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{8}
}

type GetInstanceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname          string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Status            string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StartedAt         int64    `protobuf:"varint,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	ObjectsTotal      int64    `protobuf:"varint,4,opt,name=objects_total,json=objectsTotal,proto3" json:"objects_total,omitempty"`
	ContainersTotal   int64    `protobuf:"varint,5,opt,name=containers_total,json=containersTotal,proto3" json:"containers_total,omitempty"`
	ContainersRunning int64    `protobuf:"varint,6,opt,name=containers_running,json=containersRunning,proto3" json:"containers_running,omitempty"`
	ObjectIds         []string `protobuf:"bytes,7,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
}

func (x *GetInstanceInfoResponse) Reset() {
	*x = GetInstanceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceInfoResponse) ProtoMessage() {}

func (x *GetInstanceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInstanceInfoResponse) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{9}
}

func (x *GetInstanceInfoResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetInstanceInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetInstanceInfoResponse) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *GetInstanceInfoResponse) GetObjectsTotal() int64 {
	if x != nil {
		return x.ObjectsTotal
	}
	return 0
}

func (x *GetInstanceInfoResponse) GetContainersTotal() int64 {
	if x != nil {
		return x.ContainersTotal
	}
	return 0
}

func (x *GetInstanceInfoResponse) GetContainersRunning() int64 {
	if x != nil {
		return x.ContainersRunning
	}
	return 0
}

func (x *GetInstanceInfoResponse) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

type StartAutomatonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *UserContext                  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ObjectId    string                        `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string                        `protobuf:"bytes,3,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
	Vars        map[string]*AutomatonVarValue `protobuf:"bytes,4,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartAutomatonRequest) Reset() {
	*x = StartAutomatonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAutomatonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAutomatonRequest) ProtoMessage() {}

func (x *StartAutomatonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAutomatonRequest.ProtoReflect.Descriptor instead.
func (*StartAutomatonRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{10}
}

func (x *StartAutomatonRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *StartAutomatonRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *StartAutomatonRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

func (x *StartAutomatonRequest) GetVars() map[string]*AutomatonVarValue {
	if x != nil {
		return x.Vars
	}
	return nil
}

type StartAutomatonMultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ObjectIds   []string     `protobuf:"bytes,2,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
	AutomatonId string       `protobuf:"bytes,3,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
}

func (x *StartAutomatonMultiRequest) Reset() {
	*x = StartAutomatonMultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAutomatonMultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAutomatonMultiRequest) ProtoMessage() {}

func (x *StartAutomatonMultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAutomatonMultiRequest.ProtoReflect.Descriptor instead.
func (*StartAutomatonMultiRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{11}
}

func (x *StartAutomatonMultiRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *StartAutomatonMultiRequest) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *StartAutomatonMultiRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

type StartAutomatonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Automaton *AutomatonInfo `protobuf:"bytes,1,opt,name=automaton,proto3" json:"automaton,omitempty"`
}

func (x *StartAutomatonResponse) Reset() {
	*x = StartAutomatonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAutomatonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAutomatonResponse) ProtoMessage() {}

func (x *StartAutomatonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAutomatonResponse.ProtoReflect.Descriptor instead.
func (*StartAutomatonResponse) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{12}
}

func (x *StartAutomatonResponse) GetAutomaton() *AutomatonInfo {
	if x != nil {
		return x.Automaton
	}
	return nil
}

type StopAutomatonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ObjectId    string       `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string       `protobuf:"bytes,3,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
}

func (x *StopAutomatonRequest) Reset() {
	*x = StopAutomatonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAutomatonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAutomatonRequest) ProtoMessage() {}

func (x *StopAutomatonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAutomatonRequest.ProtoReflect.Descriptor instead.
func (*StopAutomatonRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{13}
}

func (x *StopAutomatonRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *StopAutomatonRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *StopAutomatonRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

type RunAutomatonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *UserContext                  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ObjectId    string                        `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string                        `protobuf:"bytes,3,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
	WaitFinal   bool                          `protobuf:"varint,4,opt,name=wait_final,json=waitFinal,proto3" json:"wait_final,omitempty"`
	WaitTimeout int32                         `protobuf:"varint,5,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
	OnRunning   string                        `protobuf:"bytes,6,opt,name=on_running,json=onRunning,proto3" json:"on_running,omitempty"`
	Vars        map[string]*AutomatonVarValue `protobuf:"bytes,7,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunAutomatonRequest) Reset() {
	*x = RunAutomatonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAutomatonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAutomatonRequest) ProtoMessage() {}

func (x *RunAutomatonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAutomatonRequest.ProtoReflect.Descriptor instead.
func (*RunAutomatonRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{14}
}

func (x *RunAutomatonRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RunAutomatonRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *RunAutomatonRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

func (x *RunAutomatonRequest) GetWaitFinal() bool {
	if x != nil {
		return x.WaitFinal
	}
	return false
}

func (x *RunAutomatonRequest) GetWaitTimeout() int32 {
	if x != nil {
		return x.WaitTimeout
	}
	return 0
}

func (x *RunAutomatonRequest) GetOnRunning() string {
	if x != nil {
		return x.OnRunning
	}
	return ""
}

func (x *RunAutomatonRequest) GetVars() map[string]*AutomatonVarValue {
	if x != nil {
		return x.Vars
	}
	return nil
}

type StopAutomatonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Automaton *AutomatonInfo `protobuf:"bytes,1,opt,name=automaton,proto3" json:"automaton,omitempty"`
}

func (x *StopAutomatonResponse) Reset() {
	*x = StopAutomatonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAutomatonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAutomatonResponse) ProtoMessage() {}

func (x *StopAutomatonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAutomatonResponse.ProtoReflect.Descriptor instead.
func (*StopAutomatonResponse) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{15}
}

func (x *StopAutomatonResponse) GetAutomaton() *AutomatonInfo {
	if x != nil {
		return x.Automaton
	}
	return nil
}

type GetAutomatonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIds    []string `protobuf:"bytes,1,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
	AutomatonIds []string `protobuf:"bytes,2,rep,name=automaton_ids,json=automatonIds,proto3" json:"automaton_ids,omitempty"`
	WithLogs     bool     `protobuf:"varint,3,opt,name=with_logs,json=withLogs,proto3" json:"with_logs,omitempty"`
	Watch        bool     `protobuf:"varint,4,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *GetAutomatonsRequest) Reset() {
	*x = GetAutomatonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAutomatonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutomatonsRequest) ProtoMessage() {}

func (x *GetAutomatonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutomatonsRequest.ProtoReflect.Descriptor instead.
func (*GetAutomatonsRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{16}
}

func (x *GetAutomatonsRequest) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *GetAutomatonsRequest) GetAutomatonIds() []string {
	if x != nil {
		return x.AutomatonIds
	}
	return nil
}

func (x *GetAutomatonsRequest) GetWithLogs() bool {
	if x != nil {
		return x.WithLogs
	}
	return false
}

func (x *GetAutomatonsRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

type GetAutomatonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Automatons []*AutomatonInfo `protobuf:"bytes,1,rep,name=automatons,proto3" json:"automatons,omitempty"`
}

func (x *GetAutomatonsResponse) Reset() {
	*x = GetAutomatonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAutomatonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutomatonsResponse) ProtoMessage() {}

func (x *GetAutomatonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutomatonsResponse.ProtoReflect.Descriptor instead.
func (*GetAutomatonsResponse) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{17}
}

func (x *GetAutomatonsResponse) GetAutomatons() []*AutomatonInfo {
	if x != nil {
		return x.Automatons
	}
	return nil
}

type EmitEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *UserContext `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ObjectId    string       `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string       `protobuf:"bytes,3,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
	Event       string       `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	Payload     string       `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *EmitEventRequest) Reset() {
	*x = EmitEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmitEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitEventRequest) ProtoMessage() {}

func (x *EmitEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitEventRequest.ProtoReflect.Descriptor instead.
func (*EmitEventRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{18}
}

func (x *EmitEventRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *EmitEventRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *EmitEventRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

func (x *EmitEventRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *EmitEventRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type EmitEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmitEventResponse) Reset() {
	*x = EmitEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmitEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitEventResponse) ProtoMessage() {}

func (x *EmitEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitEventResponse.ProtoReflect.Descriptor instead.
func (*EmitEventResponse) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{19}
}

type GetRuntimeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId    string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string `protobuf:"bytes,2,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
}

func (x *GetRuntimeInfoRequest) Reset() {
	*x = GetRuntimeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuntimeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuntimeInfoRequest) ProtoMessage() {}

func (x *GetRuntimeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuntimeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRuntimeInfoRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{20}
}

func (x *GetRuntimeInfoRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *GetRuntimeInfoRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

type UpdateAutomatonVarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *UserContext                  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ObjectId    string                        `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	AutomatonId string                        `protobuf:"bytes,3,opt,name=automaton_id,json=automatonId,proto3" json:"automaton_id,omitempty"`
	Vars        map[string]*AutomatonVarValue `protobuf:"bytes,4,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateAutomatonVarsRequest) Reset() {
	*x = UpdateAutomatonVarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutomatonVarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutomatonVarsRequest) ProtoMessage() {}

func (x *UpdateAutomatonVarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutomatonVarsRequest.ProtoReflect.Descriptor instead.
func (*UpdateAutomatonVarsRequest) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateAutomatonVarsRequest) GetCtx() *UserContext {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateAutomatonVarsRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *UpdateAutomatonVarsRequest) GetAutomatonId() string {
	if x != nil {
		return x.AutomatonId
	}
	return ""
}

func (x *UpdateAutomatonVarsRequest) GetVars() map[string]*AutomatonVarValue {
	if x != nil {
		return x.Vars
	}
	return nil
}

type UpdateAutomatonVarsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vars map[string]*AutomatonVarValue `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateAutomatonVarsResponse) Reset() {
	*x = UpdateAutomatonVarsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutomatonVarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutomatonVarsResponse) ProtoMessage() {}

func (x *UpdateAutomatonVarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ric_logic_v3_riclogicv3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutomatonVarsResponse.ProtoReflect.Descriptor instead.
func (*UpdateAutomatonVarsResponse) Descriptor() ([]byte, []int) {
	return file_ric_logic_v3_riclogicv3_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateAutomatonVarsResponse) GetVars() map[string]*AutomatonVarValue {
	if x != nil {
		return x.Vars
	}
	return nil
}

var File_ric_logic_v3_riclogicv3_proto protoreflect.FileDescriptor

var file_ric_logic_v3_riclogicv3_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x72, 0x69, 0x63, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2d, 0x76, 0x33, 0x2f, 0x72,
	0x69, 0x63, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x22, 0x5a, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d,
	0x65, 0x61, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6c,
	0x74, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xe5, 0x03, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x58, 0x0a,
	0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x50, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6d, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e,
	0x76, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e,
	0x76, 0x33, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x8a, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa1,
	0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x58, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x3f, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x52,
	0x75, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61,
	0x72, 0x73, 0x1a, 0x58, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x22, 0x8d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x45, 0x6d, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x6d, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76,
	0x33, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x58, 0x0a, 0x09, 0x56, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76,
	0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f,
	0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x58, 0x0a,
	0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xea, 0x05, 0x0a, 0x0a, 0x52, 0x69, 0x63, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x56, 0x33, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72,
	0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x28,
	0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x12,
	0x22, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x69,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x45, 0x6d,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x12,
	0x28, 0x2e, 0x72, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x69, 0x63, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x2e, 0x2f, 0x72, 0x69, 0x63, 0x2d, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2d, 0x76, 0x33, 0x3b, 0x72, 0x69, 0x63, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x76,
	0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ric_logic_v3_riclogicv3_proto_rawDescOnce sync.Once
	file_ric_logic_v3_riclogicv3_proto_rawDescData = file_ric_logic_v3_riclogicv3_proto_rawDesc
)

func file_ric_logic_v3_riclogicv3_proto_rawDescGZIP() []byte {
	file_ric_logic_v3_riclogicv3_proto_rawDescOnce.Do(func() {
		file_ric_logic_v3_riclogicv3_proto_rawDescData = protoimpl.X.CompressGZIP(file_ric_logic_v3_riclogicv3_proto_rawDescData)
	})
	return file_ric_logic_v3_riclogicv3_proto_rawDescData
}

var file_ric_logic_v3_riclogicv3_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_ric_logic_v3_riclogicv3_proto_goTypes = []interface{}{
	(*UserContext)(nil),                 // 0: ric.logic.v3.UserContext
	(*StatsCounter)(nil),                // 1: ric.logic.v3.StatsCounter
	(*AutomatonStats)(nil),              // 2: ric.logic.v3.AutomatonStats
	(*AutomatonVarValue)(nil),           // 3: ric.logic.v3.AutomatonVarValue
	(*AutomatonInfo)(nil),               // 4: ric.logic.v3.AutomatonInfo
	(*AutomatonEvent)(nil),              // 5: ric.logic.v3.AutomatonEvent
	(*ActionResult)(nil),                // 6: ric.logic.v3.ActionResult
	(*LogEntry)(nil),                    // 7: ric.logic.v3.LogEntry
	(*GetInstanceInfoRequest)(nil),      // 8: ric.logic.v3.GetInstanceInfoRequest
	(*GetInstanceInfoResponse)(nil),     // 9: ric.logic.v3.GetInstanceInfoResponse
	(*StartAutomatonRequest)(nil),       // 10: ric.logic.v3.StartAutomatonRequest
	(*StartAutomatonMultiRequest)(nil),  // 11: ric.logic.v3.StartAutomatonMultiRequest
	(*StartAutomatonResponse)(nil),      // 12: ric.logic.v3.StartAutomatonResponse
	(*StopAutomatonRequest)(nil),        // 13: ric.logic.v3.StopAutomatonRequest
	(*RunAutomatonRequest)(nil),         // 14: ric.logic.v3.RunAutomatonRequest
	(*StopAutomatonResponse)(nil),       // 15: ric.logic.v3.StopAutomatonResponse
	(*GetAutomatonsRequest)(nil),        // 16: ric.logic.v3.GetAutomatonsRequest
	(*GetAutomatonsResponse)(nil),       // 17: ric.logic.v3.GetAutomatonsResponse
	(*EmitEventRequest)(nil),            // 18: ric.logic.v3.EmitEventRequest
	(*EmitEventResponse)(nil),           // 19: ric.logic.v3.EmitEventResponse
	(*GetRuntimeInfoRequest)(nil),       // 20: ric.logic.v3.GetRuntimeInfoRequest
	(*UpdateAutomatonVarsRequest)(nil),  // 21: ric.logic.v3.UpdateAutomatonVarsRequest
	(*UpdateAutomatonVarsResponse)(nil), // 22: ric.logic.v3.UpdateAutomatonVarsResponse
	nil,                                 // 23: ric.logic.v3.AutomatonInfo.VarsEntry
	nil,                                 // 24: ric.logic.v3.StartAutomatonRequest.VarsEntry
	nil,                                 // 25: ric.logic.v3.RunAutomatonRequest.VarsEntry
	nil,                                 // 26: ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry
	nil,                                 // 27: ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry
}
var file_ric_logic_v3_riclogicv3_proto_depIdxs = []int32{
	1,  // 0: ric.logic.v3.AutomatonStats.transitions:type_name -> ric.logic.v3.StatsCounter
	1,  // 1: ric.logic.v3.AutomatonStats.actions:type_name -> ric.logic.v3.StatsCounter
	1,  // 2: ric.logic.v3.AutomatonStats.packets:type_name -> ric.logic.v3.StatsCounter
	1,  // 3: ric.logic.v3.AutomatonStats.events:type_name -> ric.logic.v3.StatsCounter
	2,  // 4: ric.logic.v3.AutomatonInfo.stats:type_name -> ric.logic.v3.AutomatonStats
	7,  // 5: ric.logic.v3.AutomatonInfo.logs:type_name -> ric.logic.v3.LogEntry
	23, // 6: ric.logic.v3.AutomatonInfo.vars:type_name -> ric.logic.v3.AutomatonInfo.VarsEntry
	5,  // 7: ric.logic.v3.LogEntry.event:type_name -> ric.logic.v3.AutomatonEvent
	0,  // 8: ric.logic.v3.LogEntry.ctx:type_name -> ric.logic.v3.UserContext
	6,  // 9: ric.logic.v3.LogEntry.result:type_name -> ric.logic.v3.ActionResult
	0,  // 10: ric.logic.v3.StartAutomatonRequest.ctx:type_name -> ric.logic.v3.UserContext
	24, // 11: ric.logic.v3.StartAutomatonRequest.vars:type_name -> ric.logic.v3.StartAutomatonRequest.VarsEntry
	0,  // 12: ric.logic.v3.StartAutomatonMultiRequest.ctx:type_name -> ric.logic.v3.UserContext
	4,  // 13: ric.logic.v3.StartAutomatonResponse.automaton:type_name -> ric.logic.v3.AutomatonInfo
	0,  // 14: ric.logic.v3.StopAutomatonRequest.ctx:type_name -> ric.logic.v3.UserContext
	0,  // 15: ric.logic.v3.RunAutomatonRequest.ctx:type_name -> ric.logic.v3.UserContext
	25, // 16: ric.logic.v3.RunAutomatonRequest.vars:type_name -> ric.logic.v3.RunAutomatonRequest.VarsEntry
	4,  // 17: ric.logic.v3.StopAutomatonResponse.automaton:type_name -> ric.logic.v3.AutomatonInfo
	4,  // 18: ric.logic.v3.GetAutomatonsResponse.automatons:type_name -> ric.logic.v3.AutomatonInfo
	0,  // 19: ric.logic.v3.EmitEventRequest.ctx:type_name -> ric.logic.v3.UserContext
	0,  // 20: ric.logic.v3.UpdateAutomatonVarsRequest.ctx:type_name -> ric.logic.v3.UserContext
	26, // 21: ric.logic.v3.UpdateAutomatonVarsRequest.vars:type_name -> ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry
	27, // 22: ric.logic.v3.UpdateAutomatonVarsResponse.vars:type_name -> ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry
	3,  // 23: ric.logic.v3.AutomatonInfo.VarsEntry.value:type_name -> ric.logic.v3.AutomatonVarValue
	3,  // 24: ric.logic.v3.StartAutomatonRequest.VarsEntry.value:type_name -> ric.logic.v3.AutomatonVarValue
	3,  // 25: ric.logic.v3.RunAutomatonRequest.VarsEntry.value:type_name -> ric.logic.v3.AutomatonVarValue
	3,  // 26: ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry.value:type_name -> ric.logic.v3.AutomatonVarValue
	3,  // 27: ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry.value:type_name -> ric.logic.v3.AutomatonVarValue
	8,  // 28: ric.logic.v3.RicLogicV3.GetInstanceInfo:input_type -> ric.logic.v3.GetInstanceInfoRequest
	16, // 29: ric.logic.v3.RicLogicV3.GetAutomatons:input_type -> ric.logic.v3.GetAutomatonsRequest
	10, // 30: ric.logic.v3.RicLogicV3.StartAutomaton:input_type -> ric.logic.v3.StartAutomatonRequest
	11, // 31: ric.logic.v3.RicLogicV3.StartAutomatonMulti:input_type -> ric.logic.v3.StartAutomatonMultiRequest
	13, // 32: ric.logic.v3.RicLogicV3.StopAutomaton:input_type -> ric.logic.v3.StopAutomatonRequest
	14, // 33: ric.logic.v3.RicLogicV3.RunAutomaton:input_type -> ric.logic.v3.RunAutomatonRequest
	18, // 34: ric.logic.v3.RicLogicV3.EmitEvent:input_type -> ric.logic.v3.EmitEventRequest
	21, // 35: ric.logic.v3.RicLogicV3.UpdateAutomatonVars:input_type -> ric.logic.v3.UpdateAutomatonVarsRequest
	9,  // 36: ric.logic.v3.RicLogicV3.GetInstanceInfo:output_type -> ric.logic.v3.GetInstanceInfoResponse
	4,  // 37: ric.logic.v3.RicLogicV3.GetAutomatons:output_type -> ric.logic.v3.AutomatonInfo
	12, // 38: ric.logic.v3.RicLogicV3.StartAutomaton:output_type -> ric.logic.v3.StartAutomatonResponse
	12, // 39: ric.logic.v3.RicLogicV3.StartAutomatonMulti:output_type -> ric.logic.v3.StartAutomatonResponse
	15, // 40: ric.logic.v3.RicLogicV3.StopAutomaton:output_type -> ric.logic.v3.StopAutomatonResponse
	4,  // 41: ric.logic.v3.RicLogicV3.RunAutomaton:output_type -> ric.logic.v3.AutomatonInfo
	19, // 42: ric.logic.v3.RicLogicV3.EmitEvent:output_type -> ric.logic.v3.EmitEventResponse
	22, // 43: ric.logic.v3.RicLogicV3.UpdateAutomatonVars:output_type -> ric.logic.v3.UpdateAutomatonVarsResponse
	36, // [36:44] is the sub-list for method output_type
	28, // [28:36] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_ric_logic_v3_riclogicv3_proto_init() }
func file_ric_logic_v3_riclogicv3_proto_init() {
	if File_ric_logic_v3_riclogicv3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ric_logic_v3_riclogicv3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomatonStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomatonVarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomatonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutomatonEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAutomatonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAutomatonMultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAutomatonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAutomatonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunAutomatonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAutomatonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAutomatonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAutomatonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmitEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmitEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuntimeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutomatonVarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ric_logic_v3_riclogicv3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutomatonVarsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ric_logic_v3_riclogicv3_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AutomatonVarValue_StringVal)(nil),
		(*AutomatonVarValue_DoubleVal)(nil),
		(*AutomatonVarValue_BoolVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ric_logic_v3_riclogicv3_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ric_logic_v3_riclogicv3_proto_goTypes,
		DependencyIndexes: file_ric_logic_v3_riclogicv3_proto_depIdxs,
		MessageInfos:      file_ric_logic_v3_riclogicv3_proto_msgTypes,
	}.Build()
	File_ric_logic_v3_riclogicv3_proto = out.File
	file_ric_logic_v3_riclogicv3_proto_rawDesc = nil
	file_ric_logic_v3_riclogicv3_proto_goTypes = nil
	file_ric_logic_v3_riclogicv3_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RicLogicV3Client is the client API for RicLogicV3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RicLogicV3Client interface {
	GetInstanceInfo(ctx context.Context, in *GetInstanceInfoRequest, opts ...grpc.CallOption) (*GetInstanceInfoResponse, error)
	GetAutomatons(ctx context.Context, in *GetAutomatonsRequest, opts ...grpc.CallOption) (RicLogicV3_GetAutomatonsClient, error)
	StartAutomaton(ctx context.Context, in *StartAutomatonRequest, opts ...grpc.CallOption) (*StartAutomatonResponse, error)
	StartAutomatonMulti(ctx context.Context, in *StartAutomatonMultiRequest, opts ...grpc.CallOption) (*StartAutomatonResponse, error)
	StopAutomaton(ctx context.Context, in *StopAutomatonRequest, opts ...grpc.CallOption) (*StopAutomatonResponse, error)
	RunAutomaton(ctx context.Context, in *RunAutomatonRequest, opts ...grpc.CallOption) (RicLogicV3_RunAutomatonClient, error)
	EmitEvent(ctx context.Context, in *EmitEventRequest, opts ...grpc.CallOption) (*EmitEventResponse, error)
	UpdateAutomatonVars(ctx context.Context, in *UpdateAutomatonVarsRequest, opts ...grpc.CallOption) (*UpdateAutomatonVarsResponse, error)
}

type ricLogicV3Client struct {
	cc grpc.ClientConnInterface
}

func NewRicLogicV3Client(cc grpc.ClientConnInterface) RicLogicV3Client {
	return &ricLogicV3Client{cc}
}

func (c *ricLogicV3Client) GetInstanceInfo(ctx context.Context, in *GetInstanceInfoRequest, opts ...grpc.CallOption) (*GetInstanceInfoResponse, error) {
	out := new(GetInstanceInfoResponse)
	err := c.cc.Invoke(ctx, "/ric.logic.v3.RicLogicV3/GetInstanceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricLogicV3Client) GetAutomatons(ctx context.Context, in *GetAutomatonsRequest, opts ...grpc.CallOption) (RicLogicV3_GetAutomatonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RicLogicV3_serviceDesc.Streams[0], "/ric.logic.v3.RicLogicV3/GetAutomatons", opts...)
	if err != nil {
		return nil, err
	}
	x := &ricLogicV3GetAutomatonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RicLogicV3_GetAutomatonsClient interface {
	Recv() (*AutomatonInfo, error)
	grpc.ClientStream
}

type ricLogicV3GetAutomatonsClient struct {
	grpc.ClientStream
}

func (x *ricLogicV3GetAutomatonsClient) Recv() (*AutomatonInfo, error) {
	m := new(AutomatonInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ricLogicV3Client) StartAutomaton(ctx context.Context, in *StartAutomatonRequest, opts ...grpc.CallOption) (*StartAutomatonResponse, error) {
	out := new(StartAutomatonResponse)
	err := c.cc.Invoke(ctx, "/ric.logic.v3.RicLogicV3/StartAutomaton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricLogicV3Client) StartAutomatonMulti(ctx context.Context, in *StartAutomatonMultiRequest, opts ...grpc.CallOption) (*StartAutomatonResponse, error) {
	out := new(StartAutomatonResponse)
	err := c.cc.Invoke(ctx, "/ric.logic.v3.RicLogicV3/StartAutomatonMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricLogicV3Client) StopAutomaton(ctx context.Context, in *StopAutomatonRequest, opts ...grpc.CallOption) (*StopAutomatonResponse, error) {
	out := new(StopAutomatonResponse)
	err := c.cc.Invoke(ctx, "/ric.logic.v3.RicLogicV3/StopAutomaton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricLogicV3Client) RunAutomaton(ctx context.Context, in *RunAutomatonRequest, opts ...grpc.CallOption) (RicLogicV3_RunAutomatonClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RicLogicV3_serviceDesc.Streams[1], "/ric.logic.v3.RicLogicV3/RunAutomaton", opts...)
	if err != nil {
		return nil, err
	}
	x := &ricLogicV3RunAutomatonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RicLogicV3_RunAutomatonClient interface {
	Recv() (*AutomatonInfo, error)
	grpc.ClientStream
}

type ricLogicV3RunAutomatonClient struct {
	grpc.ClientStream
}

func (x *ricLogicV3RunAutomatonClient) Recv() (*AutomatonInfo, error) {
	m := new(AutomatonInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ricLogicV3Client) EmitEvent(ctx context.Context, in *EmitEventRequest, opts ...grpc.CallOption) (*EmitEventResponse, error) {
	out := new(EmitEventResponse)
	err := c.cc.Invoke(ctx, "/ric.logic.v3.RicLogicV3/EmitEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricLogicV3Client) UpdateAutomatonVars(ctx context.Context, in *UpdateAutomatonVarsRequest, opts ...grpc.CallOption) (*UpdateAutomatonVarsResponse, error) {
	out := new(UpdateAutomatonVarsResponse)
	err := c.cc.Invoke(ctx, "/ric.logic.v3.RicLogicV3/UpdateAutomatonVars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RicLogicV3Server is the server API for RicLogicV3 service.
type RicLogicV3Server interface {
	GetInstanceInfo(context.Context, *GetInstanceInfoRequest) (*GetInstanceInfoResponse, error)
	GetAutomatons(*GetAutomatonsRequest, RicLogicV3_GetAutomatonsServer) error
	StartAutomaton(context.Context, *StartAutomatonRequest) (*StartAutomatonResponse, error)
	StartAutomatonMulti(context.Context, *StartAutomatonMultiRequest) (*StartAutomatonResponse, error)
	StopAutomaton(context.Context, *StopAutomatonRequest) (*StopAutomatonResponse, error)
	RunAutomaton(*RunAutomatonRequest, RicLogicV3_RunAutomatonServer) error
	EmitEvent(context.Context, *EmitEventRequest) (*EmitEventResponse, error)
	UpdateAutomatonVars(context.Context, *UpdateAutomatonVarsRequest) (*UpdateAutomatonVarsResponse, error)
}

// UnimplementedRicLogicV3Server can be embedded to have forward compatible implementations.
type UnimplementedRicLogicV3Server struct {
}

func (*UnimplementedRicLogicV3Server) GetInstanceInfo(context.Context, *GetInstanceInfoRequest) (*GetInstanceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceInfo not implemented")
}
func (*UnimplementedRicLogicV3Server) GetAutomatons(*GetAutomatonsRequest, RicLogicV3_GetAutomatonsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAutomatons not implemented")
}
func (*UnimplementedRicLogicV3Server) StartAutomaton(context.Context, *StartAutomatonRequest) (*StartAutomatonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAutomaton not implemented")
}
func (*UnimplementedRicLogicV3Server) StartAutomatonMulti(context.Context, *StartAutomatonMultiRequest) (*StartAutomatonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAutomatonMulti not implemented")
}
func (*UnimplementedRicLogicV3Server) StopAutomaton(context.Context, *StopAutomatonRequest) (*StopAutomatonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAutomaton not implemented")
}
func (*UnimplementedRicLogicV3Server) RunAutomaton(*RunAutomatonRequest, RicLogicV3_RunAutomatonServer) error {
	return status.Errorf(codes.Unimplemented, "method RunAutomaton not implemented")
}
func (*UnimplementedRicLogicV3Server) EmitEvent(context.Context, *EmitEventRequest) (*EmitEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitEvent not implemented")
}
func (*UnimplementedRicLogicV3Server) UpdateAutomatonVars(context.Context, *UpdateAutomatonVarsRequest) (*UpdateAutomatonVarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomatonVars not implemented")
}

func RegisterRicLogicV3Server(s *grpc.Server, srv RicLogicV3Server) {
	s.RegisterService(&_RicLogicV3_serviceDesc, srv)
}

func _RicLogicV3_GetInstanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicLogicV3Server).GetInstanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.logic.v3.RicLogicV3/GetInstanceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicLogicV3Server).GetInstanceInfo(ctx, req.(*GetInstanceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicLogicV3_GetAutomatons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAutomatonsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RicLogicV3Server).GetAutomatons(m, &ricLogicV3GetAutomatonsServer{stream})
}

type RicLogicV3_GetAutomatonsServer interface {
	Send(*AutomatonInfo) error
	grpc.ServerStream
}

type ricLogicV3GetAutomatonsServer struct {
	grpc.ServerStream
}

func (x *ricLogicV3GetAutomatonsServer) Send(m *AutomatonInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _RicLogicV3_StartAutomaton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAutomatonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicLogicV3Server).StartAutomaton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.logic.v3.RicLogicV3/StartAutomaton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicLogicV3Server).StartAutomaton(ctx, req.(*StartAutomatonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicLogicV3_StartAutomatonMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAutomatonMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicLogicV3Server).StartAutomatonMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.logic.v3.RicLogicV3/StartAutomatonMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicLogicV3Server).StartAutomatonMulti(ctx, req.(*StartAutomatonMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicLogicV3_StopAutomaton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAutomatonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicLogicV3Server).StopAutomaton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.logic.v3.RicLogicV3/StopAutomaton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicLogicV3Server).StopAutomaton(ctx, req.(*StopAutomatonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicLogicV3_RunAutomaton_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunAutomatonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RicLogicV3Server).RunAutomaton(m, &ricLogicV3RunAutomatonServer{stream})
}

type RicLogicV3_RunAutomatonServer interface {
	Send(*AutomatonInfo) error
	grpc.ServerStream
}

type ricLogicV3RunAutomatonServer struct {
	grpc.ServerStream
}

func (x *ricLogicV3RunAutomatonServer) Send(m *AutomatonInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _RicLogicV3_EmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicLogicV3Server).EmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.logic.v3.RicLogicV3/EmitEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicLogicV3Server).EmitEvent(ctx, req.(*EmitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicLogicV3_UpdateAutomatonVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutomatonVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicLogicV3Server).UpdateAutomatonVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ric.logic.v3.RicLogicV3/UpdateAutomatonVars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicLogicV3Server).UpdateAutomatonVars(ctx, req.(*UpdateAutomatonVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RicLogicV3_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ric.logic.v3.RicLogicV3",
	HandlerType: (*RicLogicV3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstanceInfo",
			Handler:    _RicLogicV3_GetInstanceInfo_Handler,
		},
		{
			MethodName: "StartAutomaton",
			Handler:    _RicLogicV3_StartAutomaton_Handler,
		},
		{
			MethodName: "StartAutomatonMulti",
			Handler:    _RicLogicV3_StartAutomatonMulti_Handler,
		},
		{
			MethodName: "StopAutomaton",
			Handler:    _RicLogicV3_StopAutomaton_Handler,
		},
		{
			MethodName: "EmitEvent",
			Handler:    _RicLogicV3_EmitEvent_Handler,
		},
		{
			MethodName: "UpdateAutomatonVars",
			Handler:    _RicLogicV3_UpdateAutomatonVars_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAutomatons",
			Handler:       _RicLogicV3_GetAutomatons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunAutomaton",
			Handler:       _RicLogicV3_RunAutomaton_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ric-logic-v3/riclogicv3.proto",
}
