syntax = "proto3";

package ric.geo;

option go_package = "./ric-geo;ricgeo";

service Watch {
  option deprecated = true;
  rpc WatchGeofence(WatchGeofenceRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc StopWatchGeofence(WatchGeofenceRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc WatchRoom(WatchRoomRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc StopWatchRoom(WatchRoomRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc WatchRoute(WatchRouteRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc StopWatchRoute(WatchRouteRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc UpdateGeo(UpdateGeoRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  rpc GetObjectInfo(GetObjectInfoRequest) returns (GetObjectInfoResponse) {
    option deprecated = true;
  }
}

message EmptyResponse {}

message WatchGeofenceRequest {
  enum EventType {
    ALL = 0;
    GEOFENCE_ENTER = 1;
    GEOFENCE_LEAVE = 2;
  }
  string object_id = 1;
  EventType event_type = 2;
  repeated string geofences_ids = 3;
  repeated string tags = 4;
}

message WatchRoomRequest {
  enum EventType {
    ALL = 0;
    ROOM_ENTER = 1;
    ROOM_LEAVE = 2;
  }
  string object_id = 1;
  EventType event_type = 2;
  repeated Fence fences = 3;
  repeated string tags = 4;
}

message Fence {
  string geofence_id = 1;
  string floor_id = 2;
  string room_id = 3;
}

message WatchRouteRequest {
  enum EventType {
    ALL = 0;
    ROUTE_ON = 1;
    ROUTE_OFF = 2;
  }
  string object_id = 1;
  EventType event_type = 2;
  repeated string routes_ids = 3;
  repeated string tags = 4;
}

message UpdateGeoRequest {
  string geofence_id = 1;
  string shape_id = 2;
}

message GetObjectInfoRequest {
  string object_id = 1;
}

message GetObjectInfoResponse {
  message ObjectGeofenceInfo {
    string geofence_id = 1;
    bool is_in = 2;
    int64 last_packet_time = 3;
    int64 last_enter_time = 4;
    int64 last_leave_time = 5;
  }
  repeated ObjectGeofenceInfo geofences = 1;
}

service WatchV2 {
  rpc Watch(WatchRequest) returns (EmptyResponse);
  rpc Stop(StopRequest) returns (EmptyResponse);
  rpc UpdateGeo(UpdateGeoRequest) returns (EmptyResponse);
  rpc GetObjectInfo(GetObjectInfoRequest) returns (GetObjectInfoResponse);
}

message WatchRequest {
  enum EventType {
    UNDEFINED = 0;
    GEOFENCE_ENTER = 1;
    GEOFENCE_LEAVE = 2;
    GEOFENCE_BOTH = 3;
    ROUTE_ON = 5;
    ROUTE_OFF = 6;
    ROUTE_BOTH = 7;
    ROOM_ENTER = 9;
    ROOM_LEAVE = 10;
    ROOM_BOTH = 11;
  }
  string object_id = 1;
  EventType event_type = 2;
  repeated Fence fences = 3;
  repeated string tags = 4;
}

message StopRequest {
  string object_id = 1;
  repeated Fence fences = 2;
  repeated string tags = 3;
}

service AttendanceControl {
  rpc Control(ControlRequest) returns (EmptyResponse);
}

message ControlRequest {
  string object_id = 1;
  Time time = 2;
  Circle circle = 3;
  repeated string tags = 4;
}

message Time {
  int64 start = 1;
  int64 interval = 2;
}

message Circle {
  double lat = 1;
  double lon = 2;
  double radius = 3;
}

service Osm {
  rpc Geocode(GeocodeRequest) returns (OsmResponse);
  rpc GeocodeReverse(GeocodeReverseRequest) returns (OsmResponse);
  rpc GetRoute(GetRouteRequest) returns (OsmResponse);
}

message OsmResponse {
  bytes data = 1; // json
}

message GeocodeRequest {
  string query = 1;
  string language = 2;
}

message Point {
  double lat = 1;
  double lon = 2;
}

message GeocodeReverseRequest {
  Point point = 1;
  string language = 2;
}

message GetRouteRequest {
  repeated Point coordinates = 1;
  bytes options = 2; // json
}

service Check {
  rpc CheckIn(CheckInRequest) returns (CheckInResponse);
}

message IndoorCircle {
  double x = 1;
  double y = 2;
  double z = 3;
  double radius = 4;
}

message Zone {
  Circle circle = 1;
  IndoorCircle indoor_circle = 2;
}

message IndoorPoint {
  double x = 1;
  double y = 2;
  double z = 3;
}

message Position {
  Point location = 1;
  IndoorPoint indoor_location = 2;
}

message CheckInRequest {
  Position position = 1;
  Zone zone = 2;
}

message CheckInResponse {
  bool in = 1;
}
