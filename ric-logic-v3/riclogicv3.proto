syntax = "proto3";

package ric.logic.v3;

option go_package = "./ric-logic-v3;riclogicv3";

service RicLogicV3 {
  rpc GetInstanceInfo(GetInstanceInfoRequest) returns (GetInstanceInfoResponse);
  rpc GetAutomatons(GetAutomatonsRequest) returns (stream AutomatonInfo);
  rpc StartAutomaton(StartAutomatonRequest) returns (StartAutomatonResponse);
  rpc StartAutomatonMulti(StartAutomatonMultiRequest) returns (StartAutomatonResponse);
  rpc StopAutomaton(StopAutomatonRequest) returns (StopAutomatonResponse);
  rpc RunAutomaton(RunAutomatonRequest) returns (stream AutomatonInfo);
  rpc EmitEvent(EmitEventRequest) returns (EmitEventResponse);
  rpc WaitEvent(WaitEventRequest) returns (WaitEventRequest);
  rpc UpdateAutomatonVars(UpdateAutomatonVarsRequest) returns (UpdateAutomatonVarsResponse);
}

message UserContext {
  string group_id = 1;
  string user_id = 2;
  string span_id = 3;
}

message StatsCounter {
  int64 count = 1;
  float mean = 2;
}

message AutomatonStats {
  int64 started_at = 1;
  int64 stopped_at = 2;
  int64 transitioned_at = 3;
  StatsCounter transitions = 4;
  StatsCounter actions = 5;
  StatsCounter packets = 6;
  StatsCounter events = 7;
  string halted = 8;
}

message AutomatonVarValue {
  oneof type {
    string string_val = 1;
    double double_val = 2;
    bool bool_val = 3;
  }
}

message AutomatonInfo {
  string object_id = 1;
  string automaton_id = 2;
  string hash_id = 3;
  string revision = 4;
  string status = 5;
  string state = 6;
  string prev_state = 7;
  string prev_event = 8;
  AutomatonStats stats = 9;
  repeated LogEntry logs = 10;
  map<string, AutomatonVarValue> vars = 11;
}

message AutomatonEvent {
  string type = 1;
  string payload = 2;
}

message ActionResult {
  string status = 1;
  string payload = 2;
  int32 ms = 3;
}

message LogEntry {
  string id = 1;
  int64 ts = 2;
  string object_id = 3;
  string automaton_id = 4;
  string hash_id = 5;
  string revision = 6;
  string instance = 7;
  string category = 8;
  string message = 9;
  AutomatonEvent event = 10;
  string state = 11;
  string prev_state = 12;
  UserContext ctx = 13;
  ActionResult result = 14;
}

message WaitCondition {
  string timeout = 1;
  string event = 2;
  string state = 3;
  string status = 4;
}

message GetInstanceInfoRequest {}

message GetInstanceInfoResponse {
  string hostname = 1;
  string status = 2;
  int64 started_at = 3;
  int64 objects_total = 4;
  int64 containers_total = 5;
  int64 containers_running = 6;
  repeated string object_ids = 7;
}

message StartAutomatonRequest {
  UserContext ctx = 1;
  string object_id = 2;
  string automaton_id = 3;
  map<string, AutomatonVarValue> vars = 4;
}

message StartAutomatonMultiRequest {
  UserContext ctx = 1;
  repeated string object_ids = 2;
  string automaton_id = 3;
}

message StartAutomatonResponse {
  AutomatonInfo automaton = 1;
}

message StopAutomatonRequest {
  UserContext ctx = 1;
  string object_id = 2;
  string automaton_id = 3;
}

message RunAutomatonRequest {
  UserContext ctx = 1;
  string object_id = 2;
  string automaton_id = 3;
  WaitCondition wait = 4;

  string on_running = 6;
  map<string, AutomatonVarValue> vars = 7;
}

message StopAutomatonResponse {
  AutomatonInfo automaton = 1;
}

message GetAutomatonsRequest {
  repeated string object_ids = 1;
  repeated string automaton_ids = 2;
  bool with_logs = 3;
  bool watch = 4;
}

message GetAutomatonsResponse {
  repeated AutomatonInfo automatons = 1;
}

message EmitEventRequest {
  UserContext ctx = 1;
  string object_id = 2;
  string automaton_id = 3;
  string event = 4;
  string payload = 5;
}

message EmitEventResponse {}

message WaitEventRequest {
  UserContext ctx = 1;
  string object_id = 2;
  string automaton_id = 3;
  WaitCondition wait = 4;
}

message WaitEventResponse {}

message GetRuntimeInfoRequest {
  string object_id = 1;
  string automaton_id = 2;
}

message UpdateAutomatonVarsRequest {
  UserContext ctx = 1;
  string object_id = 2;
  string automaton_id = 3;
  map<string, AutomatonVarValue> vars = 4;
}

message UpdateAutomatonVarsResponse {
  map<string, AutomatonVarValue> vars = 1;
}
