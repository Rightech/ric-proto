// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-code/riccode.proto

#ifndef PROTOBUF_INCLUDED_ric_2dcode_2friccode_2eproto
#define PROTOBUF_INCLUDED_ric_2dcode_2friccode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dcode_2friccode_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dcode_2friccode_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dcode_2friccode_2eproto();
namespace ric {
namespace code {
class BundleEsProgress;
class BundleEsProgressDefaultTypeInternal;
extern BundleEsProgressDefaultTypeInternal _BundleEsProgress_default_instance_;
class BundleEsRequest;
class BundleEsRequestDefaultTypeInternal;
extern BundleEsRequestDefaultTypeInternal _BundleEsRequest_default_instance_;
class InputRef;
class InputRefDefaultTypeInternal;
extern InputRefDefaultTypeInternal _InputRef_default_instance_;
class LibDefinition;
class LibDefinitionDefaultTypeInternal;
extern LibDefinitionDefaultTypeInternal _LibDefinition_default_instance_;
class LibRequest;
class LibRequestDefaultTypeInternal;
extern LibRequestDefaultTypeInternal _LibRequest_default_instance_;
class ParseConditionRequest;
class ParseConditionRequestDefaultTypeInternal;
extern ParseConditionRequestDefaultTypeInternal _ParseConditionRequest_default_instance_;
class ParseConditionRequest_AliasesEntry_DoNotUse;
class ParseConditionRequest_AliasesEntry_DoNotUseDefaultTypeInternal;
extern ParseConditionRequest_AliasesEntry_DoNotUseDefaultTypeInternal _ParseConditionRequest_AliasesEntry_DoNotUse_default_instance_;
class ParseConditionResponse;
class ParseConditionResponseDefaultTypeInternal;
extern ParseConditionResponseDefaultTypeInternal _ParseConditionResponse_default_instance_;
class TranspileRequest;
class TranspileRequestDefaultTypeInternal;
extern TranspileRequestDefaultTypeInternal _TranspileRequest_default_instance_;
class TranspileResponse;
class TranspileResponseDefaultTypeInternal;
extern TranspileResponseDefaultTypeInternal _TranspileResponse_default_instance_;
class VarDecl;
class VarDeclDefaultTypeInternal;
extern VarDeclDefaultTypeInternal _VarDecl_default_instance_;
}  // namespace code
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::code::BundleEsProgress* Arena::CreateMaybeMessage<::ric::code::BundleEsProgress>(Arena*);
template<> ::ric::code::BundleEsRequest* Arena::CreateMaybeMessage<::ric::code::BundleEsRequest>(Arena*);
template<> ::ric::code::InputRef* Arena::CreateMaybeMessage<::ric::code::InputRef>(Arena*);
template<> ::ric::code::LibDefinition* Arena::CreateMaybeMessage<::ric::code::LibDefinition>(Arena*);
template<> ::ric::code::LibRequest* Arena::CreateMaybeMessage<::ric::code::LibRequest>(Arena*);
template<> ::ric::code::ParseConditionRequest* Arena::CreateMaybeMessage<::ric::code::ParseConditionRequest>(Arena*);
template<> ::ric::code::ParseConditionRequest_AliasesEntry_DoNotUse* Arena::CreateMaybeMessage<::ric::code::ParseConditionRequest_AliasesEntry_DoNotUse>(Arena*);
template<> ::ric::code::ParseConditionResponse* Arena::CreateMaybeMessage<::ric::code::ParseConditionResponse>(Arena*);
template<> ::ric::code::TranspileRequest* Arena::CreateMaybeMessage<::ric::code::TranspileRequest>(Arena*);
template<> ::ric::code::TranspileResponse* Arena::CreateMaybeMessage<::ric::code::TranspileResponse>(Arena*);
template<> ::ric::code::VarDecl* Arena::CreateMaybeMessage<::ric::code::VarDecl>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace code {

// ===================================================================

class TranspileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.TranspileRequest) */ {
 public:
  TranspileRequest();
  virtual ~TranspileRequest();

  TranspileRequest(const TranspileRequest& from);

  inline TranspileRequest& operator=(const TranspileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TranspileRequest(TranspileRequest&& from) noexcept
    : TranspileRequest() {
    *this = ::std::move(from);
  }

  inline TranspileRequest& operator=(TranspileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TranspileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranspileRequest* internal_default_instance() {
    return reinterpret_cast<const TranspileRequest*>(
               &_TranspileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TranspileRequest* other);
  friend void swap(TranspileRequest& a, TranspileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TranspileRequest* New() const final {
    return CreateMaybeMessage<TranspileRequest>(nullptr);
  }

  TranspileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TranspileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TranspileRequest& from);
  void MergeFrom(const TranspileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranspileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.code.LibDefinition defs = 4;
  int defs_size() const;
  void clear_defs();
  static const int kDefsFieldNumber = 4;
  ::ric::code::LibDefinition* mutable_defs(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::code::LibDefinition >*
      mutable_defs();
  const ::ric::code::LibDefinition& defs(int index) const;
  ::ric::code::LibDefinition* add_defs();
  const ::google::protobuf::RepeatedPtrField< ::ric::code::LibDefinition >&
      defs() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string main = 3;
  void clear_main();
  static const int kMainFieldNumber = 3;
  const ::std::string& main() const;
  void set_main(const ::std::string& value);
  #if LANG_CXX11
  void set_main(::std::string&& value);
  #endif
  void set_main(const char* value);
  void set_main(const char* value, size_t size);
  ::std::string* mutable_main();
  ::std::string* release_main();
  void set_allocated_main(::std::string* main);

  // @@protoc_insertion_point(class_scope:ric.code.TranspileRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::code::LibDefinition > defs_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr main_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class TranspileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.TranspileResponse) */ {
 public:
  TranspileResponse();
  virtual ~TranspileResponse();

  TranspileResponse(const TranspileResponse& from);

  inline TranspileResponse& operator=(const TranspileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TranspileResponse(TranspileResponse&& from) noexcept
    : TranspileResponse() {
    *this = ::std::move(from);
  }

  inline TranspileResponse& operator=(TranspileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TranspileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranspileResponse* internal_default_instance() {
    return reinterpret_cast<const TranspileResponse*>(
               &_TranspileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TranspileResponse* other);
  friend void swap(TranspileResponse& a, TranspileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TranspileResponse* New() const final {
    return CreateMaybeMessage<TranspileResponse>(nullptr);
  }

  TranspileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TranspileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TranspileResponse& from);
  void MergeFrom(const TranspileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranspileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.code.LibRequest libs = 2;
  int libs_size() const;
  void clear_libs();
  static const int kLibsFieldNumber = 2;
  ::ric::code::LibRequest* mutable_libs(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::code::LibRequest >*
      mutable_libs();
  const ::ric::code::LibRequest& libs(int index) const;
  ::ric::code::LibRequest* add_libs();
  const ::google::protobuf::RepeatedPtrField< ::ric::code::LibRequest >&
      libs() const;

  // repeated .ric.code.VarDecl input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  ::ric::code::VarDecl* mutable_input(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >*
      mutable_input();
  const ::ric::code::VarDecl& input(int index) const;
  ::ric::code::VarDecl* add_input();
  const ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >&
      input() const;

  // repeated .ric.code.VarDecl output = 4;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 4;
  ::ric::code::VarDecl* mutable_output(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >*
      mutable_output();
  const ::ric::code::VarDecl& output(int index) const;
  ::ric::code::VarDecl* add_output();
  const ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >&
      output() const;

  // repeated .ric.code.InputRef refs = 5;
  int refs_size() const;
  void clear_refs();
  static const int kRefsFieldNumber = 5;
  ::ric::code::InputRef* mutable_refs(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::code::InputRef >*
      mutable_refs();
  const ::ric::code::InputRef& refs(int index) const;
  ::ric::code::InputRef* add_refs();
  const ::google::protobuf::RepeatedPtrField< ::ric::code::InputRef >&
      refs() const;

  // string code_es5 = 1;
  void clear_code_es5();
  static const int kCodeEs5FieldNumber = 1;
  const ::std::string& code_es5() const;
  void set_code_es5(const ::std::string& value);
  #if LANG_CXX11
  void set_code_es5(::std::string&& value);
  #endif
  void set_code_es5(const char* value);
  void set_code_es5(const char* value, size_t size);
  ::std::string* mutable_code_es5();
  ::std::string* release_code_es5();
  void set_allocated_code_es5(::std::string* code_es5);

  // @@protoc_insertion_point(class_scope:ric.code.TranspileResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::code::LibRequest > libs_;
  ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl > input_;
  ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl > output_;
  ::google::protobuf::RepeatedPtrField< ::ric::code::InputRef > refs_;
  ::google::protobuf::internal::ArenaStringPtr code_es5_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class InputRef final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.InputRef) */ {
 public:
  InputRef();
  virtual ~InputRef();

  InputRef(const InputRef& from);

  inline InputRef& operator=(const InputRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputRef(InputRef&& from) noexcept
    : InputRef() {
    *this = ::std::move(from);
  }

  inline InputRef& operator=(InputRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InputRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputRef* internal_default_instance() {
    return reinterpret_cast<const InputRef*>(
               &_InputRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(InputRef* other);
  friend void swap(InputRef& a, InputRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputRef* New() const final {
    return CreateMaybeMessage<InputRef>(nullptr);
  }

  InputRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputRef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputRef& from);
  void MergeFrom(const InputRef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.code.VarDecl vars = 2;
  int vars_size() const;
  void clear_vars();
  static const int kVarsFieldNumber = 2;
  ::ric::code::VarDecl* mutable_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >*
      mutable_vars();
  const ::ric::code::VarDecl& vars(int index) const;
  ::ric::code::VarDecl* add_vars();
  const ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >&
      vars() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ric.code.InputRef)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl > vars_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class VarDecl final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.VarDecl) */ {
 public:
  VarDecl();
  virtual ~VarDecl();

  VarDecl(const VarDecl& from);

  inline VarDecl& operator=(const VarDecl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VarDecl(VarDecl&& from) noexcept
    : VarDecl() {
    *this = ::std::move(from);
  }

  inline VarDecl& operator=(VarDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VarDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VarDecl* internal_default_instance() {
    return reinterpret_cast<const VarDecl*>(
               &_VarDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VarDecl* other);
  friend void swap(VarDecl& a, VarDecl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VarDecl* New() const final {
    return CreateMaybeMessage<VarDecl>(nullptr);
  }

  VarDecl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VarDecl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VarDecl& from);
  void MergeFrom(const VarDecl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarDecl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string default = 3;
  void clear_default_();
  static const int kDefaultFieldNumber = 3;
  const ::std::string& default_() const;
  void set_default_(const ::std::string& value);
  #if LANG_CXX11
  void set_default_(::std::string&& value);
  #endif
  void set_default_(const char* value);
  void set_default_(const char* value, size_t size);
  ::std::string* mutable_default_();
  ::std::string* release_default_();
  void set_allocated_default_(::std::string* default_);

  // @@protoc_insertion_point(class_scope:ric.code.VarDecl)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr default__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class LibDefinition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.LibDefinition) */ {
 public:
  LibDefinition();
  virtual ~LibDefinition();

  LibDefinition(const LibDefinition& from);

  inline LibDefinition& operator=(const LibDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LibDefinition(LibDefinition&& from) noexcept
    : LibDefinition() {
    *this = ::std::move(from);
  }

  inline LibDefinition& operator=(LibDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LibDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LibDefinition* internal_default_instance() {
    return reinterpret_cast<const LibDefinition*>(
               &_LibDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LibDefinition* other);
  friend void swap(LibDefinition& a, LibDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LibDefinition* New() const final {
    return CreateMaybeMessage<LibDefinition>(nullptr);
  }

  LibDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LibDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LibDefinition& from);
  void MergeFrom(const LibDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LibDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string def = 2;
  void clear_def();
  static const int kDefFieldNumber = 2;
  const ::std::string& def() const;
  void set_def(const ::std::string& value);
  #if LANG_CXX11
  void set_def(::std::string&& value);
  #endif
  void set_def(const char* value);
  void set_def(const char* value, size_t size);
  ::std::string* mutable_def();
  ::std::string* release_def();
  void set_allocated_def(::std::string* def);

  // @@protoc_insertion_point(class_scope:ric.code.LibDefinition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr def_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class LibRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.LibRequest) */ {
 public:
  LibRequest();
  virtual ~LibRequest();

  LibRequest(const LibRequest& from);

  inline LibRequest& operator=(const LibRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LibRequest(LibRequest&& from) noexcept
    : LibRequest() {
    *this = ::std::move(from);
  }

  inline LibRequest& operator=(LibRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LibRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LibRequest* internal_default_instance() {
    return reinterpret_cast<const LibRequest*>(
               &_LibRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LibRequest* other);
  friend void swap(LibRequest& a, LibRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LibRequest* New() const final {
    return CreateMaybeMessage<LibRequest>(nullptr);
  }

  LibRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LibRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LibRequest& from);
  void MergeFrom(const LibRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LibRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string semver = 2;
  void clear_semver();
  static const int kSemverFieldNumber = 2;
  const ::std::string& semver() const;
  void set_semver(const ::std::string& value);
  #if LANG_CXX11
  void set_semver(::std::string&& value);
  #endif
  void set_semver(const char* value);
  void set_semver(const char* value, size_t size);
  ::std::string* mutable_semver();
  ::std::string* release_semver();
  void set_allocated_semver(::std::string* semver);

  // bool local = 3;
  void clear_local();
  static const int kLocalFieldNumber = 3;
  bool local() const;
  void set_local(bool value);

  // @@protoc_insertion_point(class_scope:ric.code.LibRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr semver_;
  bool local_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class BundleEsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.BundleEsRequest) */ {
 public:
  BundleEsRequest();
  virtual ~BundleEsRequest();

  BundleEsRequest(const BundleEsRequest& from);

  inline BundleEsRequest& operator=(const BundleEsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BundleEsRequest(BundleEsRequest&& from) noexcept
    : BundleEsRequest() {
    *this = ::std::move(from);
  }

  inline BundleEsRequest& operator=(BundleEsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BundleEsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleEsRequest* internal_default_instance() {
    return reinterpret_cast<const BundleEsRequest*>(
               &_BundleEsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BundleEsRequest* other);
  friend void swap(BundleEsRequest& a, BundleEsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BundleEsRequest* New() const final {
    return CreateMaybeMessage<BundleEsRequest>(nullptr);
  }

  BundleEsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BundleEsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BundleEsRequest& from);
  void MergeFrom(const BundleEsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleEsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string main = 3;
  void clear_main();
  static const int kMainFieldNumber = 3;
  const ::std::string& main() const;
  void set_main(const ::std::string& value);
  #if LANG_CXX11
  void set_main(::std::string&& value);
  #endif
  void set_main(const char* value);
  void set_main(const char* value, size_t size);
  ::std::string* mutable_main();
  ::std::string* release_main();
  void set_allocated_main(::std::string* main);

  // @@protoc_insertion_point(class_scope:ric.code.BundleEsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr main_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class BundleEsProgress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.BundleEsProgress) */ {
 public:
  BundleEsProgress();
  virtual ~BundleEsProgress();

  BundleEsProgress(const BundleEsProgress& from);

  inline BundleEsProgress& operator=(const BundleEsProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BundleEsProgress(BundleEsProgress&& from) noexcept
    : BundleEsProgress() {
    *this = ::std::move(from);
  }

  inline BundleEsProgress& operator=(BundleEsProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BundleEsProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleEsProgress* internal_default_instance() {
    return reinterpret_cast<const BundleEsProgress*>(
               &_BundleEsProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BundleEsProgress* other);
  friend void swap(BundleEsProgress& a, BundleEsProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BundleEsProgress* New() const final {
    return CreateMaybeMessage<BundleEsProgress>(nullptr);
  }

  BundleEsProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BundleEsProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BundleEsProgress& from);
  void MergeFrom(const BundleEsProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleEsProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // string source_map = 4;
  void clear_source_map();
  static const int kSourceMapFieldNumber = 4;
  const ::std::string& source_map() const;
  void set_source_map(const ::std::string& value);
  #if LANG_CXX11
  void set_source_map(::std::string&& value);
  #endif
  void set_source_map(const char* value);
  void set_source_map(const char* value, size_t size);
  ::std::string* mutable_source_map();
  ::std::string* release_source_map();
  void set_allocated_source_map(::std::string* source_map);

  // @@protoc_insertion_point(class_scope:ric.code.BundleEsProgress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr source_map_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class ParseConditionRequest_AliasesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ParseConditionRequest_AliasesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ParseConditionRequest_AliasesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ParseConditionRequest_AliasesEntry_DoNotUse();
  ParseConditionRequest_AliasesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ParseConditionRequest_AliasesEntry_DoNotUse& other);
  static const ParseConditionRequest_AliasesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ParseConditionRequest_AliasesEntry_DoNotUse*>(&_ParseConditionRequest_AliasesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ParseConditionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.ParseConditionRequest) */ {
 public:
  ParseConditionRequest();
  virtual ~ParseConditionRequest();

  ParseConditionRequest(const ParseConditionRequest& from);

  inline ParseConditionRequest& operator=(const ParseConditionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParseConditionRequest(ParseConditionRequest&& from) noexcept
    : ParseConditionRequest() {
    *this = ::std::move(from);
  }

  inline ParseConditionRequest& operator=(ParseConditionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParseConditionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParseConditionRequest* internal_default_instance() {
    return reinterpret_cast<const ParseConditionRequest*>(
               &_ParseConditionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ParseConditionRequest* other);
  friend void swap(ParseConditionRequest& a, ParseConditionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParseConditionRequest* New() const final {
    return CreateMaybeMessage<ParseConditionRequest>(nullptr);
  }

  ParseConditionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParseConditionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParseConditionRequest& from);
  void MergeFrom(const ParseConditionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParseConditionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> aliases = 3;
  int aliases_size() const;
  void clear_aliases();
  static const int kAliasesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      aliases() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_aliases();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:ric.code.ParseConditionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ParseConditionRequest_AliasesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > aliases_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// -------------------------------------------------------------------

class ParseConditionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.code.ParseConditionResponse) */ {
 public:
  ParseConditionResponse();
  virtual ~ParseConditionResponse();

  ParseConditionResponse(const ParseConditionResponse& from);

  inline ParseConditionResponse& operator=(const ParseConditionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParseConditionResponse(ParseConditionResponse&& from) noexcept
    : ParseConditionResponse() {
    *this = ::std::move(from);
  }

  inline ParseConditionResponse& operator=(ParseConditionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParseConditionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParseConditionResponse* internal_default_instance() {
    return reinterpret_cast<const ParseConditionResponse*>(
               &_ParseConditionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ParseConditionResponse* other);
  friend void swap(ParseConditionResponse& a, ParseConditionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParseConditionResponse* New() const final {
    return CreateMaybeMessage<ParseConditionResponse>(nullptr);
  }

  ParseConditionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParseConditionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParseConditionResponse& from);
  void MergeFrom(const ParseConditionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParseConditionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string compiled = 1;
  void clear_compiled();
  static const int kCompiledFieldNumber = 1;
  const ::std::string& compiled() const;
  void set_compiled(const ::std::string& value);
  #if LANG_CXX11
  void set_compiled(::std::string&& value);
  #endif
  void set_compiled(const char* value);
  void set_compiled(const char* value, size_t size);
  ::std::string* mutable_compiled();
  ::std::string* release_compiled();
  void set_allocated_compiled(::std::string* compiled);

  // @@protoc_insertion_point(class_scope:ric.code.ParseConditionResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr compiled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dcode_2friccode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranspileRequest

// string id = 1;
inline void TranspileRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranspileRequest::id() const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileRequest.id)
  return id_.GetNoArena();
}
inline void TranspileRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.TranspileRequest.id)
}
#if LANG_CXX11
inline void TranspileRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.TranspileRequest.id)
}
#endif
inline void TranspileRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.TranspileRequest.id)
}
inline void TranspileRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.TranspileRequest.id)
}
inline ::std::string* TranspileRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranspileRequest::release_id() {
  // @@protoc_insertion_point(field_release:ric.code.TranspileRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranspileRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.code.TranspileRequest.id)
}

// string code = 2;
inline void TranspileRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranspileRequest::code() const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileRequest.code)
  return code_.GetNoArena();
}
inline void TranspileRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.TranspileRequest.code)
}
#if LANG_CXX11
inline void TranspileRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.TranspileRequest.code)
}
#endif
inline void TranspileRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.TranspileRequest.code)
}
inline void TranspileRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.TranspileRequest.code)
}
inline ::std::string* TranspileRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranspileRequest::release_code() {
  // @@protoc_insertion_point(field_release:ric.code.TranspileRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranspileRequest::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ric.code.TranspileRequest.code)
}

// string main = 3;
inline void TranspileRequest::clear_main() {
  main_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranspileRequest::main() const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileRequest.main)
  return main_.GetNoArena();
}
inline void TranspileRequest::set_main(const ::std::string& value) {
  
  main_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.TranspileRequest.main)
}
#if LANG_CXX11
inline void TranspileRequest::set_main(::std::string&& value) {
  
  main_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.TranspileRequest.main)
}
#endif
inline void TranspileRequest::set_main(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.TranspileRequest.main)
}
inline void TranspileRequest::set_main(const char* value, size_t size) {
  
  main_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.TranspileRequest.main)
}
inline ::std::string* TranspileRequest::mutable_main() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileRequest.main)
  return main_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranspileRequest::release_main() {
  // @@protoc_insertion_point(field_release:ric.code.TranspileRequest.main)
  
  return main_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranspileRequest::set_allocated_main(::std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  main_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main);
  // @@protoc_insertion_point(field_set_allocated:ric.code.TranspileRequest.main)
}

// repeated .ric.code.LibDefinition defs = 4;
inline int TranspileRequest::defs_size() const {
  return defs_.size();
}
inline void TranspileRequest::clear_defs() {
  defs_.Clear();
}
inline ::ric::code::LibDefinition* TranspileRequest::mutable_defs(int index) {
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileRequest.defs)
  return defs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::code::LibDefinition >*
TranspileRequest::mutable_defs() {
  // @@protoc_insertion_point(field_mutable_list:ric.code.TranspileRequest.defs)
  return &defs_;
}
inline const ::ric::code::LibDefinition& TranspileRequest::defs(int index) const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileRequest.defs)
  return defs_.Get(index);
}
inline ::ric::code::LibDefinition* TranspileRequest::add_defs() {
  // @@protoc_insertion_point(field_add:ric.code.TranspileRequest.defs)
  return defs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::code::LibDefinition >&
TranspileRequest::defs() const {
  // @@protoc_insertion_point(field_list:ric.code.TranspileRequest.defs)
  return defs_;
}

// -------------------------------------------------------------------

// TranspileResponse

// string code_es5 = 1;
inline void TranspileResponse::clear_code_es5() {
  code_es5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TranspileResponse::code_es5() const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileResponse.code_es5)
  return code_es5_.GetNoArena();
}
inline void TranspileResponse::set_code_es5(const ::std::string& value) {
  
  code_es5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.TranspileResponse.code_es5)
}
#if LANG_CXX11
inline void TranspileResponse::set_code_es5(::std::string&& value) {
  
  code_es5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.TranspileResponse.code_es5)
}
#endif
inline void TranspileResponse::set_code_es5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_es5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.TranspileResponse.code_es5)
}
inline void TranspileResponse::set_code_es5(const char* value, size_t size) {
  
  code_es5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.TranspileResponse.code_es5)
}
inline ::std::string* TranspileResponse::mutable_code_es5() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileResponse.code_es5)
  return code_es5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TranspileResponse::release_code_es5() {
  // @@protoc_insertion_point(field_release:ric.code.TranspileResponse.code_es5)
  
  return code_es5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TranspileResponse::set_allocated_code_es5(::std::string* code_es5) {
  if (code_es5 != nullptr) {
    
  } else {
    
  }
  code_es5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_es5);
  // @@protoc_insertion_point(field_set_allocated:ric.code.TranspileResponse.code_es5)
}

// repeated .ric.code.LibRequest libs = 2;
inline int TranspileResponse::libs_size() const {
  return libs_.size();
}
inline void TranspileResponse::clear_libs() {
  libs_.Clear();
}
inline ::ric::code::LibRequest* TranspileResponse::mutable_libs(int index) {
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileResponse.libs)
  return libs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::code::LibRequest >*
TranspileResponse::mutable_libs() {
  // @@protoc_insertion_point(field_mutable_list:ric.code.TranspileResponse.libs)
  return &libs_;
}
inline const ::ric::code::LibRequest& TranspileResponse::libs(int index) const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileResponse.libs)
  return libs_.Get(index);
}
inline ::ric::code::LibRequest* TranspileResponse::add_libs() {
  // @@protoc_insertion_point(field_add:ric.code.TranspileResponse.libs)
  return libs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::code::LibRequest >&
TranspileResponse::libs() const {
  // @@protoc_insertion_point(field_list:ric.code.TranspileResponse.libs)
  return libs_;
}

// repeated .ric.code.VarDecl input = 3;
inline int TranspileResponse::input_size() const {
  return input_.size();
}
inline void TranspileResponse::clear_input() {
  input_.Clear();
}
inline ::ric::code::VarDecl* TranspileResponse::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileResponse.input)
  return input_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >*
TranspileResponse::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:ric.code.TranspileResponse.input)
  return &input_;
}
inline const ::ric::code::VarDecl& TranspileResponse::input(int index) const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileResponse.input)
  return input_.Get(index);
}
inline ::ric::code::VarDecl* TranspileResponse::add_input() {
  // @@protoc_insertion_point(field_add:ric.code.TranspileResponse.input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >&
TranspileResponse::input() const {
  // @@protoc_insertion_point(field_list:ric.code.TranspileResponse.input)
  return input_;
}

// repeated .ric.code.VarDecl output = 4;
inline int TranspileResponse::output_size() const {
  return output_.size();
}
inline void TranspileResponse::clear_output() {
  output_.Clear();
}
inline ::ric::code::VarDecl* TranspileResponse::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileResponse.output)
  return output_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >*
TranspileResponse::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:ric.code.TranspileResponse.output)
  return &output_;
}
inline const ::ric::code::VarDecl& TranspileResponse::output(int index) const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileResponse.output)
  return output_.Get(index);
}
inline ::ric::code::VarDecl* TranspileResponse::add_output() {
  // @@protoc_insertion_point(field_add:ric.code.TranspileResponse.output)
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >&
TranspileResponse::output() const {
  // @@protoc_insertion_point(field_list:ric.code.TranspileResponse.output)
  return output_;
}

// repeated .ric.code.InputRef refs = 5;
inline int TranspileResponse::refs_size() const {
  return refs_.size();
}
inline void TranspileResponse::clear_refs() {
  refs_.Clear();
}
inline ::ric::code::InputRef* TranspileResponse::mutable_refs(int index) {
  // @@protoc_insertion_point(field_mutable:ric.code.TranspileResponse.refs)
  return refs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::code::InputRef >*
TranspileResponse::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:ric.code.TranspileResponse.refs)
  return &refs_;
}
inline const ::ric::code::InputRef& TranspileResponse::refs(int index) const {
  // @@protoc_insertion_point(field_get:ric.code.TranspileResponse.refs)
  return refs_.Get(index);
}
inline ::ric::code::InputRef* TranspileResponse::add_refs() {
  // @@protoc_insertion_point(field_add:ric.code.TranspileResponse.refs)
  return refs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::code::InputRef >&
TranspileResponse::refs() const {
  // @@protoc_insertion_point(field_list:ric.code.TranspileResponse.refs)
  return refs_;
}

// -------------------------------------------------------------------

// InputRef

// string name = 1;
inline void InputRef::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InputRef::name() const {
  // @@protoc_insertion_point(field_get:ric.code.InputRef.name)
  return name_.GetNoArena();
}
inline void InputRef::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.InputRef.name)
}
#if LANG_CXX11
inline void InputRef::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.InputRef.name)
}
#endif
inline void InputRef::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.InputRef.name)
}
inline void InputRef::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.InputRef.name)
}
inline ::std::string* InputRef::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.InputRef.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InputRef::release_name() {
  // @@protoc_insertion_point(field_release:ric.code.InputRef.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InputRef::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.code.InputRef.name)
}

// repeated .ric.code.VarDecl vars = 2;
inline int InputRef::vars_size() const {
  return vars_.size();
}
inline void InputRef::clear_vars() {
  vars_.Clear();
}
inline ::ric::code::VarDecl* InputRef::mutable_vars(int index) {
  // @@protoc_insertion_point(field_mutable:ric.code.InputRef.vars)
  return vars_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >*
InputRef::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_list:ric.code.InputRef.vars)
  return &vars_;
}
inline const ::ric::code::VarDecl& InputRef::vars(int index) const {
  // @@protoc_insertion_point(field_get:ric.code.InputRef.vars)
  return vars_.Get(index);
}
inline ::ric::code::VarDecl* InputRef::add_vars() {
  // @@protoc_insertion_point(field_add:ric.code.InputRef.vars)
  return vars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::code::VarDecl >&
InputRef::vars() const {
  // @@protoc_insertion_point(field_list:ric.code.InputRef.vars)
  return vars_;
}

// -------------------------------------------------------------------

// VarDecl

// string name = 1;
inline void VarDecl::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VarDecl::name() const {
  // @@protoc_insertion_point(field_get:ric.code.VarDecl.name)
  return name_.GetNoArena();
}
inline void VarDecl::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.VarDecl.name)
}
#if LANG_CXX11
inline void VarDecl::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.VarDecl.name)
}
#endif
inline void VarDecl::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.VarDecl.name)
}
inline void VarDecl::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.VarDecl.name)
}
inline ::std::string* VarDecl::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.VarDecl.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VarDecl::release_name() {
  // @@protoc_insertion_point(field_release:ric.code.VarDecl.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VarDecl::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.code.VarDecl.name)
}

// string type = 2;
inline void VarDecl::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VarDecl::type() const {
  // @@protoc_insertion_point(field_get:ric.code.VarDecl.type)
  return type_.GetNoArena();
}
inline void VarDecl::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.VarDecl.type)
}
#if LANG_CXX11
inline void VarDecl::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.VarDecl.type)
}
#endif
inline void VarDecl::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.VarDecl.type)
}
inline void VarDecl::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.VarDecl.type)
}
inline ::std::string* VarDecl::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.VarDecl.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VarDecl::release_type() {
  // @@protoc_insertion_point(field_release:ric.code.VarDecl.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VarDecl::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ric.code.VarDecl.type)
}

// string default = 3;
inline void VarDecl::clear_default_() {
  default__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VarDecl::default_() const {
  // @@protoc_insertion_point(field_get:ric.code.VarDecl.default)
  return default__.GetNoArena();
}
inline void VarDecl::set_default_(const ::std::string& value) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.VarDecl.default)
}
#if LANG_CXX11
inline void VarDecl::set_default_(::std::string&& value) {
  
  default__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.VarDecl.default)
}
#endif
inline void VarDecl::set_default_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.VarDecl.default)
}
inline void VarDecl::set_default_(const char* value, size_t size) {
  
  default__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.VarDecl.default)
}
inline ::std::string* VarDecl::mutable_default_() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.VarDecl.default)
  return default__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VarDecl::release_default_() {
  // @@protoc_insertion_point(field_release:ric.code.VarDecl.default)
  
  return default__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VarDecl::set_allocated_default_(::std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_);
  // @@protoc_insertion_point(field_set_allocated:ric.code.VarDecl.default)
}

// -------------------------------------------------------------------

// LibDefinition

// string name = 1;
inline void LibDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibDefinition::name() const {
  // @@protoc_insertion_point(field_get:ric.code.LibDefinition.name)
  return name_.GetNoArena();
}
inline void LibDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.LibDefinition.name)
}
#if LANG_CXX11
inline void LibDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.LibDefinition.name)
}
#endif
inline void LibDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.LibDefinition.name)
}
inline void LibDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.LibDefinition.name)
}
inline ::std::string* LibDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.LibDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibDefinition::release_name() {
  // @@protoc_insertion_point(field_release:ric.code.LibDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibDefinition::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.code.LibDefinition.name)
}

// string def = 2;
inline void LibDefinition::clear_def() {
  def_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibDefinition::def() const {
  // @@protoc_insertion_point(field_get:ric.code.LibDefinition.def)
  return def_.GetNoArena();
}
inline void LibDefinition::set_def(const ::std::string& value) {
  
  def_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.LibDefinition.def)
}
#if LANG_CXX11
inline void LibDefinition::set_def(::std::string&& value) {
  
  def_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.LibDefinition.def)
}
#endif
inline void LibDefinition::set_def(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  def_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.LibDefinition.def)
}
inline void LibDefinition::set_def(const char* value, size_t size) {
  
  def_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.LibDefinition.def)
}
inline ::std::string* LibDefinition::mutable_def() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.LibDefinition.def)
  return def_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibDefinition::release_def() {
  // @@protoc_insertion_point(field_release:ric.code.LibDefinition.def)
  
  return def_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibDefinition::set_allocated_def(::std::string* def) {
  if (def != nullptr) {
    
  } else {
    
  }
  def_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), def);
  // @@protoc_insertion_point(field_set_allocated:ric.code.LibDefinition.def)
}

// -------------------------------------------------------------------

// LibRequest

// string name = 1;
inline void LibRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.code.LibRequest.name)
  return name_.GetNoArena();
}
inline void LibRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.LibRequest.name)
}
#if LANG_CXX11
inline void LibRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.LibRequest.name)
}
#endif
inline void LibRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.LibRequest.name)
}
inline void LibRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.LibRequest.name)
}
inline ::std::string* LibRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.LibRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.code.LibRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.code.LibRequest.name)
}

// string semver = 2;
inline void LibRequest::clear_semver() {
  semver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LibRequest::semver() const {
  // @@protoc_insertion_point(field_get:ric.code.LibRequest.semver)
  return semver_.GetNoArena();
}
inline void LibRequest::set_semver(const ::std::string& value) {
  
  semver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.LibRequest.semver)
}
#if LANG_CXX11
inline void LibRequest::set_semver(::std::string&& value) {
  
  semver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.LibRequest.semver)
}
#endif
inline void LibRequest::set_semver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  semver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.LibRequest.semver)
}
inline void LibRequest::set_semver(const char* value, size_t size) {
  
  semver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.LibRequest.semver)
}
inline ::std::string* LibRequest::mutable_semver() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.LibRequest.semver)
  return semver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LibRequest::release_semver() {
  // @@protoc_insertion_point(field_release:ric.code.LibRequest.semver)
  
  return semver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LibRequest::set_allocated_semver(::std::string* semver) {
  if (semver != nullptr) {
    
  } else {
    
  }
  semver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), semver);
  // @@protoc_insertion_point(field_set_allocated:ric.code.LibRequest.semver)
}

// bool local = 3;
inline void LibRequest::clear_local() {
  local_ = false;
}
inline bool LibRequest::local() const {
  // @@protoc_insertion_point(field_get:ric.code.LibRequest.local)
  return local_;
}
inline void LibRequest::set_local(bool value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:ric.code.LibRequest.local)
}

// -------------------------------------------------------------------

// BundleEsRequest

// string id = 1;
inline void BundleEsRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsRequest::id() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsRequest.id)
  return id_.GetNoArena();
}
inline void BundleEsRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsRequest.id)
}
#if LANG_CXX11
inline void BundleEsRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsRequest.id)
}
#endif
inline void BundleEsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsRequest.id)
}
inline void BundleEsRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsRequest.id)
}
inline ::std::string* BundleEsRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsRequest::release_id() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsRequest.id)
}

// string code = 2;
inline void BundleEsRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsRequest::code() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsRequest.code)
  return code_.GetNoArena();
}
inline void BundleEsRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsRequest.code)
}
#if LANG_CXX11
inline void BundleEsRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsRequest.code)
}
#endif
inline void BundleEsRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsRequest.code)
}
inline void BundleEsRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsRequest.code)
}
inline ::std::string* BundleEsRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsRequest::release_code() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsRequest::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsRequest.code)
}

// string main = 3;
inline void BundleEsRequest::clear_main() {
  main_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsRequest::main() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsRequest.main)
  return main_.GetNoArena();
}
inline void BundleEsRequest::set_main(const ::std::string& value) {
  
  main_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsRequest.main)
}
#if LANG_CXX11
inline void BundleEsRequest::set_main(::std::string&& value) {
  
  main_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsRequest.main)
}
#endif
inline void BundleEsRequest::set_main(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsRequest.main)
}
inline void BundleEsRequest::set_main(const char* value, size_t size) {
  
  main_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsRequest.main)
}
inline ::std::string* BundleEsRequest::mutable_main() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsRequest.main)
  return main_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsRequest::release_main() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsRequest.main)
  
  return main_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsRequest::set_allocated_main(::std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  main_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsRequest.main)
}

// -------------------------------------------------------------------

// BundleEsProgress

// string message = 1;
inline void BundleEsProgress::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsProgress::message() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsProgress.message)
  return message_.GetNoArena();
}
inline void BundleEsProgress::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsProgress.message)
}
#if LANG_CXX11
inline void BundleEsProgress::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsProgress.message)
}
#endif
inline void BundleEsProgress::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsProgress.message)
}
inline void BundleEsProgress::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsProgress.message)
}
inline ::std::string* BundleEsProgress::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsProgress.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsProgress::release_message() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsProgress.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsProgress::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsProgress.message)
}

// string result = 2;
inline void BundleEsProgress::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsProgress::result() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsProgress.result)
  return result_.GetNoArena();
}
inline void BundleEsProgress::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsProgress.result)
}
#if LANG_CXX11
inline void BundleEsProgress::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsProgress.result)
}
#endif
inline void BundleEsProgress::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsProgress.result)
}
inline void BundleEsProgress::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsProgress.result)
}
inline ::std::string* BundleEsProgress::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsProgress.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsProgress::release_result() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsProgress.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsProgress::set_allocated_result(::std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsProgress.result)
}

// string error = 3;
inline void BundleEsProgress::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsProgress::error() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsProgress.error)
  return error_.GetNoArena();
}
inline void BundleEsProgress::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsProgress.error)
}
#if LANG_CXX11
inline void BundleEsProgress::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsProgress.error)
}
#endif
inline void BundleEsProgress::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsProgress.error)
}
inline void BundleEsProgress::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsProgress.error)
}
inline ::std::string* BundleEsProgress::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsProgress.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsProgress::release_error() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsProgress.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsProgress::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsProgress.error)
}

// string source_map = 4;
inline void BundleEsProgress::clear_source_map() {
  source_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BundleEsProgress::source_map() const {
  // @@protoc_insertion_point(field_get:ric.code.BundleEsProgress.source_map)
  return source_map_.GetNoArena();
}
inline void BundleEsProgress::set_source_map(const ::std::string& value) {
  
  source_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.BundleEsProgress.source_map)
}
#if LANG_CXX11
inline void BundleEsProgress::set_source_map(::std::string&& value) {
  
  source_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.BundleEsProgress.source_map)
}
#endif
inline void BundleEsProgress::set_source_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.BundleEsProgress.source_map)
}
inline void BundleEsProgress::set_source_map(const char* value, size_t size) {
  
  source_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.BundleEsProgress.source_map)
}
inline ::std::string* BundleEsProgress::mutable_source_map() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.BundleEsProgress.source_map)
  return source_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BundleEsProgress::release_source_map() {
  // @@protoc_insertion_point(field_release:ric.code.BundleEsProgress.source_map)
  
  return source_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BundleEsProgress::set_allocated_source_map(::std::string* source_map) {
  if (source_map != nullptr) {
    
  } else {
    
  }
  source_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_map);
  // @@protoc_insertion_point(field_set_allocated:ric.code.BundleEsProgress.source_map)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ParseConditionRequest

// string id = 1;
inline void ParseConditionRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParseConditionRequest::id() const {
  // @@protoc_insertion_point(field_get:ric.code.ParseConditionRequest.id)
  return id_.GetNoArena();
}
inline void ParseConditionRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.ParseConditionRequest.id)
}
#if LANG_CXX11
inline void ParseConditionRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.ParseConditionRequest.id)
}
#endif
inline void ParseConditionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.ParseConditionRequest.id)
}
inline void ParseConditionRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.ParseConditionRequest.id)
}
inline ::std::string* ParseConditionRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.ParseConditionRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseConditionRequest::release_id() {
  // @@protoc_insertion_point(field_release:ric.code.ParseConditionRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseConditionRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.code.ParseConditionRequest.id)
}

// string code = 2;
inline void ParseConditionRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParseConditionRequest::code() const {
  // @@protoc_insertion_point(field_get:ric.code.ParseConditionRequest.code)
  return code_.GetNoArena();
}
inline void ParseConditionRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.ParseConditionRequest.code)
}
#if LANG_CXX11
inline void ParseConditionRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.ParseConditionRequest.code)
}
#endif
inline void ParseConditionRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.ParseConditionRequest.code)
}
inline void ParseConditionRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.ParseConditionRequest.code)
}
inline ::std::string* ParseConditionRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.ParseConditionRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseConditionRequest::release_code() {
  // @@protoc_insertion_point(field_release:ric.code.ParseConditionRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseConditionRequest::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ric.code.ParseConditionRequest.code)
}

// map<string, string> aliases = 3;
inline int ParseConditionRequest::aliases_size() const {
  return aliases_.size();
}
inline void ParseConditionRequest::clear_aliases() {
  aliases_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ParseConditionRequest::aliases() const {
  // @@protoc_insertion_point(field_map:ric.code.ParseConditionRequest.aliases)
  return aliases_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ParseConditionRequest::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_map:ric.code.ParseConditionRequest.aliases)
  return aliases_.MutableMap();
}

// -------------------------------------------------------------------

// ParseConditionResponse

// string compiled = 1;
inline void ParseConditionResponse::clear_compiled() {
  compiled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParseConditionResponse::compiled() const {
  // @@protoc_insertion_point(field_get:ric.code.ParseConditionResponse.compiled)
  return compiled_.GetNoArena();
}
inline void ParseConditionResponse::set_compiled(const ::std::string& value) {
  
  compiled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.code.ParseConditionResponse.compiled)
}
#if LANG_CXX11
inline void ParseConditionResponse::set_compiled(::std::string&& value) {
  
  compiled_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.code.ParseConditionResponse.compiled)
}
#endif
inline void ParseConditionResponse::set_compiled(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compiled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.code.ParseConditionResponse.compiled)
}
inline void ParseConditionResponse::set_compiled(const char* value, size_t size) {
  
  compiled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.code.ParseConditionResponse.compiled)
}
inline ::std::string* ParseConditionResponse::mutable_compiled() {
  
  // @@protoc_insertion_point(field_mutable:ric.code.ParseConditionResponse.compiled)
  return compiled_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseConditionResponse::release_compiled() {
  // @@protoc_insertion_point(field_release:ric.code.ParseConditionResponse.compiled)
  
  return compiled_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseConditionResponse::set_allocated_compiled(::std::string* compiled) {
  if (compiled != nullptr) {
    
  } else {
    
  }
  compiled_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compiled);
  // @@protoc_insertion_point(field_set_allocated:ric.code.ParseConditionResponse.compiled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace code
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dcode_2friccode_2eproto
