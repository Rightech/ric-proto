// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-packet-spy/ricpacketspy.proto
#ifndef GRPC_ric_2dpacket_2dspy_2fricpacketspy_2eproto__INCLUDED
#define GRPC_ric_2dpacket_2dspy_2fricpacketspy_2eproto__INCLUDED

#include "ric-packet-spy/ricpacketspy.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ric {
namespace packet {
namespace spy {

class RicPacketSpy final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.packet.spy.RicPacketSpy";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::ric::packet::spy::GetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::GetStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::GetStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::GetStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::GetStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    virtual ::grpc::Status StartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::ric::packet::spy::StartWatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::StartWatchResponse>> AsyncStartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::StartWatchResponse>>(AsyncStartWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::StartWatchResponse>> PrepareAsyncStartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::StartWatchResponse>>(PrepareAsyncStartWatchRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::ric::packet::spy::CancelWatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CancelWatchResponse>> AsyncCancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CancelWatchResponse>>(AsyncCancelWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CancelWatchResponse>> PrepareAsyncCancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CancelWatchResponse>>(PrepareAsyncCancelWatchRaw(context, request, cq));
    }
    virtual ::grpc::Status CommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::ric::packet::spy::CommitModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CommitModelResponse>> AsyncCommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CommitModelResponse>>(AsyncCommitModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CommitModelResponse>> PrepareAsyncCommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CommitModelResponse>>(PrepareAsyncCommitModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::packet::spy::ObjectUpdate>> WatchUpdate(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ric::packet::spy::ObjectUpdate>>(WatchUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::packet::spy::ObjectUpdate>> AsyncWatchUpdate(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::packet::spy::ObjectUpdate>>(AsyncWatchUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::packet::spy::ObjectUpdate>> PrepareAsyncWatchUpdate(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ric::packet::spy::ObjectUpdate>>(PrepareAsyncWatchUpdateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::GetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartWatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::StartWatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelWatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::CancelWatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommitModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::CommitModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WatchUpdate(::grpc::ClientContext* context, ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::packet::spy::ObjectUpdate>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::GetStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::GetStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::StartWatchResponse>* AsyncStartWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::StartWatchResponse>* PrepareAsyncStartWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CancelWatchResponse>* AsyncCancelWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CancelWatchResponse>* PrepareAsyncCancelWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CommitModelResponse>* AsyncCommitModelRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::packet::spy::CommitModelResponse>* PrepareAsyncCommitModelRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ric::packet::spy::ObjectUpdate>* WatchUpdateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::packet::spy::ObjectUpdate>* AsyncWatchUpdateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ric::packet::spy::ObjectUpdate>* PrepareAsyncWatchUpdateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::ric::packet::spy::GetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::GetStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::GetStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::GetStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::GetStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    ::grpc::Status StartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::ric::packet::spy::StartWatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::StartWatchResponse>> AsyncStartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::StartWatchResponse>>(AsyncStartWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::StartWatchResponse>> PrepareAsyncStartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::StartWatchResponse>>(PrepareAsyncStartWatchRaw(context, request, cq));
    }
    ::grpc::Status CancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::ric::packet::spy::CancelWatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CancelWatchResponse>> AsyncCancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CancelWatchResponse>>(AsyncCancelWatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CancelWatchResponse>> PrepareAsyncCancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CancelWatchResponse>>(PrepareAsyncCancelWatchRaw(context, request, cq));
    }
    ::grpc::Status CommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::ric::packet::spy::CommitModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CommitModelResponse>> AsyncCommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CommitModelResponse>>(AsyncCommitModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CommitModelResponse>> PrepareAsyncCommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CommitModelResponse>>(PrepareAsyncCommitModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ric::packet::spy::ObjectUpdate>> WatchUpdate(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ric::packet::spy::ObjectUpdate>>(WatchUpdateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::packet::spy::ObjectUpdate>> AsyncWatchUpdate(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::packet::spy::ObjectUpdate>>(AsyncWatchUpdateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::packet::spy::ObjectUpdate>> PrepareAsyncWatchUpdate(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ric::packet::spy::ObjectUpdate>>(PrepareAsyncWatchUpdateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetState(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::GetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void StartWatch(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response, std::function<void(::grpc::Status)>) override;
      void StartWatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::StartWatchResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelWatch(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelWatch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::CancelWatchResponse* response, std::function<void(::grpc::Status)>) override;
      void CommitModel(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response, std::function<void(::grpc::Status)>) override;
      void CommitModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::packet::spy::CommitModelResponse* response, std::function<void(::grpc::Status)>) override;
      void WatchUpdate(::grpc::ClientContext* context, ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::experimental::ClientReadReactor< ::ric::packet::spy::ObjectUpdate>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::GetStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::GetStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::StartWatchResponse>* AsyncStartWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::StartWatchResponse>* PrepareAsyncStartWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::StartWatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CancelWatchResponse>* AsyncCancelWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CancelWatchResponse>* PrepareAsyncCancelWatchRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CancelWatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CommitModelResponse>* AsyncCommitModelRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::packet::spy::CommitModelResponse>* PrepareAsyncCommitModelRaw(::grpc::ClientContext* context, const ::ric::packet::spy::CommitModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ric::packet::spy::ObjectUpdate>* WatchUpdateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request) override;
    ::grpc::ClientAsyncReader< ::ric::packet::spy::ObjectUpdate>* AsyncWatchUpdateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ric::packet::spy::ObjectUpdate>* PrepareAsyncWatchUpdateRaw(::grpc::ClientContext* context, const ::ric::packet::spy::WatchUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_StartWatch_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelWatch_;
    const ::grpc::internal::RpcMethod rpcmethod_CommitModel_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response);
    virtual ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response);
    virtual ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response);
    virtual ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response);
    virtual ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::ric::packet::spy::GetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::packet::spy::GetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartWatch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StartWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartWatch(::grpc::ServerContext* context, ::ric::packet::spy::StartWatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::packet::spy::StartWatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CancelWatch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CancelWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelWatch(::grpc::ServerContext* context, ::ric::packet::spy::CancelWatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::packet::spy::CancelWatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommitModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CommitModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CommitModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommitModel(::grpc::ServerContext* context, ::ric::packet::spy::CommitModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::packet::spy::CommitModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WatchUpdate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_WatchUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchUpdate(::grpc::ServerContext* context, ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerAsyncWriter< ::ric::packet::spy::ObjectUpdate>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetState<WithAsyncMethod_StartWatch<WithAsyncMethod_CancelWatch<WithAsyncMethod_CommitModel<WithAsyncMethod_WatchUpdate<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetState() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::packet::spy::GetStateRequest, ::ric::packet::spy::GetStateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::packet::spy::GetStateRequest* request,
                 ::ric::packet::spy::GetStateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StartWatch() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::packet::spy::StartWatchRequest, ::ric::packet::spy::StartWatchResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::packet::spy::StartWatchRequest* request,
                 ::ric::packet::spy::StartWatchResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StartWatch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_StartWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CancelWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CancelWatch() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::packet::spy::CancelWatchRequest, ::ric::packet::spy::CancelWatchResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::packet::spy::CancelWatchRequest* request,
                 ::ric::packet::spy::CancelWatchResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CancelWatch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CancelWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CommitModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CommitModel() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::packet::spy::CommitModelRequest, ::ric::packet::spy::CommitModelResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::packet::spy::CommitModelRequest* request,
                 ::ric::packet::spy::CommitModelResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CommitModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CommitModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WatchUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WatchUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::ric::packet::spy::WatchUpdateRequest, ::ric::packet::spy::ObjectUpdate>(
          [this] { return this->WatchUpdate(); }));
    }
    ~ExperimentalWithCallbackMethod_WatchUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::ric::packet::spy::WatchUpdateRequest, ::ric::packet::spy::ObjectUpdate>* WatchUpdate() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::ric::packet::spy::WatchUpdateRequest, ::ric::packet::spy::ObjectUpdate>;}
  };
  typedef ExperimentalWithCallbackMethod_GetState<ExperimentalWithCallbackMethod_StartWatch<ExperimentalWithCallbackMethod_CancelWatch<ExperimentalWithCallbackMethod_CommitModel<ExperimentalWithCallbackMethod_WatchUpdate<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartWatch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StartWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CancelWatch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CancelWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommitModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CommitModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CommitModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WatchUpdate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_WatchUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StartWatch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StartWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartWatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CancelWatch() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CancelWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelWatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommitModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CommitModel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CommitModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommitModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WatchUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WatchUpdate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_WatchUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StartWatch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StartWatch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StartWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StartWatch(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CancelWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CancelWatch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CancelWatch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CancelWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CancelWatch(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CommitModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CommitModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CommitModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CommitModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CommitModel(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WatchUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WatchUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->WatchUpdate(); }));
    }
    ~ExperimentalWithRawCallbackMethod_WatchUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* WatchUpdate() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::packet::spy::GetStateRequest, ::ric::packet::spy::GetStateResponse>(std::bind(&WithStreamedUnaryMethod_GetState<BaseClass>::StreamedGetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::ric::packet::spy::GetStateRequest* request, ::ric::packet::spy::GetStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::packet::spy::GetStateRequest,::ric::packet::spy::GetStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartWatch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::packet::spy::StartWatchRequest, ::ric::packet::spy::StartWatchResponse>(std::bind(&WithStreamedUnaryMethod_StartWatch<BaseClass>::StreamedStartWatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartWatch(::grpc::ServerContext* context, const ::ric::packet::spy::StartWatchRequest* request, ::ric::packet::spy::StartWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartWatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::packet::spy::StartWatchRequest,::ric::packet::spy::StartWatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelWatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CancelWatch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::packet::spy::CancelWatchRequest, ::ric::packet::spy::CancelWatchResponse>(std::bind(&WithStreamedUnaryMethod_CancelWatch<BaseClass>::StreamedCancelWatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CancelWatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelWatch(::grpc::ServerContext* context, const ::ric::packet::spy::CancelWatchRequest* request, ::ric::packet::spy::CancelWatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelWatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::packet::spy::CancelWatchRequest,::ric::packet::spy::CancelWatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommitModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CommitModel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::packet::spy::CommitModelRequest, ::ric::packet::spy::CommitModelResponse>(std::bind(&WithStreamedUnaryMethod_CommitModel<BaseClass>::StreamedCommitModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CommitModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommitModel(::grpc::ServerContext* context, const ::ric::packet::spy::CommitModelRequest* request, ::ric::packet::spy::CommitModelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommitModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::packet::spy::CommitModelRequest,::ric::packet::spy::CommitModelResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_StartWatch<WithStreamedUnaryMethod_CancelWatch<WithStreamedUnaryMethod_CommitModel<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_WatchUpdate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::ric::packet::spy::WatchUpdateRequest, ::ric::packet::spy::ObjectUpdate>(std::bind(&WithSplitStreamingMethod_WatchUpdate<BaseClass>::StreamedWatchUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_WatchUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchUpdate(::grpc::ServerContext* context, const ::ric::packet::spy::WatchUpdateRequest* request, ::grpc::ServerWriter< ::ric::packet::spy::ObjectUpdate>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchUpdate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ric::packet::spy::WatchUpdateRequest,::ric::packet::spy::ObjectUpdate>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_WatchUpdate<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_StartWatch<WithStreamedUnaryMethod_CancelWatch<WithStreamedUnaryMethod_CommitModel<WithSplitStreamingMethod_WatchUpdate<Service > > > > > StreamedService;
};

}  // namespace spy
}  // namespace packet
}  // namespace ric


#endif  // GRPC_ric_2dpacket_2dspy_2fricpacketspy_2eproto__INCLUDED
