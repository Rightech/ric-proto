// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-packet-spy/ricpacketspy.proto

#ifndef PROTOBUF_INCLUDED_ric_2dpacket_2dspy_2fricpacketspy_2eproto
#define PROTOBUF_INCLUDED_ric_2dpacket_2dspy_2fricpacketspy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dpacket_2dspy_2fricpacketspy_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dpacket_2dspy_2fricpacketspy_2eproto();
namespace ric {
namespace packet {
namespace spy {
class CancelWatchRequest;
class CancelWatchRequestDefaultTypeInternal;
extern CancelWatchRequestDefaultTypeInternal _CancelWatchRequest_default_instance_;
class CancelWatchResponse;
class CancelWatchResponseDefaultTypeInternal;
extern CancelWatchResponseDefaultTypeInternal _CancelWatchResponse_default_instance_;
class CommitModelRequest;
class CommitModelRequestDefaultTypeInternal;
extern CommitModelRequestDefaultTypeInternal _CommitModelRequest_default_instance_;
class CommitModelResponse;
class CommitModelResponseDefaultTypeInternal;
extern CommitModelResponseDefaultTypeInternal _CommitModelResponse_default_instance_;
class GetStateRequest;
class GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class GetStateResponse;
class GetStateResponseDefaultTypeInternal;
extern GetStateResponseDefaultTypeInternal _GetStateResponse_default_instance_;
class ObjectUpdate;
class ObjectUpdateDefaultTypeInternal;
extern ObjectUpdateDefaultTypeInternal _ObjectUpdate_default_instance_;
class StartWatchRequest;
class StartWatchRequestDefaultTypeInternal;
extern StartWatchRequestDefaultTypeInternal _StartWatchRequest_default_instance_;
class StartWatchResponse;
class StartWatchResponseDefaultTypeInternal;
extern StartWatchResponseDefaultTypeInternal _StartWatchResponse_default_instance_;
class WatchUpdateRequest;
class WatchUpdateRequestDefaultTypeInternal;
extern WatchUpdateRequestDefaultTypeInternal _WatchUpdateRequest_default_instance_;
}  // namespace spy
}  // namespace packet
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::packet::spy::CancelWatchRequest* Arena::CreateMaybeMessage<::ric::packet::spy::CancelWatchRequest>(Arena*);
template<> ::ric::packet::spy::CancelWatchResponse* Arena::CreateMaybeMessage<::ric::packet::spy::CancelWatchResponse>(Arena*);
template<> ::ric::packet::spy::CommitModelRequest* Arena::CreateMaybeMessage<::ric::packet::spy::CommitModelRequest>(Arena*);
template<> ::ric::packet::spy::CommitModelResponse* Arena::CreateMaybeMessage<::ric::packet::spy::CommitModelResponse>(Arena*);
template<> ::ric::packet::spy::GetStateRequest* Arena::CreateMaybeMessage<::ric::packet::spy::GetStateRequest>(Arena*);
template<> ::ric::packet::spy::GetStateResponse* Arena::CreateMaybeMessage<::ric::packet::spy::GetStateResponse>(Arena*);
template<> ::ric::packet::spy::ObjectUpdate* Arena::CreateMaybeMessage<::ric::packet::spy::ObjectUpdate>(Arena*);
template<> ::ric::packet::spy::StartWatchRequest* Arena::CreateMaybeMessage<::ric::packet::spy::StartWatchRequest>(Arena*);
template<> ::ric::packet::spy::StartWatchResponse* Arena::CreateMaybeMessage<::ric::packet::spy::StartWatchResponse>(Arena*);
template<> ::ric::packet::spy::WatchUpdateRequest* Arena::CreateMaybeMessage<::ric::packet::spy::WatchUpdateRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace packet {
namespace spy {

// ===================================================================

class GetStateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.GetStateRequest) */ {
 public:
  GetStateRequest();
  virtual ~GetStateRequest();

  GetStateRequest(const GetStateRequest& from);

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetStateRequest* other);
  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateRequest* New() const final {
    return CreateMaybeMessage<GetStateRequest>(nullptr);
  }

  GetStateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetStateRequest& from);
  void MergeFrom(const GetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.GetStateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class GetStateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.GetStateResponse) */ {
 public:
  GetStateResponse();
  virtual ~GetStateResponse();

  GetStateResponse(const GetStateResponse& from);

  inline GetStateResponse& operator=(const GetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetStateResponse(GetStateResponse&& from) noexcept
    : GetStateResponse() {
    *this = ::std::move(from);
  }

  inline GetStateResponse& operator=(GetStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateResponse*>(
               &_GetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetStateResponse* other);
  friend void swap(GetStateResponse& a, GetStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateResponse* New() const final {
    return CreateMaybeMessage<GetStateResponse>(nullptr);
  }

  GetStateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetStateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetStateResponse& from);
  void MergeFrom(const GetStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.GetStateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class StartWatchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.StartWatchRequest) */ {
 public:
  StartWatchRequest();
  virtual ~StartWatchRequest();

  StartWatchRequest(const StartWatchRequest& from);

  inline StartWatchRequest& operator=(const StartWatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartWatchRequest(StartWatchRequest&& from) noexcept
    : StartWatchRequest() {
    *this = ::std::move(from);
  }

  inline StartWatchRequest& operator=(StartWatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StartWatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartWatchRequest* internal_default_instance() {
    return reinterpret_cast<const StartWatchRequest*>(
               &_StartWatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StartWatchRequest* other);
  friend void swap(StartWatchRequest& a, StartWatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartWatchRequest* New() const final {
    return CreateMaybeMessage<StartWatchRequest>(nullptr);
  }

  StartWatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartWatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartWatchRequest& from);
  void MergeFrom(const StartWatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartWatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // int64 timeout = 2;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  ::google::protobuf::int64 timeout() const;
  void set_timeout(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.StartWatchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::int64 timeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class StartWatchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.StartWatchResponse) */ {
 public:
  StartWatchResponse();
  virtual ~StartWatchResponse();

  StartWatchResponse(const StartWatchResponse& from);

  inline StartWatchResponse& operator=(const StartWatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartWatchResponse(StartWatchResponse&& from) noexcept
    : StartWatchResponse() {
    *this = ::std::move(from);
  }

  inline StartWatchResponse& operator=(StartWatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StartWatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartWatchResponse* internal_default_instance() {
    return reinterpret_cast<const StartWatchResponse*>(
               &_StartWatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StartWatchResponse* other);
  friend void swap(StartWatchResponse& a, StartWatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartWatchResponse* New() const final {
    return CreateMaybeMessage<StartWatchResponse>(nullptr);
  }

  StartWatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartWatchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartWatchResponse& from);
  void MergeFrom(const StartWatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartWatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timeout = 1;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  ::google::protobuf::int64 timeout() const;
  void set_timeout(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.StartWatchResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class CancelWatchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.CancelWatchRequest) */ {
 public:
  CancelWatchRequest();
  virtual ~CancelWatchRequest();

  CancelWatchRequest(const CancelWatchRequest& from);

  inline CancelWatchRequest& operator=(const CancelWatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelWatchRequest(CancelWatchRequest&& from) noexcept
    : CancelWatchRequest() {
    *this = ::std::move(from);
  }

  inline CancelWatchRequest& operator=(CancelWatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CancelWatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelWatchRequest* internal_default_instance() {
    return reinterpret_cast<const CancelWatchRequest*>(
               &_CancelWatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CancelWatchRequest* other);
  friend void swap(CancelWatchRequest& a, CancelWatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelWatchRequest* New() const final {
    return CreateMaybeMessage<CancelWatchRequest>(nullptr);
  }

  CancelWatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelWatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelWatchRequest& from);
  void MergeFrom(const CancelWatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelWatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.CancelWatchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class CancelWatchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.CancelWatchResponse) */ {
 public:
  CancelWatchResponse();
  virtual ~CancelWatchResponse();

  CancelWatchResponse(const CancelWatchResponse& from);

  inline CancelWatchResponse& operator=(const CancelWatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelWatchResponse(CancelWatchResponse&& from) noexcept
    : CancelWatchResponse() {
    *this = ::std::move(from);
  }

  inline CancelWatchResponse& operator=(CancelWatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CancelWatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelWatchResponse* internal_default_instance() {
    return reinterpret_cast<const CancelWatchResponse*>(
               &_CancelWatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CancelWatchResponse* other);
  friend void swap(CancelWatchResponse& a, CancelWatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelWatchResponse* New() const final {
    return CreateMaybeMessage<CancelWatchResponse>(nullptr);
  }

  CancelWatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelWatchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelWatchResponse& from);
  void MergeFrom(const CancelWatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelWatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.packet.spy.CancelWatchResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class CommitModelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.CommitModelRequest) */ {
 public:
  CommitModelRequest();
  virtual ~CommitModelRequest();

  CommitModelRequest(const CommitModelRequest& from);

  inline CommitModelRequest& operator=(const CommitModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitModelRequest(CommitModelRequest&& from) noexcept
    : CommitModelRequest() {
    *this = ::std::move(from);
  }

  inline CommitModelRequest& operator=(CommitModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommitModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitModelRequest* internal_default_instance() {
    return reinterpret_cast<const CommitModelRequest*>(
               &_CommitModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CommitModelRequest* other);
  friend void swap(CommitModelRequest& a, CommitModelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitModelRequest* New() const final {
    return CreateMaybeMessage<CommitModelRequest>(nullptr);
  }

  CommitModelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitModelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitModelRequest& from);
  void MergeFrom(const CommitModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitModelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.CommitModelRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class CommitModelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.CommitModelResponse) */ {
 public:
  CommitModelResponse();
  virtual ~CommitModelResponse();

  CommitModelResponse(const CommitModelResponse& from);

  inline CommitModelResponse& operator=(const CommitModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitModelResponse(CommitModelResponse&& from) noexcept
    : CommitModelResponse() {
    *this = ::std::move(from);
  }

  inline CommitModelResponse& operator=(CommitModelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommitModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitModelResponse* internal_default_instance() {
    return reinterpret_cast<const CommitModelResponse*>(
               &_CommitModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CommitModelResponse* other);
  friend void swap(CommitModelResponse& a, CommitModelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitModelResponse* New() const final {
    return CreateMaybeMessage<CommitModelResponse>(nullptr);
  }

  CommitModelResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitModelResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitModelResponse& from);
  void MergeFrom(const CommitModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitModelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.packet.spy.CommitModelResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class WatchUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.WatchUpdateRequest) */ {
 public:
  WatchUpdateRequest();
  virtual ~WatchUpdateRequest();

  WatchUpdateRequest(const WatchUpdateRequest& from);

  inline WatchUpdateRequest& operator=(const WatchUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchUpdateRequest(WatchUpdateRequest&& from) noexcept
    : WatchUpdateRequest() {
    *this = ::std::move(from);
  }

  inline WatchUpdateRequest& operator=(WatchUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WatchUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUpdateRequest*>(
               &_WatchUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(WatchUpdateRequest* other);
  friend void swap(WatchUpdateRequest& a, WatchUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchUpdateRequest* New() const final {
    return CreateMaybeMessage<WatchUpdateRequest>(nullptr);
  }

  WatchUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WatchUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WatchUpdateRequest& from);
  void MergeFrom(const WatchUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.WatchUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// -------------------------------------------------------------------

class ObjectUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.packet.spy.ObjectUpdate) */ {
 public:
  ObjectUpdate();
  virtual ~ObjectUpdate();

  ObjectUpdate(const ObjectUpdate& from);

  inline ObjectUpdate& operator=(const ObjectUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectUpdate(ObjectUpdate&& from) noexcept
    : ObjectUpdate() {
    *this = ::std::move(from);
  }

  inline ObjectUpdate& operator=(ObjectUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObjectUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectUpdate* internal_default_instance() {
    return reinterpret_cast<const ObjectUpdate*>(
               &_ObjectUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ObjectUpdate* other);
  friend void swap(ObjectUpdate& a, ObjectUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectUpdate* New() const final {
    return CreateMaybeMessage<ObjectUpdate>(nullptr);
  }

  ObjectUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectUpdate& from);
  void MergeFrom(const ObjectUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.packet.spy.ObjectUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dpacket_2dspy_2fricpacketspy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetStateRequest

// string object_id = 1;
inline void GetStateRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStateRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.GetStateRequest.object_id)
  return object_id_.GetNoArena();
}
inline void GetStateRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.GetStateRequest.object_id)
}
#if LANG_CXX11
inline void GetStateRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.GetStateRequest.object_id)
}
#endif
inline void GetStateRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.GetStateRequest.object_id)
}
inline void GetStateRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.GetStateRequest.object_id)
}
inline ::std::string* GetStateRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.GetStateRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStateRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.GetStateRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.GetStateRequest.object_id)
}

// -------------------------------------------------------------------

// GetStateResponse

// bytes data = 1;
inline void GetStateResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStateResponse::data() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.GetStateResponse.data)
  return data_.GetNoArena();
}
inline void GetStateResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.GetStateResponse.data)
}
#if LANG_CXX11
inline void GetStateResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.GetStateResponse.data)
}
#endif
inline void GetStateResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.GetStateResponse.data)
}
inline void GetStateResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.GetStateResponse.data)
}
inline ::std::string* GetStateResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.GetStateResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStateResponse::release_data() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.GetStateResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateResponse::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.GetStateResponse.data)
}

// -------------------------------------------------------------------

// StartWatchRequest

// string object_id = 1;
inline void StartWatchRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartWatchRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.StartWatchRequest.object_id)
  return object_id_.GetNoArena();
}
inline void StartWatchRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.StartWatchRequest.object_id)
}
#if LANG_CXX11
inline void StartWatchRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.StartWatchRequest.object_id)
}
#endif
inline void StartWatchRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.StartWatchRequest.object_id)
}
inline void StartWatchRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.StartWatchRequest.object_id)
}
inline ::std::string* StartWatchRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.StartWatchRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartWatchRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.StartWatchRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartWatchRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.StartWatchRequest.object_id)
}

// int64 timeout = 2;
inline void StartWatchRequest::clear_timeout() {
  timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StartWatchRequest::timeout() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.StartWatchRequest.timeout)
  return timeout_;
}
inline void StartWatchRequest::set_timeout(::google::protobuf::int64 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ric.packet.spy.StartWatchRequest.timeout)
}

// -------------------------------------------------------------------

// StartWatchResponse

// int64 timeout = 1;
inline void StartWatchResponse::clear_timeout() {
  timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StartWatchResponse::timeout() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.StartWatchResponse.timeout)
  return timeout_;
}
inline void StartWatchResponse::set_timeout(::google::protobuf::int64 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ric.packet.spy.StartWatchResponse.timeout)
}

// -------------------------------------------------------------------

// CancelWatchRequest

// string object_id = 1;
inline void CancelWatchRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelWatchRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.CancelWatchRequest.object_id)
  return object_id_.GetNoArena();
}
inline void CancelWatchRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.CancelWatchRequest.object_id)
}
#if LANG_CXX11
inline void CancelWatchRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.CancelWatchRequest.object_id)
}
#endif
inline void CancelWatchRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.CancelWatchRequest.object_id)
}
inline void CancelWatchRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.CancelWatchRequest.object_id)
}
inline ::std::string* CancelWatchRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.CancelWatchRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelWatchRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.CancelWatchRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelWatchRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.CancelWatchRequest.object_id)
}

// -------------------------------------------------------------------

// CancelWatchResponse

// -------------------------------------------------------------------

// CommitModelRequest

// string object_id = 1;
inline void CommitModelRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommitModelRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.CommitModelRequest.object_id)
  return object_id_.GetNoArena();
}
inline void CommitModelRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.CommitModelRequest.object_id)
}
#if LANG_CXX11
inline void CommitModelRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.CommitModelRequest.object_id)
}
#endif
inline void CommitModelRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.CommitModelRequest.object_id)
}
inline void CommitModelRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.CommitModelRequest.object_id)
}
inline ::std::string* CommitModelRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.CommitModelRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitModelRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.CommitModelRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitModelRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.CommitModelRequest.object_id)
}

// repeated string fields = 2;
inline int CommitModelRequest::fields_size() const {
  return fields_.size();
}
inline void CommitModelRequest::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& CommitModelRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.CommitModelRequest.fields)
  return fields_.Get(index);
}
inline ::std::string* CommitModelRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.CommitModelRequest.fields)
  return fields_.Mutable(index);
}
inline void CommitModelRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.packet.spy.CommitModelRequest.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommitModelRequest::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.packet.spy.CommitModelRequest.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommitModelRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.CommitModelRequest.fields)
}
inline void CommitModelRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.CommitModelRequest.fields)
}
inline ::std::string* CommitModelRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:ric.packet.spy.CommitModelRequest.fields)
  return fields_.Add();
}
inline void CommitModelRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.packet.spy.CommitModelRequest.fields)
}
#if LANG_CXX11
inline void CommitModelRequest::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.packet.spy.CommitModelRequest.fields)
}
#endif
inline void CommitModelRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.packet.spy.CommitModelRequest.fields)
}
inline void CommitModelRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.packet.spy.CommitModelRequest.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CommitModelRequest::fields() const {
  // @@protoc_insertion_point(field_list:ric.packet.spy.CommitModelRequest.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CommitModelRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ric.packet.spy.CommitModelRequest.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// CommitModelResponse

// -------------------------------------------------------------------

// WatchUpdateRequest

// string object_id = 1;
inline void WatchUpdateRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchUpdateRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.WatchUpdateRequest.object_id)
  return object_id_.GetNoArena();
}
inline void WatchUpdateRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.WatchUpdateRequest.object_id)
}
#if LANG_CXX11
inline void WatchUpdateRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.WatchUpdateRequest.object_id)
}
#endif
inline void WatchUpdateRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.WatchUpdateRequest.object_id)
}
inline void WatchUpdateRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.WatchUpdateRequest.object_id)
}
inline ::std::string* WatchUpdateRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.WatchUpdateRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchUpdateRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.WatchUpdateRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchUpdateRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.WatchUpdateRequest.object_id)
}

// -------------------------------------------------------------------

// ObjectUpdate

// bytes data = 1;
inline void ObjectUpdate::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectUpdate::data() const {
  // @@protoc_insertion_point(field_get:ric.packet.spy.ObjectUpdate.data)
  return data_.GetNoArena();
}
inline void ObjectUpdate::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.packet.spy.ObjectUpdate.data)
}
#if LANG_CXX11
inline void ObjectUpdate::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.packet.spy.ObjectUpdate.data)
}
#endif
inline void ObjectUpdate::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.packet.spy.ObjectUpdate.data)
}
inline void ObjectUpdate::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.packet.spy.ObjectUpdate.data)
}
inline ::std::string* ObjectUpdate::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.packet.spy.ObjectUpdate.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectUpdate::release_data() {
  // @@protoc_insertion_point(field_release:ric.packet.spy.ObjectUpdate.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectUpdate::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.packet.spy.ObjectUpdate.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spy
}  // namespace packet
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dpacket_2dspy_2fricpacketspy_2eproto
