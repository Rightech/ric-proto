// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-geo/ricgeo.proto

#include "ric-geo/ricgeo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Circle_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Position_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Zone_ric_2dgeo_2fricgeo_2eproto;
namespace ric {
namespace geo {
class GetObjectInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetObjectInfoRequest> _instance;
} _GetObjectInfoRequest_default_instance_;
class GetObjectInfoResponse_ObjectGeofenceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetObjectInfoResponse_ObjectGeofenceInfo> _instance;
} _GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_;
class GetObjectInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetObjectInfoResponse> _instance;
} _GetObjectInfoResponse_default_instance_;
class IndoorCircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndoorCircle> _instance;
} _IndoorCircle_default_instance_;
class CircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Circle> _instance;
} _Circle_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class ZoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Zone> _instance;
} _Zone_default_instance_;
class IndoorPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndoorPoint> _instance;
} _IndoorPoint_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class CheckInRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckInRequest> _instance;
} _CheckInRequest_default_instance_;
class CheckInResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckInResponse> _instance;
} _CheckInResponse_default_instance_;
}  // namespace geo
}  // namespace ric
static void InitDefaultsGetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetObjectInfoRequest_default_instance_;
    new (ptr) ::ric::geo::GetObjectInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetObjectInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_;
    new (ptr) ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetObjectInfoResponse_default_instance_;
    new (ptr) ::ric::geo::GetObjectInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetObjectInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsIndoorCircle_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_IndoorCircle_default_instance_;
    new (ptr) ::ric::geo::IndoorCircle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::IndoorCircle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndoorCircle_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsCircle_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Circle_default_instance_;
    new (ptr) ::ric::geo::Circle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Circle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Circle_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCircle_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsPoint_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Point_default_instance_;
    new (ptr) ::ric::geo::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsZone_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Zone_default_instance_;
    new (ptr) ::ric::geo::Zone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Zone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Zone_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsZone_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsIndoorPoint_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_IndoorPoint_default_instance_;
    new (ptr) ::ric::geo::IndoorPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::IndoorPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndoorPoint_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsPosition_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Position_default_instance_;
    new (ptr) ::ric::geo::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Position_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPosition_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsCheckInRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_CheckInRequest_default_instance_;
    new (ptr) ::ric::geo::CheckInRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::CheckInRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCheckInRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsCheckInResponse_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_CheckInResponse_default_instance_;
    new (ptr) ::ric::geo::CheckInResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::CheckInResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckInResponse_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckInResponse_ric_2dgeo_2fricgeo_2eproto}, {}};

void InitDefaults_ric_2dgeo_2fricgeo_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckInResponse_ric_2dgeo_2fricgeo_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dgeo_2fricgeo_2eproto[11];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dgeo_2fricgeo_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dgeo_2fricgeo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoRequest, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, geofence_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, is_in_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, last_packet_time_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, last_enter_time_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, last_leave_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse, geofences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, x_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, y_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, z_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, lat_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, lon_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Point, lat_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Point, lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Zone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Zone, circle_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Zone, indoor_circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, x_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, y_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Position, location_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Position, indoor_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInRequest, position_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInRequest, zone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInResponse, in_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::geo::GetObjectInfoRequest)},
  { 6, -1, sizeof(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo)},
  { 16, -1, sizeof(::ric::geo::GetObjectInfoResponse)},
  { 22, -1, sizeof(::ric::geo::IndoorCircle)},
  { 31, -1, sizeof(::ric::geo::Circle)},
  { 39, -1, sizeof(::ric::geo::Point)},
  { 46, -1, sizeof(::ric::geo::Zone)},
  { 53, -1, sizeof(::ric::geo::IndoorPoint)},
  { 61, -1, sizeof(::ric::geo::Position)},
  { 68, -1, sizeof(::ric::geo::CheckInRequest)},
  { 75, -1, sizeof(::ric::geo::CheckInResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetObjectInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetObjectInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_IndoorCircle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Circle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Zone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_IndoorPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_CheckInRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_CheckInResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto = {
  {}, AddDescriptors_ric_2dgeo_2fricgeo_2eproto, "ric-geo/ricgeo.proto", schemas,
  file_default_instances, TableStruct_ric_2dgeo_2fricgeo_2eproto::offsets,
  file_level_metadata_ric_2dgeo_2fricgeo_2eproto, 11, file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto, file_level_service_descriptors_ric_2dgeo_2fricgeo_2eproto,
};

const char descriptor_table_protodef_ric_2dgeo_2fricgeo_2eproto[] =
  "\n\024ric-geo/ricgeo.proto\022\007ric.geo\")\n\024GetOb"
  "jectInfoRequest\022\021\n\tobject_id\030\001 \001(\t\"\344\001\n\025G"
  "etObjectInfoResponse\022D\n\tgeofences\030\001 \003(\0132"
  "1.ric.geo.GetObjectInfoResponse.ObjectGe"
  "ofenceInfo\032\204\001\n\022ObjectGeofenceInfo\022\023\n\013geo"
  "fence_id\030\001 \001(\t\022\r\n\005is_in\030\002 \001(\010\022\030\n\020last_pa"
  "cket_time\030\003 \001(\003\022\027\n\017last_enter_time\030\004 \001(\003"
  "\022\027\n\017last_leave_time\030\005 \001(\003\"\?\n\014IndoorCircl"
  "e\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\016\n\006ra"
  "dius\030\004 \001(\001\"2\n\006Circle\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon"
  "\030\002 \001(\001\022\016\n\006radius\030\003 \001(\001\"!\n\005Point\022\013\n\003lat\030\001"
  " \001(\001\022\013\n\003lon\030\002 \001(\001\"U\n\004Zone\022\037\n\006circle\030\001 \001("
  "\0132\017.ric.geo.Circle\022,\n\rindoor_circle\030\002 \001("
  "\0132\025.ric.geo.IndoorCircle\".\n\013IndoorPoint\022"
  "\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"[\n\010Posi"
  "tion\022 \n\010location\030\001 \001(\0132\016.ric.geo.Point\022-"
  "\n\017indoor_location\030\002 \001(\0132\024.ric.geo.Indoor"
  "Point\"R\n\016CheckInRequest\022#\n\010position\030\001 \001("
  "\0132\021.ric.geo.Position\022\033\n\004zone\030\002 \001(\0132\r.ric"
  ".geo.Zone\"\035\n\017CheckInResponse\022\n\n\002in\030\001 \001(\010"
  "2W\n\005Watch\022N\n\rGetObjectInfo\022\035.ric.geo.Get"
  "ObjectInfoRequest\032\036.ric.geo.GetObjectInf"
  "oResponse2E\n\005Check\022<\n\007CheckIn\022\027.ric.geo."
  "CheckInRequest\032\030.ric.geo.CheckInResponse"
  "B\022Z\020./ric-geo;ricgeob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dgeo_2fricgeo_2eproto = {
  false, InitDefaults_ric_2dgeo_2fricgeo_2eproto, 
  descriptor_table_protodef_ric_2dgeo_2fricgeo_2eproto,
  "ric-geo/ricgeo.proto", &assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto, 988,
};

void AddDescriptors_ric_2dgeo_2fricgeo_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dgeo_2fricgeo_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dgeo_2fricgeo_2eproto = []() { AddDescriptors_ric_2dgeo_2fricgeo_2eproto(); return true; }();
namespace ric {
namespace geo {

// ===================================================================

void GetObjectInfoRequest::InitAsDefaultInstance() {
}
class GetObjectInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetObjectInfoRequest::kObjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetObjectInfoRequest::GetObjectInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetObjectInfoRequest)
}
GetObjectInfoRequest::GetObjectInfoRequest(const GetObjectInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetObjectInfoRequest)
}

void GetObjectInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetObjectInfoRequest::~GetObjectInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.GetObjectInfoRequest)
  SharedDtor();
}

void GetObjectInfoRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetObjectInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetObjectInfoRequest& GetObjectInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetObjectInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetObjectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetObjectInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetObjectInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GetObjectInfoRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetObjectInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetObjectInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GetObjectInfoRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetObjectInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetObjectInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetObjectInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetObjectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetObjectInfoRequest)
}

::google::protobuf::uint8* GetObjectInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetObjectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetObjectInfoRequest)
  return target;
}

size_t GetObjectInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetObjectInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetObjectInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetObjectInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetObjectInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetObjectInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetObjectInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetObjectInfoRequest)
    MergeFrom(*source);
  }
}

void GetObjectInfoRequest::MergeFrom(const GetObjectInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetObjectInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
}

void GetObjectInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetObjectInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoRequest::CopyFrom(const GetObjectInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetObjectInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoRequest::IsInitialized() const {
  return true;
}

void GetObjectInfoRequest::Swap(GetObjectInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetObjectInfoRequest::InternalSwap(GetObjectInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetObjectInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetObjectInfoResponse_ObjectGeofenceInfo::InitAsDefaultInstance() {
}
class GetObjectInfoResponse_ObjectGeofenceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetObjectInfoResponse_ObjectGeofenceInfo::kGeofenceIdFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kIsInFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kLastPacketTimeFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kLastEnterTimeFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kLastLeaveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetObjectInfoResponse_ObjectGeofenceInfo::GetObjectInfoResponse_ObjectGeofenceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
}
GetObjectInfoResponse_ObjectGeofenceInfo::GetObjectInfoResponse_ObjectGeofenceInfo(const GetObjectInfoResponse_ObjectGeofenceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geofence_id().size() > 0) {
    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  ::memcpy(&last_packet_time_, &from.last_packet_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_in_) -
    reinterpret_cast<char*>(&last_packet_time_)) + sizeof(is_in_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
}

void GetObjectInfoResponse_ObjectGeofenceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_packet_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&last_packet_time_)) + sizeof(is_in_));
}

GetObjectInfoResponse_ObjectGeofenceInfo::~GetObjectInfoResponse_ObjectGeofenceInfo() {
  // @@protoc_insertion_point(destructor:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  SharedDtor();
}

void GetObjectInfoResponse_ObjectGeofenceInfo::SharedDtor() {
  geofence_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetObjectInfoResponse_ObjectGeofenceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetObjectInfoResponse_ObjectGeofenceInfo& GetObjectInfoResponse_ObjectGeofenceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetObjectInfoResponse_ObjectGeofenceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_packet_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&last_packet_time_)) + sizeof(is_in_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetObjectInfoResponse_ObjectGeofenceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetObjectInfoResponse_ObjectGeofenceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id");
        object = msg->mutable_geofence_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_in = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_in(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_packet_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_last_packet_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_enter_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_enter_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_leave_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_last_leave_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetObjectInfoResponse_ObjectGeofenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geofence_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_packet_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_packet_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_enter_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_enter_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_leave_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_leave_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetObjectInfoResponse_ObjectGeofenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geofence_id(), output);
  }

  // bool is_in = 2;
  if (this->is_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_in(), output);
  }

  // int64 last_packet_time = 3;
  if (this->last_packet_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_packet_time(), output);
  }

  // int64 last_enter_time = 4;
  if (this->last_enter_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_enter_time(), output);
  }

  // int64 last_leave_time = 5;
  if (this->last_leave_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_leave_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
}

::google::protobuf::uint8* GetObjectInfoResponse_ObjectGeofenceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geofence_id(), target);
  }

  // bool is_in = 2;
  if (this->is_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_in(), target);
  }

  // int64 last_packet_time = 3;
  if (this->last_packet_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_packet_time(), target);
  }

  // int64 last_enter_time = 4;
  if (this->last_enter_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_enter_time(), target);
  }

  // int64 last_leave_time = 5;
  if (this->last_leave_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_leave_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  return target;
}

size_t GetObjectInfoResponse_ObjectGeofenceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geofence_id());
  }

  // int64 last_packet_time = 3;
  if (this->last_packet_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_packet_time());
  }

  // int64 last_enter_time = 4;
  if (this->last_enter_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_enter_time());
  }

  // int64 last_leave_time = 5;
  if (this->last_leave_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_leave_time());
  }

  // bool is_in = 2;
  if (this->is_in() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetObjectInfoResponse_ObjectGeofenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetObjectInfoResponse_ObjectGeofenceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<GetObjectInfoResponse_ObjectGeofenceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
    MergeFrom(*source);
  }
}

void GetObjectInfoResponse_ObjectGeofenceInfo::MergeFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geofence_id().size() > 0) {

    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  if (from.last_packet_time() != 0) {
    set_last_packet_time(from.last_packet_time());
  }
  if (from.last_enter_time() != 0) {
    set_last_enter_time(from.last_enter_time());
  }
  if (from.last_leave_time() != 0) {
    set_last_leave_time(from.last_leave_time());
  }
  if (from.is_in() != 0) {
    set_is_in(from.is_in());
  }
}

void GetObjectInfoResponse_ObjectGeofenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoResponse_ObjectGeofenceInfo::CopyFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoResponse_ObjectGeofenceInfo::IsInitialized() const {
  return true;
}

void GetObjectInfoResponse_ObjectGeofenceInfo::Swap(GetObjectInfoResponse_ObjectGeofenceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetObjectInfoResponse_ObjectGeofenceInfo::InternalSwap(GetObjectInfoResponse_ObjectGeofenceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geofence_id_.Swap(&other->geofence_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_packet_time_, other->last_packet_time_);
  swap(last_enter_time_, other->last_enter_time_);
  swap(last_leave_time_, other->last_leave_time_);
  swap(is_in_, other->is_in_);
}

::google::protobuf::Metadata GetObjectInfoResponse_ObjectGeofenceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetObjectInfoResponse::InitAsDefaultInstance() {
}
class GetObjectInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetObjectInfoResponse::kGeofencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetObjectInfoResponse::GetObjectInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetObjectInfoResponse)
}
GetObjectInfoResponse::GetObjectInfoResponse(const GetObjectInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      geofences_(from.geofences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetObjectInfoResponse)
}

void GetObjectInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto.base);
}

GetObjectInfoResponse::~GetObjectInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.geo.GetObjectInfoResponse)
  SharedDtor();
}

void GetObjectInfoResponse::SharedDtor() {
}

void GetObjectInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetObjectInfoResponse& GetObjectInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetObjectInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetObjectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofences_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetObjectInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetObjectInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo::_InternalParse;
          object = msg->add_geofences();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetObjectInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetObjectInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geofences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetObjectInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetObjectInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetObjectInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetObjectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geofences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->geofences(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetObjectInfoResponse)
}

::google::protobuf::uint8* GetObjectInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetObjectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geofences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->geofences(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetObjectInfoResponse)
  return target;
}

size_t GetObjectInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetObjectInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geofences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geofences(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetObjectInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetObjectInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetObjectInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetObjectInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetObjectInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetObjectInfoResponse)
    MergeFrom(*source);
  }
}

void GetObjectInfoResponse::MergeFrom(const GetObjectInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetObjectInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geofences_.MergeFrom(from.geofences_);
}

void GetObjectInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetObjectInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoResponse::CopyFrom(const GetObjectInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetObjectInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoResponse::IsInitialized() const {
  return true;
}

void GetObjectInfoResponse::Swap(GetObjectInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetObjectInfoResponse::InternalSwap(GetObjectInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&geofences_)->InternalSwap(CastToBase(&other->geofences_));
}

::google::protobuf::Metadata GetObjectInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IndoorCircle::InitAsDefaultInstance() {
}
class IndoorCircle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndoorCircle::kXFieldNumber;
const int IndoorCircle::kYFieldNumber;
const int IndoorCircle::kZFieldNumber;
const int IndoorCircle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndoorCircle::IndoorCircle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.IndoorCircle)
}
IndoorCircle::IndoorCircle(const IndoorCircle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.IndoorCircle)
}

void IndoorCircle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
}

IndoorCircle::~IndoorCircle() {
  // @@protoc_insertion_point(destructor:ric.geo.IndoorCircle)
  SharedDtor();
}

void IndoorCircle::SharedDtor() {
}

void IndoorCircle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndoorCircle& IndoorCircle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void IndoorCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.IndoorCircle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndoorCircle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IndoorCircle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndoorCircle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.IndoorCircle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.IndoorCircle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.IndoorCircle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndoorCircle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.IndoorCircle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.IndoorCircle)
}

::google::protobuf::uint8* IndoorCircle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.IndoorCircle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.IndoorCircle)
  return target;
}

size_t IndoorCircle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.IndoorCircle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndoorCircle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.IndoorCircle)
  GOOGLE_DCHECK_NE(&from, this);
  const IndoorCircle* source =
      ::google::protobuf::DynamicCastToGenerated<IndoorCircle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.IndoorCircle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.IndoorCircle)
    MergeFrom(*source);
  }
}

void IndoorCircle::MergeFrom(const IndoorCircle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.IndoorCircle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void IndoorCircle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.IndoorCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndoorCircle::CopyFrom(const IndoorCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.IndoorCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndoorCircle::IsInitialized() const {
  return true;
}

void IndoorCircle::Swap(IndoorCircle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndoorCircle::InternalSwap(IndoorCircle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata IndoorCircle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Circle::InitAsDefaultInstance() {
}
class Circle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kLatFieldNumber;
const int Circle::kLonFieldNumber;
const int Circle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Circle)
}
Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.Circle)
}

void Circle::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:ric.geo.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
}

void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Circle& Circle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Circle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Circle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Circle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Circle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Circle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::google::protobuf::DynamicCastToGenerated<Circle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kLatFieldNumber;
const int Point::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.Point)
}

void Point::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ric.geo.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Point*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Zone::InitAsDefaultInstance() {
  ::ric::geo::_Zone_default_instance_._instance.get_mutable()->circle_ = const_cast< ::ric::geo::Circle*>(
      ::ric::geo::Circle::internal_default_instance());
  ::ric::geo::_Zone_default_instance_._instance.get_mutable()->indoor_circle_ = const_cast< ::ric::geo::IndoorCircle*>(
      ::ric::geo::IndoorCircle::internal_default_instance());
}
class Zone::HasBitSetters {
 public:
  static const ::ric::geo::Circle& circle(const Zone* msg);
  static const ::ric::geo::IndoorCircle& indoor_circle(const Zone* msg);
};

const ::ric::geo::Circle&
Zone::HasBitSetters::circle(const Zone* msg) {
  return *msg->circle_;
}
const ::ric::geo::IndoorCircle&
Zone::HasBitSetters::indoor_circle(const Zone* msg) {
  return *msg->indoor_circle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Zone::kCircleFieldNumber;
const int Zone::kIndoorCircleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Zone::Zone()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Zone)
}
Zone::Zone(const Zone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_circle()) {
    circle_ = new ::ric::geo::Circle(*from.circle_);
  } else {
    circle_ = nullptr;
  }
  if (from.has_indoor_circle()) {
    indoor_circle_ = new ::ric::geo::IndoorCircle(*from.indoor_circle_);
  } else {
    indoor_circle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.Zone)
}

void Zone::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base);
  ::memset(&circle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indoor_circle_) -
      reinterpret_cast<char*>(&circle_)) + sizeof(indoor_circle_));
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:ric.geo.Zone)
  SharedDtor();
}

void Zone::SharedDtor() {
  if (this != internal_default_instance()) delete circle_;
  if (this != internal_default_instance()) delete indoor_circle_;
}

void Zone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Zone& Zone::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Zone::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && circle_ != nullptr) {
    delete circle_;
  }
  circle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && indoor_circle_ != nullptr) {
    delete indoor_circle_;
  }
  indoor_circle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Zone::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Zone*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Circle circle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Circle::_InternalParse;
        object = msg->mutable_circle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.IndoorCircle indoor_circle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::IndoorCircle::_InternalParse;
        object = msg->mutable_indoor_circle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Zone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Circle circle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.IndoorCircle indoor_circle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indoor_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Zone)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Circle circle = 1;
  if (this->has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::circle(this), output);
  }

  // .ric.geo.IndoorCircle indoor_circle = 2;
  if (this->has_indoor_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::indoor_circle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Zone)
}

::google::protobuf::uint8* Zone::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Circle circle = 1;
  if (this->has_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::circle(this), target);
  }

  // .ric.geo.IndoorCircle indoor_circle = 2;
  if (this->has_indoor_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::indoor_circle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Zone)
  return target;
}

size_t Zone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Zone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.geo.Circle circle = 1;
  if (this->has_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *circle_);
  }

  // .ric.geo.IndoorCircle indoor_circle = 2;
  if (this->has_indoor_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *indoor_circle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Zone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  const Zone* source =
      ::google::protobuf::DynamicCastToGenerated<Zone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Zone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Zone)
    MergeFrom(*source);
  }
}

void Zone::MergeFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_circle()) {
    mutable_circle()->::ric::geo::Circle::MergeFrom(from.circle());
  }
  if (from.has_indoor_circle()) {
    mutable_indoor_circle()->::ric::geo::IndoorCircle::MergeFrom(from.indoor_circle());
  }
}

void Zone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone::CopyFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  return true;
}

void Zone::Swap(Zone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Zone::InternalSwap(Zone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(circle_, other->circle_);
  swap(indoor_circle_, other->indoor_circle_);
}

::google::protobuf::Metadata Zone::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IndoorPoint::InitAsDefaultInstance() {
}
class IndoorPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndoorPoint::kXFieldNumber;
const int IndoorPoint::kYFieldNumber;
const int IndoorPoint::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndoorPoint::IndoorPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.IndoorPoint)
}
IndoorPoint::IndoorPoint(const IndoorPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.IndoorPoint)
}

void IndoorPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

IndoorPoint::~IndoorPoint() {
  // @@protoc_insertion_point(destructor:ric.geo.IndoorPoint)
  SharedDtor();
}

void IndoorPoint::SharedDtor() {
}

void IndoorPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndoorPoint& IndoorPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void IndoorPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.IndoorPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndoorPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IndoorPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndoorPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.IndoorPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.IndoorPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.IndoorPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndoorPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.IndoorPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.IndoorPoint)
}

::google::protobuf::uint8* IndoorPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.IndoorPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.IndoorPoint)
  return target;
}

size_t IndoorPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.IndoorPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndoorPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.IndoorPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IndoorPoint* source =
      ::google::protobuf::DynamicCastToGenerated<IndoorPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.IndoorPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.IndoorPoint)
    MergeFrom(*source);
  }
}

void IndoorPoint::MergeFrom(const IndoorPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.IndoorPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void IndoorPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.IndoorPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndoorPoint::CopyFrom(const IndoorPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.IndoorPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndoorPoint::IsInitialized() const {
  return true;
}

void IndoorPoint::Swap(IndoorPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndoorPoint::InternalSwap(IndoorPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata IndoorPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
  ::ric::geo::_Position_default_instance_._instance.get_mutable()->location_ = const_cast< ::ric::geo::Point*>(
      ::ric::geo::Point::internal_default_instance());
  ::ric::geo::_Position_default_instance_._instance.get_mutable()->indoor_location_ = const_cast< ::ric::geo::IndoorPoint*>(
      ::ric::geo::IndoorPoint::internal_default_instance());
}
class Position::HasBitSetters {
 public:
  static const ::ric::geo::Point& location(const Position* msg);
  static const ::ric::geo::IndoorPoint& indoor_location(const Position* msg);
};

const ::ric::geo::Point&
Position::HasBitSetters::location(const Position* msg) {
  return *msg->location_;
}
const ::ric::geo::IndoorPoint&
Position::HasBitSetters::indoor_location(const Position* msg) {
  return *msg->indoor_location_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLocationFieldNumber;
const int Position::kIndoorLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::ric::geo::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_indoor_location()) {
    indoor_location_ = new ::ric::geo::IndoorPoint(*from.indoor_location_);
  } else {
    indoor_location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.Position)
}

void Position::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indoor_location_) -
      reinterpret_cast<char*>(&location_)) + sizeof(indoor_location_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:ric.geo.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete indoor_location_;
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && indoor_location_ != nullptr) {
    delete indoor_location_;
  }
  indoor_location_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Point location = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Point::_InternalParse;
        object = msg->mutable_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.IndoorPoint indoor_location = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::IndoorPoint::_InternalParse;
        object = msg->mutable_indoor_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Point location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.IndoorPoint indoor_location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indoor_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Point location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::location(this), output);
  }

  // .ric.geo.IndoorPoint indoor_location = 2;
  if (this->has_indoor_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::indoor_location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Point location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::location(this), target);
  }

  // .ric.geo.IndoorPoint indoor_location = 2;
  if (this->has_indoor_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::indoor_location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.geo.Point location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .ric.geo.IndoorPoint indoor_location = 2;
  if (this->has_indoor_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *indoor_location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::ric::geo::Point::MergeFrom(from.location());
  }
  if (from.has_indoor_location()) {
    mutable_indoor_location()->::ric::geo::IndoorPoint::MergeFrom(from.indoor_location());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
  swap(indoor_location_, other->indoor_location_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckInRequest::InitAsDefaultInstance() {
  ::ric::geo::_CheckInRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::ric::geo::Position*>(
      ::ric::geo::Position::internal_default_instance());
  ::ric::geo::_CheckInRequest_default_instance_._instance.get_mutable()->zone_ = const_cast< ::ric::geo::Zone*>(
      ::ric::geo::Zone::internal_default_instance());
}
class CheckInRequest::HasBitSetters {
 public:
  static const ::ric::geo::Position& position(const CheckInRequest* msg);
  static const ::ric::geo::Zone& zone(const CheckInRequest* msg);
};

const ::ric::geo::Position&
CheckInRequest::HasBitSetters::position(const CheckInRequest* msg) {
  return *msg->position_;
}
const ::ric::geo::Zone&
CheckInRequest::HasBitSetters::zone(const CheckInRequest* msg) {
  return *msg->zone_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckInRequest::kPositionFieldNumber;
const int CheckInRequest::kZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckInRequest::CheckInRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.CheckInRequest)
}
CheckInRequest::CheckInRequest(const CheckInRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::ric::geo::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_zone()) {
    zone_ = new ::ric::geo::Zone(*from.zone_);
  } else {
    zone_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.CheckInRequest)
}

void CheckInRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zone_) -
      reinterpret_cast<char*>(&position_)) + sizeof(zone_));
}

CheckInRequest::~CheckInRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.CheckInRequest)
  SharedDtor();
}

void CheckInRequest::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete zone_;
}

void CheckInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckInRequest& CheckInRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void CheckInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.CheckInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckInRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckInRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Position position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.Zone zone = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Zone::_InternalParse;
        object = msg->mutable_zone();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckInRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.CheckInRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.Zone zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.CheckInRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.CheckInRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckInRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.CheckInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // .ric.geo.Zone zone = 2;
  if (this->has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::zone(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.CheckInRequest)
}

::google::protobuf::uint8* CheckInRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.CheckInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // .ric.geo.Zone zone = 2;
  if (this->has_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::zone(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.CheckInRequest)
  return target;
}

size_t CheckInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.CheckInRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.geo.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ric.geo.Zone zone = 2;
  if (this->has_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *zone_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckInRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.CheckInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckInRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CheckInRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.CheckInRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.CheckInRequest)
    MergeFrom(*source);
  }
}

void CheckInRequest::MergeFrom(const CheckInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.CheckInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::ric::geo::Position::MergeFrom(from.position());
  }
  if (from.has_zone()) {
    mutable_zone()->::ric::geo::Zone::MergeFrom(from.zone());
  }
}

void CheckInRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.CheckInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckInRequest::CopyFrom(const CheckInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.CheckInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckInRequest::IsInitialized() const {
  return true;
}

void CheckInRequest::Swap(CheckInRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckInRequest::InternalSwap(CheckInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(zone_, other->zone_);
}

::google::protobuf::Metadata CheckInRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckInResponse::InitAsDefaultInstance() {
}
class CheckInResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckInResponse::kInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckInResponse::CheckInResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.CheckInResponse)
}
CheckInResponse::CheckInResponse(const CheckInResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_ = from.in_;
  // @@protoc_insertion_point(copy_constructor:ric.geo.CheckInResponse)
}

void CheckInResponse::SharedCtor() {
  in_ = false;
}

CheckInResponse::~CheckInResponse() {
  // @@protoc_insertion_point(destructor:ric.geo.CheckInResponse)
  SharedDtor();
}

void CheckInResponse::SharedDtor() {
}

void CheckInResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckInResponse& CheckInResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckInResponse_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void CheckInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.CheckInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckInResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckInResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool in = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_in(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckInResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.CheckInResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool in = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.CheckInResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.CheckInResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckInResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.CheckInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool in = 1;
  if (this->in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->in(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.CheckInResponse)
}

::google::protobuf::uint8* CheckInResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.CheckInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool in = 1;
  if (this->in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->in(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.CheckInResponse)
  return target;
}

size_t CheckInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.CheckInResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool in = 1;
  if (this->in() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckInResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.CheckInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckInResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CheckInResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.CheckInResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.CheckInResponse)
    MergeFrom(*source);
  }
}

void CheckInResponse::MergeFrom(const CheckInResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.CheckInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.in() != 0) {
    set_in(from.in());
  }
}

void CheckInResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.CheckInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckInResponse::CopyFrom(const CheckInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.CheckInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckInResponse::IsInitialized() const {
  return true;
}

void CheckInResponse::Swap(CheckInResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckInResponse::InternalSwap(CheckInResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(in_, other->in_);
}

::google::protobuf::Metadata CheckInResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geo
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::geo::GetObjectInfoRequest* Arena::CreateMaybeMessage< ::ric::geo::GetObjectInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetObjectInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* Arena::CreateMaybeMessage< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GetObjectInfoResponse* Arena::CreateMaybeMessage< ::ric::geo::GetObjectInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetObjectInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::IndoorCircle* Arena::CreateMaybeMessage< ::ric::geo::IndoorCircle >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::IndoorCircle >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Circle* Arena::CreateMaybeMessage< ::ric::geo::Circle >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Circle >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Point* Arena::CreateMaybeMessage< ::ric::geo::Point >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Zone* Arena::CreateMaybeMessage< ::ric::geo::Zone >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Zone >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::IndoorPoint* Arena::CreateMaybeMessage< ::ric::geo::IndoorPoint >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::IndoorPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Position* Arena::CreateMaybeMessage< ::ric::geo::Position >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::CheckInRequest* Arena::CreateMaybeMessage< ::ric::geo::CheckInRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::CheckInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::CheckInResponse* Arena::CreateMaybeMessage< ::ric::geo::CheckInResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::CheckInResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
