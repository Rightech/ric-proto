// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-geo/ricgeo.proto

#include "ric-geo/ricgeo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Circle_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Fence_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Position_ric_2dgeo_2fricgeo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Zone_ric_2dgeo_2fricgeo_2eproto;
namespace ric {
namespace geo {
class EmptyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmptyResponse> _instance;
} _EmptyResponse_default_instance_;
class WatchGeofenceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WatchGeofenceRequest> _instance;
} _WatchGeofenceRequest_default_instance_;
class WatchRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WatchRoomRequest> _instance;
} _WatchRoomRequest_default_instance_;
class FenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fence> _instance;
} _Fence_default_instance_;
class WatchRouteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WatchRouteRequest> _instance;
} _WatchRouteRequest_default_instance_;
class UpdateGeoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateGeoRequest> _instance;
} _UpdateGeoRequest_default_instance_;
class GetObjectInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetObjectInfoRequest> _instance;
} _GetObjectInfoRequest_default_instance_;
class GetObjectInfoResponse_ObjectGeofenceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetObjectInfoResponse_ObjectGeofenceInfo> _instance;
} _GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_;
class GetObjectInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetObjectInfoResponse> _instance;
} _GetObjectInfoResponse_default_instance_;
class WatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WatchRequest> _instance;
} _WatchRequest_default_instance_;
class StopRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopRequest> _instance;
} _StopRequest_default_instance_;
class ControlRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlRequest> _instance;
} _ControlRequest_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Time> _instance;
} _Time_default_instance_;
class CircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Circle> _instance;
} _Circle_default_instance_;
class OsmResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OsmResponse> _instance;
} _OsmResponse_default_instance_;
class GeocodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeocodeRequest> _instance;
} _GeocodeRequest_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class GeocodeReverseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeocodeReverseRequest> _instance;
} _GeocodeReverseRequest_default_instance_;
class GetRouteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRouteRequest> _instance;
} _GetRouteRequest_default_instance_;
class IndoorCircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndoorCircle> _instance;
} _IndoorCircle_default_instance_;
class ZoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Zone> _instance;
} _Zone_default_instance_;
class IndoorPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndoorPoint> _instance;
} _IndoorPoint_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class CheckInRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckInRequest> _instance;
} _CheckInRequest_default_instance_;
class CheckInResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckInResponse> _instance;
} _CheckInResponse_default_instance_;
}  // namespace geo
}  // namespace ric
static void InitDefaultsEmptyResponse_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_EmptyResponse_default_instance_;
    new (ptr) ::ric::geo::EmptyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::EmptyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmptyResponse_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmptyResponse_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsWatchGeofenceRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_WatchGeofenceRequest_default_instance_;
    new (ptr) ::ric::geo::WatchGeofenceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::WatchGeofenceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WatchGeofenceRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWatchGeofenceRequest_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsWatchRoomRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_WatchRoomRequest_default_instance_;
    new (ptr) ::ric::geo::WatchRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::WatchRoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WatchRoomRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWatchRoomRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Fence_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsFence_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Fence_default_instance_;
    new (ptr) ::ric::geo::Fence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Fence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fence_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFence_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsWatchRouteRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_WatchRouteRequest_default_instance_;
    new (ptr) ::ric::geo::WatchRouteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::WatchRouteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WatchRouteRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWatchRouteRequest_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsUpdateGeoRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_UpdateGeoRequest_default_instance_;
    new (ptr) ::ric::geo::UpdateGeoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::UpdateGeoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateGeoRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateGeoRequest_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetObjectInfoRequest_default_instance_;
    new (ptr) ::ric::geo::GetObjectInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetObjectInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_;
    new (ptr) ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetObjectInfoResponse_default_instance_;
    new (ptr) ::ric::geo::GetObjectInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetObjectInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsWatchRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_WatchRequest_default_instance_;
    new (ptr) ::ric::geo::WatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::WatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WatchRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWatchRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Fence_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsStopRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_StopRequest_default_instance_;
    new (ptr) ::ric::geo::StopRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::StopRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Fence_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsControlRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_ControlRequest_default_instance_;
    new (ptr) ::ric::geo::ControlRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::ControlRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ControlRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsControlRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Time_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsTime_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Time_default_instance_;
    new (ptr) ::ric::geo::Time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Time_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTime_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsCircle_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Circle_default_instance_;
    new (ptr) ::ric::geo::Circle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Circle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Circle_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCircle_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsOsmResponse_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_OsmResponse_default_instance_;
    new (ptr) ::ric::geo::OsmResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::OsmResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OsmResponse_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOsmResponse_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGeocodeRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GeocodeRequest_default_instance_;
    new (ptr) ::ric::geo::GeocodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GeocodeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeocodeRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeocodeRequest_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsPoint_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Point_default_instance_;
    new (ptr) ::ric::geo::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsGeocodeReverseRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GeocodeReverseRequest_default_instance_;
    new (ptr) ::ric::geo::GeocodeReverseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GeocodeReverseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GeocodeReverseRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGeocodeReverseRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsGetRouteRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_GetRouteRequest_default_instance_;
    new (ptr) ::ric::geo::GetRouteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::GetRouteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRouteRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRouteRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsIndoorCircle_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_IndoorCircle_default_instance_;
    new (ptr) ::ric::geo::IndoorCircle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::IndoorCircle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndoorCircle_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsZone_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Zone_default_instance_;
    new (ptr) ::ric::geo::Zone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Zone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Zone_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsZone_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsIndoorPoint_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_IndoorPoint_default_instance_;
    new (ptr) ::ric::geo::IndoorPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::IndoorPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndoorPoint_ric_2dgeo_2fricgeo_2eproto}, {}};

static void InitDefaultsPosition_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_Position_default_instance_;
    new (ptr) ::ric::geo::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Position_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPosition_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsCheckInRequest_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_CheckInRequest_default_instance_;
    new (ptr) ::ric::geo::CheckInRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::CheckInRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCheckInRequest_ric_2dgeo_2fricgeo_2eproto}, {
      &scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base,
      &scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base,}};

static void InitDefaultsCheckInResponse_ric_2dgeo_2fricgeo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::geo::_CheckInResponse_default_instance_;
    new (ptr) ::ric::geo::CheckInResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::geo::CheckInResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckInResponse_ric_2dgeo_2fricgeo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckInResponse_ric_2dgeo_2fricgeo_2eproto}, {}};

void InitDefaults_ric_2dgeo_2fricgeo_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EmptyResponse_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WatchGeofenceRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WatchRoomRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fence_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WatchRouteRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateGeoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WatchRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Time_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OsmResponse_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeocodeRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeocodeReverseRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRouteRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckInResponse_ric_2dgeo_2fricgeo_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dgeo_2fricgeo_2eproto[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto[4];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dgeo_2fricgeo_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dgeo_2fricgeo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::EmptyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchGeofenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchGeofenceRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchGeofenceRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchGeofenceRequest, geofences_ids_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchGeofenceRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRoomRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRoomRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRoomRequest, fences_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRoomRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Fence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Fence, geofence_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Fence, floor_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Fence, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRouteRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRouteRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRouteRequest, routes_ids_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRouteRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::UpdateGeoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::UpdateGeoRequest, geofence_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::UpdateGeoRequest, floor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoRequest, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, geofence_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, is_in_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, last_packet_time_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, last_enter_time_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo, last_leave_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetObjectInfoResponse, geofences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRequest, event_type_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRequest, fences_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::WatchRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::StopRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::StopRequest, fences_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::StopRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::ControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::ControlRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::ControlRequest, time_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::ControlRequest, circle_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::ControlRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Time, start_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Time, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, lat_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, lon_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Circle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::OsmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::OsmResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GeocodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GeocodeRequest, query_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GeocodeRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Point, lat_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Point, lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GeocodeReverseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GeocodeReverseRequest, point_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GeocodeReverseRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetRouteRequest, coordinates_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::GetRouteRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, x_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, y_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, z_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorCircle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Zone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Zone, circle_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Zone, indoor_circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, x_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, y_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::IndoorPoint, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::Position, location_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::Position, indoor_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInRequest, position_),
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInRequest, zone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::geo::CheckInResponse, in_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::geo::EmptyResponse)},
  { 5, -1, sizeof(::ric::geo::WatchGeofenceRequest)},
  { 14, -1, sizeof(::ric::geo::WatchRoomRequest)},
  { 23, -1, sizeof(::ric::geo::Fence)},
  { 31, -1, sizeof(::ric::geo::WatchRouteRequest)},
  { 40, -1, sizeof(::ric::geo::UpdateGeoRequest)},
  { 47, -1, sizeof(::ric::geo::GetObjectInfoRequest)},
  { 53, -1, sizeof(::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo)},
  { 63, -1, sizeof(::ric::geo::GetObjectInfoResponse)},
  { 69, -1, sizeof(::ric::geo::WatchRequest)},
  { 78, -1, sizeof(::ric::geo::StopRequest)},
  { 86, -1, sizeof(::ric::geo::ControlRequest)},
  { 95, -1, sizeof(::ric::geo::Time)},
  { 102, -1, sizeof(::ric::geo::Circle)},
  { 110, -1, sizeof(::ric::geo::OsmResponse)},
  { 116, -1, sizeof(::ric::geo::GeocodeRequest)},
  { 123, -1, sizeof(::ric::geo::Point)},
  { 130, -1, sizeof(::ric::geo::GeocodeReverseRequest)},
  { 137, -1, sizeof(::ric::geo::GetRouteRequest)},
  { 144, -1, sizeof(::ric::geo::IndoorCircle)},
  { 153, -1, sizeof(::ric::geo::Zone)},
  { 160, -1, sizeof(::ric::geo::IndoorPoint)},
  { 168, -1, sizeof(::ric::geo::Position)},
  { 175, -1, sizeof(::ric::geo::CheckInRequest)},
  { 182, -1, sizeof(::ric::geo::CheckInResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_EmptyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_WatchGeofenceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_WatchRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Fence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_WatchRouteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_UpdateGeoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetObjectInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetObjectInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_WatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_StopRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_ControlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Circle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_OsmResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GeocodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GeocodeReverseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_IndoorCircle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Zone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_IndoorPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_CheckInRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::geo::_CheckInResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto = {
  {}, AddDescriptors_ric_2dgeo_2fricgeo_2eproto, "ric-geo/ricgeo.proto", schemas,
  file_default_instances, TableStruct_ric_2dgeo_2fricgeo_2eproto::offsets,
  file_level_metadata_ric_2dgeo_2fricgeo_2eproto, 25, file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto, file_level_service_descriptors_ric_2dgeo_2fricgeo_2eproto,
};

const char descriptor_table_protodef_ric_2dgeo_2fricgeo_2eproto[] =
  "\n\024ric-geo/ricgeo.proto\022\007ric.geo\"\017\n\rEmpty"
  "Response\"\311\001\n\024WatchGeofenceRequest\022\021\n\tobj"
  "ect_id\030\001 \001(\t\022;\n\nevent_type\030\002 \001(\0162\'.ric.g"
  "eo.WatchGeofenceRequest.EventType\022\025\n\rgeo"
  "fences_ids\030\003 \003(\t\022\014\n\004tags\030\004 \003(\t\"<\n\tEventT"
  "ype\022\007\n\003ALL\020\000\022\022\n\016GEOFENCE_ENTER\020\001\022\022\n\016GEOF"
  "ENCE_LEAVE\020\002\"\302\001\n\020WatchRoomRequest\022\021\n\tobj"
  "ect_id\030\001 \001(\t\0227\n\nevent_type\030\002 \001(\0162#.ric.g"
  "eo.WatchRoomRequest.EventType\022\036\n\006fences\030"
  "\003 \003(\0132\016.ric.geo.Fence\022\014\n\004tags\030\004 \003(\t\"4\n\tE"
  "ventType\022\007\n\003ALL\020\000\022\016\n\nROOM_ENTER\020\001\022\016\n\nROO"
  "M_LEAVE\020\002\"\?\n\005Fence\022\023\n\013geofence_id\030\001 \001(\t\022"
  "\020\n\010floor_id\030\002 \001(\t\022\017\n\007room_id\030\003 \001(\t\"\265\001\n\021W"
  "atchRouteRequest\022\021\n\tobject_id\030\001 \001(\t\0228\n\ne"
  "vent_type\030\002 \001(\0162$.ric.geo.WatchRouteRequ"
  "est.EventType\022\022\n\nroutes_ids\030\003 \003(\t\022\014\n\004tag"
  "s\030\004 \003(\t\"1\n\tEventType\022\007\n\003ALL\020\000\022\014\n\010ROUTE_O"
  "N\020\001\022\r\n\tROUTE_OFF\020\002\"9\n\020UpdateGeoRequest\022\023"
  "\n\013geofence_id\030\001 \001(\t\022\020\n\010floor_id\030\002 \001(\t\")\n"
  "\024GetObjectInfoRequest\022\021\n\tobject_id\030\001 \001(\t"
  "\"\344\001\n\025GetObjectInfoResponse\022D\n\tgeofences\030"
  "\001 \003(\01321.ric.geo.GetObjectInfoResponse.Ob"
  "jectGeofenceInfo\032\204\001\n\022ObjectGeofenceInfo\022"
  "\023\n\013geofence_id\030\001 \001(\t\022\r\n\005is_in\030\002 \001(\010\022\030\n\020l"
  "ast_packet_time\030\003 \001(\003\022\027\n\017last_enter_time"
  "\030\004 \001(\003\022\027\n\017last_leave_time\030\005 \001(\003\"\270\002\n\014Watc"
  "hRequest\022\021\n\tobject_id\030\001 \001(\t\0223\n\nevent_typ"
  "e\030\002 \001(\0162\037.ric.geo.WatchRequest.EventType"
  "\022\036\n\006fences\030\003 \003(\0132\016.ric.geo.Fence\022\014\n\004tags"
  "\030\004 \003(\t\"\261\001\n\tEventType\022\r\n\tUNDEFINED\020\000\022\022\n\016G"
  "EOFENCE_ENTER\020\001\022\022\n\016GEOFENCE_LEAVE\020\002\022\021\n\rG"
  "EOFENCE_BOTH\020\003\022\014\n\010ROUTE_ON\020\005\022\r\n\tROUTE_OF"
  "F\020\006\022\016\n\nROUTE_BOTH\020\007\022\016\n\nROOM_ENTER\020\t\022\016\n\nR"
  "OOM_LEAVE\020\n\022\r\n\tROOM_BOTH\020\013\"N\n\013StopReques"
  "t\022\021\n\tobject_id\030\001 \001(\t\022\036\n\006fences\030\002 \003(\0132\016.r"
  "ic.geo.Fence\022\014\n\004tags\030\003 \003(\t\"o\n\016ControlReq"
  "uest\022\021\n\tobject_id\030\001 \001(\t\022\033\n\004time\030\002 \001(\0132\r."
  "ric.geo.Time\022\037\n\006circle\030\003 \001(\0132\017.ric.geo.C"
  "ircle\022\014\n\004tags\030\004 \003(\t\"\'\n\004Time\022\r\n\005start\030\001 \001"
  "(\003\022\020\n\010interval\030\002 \001(\003\"2\n\006Circle\022\013\n\003lat\030\001 "
  "\001(\001\022\013\n\003lon\030\002 \001(\001\022\016\n\006radius\030\003 \001(\001\"\033\n\013OsmR"
  "esponse\022\014\n\004data\030\001 \001(\014\"1\n\016GeocodeRequest\022"
  "\r\n\005query\030\001 \001(\t\022\020\n\010language\030\002 \001(\t\"!\n\005Poin"
  "t\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\"H\n\025GeocodeRe"
  "verseRequest\022\035\n\005point\030\001 \001(\0132\016.ric.geo.Po"
  "int\022\020\n\010language\030\002 \001(\t\"G\n\017GetRouteRequest"
  "\022#\n\013coordinates\030\001 \003(\0132\016.ric.geo.Point\022\017\n"
  "\007options\030\002 \001(\014\"\?\n\014IndoorCircle\022\t\n\001x\030\001 \001("
  "\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\016\n\006radius\030\004 \001(\001\""
  "U\n\004Zone\022\037\n\006circle\030\001 \001(\0132\017.ric.geo.Circle"
  "\022,\n\rindoor_circle\030\002 \001(\0132\025.ric.geo.Indoor"
  "Circle\".\n\013IndoorPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 "
  "\001(\001\022\t\n\001z\030\003 \001(\001\"[\n\010Position\022 \n\010location\030\001"
  " \001(\0132\016.ric.geo.Point\022-\n\017indoor_location\030"
  "\002 \001(\0132\024.ric.geo.IndoorPoint\"R\n\016CheckInRe"
  "quest\022#\n\010position\030\001 \001(\0132\021.ric.geo.Positi"
  "on\022\033\n\004zone\030\002 \001(\0132\r.ric.geo.Zone\"\035\n\017Check"
  "InResponse\022\n\n\002in\030\001 \001(\0102\344\004\n\005Watch\022K\n\rWatc"
  "hGeofence\022\035.ric.geo.WatchGeofenceRequest"
  "\032\026.ric.geo.EmptyResponse\"\003\210\002\001\022O\n\021StopWat"
  "chGeofence\022\035.ric.geo.WatchGeofenceReques"
  "t\032\026.ric.geo.EmptyResponse\"\003\210\002\001\022C\n\tWatchR"
  "oom\022\031.ric.geo.WatchRoomRequest\032\026.ric.geo"
  ".EmptyResponse\"\003\210\002\001\022G\n\rStopWatchRoom\022\031.r"
  "ic.geo.WatchRoomRequest\032\026.ric.geo.EmptyR"
  "esponse\"\003\210\002\001\022E\n\nWatchRoute\022\032.ric.geo.Wat"
  "chRouteRequest\032\026.ric.geo.EmptyResponse\"\003"
  "\210\002\001\022I\n\016StopWatchRoute\022\032.ric.geo.WatchRou"
  "teRequest\032\026.ric.geo.EmptyResponse\"\003\210\002\001\022C"
  "\n\tUpdateGeo\022\031.ric.geo.UpdateGeoRequest\032\026"
  ".ric.geo.EmptyResponse\"\003\210\002\001\022S\n\rGetObject"
  "Info\022\035.ric.geo.GetObjectInfoRequest\032\036.ri"
  "c.geo.GetObjectInfoResponse\"\003\210\002\001\032\003\210\002\0012\207\002"
  "\n\007WatchV2\0226\n\005Watch\022\025.ric.geo.WatchReques"
  "t\032\026.ric.geo.EmptyResponse\0224\n\004Stop\022\024.ric."
  "geo.StopRequest\032\026.ric.geo.EmptyResponse\022"
  ">\n\tUpdateGeo\022\031.ric.geo.UpdateGeoRequest\032"
  "\026.ric.geo.EmptyResponse\022N\n\rGetObjectInfo"
  "\022\035.ric.geo.GetObjectInfoRequest\032\036.ric.ge"
  "o.GetObjectInfoResponse2O\n\021AttendanceCon"
  "trol\022:\n\007Control\022\027.ric.geo.ControlRequest"
  "\032\026.ric.geo.EmptyResponse2\303\001\n\003Osm\0228\n\007Geoc"
  "ode\022\027.ric.geo.GeocodeRequest\032\024.ric.geo.O"
  "smResponse\022F\n\016GeocodeReverse\022\036.ric.geo.G"
  "eocodeReverseRequest\032\024.ric.geo.OsmRespon"
  "se\022:\n\010GetRoute\022\030.ric.geo.GetRouteRequest"
  "\032\024.ric.geo.OsmResponse2E\n\005Check\022<\n\007Check"
  "In\022\027.ric.geo.CheckInRequest\032\030.ric.geo.Ch"
  "eckInResponseB\022Z\020./ric-geo;ricgeob\006proto"
  "3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dgeo_2fricgeo_2eproto = {
  false, InitDefaults_ric_2dgeo_2fricgeo_2eproto, 
  descriptor_table_protodef_ric_2dgeo_2fricgeo_2eproto,
  "ric-geo/ricgeo.proto", &assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto, 3561,
};

void AddDescriptors_ric_2dgeo_2fricgeo_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dgeo_2fricgeo_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dgeo_2fricgeo_2eproto = []() { AddDescriptors_ric_2dgeo_2fricgeo_2eproto(); return true; }();
namespace ric {
namespace geo {
const ::google::protobuf::EnumDescriptor* WatchGeofenceRequest_EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto[0];
}
bool WatchGeofenceRequest_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WatchGeofenceRequest_EventType WatchGeofenceRequest::ALL;
const WatchGeofenceRequest_EventType WatchGeofenceRequest::GEOFENCE_ENTER;
const WatchGeofenceRequest_EventType WatchGeofenceRequest::GEOFENCE_LEAVE;
const WatchGeofenceRequest_EventType WatchGeofenceRequest::EventType_MIN;
const WatchGeofenceRequest_EventType WatchGeofenceRequest::EventType_MAX;
const int WatchGeofenceRequest::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WatchRoomRequest_EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto[1];
}
bool WatchRoomRequest_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WatchRoomRequest_EventType WatchRoomRequest::ALL;
const WatchRoomRequest_EventType WatchRoomRequest::ROOM_ENTER;
const WatchRoomRequest_EventType WatchRoomRequest::ROOM_LEAVE;
const WatchRoomRequest_EventType WatchRoomRequest::EventType_MIN;
const WatchRoomRequest_EventType WatchRoomRequest::EventType_MAX;
const int WatchRoomRequest::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WatchRouteRequest_EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto[2];
}
bool WatchRouteRequest_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WatchRouteRequest_EventType WatchRouteRequest::ALL;
const WatchRouteRequest_EventType WatchRouteRequest::ROUTE_ON;
const WatchRouteRequest_EventType WatchRouteRequest::ROUTE_OFF;
const WatchRouteRequest_EventType WatchRouteRequest::EventType_MIN;
const WatchRouteRequest_EventType WatchRouteRequest::EventType_MAX;
const int WatchRouteRequest::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WatchRequest_EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return file_level_enum_descriptors_ric_2dgeo_2fricgeo_2eproto[3];
}
bool WatchRequest_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WatchRequest_EventType WatchRequest::UNDEFINED;
const WatchRequest_EventType WatchRequest::GEOFENCE_ENTER;
const WatchRequest_EventType WatchRequest::GEOFENCE_LEAVE;
const WatchRequest_EventType WatchRequest::GEOFENCE_BOTH;
const WatchRequest_EventType WatchRequest::ROUTE_ON;
const WatchRequest_EventType WatchRequest::ROUTE_OFF;
const WatchRequest_EventType WatchRequest::ROUTE_BOTH;
const WatchRequest_EventType WatchRequest::ROOM_ENTER;
const WatchRequest_EventType WatchRequest::ROOM_LEAVE;
const WatchRequest_EventType WatchRequest::ROOM_BOTH;
const WatchRequest_EventType WatchRequest::EventType_MIN;
const WatchRequest_EventType WatchRequest::EventType_MAX;
const int WatchRequest::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EmptyResponse::InitAsDefaultInstance() {
}
class EmptyResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyResponse::EmptyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.EmptyResponse)
}
EmptyResponse::EmptyResponse(const EmptyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.geo.EmptyResponse)
}

void EmptyResponse::SharedCtor() {
}

EmptyResponse::~EmptyResponse() {
  // @@protoc_insertion_point(destructor:ric.geo.EmptyResponse)
  SharedDtor();
}

void EmptyResponse::SharedDtor() {
}

void EmptyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyResponse& EmptyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmptyResponse_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void EmptyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.EmptyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmptyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.EmptyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.EmptyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.EmptyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.EmptyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.EmptyResponse)
}

::google::protobuf::uint8* EmptyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.EmptyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.EmptyResponse)
  return target;
}

size_t EmptyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.EmptyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.EmptyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<EmptyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.EmptyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.EmptyResponse)
    MergeFrom(*source);
  }
}

void EmptyResponse::MergeFrom(const EmptyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.EmptyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.EmptyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyResponse::CopyFrom(const EmptyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.EmptyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyResponse::IsInitialized() const {
  return true;
}

void EmptyResponse::Swap(EmptyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyResponse::InternalSwap(EmptyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EmptyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WatchGeofenceRequest::InitAsDefaultInstance() {
}
class WatchGeofenceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchGeofenceRequest::kObjectIdFieldNumber;
const int WatchGeofenceRequest::kEventTypeFieldNumber;
const int WatchGeofenceRequest::kGeofencesIdsFieldNumber;
const int WatchGeofenceRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchGeofenceRequest::WatchGeofenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.WatchGeofenceRequest)
}
WatchGeofenceRequest::WatchGeofenceRequest(const WatchGeofenceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      geofences_ids_(from.geofences_ids_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:ric.geo.WatchGeofenceRequest)
}

void WatchGeofenceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WatchGeofenceRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

WatchGeofenceRequest::~WatchGeofenceRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.WatchGeofenceRequest)
  SharedDtor();
}

void WatchGeofenceRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchGeofenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchGeofenceRequest& WatchGeofenceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WatchGeofenceRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void WatchGeofenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.WatchGeofenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofences_ids_.Clear();
  tags_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WatchGeofenceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WatchGeofenceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.WatchGeofenceRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_event_type(static_cast<::ric::geo::WatchGeofenceRequest_EventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string geofences_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.WatchGeofenceRequest.geofences_ids");
          object = msg->add_geofences_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string tags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.WatchGeofenceRequest.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WatchGeofenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.WatchGeofenceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchGeofenceRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::ric::geo::WatchGeofenceRequest_EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string geofences_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_geofences_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geofences_ids(this->geofences_ids_size() - 1).data(),
            static_cast<int>(this->geofences_ids(this->geofences_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchGeofenceRequest.geofences_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchGeofenceRequest.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.WatchGeofenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.WatchGeofenceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WatchGeofenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.WatchGeofenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchGeofenceRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // repeated string geofences_ids = 3;
  for (int i = 0, n = this->geofences_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofences_ids(i).data(), static_cast<int>(this->geofences_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchGeofenceRequest.geofences_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->geofences_ids(i), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchGeofenceRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.WatchGeofenceRequest)
}

::google::protobuf::uint8* WatchGeofenceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.WatchGeofenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchGeofenceRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // repeated string geofences_ids = 3;
  for (int i = 0, n = this->geofences_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofences_ids(i).data(), static_cast<int>(this->geofences_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchGeofenceRequest.geofences_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->geofences_ids(i), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchGeofenceRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.WatchGeofenceRequest)
  return target;
}

size_t WatchGeofenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.WatchGeofenceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string geofences_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->geofences_ids_size());
  for (int i = 0, n = this->geofences_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->geofences_ids(i));
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchGeofenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.WatchGeofenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchGeofenceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WatchGeofenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.WatchGeofenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.WatchGeofenceRequest)
    MergeFrom(*source);
  }
}

void WatchGeofenceRequest::MergeFrom(const WatchGeofenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.WatchGeofenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geofences_ids_.MergeFrom(from.geofences_ids_);
  tags_.MergeFrom(from.tags_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
}

void WatchGeofenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.WatchGeofenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchGeofenceRequest::CopyFrom(const WatchGeofenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.WatchGeofenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchGeofenceRequest::IsInitialized() const {
  return true;
}

void WatchGeofenceRequest::Swap(WatchGeofenceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchGeofenceRequest::InternalSwap(WatchGeofenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geofences_ids_.InternalSwap(CastToBase(&other->geofences_ids_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
}

::google::protobuf::Metadata WatchGeofenceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WatchRoomRequest::InitAsDefaultInstance() {
}
class WatchRoomRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchRoomRequest::kObjectIdFieldNumber;
const int WatchRoomRequest::kEventTypeFieldNumber;
const int WatchRoomRequest::kFencesFieldNumber;
const int WatchRoomRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchRoomRequest::WatchRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.WatchRoomRequest)
}
WatchRoomRequest::WatchRoomRequest(const WatchRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fences_(from.fences_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:ric.geo.WatchRoomRequest)
}

void WatchRoomRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WatchRoomRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

WatchRoomRequest::~WatchRoomRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.WatchRoomRequest)
  SharedDtor();
}

void WatchRoomRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchRoomRequest& WatchRoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WatchRoomRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void WatchRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.WatchRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fences_.Clear();
  tags_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WatchRoomRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WatchRoomRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.WatchRoomRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.geo.WatchRoomRequest.EventType event_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_event_type(static_cast<::ric::geo::WatchRoomRequest_EventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ric.geo.Fence fences = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::geo::Fence::_InternalParse;
          object = msg->add_fences();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string tags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.WatchRoomRequest.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WatchRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.WatchRoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRoomRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.WatchRoomRequest.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::ric::geo::WatchRoomRequest_EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.geo.Fence fences = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRoomRequest.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.WatchRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.WatchRoomRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WatchRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.WatchRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRoomRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // .ric.geo.WatchRoomRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // repeated .ric.geo.Fence fences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->fences(static_cast<int>(i)),
      output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRoomRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.WatchRoomRequest)
}

::google::protobuf::uint8* WatchRoomRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.WatchRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRoomRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // .ric.geo.WatchRoomRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // repeated .ric.geo.Fence fences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->fences(static_cast<int>(i)), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRoomRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.WatchRoomRequest)
  return target;
}

size_t WatchRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.WatchRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.geo.Fence fences = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fences(static_cast<int>(i)));
    }
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .ric.geo.WatchRoomRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.WatchRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchRoomRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WatchRoomRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.WatchRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.WatchRoomRequest)
    MergeFrom(*source);
  }
}

void WatchRoomRequest::MergeFrom(const WatchRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.WatchRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fences_.MergeFrom(from.fences_);
  tags_.MergeFrom(from.tags_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
}

void WatchRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.WatchRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchRoomRequest::CopyFrom(const WatchRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.WatchRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchRoomRequest::IsInitialized() const {
  return true;
}

void WatchRoomRequest::Swap(WatchRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchRoomRequest::InternalSwap(WatchRoomRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fences_)->InternalSwap(CastToBase(&other->fences_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
}

::google::protobuf::Metadata WatchRoomRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Fence::InitAsDefaultInstance() {
}
class Fence::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fence::kGeofenceIdFieldNumber;
const int Fence::kFloorIdFieldNumber;
const int Fence::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fence::Fence()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Fence)
}
Fence::Fence(const Fence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geofence_id().size() > 0) {
    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.floor_id().size() > 0) {
    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.Fence)
}

void Fence::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Fence_ric_2dgeo_2fricgeo_2eproto.base);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Fence::~Fence() {
  // @@protoc_insertion_point(destructor:ric.geo.Fence)
  SharedDtor();
}

void Fence::SharedDtor() {
  geofence_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fence& Fence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Fence_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Fence::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Fence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.Fence.geofence_id");
        object = msg->mutable_geofence_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string floor_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.Fence.floor_id");
        object = msg->mutable_floor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string room_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.Fence.room_id");
        object = msg->mutable_room_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Fence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geofence_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.Fence.geofence_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string floor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->floor_id().data(), static_cast<int>(this->floor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.Fence.floor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), static_cast<int>(this->room_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.Fence.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Fence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Fence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.Fence.geofence_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geofence_id(), output);
  }

  // string floor_id = 2;
  if (this->floor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_id().data(), static_cast<int>(this->floor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.Fence.floor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->floor_id(), output);
  }

  // string room_id = 3;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), static_cast<int>(this->room_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.Fence.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Fence)
}

::google::protobuf::uint8* Fence::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.Fence.geofence_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geofence_id(), target);
  }

  // string floor_id = 2;
  if (this->floor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_id().data(), static_cast<int>(this->floor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.Fence.floor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->floor_id(), target);
  }

  // string room_id = 3;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), static_cast<int>(this->room_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.Fence.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Fence)
  return target;
}

size_t Fence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Fence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geofence_id());
  }

  // string floor_id = 2;
  if (this->floor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->floor_id());
  }

  // string room_id = 3;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Fence)
  GOOGLE_DCHECK_NE(&from, this);
  const Fence* source =
      ::google::protobuf::DynamicCastToGenerated<Fence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Fence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Fence)
    MergeFrom(*source);
  }
}

void Fence::MergeFrom(const Fence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Fence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geofence_id().size() > 0) {

    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  if (from.floor_id().size() > 0) {

    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  if (from.room_id().size() > 0) {

    room_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
  }
}

void Fence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Fence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fence::CopyFrom(const Fence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Fence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fence::IsInitialized() const {
  return true;
}

void Fence::Swap(Fence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fence::InternalSwap(Fence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geofence_id_.Swap(&other->geofence_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  floor_id_.Swap(&other->floor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_id_.Swap(&other->room_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Fence::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WatchRouteRequest::InitAsDefaultInstance() {
}
class WatchRouteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchRouteRequest::kObjectIdFieldNumber;
const int WatchRouteRequest::kEventTypeFieldNumber;
const int WatchRouteRequest::kRoutesIdsFieldNumber;
const int WatchRouteRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchRouteRequest::WatchRouteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.WatchRouteRequest)
}
WatchRouteRequest::WatchRouteRequest(const WatchRouteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      routes_ids_(from.routes_ids_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:ric.geo.WatchRouteRequest)
}

void WatchRouteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WatchRouteRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

WatchRouteRequest::~WatchRouteRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.WatchRouteRequest)
  SharedDtor();
}

void WatchRouteRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchRouteRequest& WatchRouteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WatchRouteRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void WatchRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.WatchRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_ids_.Clear();
  tags_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WatchRouteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WatchRouteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.WatchRouteRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.geo.WatchRouteRequest.EventType event_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_event_type(static_cast<::ric::geo::WatchRouteRequest_EventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string routes_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.WatchRouteRequest.routes_ids");
          object = msg->add_routes_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string tags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.WatchRouteRequest.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WatchRouteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.WatchRouteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRouteRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.WatchRouteRequest.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::ric::geo::WatchRouteRequest_EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string routes_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_routes_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->routes_ids(this->routes_ids_size() - 1).data(),
            static_cast<int>(this->routes_ids(this->routes_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRouteRequest.routes_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRouteRequest.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.WatchRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.WatchRouteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WatchRouteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.WatchRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRouteRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // .ric.geo.WatchRouteRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // repeated string routes_ids = 3;
  for (int i = 0, n = this->routes_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->routes_ids(i).data(), static_cast<int>(this->routes_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRouteRequest.routes_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->routes_ids(i), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRouteRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.WatchRouteRequest)
}

::google::protobuf::uint8* WatchRouteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.WatchRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRouteRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // .ric.geo.WatchRouteRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // repeated string routes_ids = 3;
  for (int i = 0, n = this->routes_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->routes_ids(i).data(), static_cast<int>(this->routes_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRouteRequest.routes_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->routes_ids(i), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRouteRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.WatchRouteRequest)
  return target;
}

size_t WatchRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.WatchRouteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string routes_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->routes_ids_size());
  for (int i = 0, n = this->routes_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->routes_ids(i));
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .ric.geo.WatchRouteRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchRouteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.WatchRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchRouteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WatchRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.WatchRouteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.WatchRouteRequest)
    MergeFrom(*source);
  }
}

void WatchRouteRequest::MergeFrom(const WatchRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.WatchRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_ids_.MergeFrom(from.routes_ids_);
  tags_.MergeFrom(from.tags_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
}

void WatchRouteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.WatchRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchRouteRequest::CopyFrom(const WatchRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.WatchRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchRouteRequest::IsInitialized() const {
  return true;
}

void WatchRouteRequest::Swap(WatchRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchRouteRequest::InternalSwap(WatchRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  routes_ids_.InternalSwap(CastToBase(&other->routes_ids_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
}

::google::protobuf::Metadata WatchRouteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateGeoRequest::InitAsDefaultInstance() {
}
class UpdateGeoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGeoRequest::kGeofenceIdFieldNumber;
const int UpdateGeoRequest::kFloorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGeoRequest::UpdateGeoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.UpdateGeoRequest)
}
UpdateGeoRequest::UpdateGeoRequest(const UpdateGeoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geofence_id().size() > 0) {
    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.floor_id().size() > 0) {
    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.UpdateGeoRequest)
}

void UpdateGeoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateGeoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateGeoRequest::~UpdateGeoRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.UpdateGeoRequest)
  SharedDtor();
}

void UpdateGeoRequest::SharedDtor() {
  geofence_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateGeoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGeoRequest& UpdateGeoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateGeoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void UpdateGeoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.UpdateGeoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGeoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateGeoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.UpdateGeoRequest.geofence_id");
        object = msg->mutable_geofence_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string floor_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.UpdateGeoRequest.floor_id");
        object = msg->mutable_floor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGeoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.UpdateGeoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geofence_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.UpdateGeoRequest.geofence_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string floor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->floor_id().data(), static_cast<int>(this->floor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.UpdateGeoRequest.floor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.UpdateGeoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.UpdateGeoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGeoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.UpdateGeoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.UpdateGeoRequest.geofence_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geofence_id(), output);
  }

  // string floor_id = 2;
  if (this->floor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_id().data(), static_cast<int>(this->floor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.UpdateGeoRequest.floor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->floor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.UpdateGeoRequest)
}

::google::protobuf::uint8* UpdateGeoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.UpdateGeoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.UpdateGeoRequest.geofence_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geofence_id(), target);
  }

  // string floor_id = 2;
  if (this->floor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->floor_id().data(), static_cast<int>(this->floor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.UpdateGeoRequest.floor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->floor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.UpdateGeoRequest)
  return target;
}

size_t UpdateGeoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.UpdateGeoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geofence_id());
  }

  // string floor_id = 2;
  if (this->floor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->floor_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGeoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.UpdateGeoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGeoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateGeoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.UpdateGeoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.UpdateGeoRequest)
    MergeFrom(*source);
  }
}

void UpdateGeoRequest::MergeFrom(const UpdateGeoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.UpdateGeoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geofence_id().size() > 0) {

    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  if (from.floor_id().size() > 0) {

    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
}

void UpdateGeoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.UpdateGeoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGeoRequest::CopyFrom(const UpdateGeoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.UpdateGeoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGeoRequest::IsInitialized() const {
  return true;
}

void UpdateGeoRequest::Swap(UpdateGeoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGeoRequest::InternalSwap(UpdateGeoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geofence_id_.Swap(&other->geofence_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  floor_id_.Swap(&other->floor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UpdateGeoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetObjectInfoRequest::InitAsDefaultInstance() {
}
class GetObjectInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetObjectInfoRequest::kObjectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetObjectInfoRequest::GetObjectInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetObjectInfoRequest)
}
GetObjectInfoRequest::GetObjectInfoRequest(const GetObjectInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetObjectInfoRequest)
}

void GetObjectInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetObjectInfoRequest::~GetObjectInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.GetObjectInfoRequest)
  SharedDtor();
}

void GetObjectInfoRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetObjectInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetObjectInfoRequest& GetObjectInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetObjectInfoRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetObjectInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetObjectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetObjectInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetObjectInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GetObjectInfoRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetObjectInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetObjectInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GetObjectInfoRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetObjectInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetObjectInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetObjectInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetObjectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetObjectInfoRequest)
}

::google::protobuf::uint8* GetObjectInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetObjectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetObjectInfoRequest)
  return target;
}

size_t GetObjectInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetObjectInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetObjectInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetObjectInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetObjectInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetObjectInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetObjectInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetObjectInfoRequest)
    MergeFrom(*source);
  }
}

void GetObjectInfoRequest::MergeFrom(const GetObjectInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetObjectInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
}

void GetObjectInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetObjectInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoRequest::CopyFrom(const GetObjectInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetObjectInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoRequest::IsInitialized() const {
  return true;
}

void GetObjectInfoRequest::Swap(GetObjectInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetObjectInfoRequest::InternalSwap(GetObjectInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetObjectInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetObjectInfoResponse_ObjectGeofenceInfo::InitAsDefaultInstance() {
}
class GetObjectInfoResponse_ObjectGeofenceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetObjectInfoResponse_ObjectGeofenceInfo::kGeofenceIdFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kIsInFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kLastPacketTimeFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kLastEnterTimeFieldNumber;
const int GetObjectInfoResponse_ObjectGeofenceInfo::kLastLeaveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetObjectInfoResponse_ObjectGeofenceInfo::GetObjectInfoResponse_ObjectGeofenceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
}
GetObjectInfoResponse_ObjectGeofenceInfo::GetObjectInfoResponse_ObjectGeofenceInfo(const GetObjectInfoResponse_ObjectGeofenceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geofence_id().size() > 0) {
    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  ::memcpy(&last_packet_time_, &from.last_packet_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_in_) -
    reinterpret_cast<char*>(&last_packet_time_)) + sizeof(is_in_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
}

void GetObjectInfoResponse_ObjectGeofenceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_packet_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&last_packet_time_)) + sizeof(is_in_));
}

GetObjectInfoResponse_ObjectGeofenceInfo::~GetObjectInfoResponse_ObjectGeofenceInfo() {
  // @@protoc_insertion_point(destructor:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  SharedDtor();
}

void GetObjectInfoResponse_ObjectGeofenceInfo::SharedDtor() {
  geofence_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetObjectInfoResponse_ObjectGeofenceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetObjectInfoResponse_ObjectGeofenceInfo& GetObjectInfoResponse_ObjectGeofenceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetObjectInfoResponse_ObjectGeofenceInfo_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetObjectInfoResponse_ObjectGeofenceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_packet_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&last_packet_time_)) + sizeof(is_in_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetObjectInfoResponse_ObjectGeofenceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetObjectInfoResponse_ObjectGeofenceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id");
        object = msg->mutable_geofence_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_in = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_in(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_packet_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_last_packet_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_enter_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_enter_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_leave_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_last_leave_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetObjectInfoResponse_ObjectGeofenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string geofence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geofence_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_packet_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_packet_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_enter_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_enter_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_leave_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_leave_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetObjectInfoResponse_ObjectGeofenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geofence_id(), output);
  }

  // bool is_in = 2;
  if (this->is_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_in(), output);
  }

  // int64 last_packet_time = 3;
  if (this->last_packet_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_packet_time(), output);
  }

  // int64 last_enter_time = 4;
  if (this->last_enter_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_enter_time(), output);
  }

  // int64 last_leave_time = 5;
  if (this->last_leave_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_leave_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
}

::google::protobuf::uint8* GetObjectInfoResponse_ObjectGeofenceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geofence_id().data(), static_cast<int>(this->geofence_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geofence_id(), target);
  }

  // bool is_in = 2;
  if (this->is_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_in(), target);
  }

  // int64 last_packet_time = 3;
  if (this->last_packet_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_packet_time(), target);
  }

  // int64 last_enter_time = 4;
  if (this->last_enter_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_enter_time(), target);
  }

  // int64 last_leave_time = 5;
  if (this->last_leave_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_leave_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  return target;
}

size_t GetObjectInfoResponse_ObjectGeofenceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geofence_id = 1;
  if (this->geofence_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geofence_id());
  }

  // int64 last_packet_time = 3;
  if (this->last_packet_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_packet_time());
  }

  // int64 last_enter_time = 4;
  if (this->last_enter_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_enter_time());
  }

  // int64 last_leave_time = 5;
  if (this->last_leave_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_leave_time());
  }

  // bool is_in = 2;
  if (this->is_in() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetObjectInfoResponse_ObjectGeofenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetObjectInfoResponse_ObjectGeofenceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<GetObjectInfoResponse_ObjectGeofenceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
    MergeFrom(*source);
  }
}

void GetObjectInfoResponse_ObjectGeofenceInfo::MergeFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geofence_id().size() > 0) {

    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  if (from.last_packet_time() != 0) {
    set_last_packet_time(from.last_packet_time());
  }
  if (from.last_enter_time() != 0) {
    set_last_enter_time(from.last_enter_time());
  }
  if (from.last_leave_time() != 0) {
    set_last_leave_time(from.last_leave_time());
  }
  if (from.is_in() != 0) {
    set_is_in(from.is_in());
  }
}

void GetObjectInfoResponse_ObjectGeofenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoResponse_ObjectGeofenceInfo::CopyFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoResponse_ObjectGeofenceInfo::IsInitialized() const {
  return true;
}

void GetObjectInfoResponse_ObjectGeofenceInfo::Swap(GetObjectInfoResponse_ObjectGeofenceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetObjectInfoResponse_ObjectGeofenceInfo::InternalSwap(GetObjectInfoResponse_ObjectGeofenceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geofence_id_.Swap(&other->geofence_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_packet_time_, other->last_packet_time_);
  swap(last_enter_time_, other->last_enter_time_);
  swap(last_leave_time_, other->last_leave_time_);
  swap(is_in_, other->is_in_);
}

::google::protobuf::Metadata GetObjectInfoResponse_ObjectGeofenceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetObjectInfoResponse::InitAsDefaultInstance() {
}
class GetObjectInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetObjectInfoResponse::kGeofencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetObjectInfoResponse::GetObjectInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetObjectInfoResponse)
}
GetObjectInfoResponse::GetObjectInfoResponse(const GetObjectInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      geofences_(from.geofences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetObjectInfoResponse)
}

void GetObjectInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto.base);
}

GetObjectInfoResponse::~GetObjectInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.geo.GetObjectInfoResponse)
  SharedDtor();
}

void GetObjectInfoResponse::SharedDtor() {
}

void GetObjectInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetObjectInfoResponse& GetObjectInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetObjectInfoResponse_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetObjectInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetObjectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofences_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetObjectInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetObjectInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo::_InternalParse;
          object = msg->add_geofences();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetObjectInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetObjectInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geofences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetObjectInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetObjectInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetObjectInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetObjectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geofences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->geofences(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetObjectInfoResponse)
}

::google::protobuf::uint8* GetObjectInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetObjectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geofences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->geofences(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetObjectInfoResponse)
  return target;
}

size_t GetObjectInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetObjectInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geofences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geofences(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetObjectInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetObjectInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetObjectInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetObjectInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetObjectInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetObjectInfoResponse)
    MergeFrom(*source);
  }
}

void GetObjectInfoResponse::MergeFrom(const GetObjectInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetObjectInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geofences_.MergeFrom(from.geofences_);
}

void GetObjectInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetObjectInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectInfoResponse::CopyFrom(const GetObjectInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetObjectInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectInfoResponse::IsInitialized() const {
  return true;
}

void GetObjectInfoResponse::Swap(GetObjectInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetObjectInfoResponse::InternalSwap(GetObjectInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&geofences_)->InternalSwap(CastToBase(&other->geofences_));
}

::google::protobuf::Metadata GetObjectInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WatchRequest::InitAsDefaultInstance() {
}
class WatchRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchRequest::kObjectIdFieldNumber;
const int WatchRequest::kEventTypeFieldNumber;
const int WatchRequest::kFencesFieldNumber;
const int WatchRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchRequest::WatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.WatchRequest)
}
WatchRequest::WatchRequest(const WatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fences_(from.fences_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:ric.geo.WatchRequest)
}

void WatchRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WatchRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

WatchRequest::~WatchRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.WatchRequest)
  SharedDtor();
}

void WatchRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchRequest& WatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WatchRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void WatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.WatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fences_.Clear();
  tags_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WatchRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WatchRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.WatchRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.geo.WatchRequest.EventType event_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_event_type(static_cast<::ric::geo::WatchRequest_EventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ric.geo.Fence fences = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::geo::Fence::_InternalParse;
          object = msg->add_fences();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string tags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.WatchRequest.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.WatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.WatchRequest.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::ric::geo::WatchRequest_EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.geo.Fence fences = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.WatchRequest.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.WatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.WatchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.WatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // .ric.geo.WatchRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // repeated .ric.geo.Fence fences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->fences(static_cast<int>(i)),
      output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.WatchRequest)
}

::google::protobuf::uint8* WatchRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.WatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // .ric.geo.WatchRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // repeated .ric.geo.Fence fences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->fences(static_cast<int>(i)), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.WatchRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.WatchRequest)
  return target;
}

size_t WatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.WatchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.geo.Fence fences = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->fences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fences(static_cast<int>(i)));
    }
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .ric.geo.WatchRequest.EventType event_type = 2;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.WatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.WatchRequest)
    MergeFrom(*source);
  }
}

void WatchRequest::MergeFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fences_.MergeFrom(from.fences_);
  tags_.MergeFrom(from.tags_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
}

void WatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchRequest::CopyFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchRequest::IsInitialized() const {
  return true;
}

void WatchRequest::Swap(WatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchRequest::InternalSwap(WatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fences_)->InternalSwap(CastToBase(&other->fences_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
}

::google::protobuf::Metadata WatchRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopRequest::InitAsDefaultInstance() {
}
class StopRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopRequest::kObjectIdFieldNumber;
const int StopRequest::kFencesFieldNumber;
const int StopRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopRequest::StopRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fences_(from.fences_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.StopRequest)
}

void StopRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.StopRequest)
  SharedDtor();
}

void StopRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRequest& StopRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.StopRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fences_.Clear();
  tags_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.StopRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ric.geo.Fence fences = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::geo::Fence::_InternalParse;
          object = msg->add_fences();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated string tags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.StopRequest.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.StopRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.StopRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.geo.Fence fences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.StopRequest.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.StopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.StopRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.StopRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.StopRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // repeated .ric.geo.Fence fences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->fences(static_cast<int>(i)),
      output);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.StopRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.StopRequest)
}

::google::protobuf::uint8* StopRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.StopRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.StopRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // repeated .ric.geo.Fence fences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fences(static_cast<int>(i)), target);
  }

  // repeated string tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.StopRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.StopRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.geo.Fence fences = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fences(static_cast<int>(i)));
    }
  }

  // repeated string tags = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.StopRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.StopRequest)
    MergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fences_.MergeFrom(from.fences_);
  tags_.MergeFrom(from.tags_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
}

void StopRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::Swap(StopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fences_)->InternalSwap(CastToBase(&other->fences_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StopRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ControlRequest::InitAsDefaultInstance() {
  ::ric::geo::_ControlRequest_default_instance_._instance.get_mutable()->time_ = const_cast< ::ric::geo::Time*>(
      ::ric::geo::Time::internal_default_instance());
  ::ric::geo::_ControlRequest_default_instance_._instance.get_mutable()->circle_ = const_cast< ::ric::geo::Circle*>(
      ::ric::geo::Circle::internal_default_instance());
}
class ControlRequest::HasBitSetters {
 public:
  static const ::ric::geo::Time& time(const ControlRequest* msg);
  static const ::ric::geo::Circle& circle(const ControlRequest* msg);
};

const ::ric::geo::Time&
ControlRequest::HasBitSetters::time(const ControlRequest* msg) {
  return *msg->time_;
}
const ::ric::geo::Circle&
ControlRequest::HasBitSetters::circle(const ControlRequest* msg) {
  return *msg->circle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlRequest::kObjectIdFieldNumber;
const int ControlRequest::kTimeFieldNumber;
const int ControlRequest::kCircleFieldNumber;
const int ControlRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlRequest::ControlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.ControlRequest)
}
ControlRequest::ControlRequest(const ControlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_time()) {
    time_ = new ::ric::geo::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from.has_circle()) {
    circle_ = new ::ric::geo::Circle(*from.circle_);
  } else {
    circle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.ControlRequest)
}

void ControlRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ControlRequest_ric_2dgeo_2fricgeo_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&circle_) -
      reinterpret_cast<char*>(&time_)) + sizeof(circle_));
}

ControlRequest::~ControlRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.ControlRequest)
  SharedDtor();
}

void ControlRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete circle_;
}

void ControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlRequest& ControlRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ControlRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void ControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.ControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && circle_ != nullptr) {
    delete circle_;
  }
  circle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ControlRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.ControlRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.geo.Time time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Time::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.Circle circle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Circle::_InternalParse;
        object = msg->mutable_circle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string tags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.geo.ControlRequest.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.ControlRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.ControlRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.Time time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.Circle circle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.ControlRequest.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.ControlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.ControlRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.ControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.ControlRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // .ric.geo.Time time = 2;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::time(this), output);
  }

  // .ric.geo.Circle circle = 3;
  if (this->has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::circle(this), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.ControlRequest.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.ControlRequest)
}

::google::protobuf::uint8* ControlRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.ControlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.ControlRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // .ric.geo.Time time = 2;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::time(this), target);
  }

  // .ric.geo.Circle circle = 3;
  if (this->has_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::circle(this), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.ControlRequest.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.ControlRequest)
  return target;
}

size_t ControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.ControlRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .ric.geo.Time time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .ric.geo.Circle circle = 3;
  if (this->has_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *circle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.ControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.ControlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.ControlRequest)
    MergeFrom(*source);
  }
}

void ControlRequest::MergeFrom(const ControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.ControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_time()) {
    mutable_time()->::ric::geo::Time::MergeFrom(from.time());
  }
  if (from.has_circle()) {
    mutable_circle()->::ric::geo::Circle::MergeFrom(from.circle());
  }
}

void ControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.ControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlRequest::CopyFrom(const ControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.ControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlRequest::IsInitialized() const {
  return true;
}

void ControlRequest::Swap(ControlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlRequest::InternalSwap(ControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(circle_, other->circle_);
}

::google::protobuf::Metadata ControlRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Time::InitAsDefaultInstance() {
}
class Time::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kStartFieldNumber;
const int Time::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Time)
}
Time::Time(const Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&start_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.Time)
}

void Time::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&start_)) + sizeof(interval_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:ric.geo.Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time& Time::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Time_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&start_)) + sizeof(interval_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Time::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Time*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 interval = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_interval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Time)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 interval = 2;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 interval = 2;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 interval = 2;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::google::protobuf::DynamicCastToGenerated<Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(interval_, other->interval_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Circle::InitAsDefaultInstance() {
}
class Circle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kLatFieldNumber;
const int Circle::kLonFieldNumber;
const int Circle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Circle)
}
Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.Circle)
}

void Circle::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:ric.geo.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
}

void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Circle& Circle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Circle_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Circle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Circle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Circle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Circle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Circle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::google::protobuf::DynamicCastToGenerated<Circle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OsmResponse::InitAsDefaultInstance() {
}
class OsmResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OsmResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OsmResponse::OsmResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.OsmResponse)
}
OsmResponse::OsmResponse(const OsmResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.OsmResponse)
}

void OsmResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OsmResponse_ric_2dgeo_2fricgeo_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OsmResponse::~OsmResponse() {
  // @@protoc_insertion_point(destructor:ric.geo.OsmResponse)
  SharedDtor();
}

void OsmResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OsmResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsmResponse& OsmResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OsmResponse_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void OsmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.OsmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OsmResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OsmResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OsmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.OsmResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.OsmResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.OsmResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OsmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.OsmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.OsmResponse)
}

::google::protobuf::uint8* OsmResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.OsmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.OsmResponse)
  return target;
}

size_t OsmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.OsmResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsmResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.OsmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OsmResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OsmResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.OsmResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.OsmResponse)
    MergeFrom(*source);
  }
}

void OsmResponse::MergeFrom(const OsmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.OsmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void OsmResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.OsmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsmResponse::CopyFrom(const OsmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.OsmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmResponse::IsInitialized() const {
  return true;
}

void OsmResponse::Swap(OsmResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OsmResponse::InternalSwap(OsmResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OsmResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeocodeRequest::InitAsDefaultInstance() {
}
class GeocodeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeocodeRequest::kQueryFieldNumber;
const int GeocodeRequest::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeocodeRequest::GeocodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GeocodeRequest)
}
GeocodeRequest::GeocodeRequest(const GeocodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.GeocodeRequest)
}

void GeocodeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GeocodeRequest_ric_2dgeo_2fricgeo_2eproto.base);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GeocodeRequest::~GeocodeRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.GeocodeRequest)
  SharedDtor();
}

void GeocodeRequest::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeocodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeocodeRequest& GeocodeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeocodeRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GeocodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GeocodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeocodeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeocodeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GeocodeRequest.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GeocodeRequest.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeocodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GeocodeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GeocodeRequest.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GeocodeRequest.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GeocodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GeocodeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeocodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GeocodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GeocodeRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GeocodeRequest.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GeocodeRequest)
}

::google::protobuf::uint8* GeocodeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GeocodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GeocodeRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GeocodeRequest.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GeocodeRequest)
  return target;
}

size_t GeocodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GeocodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeocodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GeocodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeocodeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GeocodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GeocodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GeocodeRequest)
    MergeFrom(*source);
  }
}

void GeocodeRequest::MergeFrom(const GeocodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GeocodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void GeocodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GeocodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeocodeRequest::CopyFrom(const GeocodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GeocodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeocodeRequest::IsInitialized() const {
  return true;
}

void GeocodeRequest::Swap(GeocodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeocodeRequest::InternalSwap(GeocodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GeocodeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kLatFieldNumber;
const int Point::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.Point)
}

void Point::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ric.geo.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Point_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Point*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeocodeReverseRequest::InitAsDefaultInstance() {
  ::ric::geo::_GeocodeReverseRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::ric::geo::Point*>(
      ::ric::geo::Point::internal_default_instance());
}
class GeocodeReverseRequest::HasBitSetters {
 public:
  static const ::ric::geo::Point& point(const GeocodeReverseRequest* msg);
};

const ::ric::geo::Point&
GeocodeReverseRequest::HasBitSetters::point(const GeocodeReverseRequest* msg) {
  return *msg->point_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeocodeReverseRequest::kPointFieldNumber;
const int GeocodeReverseRequest::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeocodeReverseRequest::GeocodeReverseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GeocodeReverseRequest)
}
GeocodeReverseRequest::GeocodeReverseRequest(const GeocodeReverseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_point()) {
    point_ = new ::ric::geo::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.GeocodeReverseRequest)
}

void GeocodeReverseRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GeocodeReverseRequest_ric_2dgeo_2fricgeo_2eproto.base);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_ = nullptr;
}

GeocodeReverseRequest::~GeocodeReverseRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.GeocodeReverseRequest)
  SharedDtor();
}

void GeocodeReverseRequest::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_;
}

void GeocodeReverseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeocodeReverseRequest& GeocodeReverseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GeocodeReverseRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GeocodeReverseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GeocodeReverseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeocodeReverseRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GeocodeReverseRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Point point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Point::_InternalParse;
        object = msg->mutable_point();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.geo.GeocodeReverseRequest.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeocodeReverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GeocodeReverseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Point point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.geo.GeocodeReverseRequest.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GeocodeReverseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GeocodeReverseRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeocodeReverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GeocodeReverseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Point point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::point(this), output);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GeocodeReverseRequest.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GeocodeReverseRequest)
}

::google::protobuf::uint8* GeocodeReverseRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GeocodeReverseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Point point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::point(this), target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.geo.GeocodeReverseRequest.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GeocodeReverseRequest)
  return target;
}

size_t GeocodeReverseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GeocodeReverseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // .ric.geo.Point point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeocodeReverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GeocodeReverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeocodeReverseRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GeocodeReverseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GeocodeReverseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GeocodeReverseRequest)
    MergeFrom(*source);
  }
}

void GeocodeReverseRequest::MergeFrom(const GeocodeReverseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GeocodeReverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_point()) {
    mutable_point()->::ric::geo::Point::MergeFrom(from.point());
  }
}

void GeocodeReverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GeocodeReverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeocodeReverseRequest::CopyFrom(const GeocodeReverseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GeocodeReverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeocodeReverseRequest::IsInitialized() const {
  return true;
}

void GeocodeReverseRequest::Swap(GeocodeReverseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeocodeReverseRequest::InternalSwap(GeocodeReverseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_, other->point_);
}

::google::protobuf::Metadata GeocodeReverseRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRouteRequest::InitAsDefaultInstance() {
}
class GetRouteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteRequest::kCoordinatesFieldNumber;
const int GetRouteRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteRequest::GetRouteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      coordinates_(from.coordinates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  options_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.options().size() > 0) {
    options_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.options_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRouteRequest_ric_2dgeo_2fricgeo_2eproto.base);
  options_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.GetRouteRequest)
  SharedDtor();
}

void GetRouteRequest::SharedDtor() {
  options_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteRequest& GetRouteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRouteRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRouteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRouteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ric.geo.Point coordinates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::geo::Point::_InternalParse;
          object = msg->add_coordinates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bytes options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_options();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRouteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.GetRouteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ric.geo.Point coordinates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.GetRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.GetRouteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRouteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.geo.Point coordinates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coordinates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->coordinates(static_cast<int>(i)),
      output);
  }

  // bytes options = 2;
  if (this->options().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->options(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.GetRouteRequest)
}

::google::protobuf::uint8* GetRouteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.geo.Point coordinates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coordinates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->coordinates(static_cast<int>(i)), target);
  }

  // bytes options = 2;
  if (this->options().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->options(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.GetRouteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.geo.Point coordinates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->coordinates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->coordinates(static_cast<int>(i)));
    }
  }

  // bytes options = 2;
  if (this->options().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->options());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.GetRouteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  if (from.options().size() > 0) {

    options_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.options_);
  }
}

void GetRouteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::Swap(GetRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&coordinates_)->InternalSwap(CastToBase(&other->coordinates_));
  options_.Swap(&other->options_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetRouteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IndoorCircle::InitAsDefaultInstance() {
}
class IndoorCircle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndoorCircle::kXFieldNumber;
const int IndoorCircle::kYFieldNumber;
const int IndoorCircle::kZFieldNumber;
const int IndoorCircle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndoorCircle::IndoorCircle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.IndoorCircle)
}
IndoorCircle::IndoorCircle(const IndoorCircle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.IndoorCircle)
}

void IndoorCircle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
}

IndoorCircle::~IndoorCircle() {
  // @@protoc_insertion_point(destructor:ric.geo.IndoorCircle)
  SharedDtor();
}

void IndoorCircle::SharedDtor() {
}

void IndoorCircle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndoorCircle& IndoorCircle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IndoorCircle_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void IndoorCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.IndoorCircle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndoorCircle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IndoorCircle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndoorCircle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.IndoorCircle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.IndoorCircle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.IndoorCircle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndoorCircle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.IndoorCircle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.IndoorCircle)
}

::google::protobuf::uint8* IndoorCircle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.IndoorCircle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.IndoorCircle)
  return target;
}

size_t IndoorCircle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.IndoorCircle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndoorCircle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.IndoorCircle)
  GOOGLE_DCHECK_NE(&from, this);
  const IndoorCircle* source =
      ::google::protobuf::DynamicCastToGenerated<IndoorCircle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.IndoorCircle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.IndoorCircle)
    MergeFrom(*source);
  }
}

void IndoorCircle::MergeFrom(const IndoorCircle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.IndoorCircle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void IndoorCircle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.IndoorCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndoorCircle::CopyFrom(const IndoorCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.IndoorCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndoorCircle::IsInitialized() const {
  return true;
}

void IndoorCircle::Swap(IndoorCircle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndoorCircle::InternalSwap(IndoorCircle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata IndoorCircle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Zone::InitAsDefaultInstance() {
  ::ric::geo::_Zone_default_instance_._instance.get_mutable()->circle_ = const_cast< ::ric::geo::Circle*>(
      ::ric::geo::Circle::internal_default_instance());
  ::ric::geo::_Zone_default_instance_._instance.get_mutable()->indoor_circle_ = const_cast< ::ric::geo::IndoorCircle*>(
      ::ric::geo::IndoorCircle::internal_default_instance());
}
class Zone::HasBitSetters {
 public:
  static const ::ric::geo::Circle& circle(const Zone* msg);
  static const ::ric::geo::IndoorCircle& indoor_circle(const Zone* msg);
};

const ::ric::geo::Circle&
Zone::HasBitSetters::circle(const Zone* msg) {
  return *msg->circle_;
}
const ::ric::geo::IndoorCircle&
Zone::HasBitSetters::indoor_circle(const Zone* msg) {
  return *msg->indoor_circle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Zone::kCircleFieldNumber;
const int Zone::kIndoorCircleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Zone::Zone()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Zone)
}
Zone::Zone(const Zone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_circle()) {
    circle_ = new ::ric::geo::Circle(*from.circle_);
  } else {
    circle_ = nullptr;
  }
  if (from.has_indoor_circle()) {
    indoor_circle_ = new ::ric::geo::IndoorCircle(*from.indoor_circle_);
  } else {
    indoor_circle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.Zone)
}

void Zone::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base);
  ::memset(&circle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indoor_circle_) -
      reinterpret_cast<char*>(&circle_)) + sizeof(indoor_circle_));
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:ric.geo.Zone)
  SharedDtor();
}

void Zone::SharedDtor() {
  if (this != internal_default_instance()) delete circle_;
  if (this != internal_default_instance()) delete indoor_circle_;
}

void Zone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Zone& Zone::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Zone_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Zone::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && circle_ != nullptr) {
    delete circle_;
  }
  circle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && indoor_circle_ != nullptr) {
    delete indoor_circle_;
  }
  indoor_circle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Zone::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Zone*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Circle circle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Circle::_InternalParse;
        object = msg->mutable_circle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.IndoorCircle indoor_circle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::IndoorCircle::_InternalParse;
        object = msg->mutable_indoor_circle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Zone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Circle circle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.IndoorCircle indoor_circle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indoor_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Zone)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Circle circle = 1;
  if (this->has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::circle(this), output);
  }

  // .ric.geo.IndoorCircle indoor_circle = 2;
  if (this->has_indoor_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::indoor_circle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Zone)
}

::google::protobuf::uint8* Zone::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Zone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Circle circle = 1;
  if (this->has_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::circle(this), target);
  }

  // .ric.geo.IndoorCircle indoor_circle = 2;
  if (this->has_indoor_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::indoor_circle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Zone)
  return target;
}

size_t Zone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Zone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.geo.Circle circle = 1;
  if (this->has_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *circle_);
  }

  // .ric.geo.IndoorCircle indoor_circle = 2;
  if (this->has_indoor_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *indoor_circle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Zone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  const Zone* source =
      ::google::protobuf::DynamicCastToGenerated<Zone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Zone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Zone)
    MergeFrom(*source);
  }
}

void Zone::MergeFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_circle()) {
    mutable_circle()->::ric::geo::Circle::MergeFrom(from.circle());
  }
  if (from.has_indoor_circle()) {
    mutable_indoor_circle()->::ric::geo::IndoorCircle::MergeFrom(from.indoor_circle());
  }
}

void Zone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone::CopyFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  return true;
}

void Zone::Swap(Zone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Zone::InternalSwap(Zone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(circle_, other->circle_);
  swap(indoor_circle_, other->indoor_circle_);
}

::google::protobuf::Metadata Zone::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IndoorPoint::InitAsDefaultInstance() {
}
class IndoorPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndoorPoint::kXFieldNumber;
const int IndoorPoint::kYFieldNumber;
const int IndoorPoint::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndoorPoint::IndoorPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.IndoorPoint)
}
IndoorPoint::IndoorPoint(const IndoorPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ric.geo.IndoorPoint)
}

void IndoorPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

IndoorPoint::~IndoorPoint() {
  // @@protoc_insertion_point(destructor:ric.geo.IndoorPoint)
  SharedDtor();
}

void IndoorPoint::SharedDtor() {
}

void IndoorPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndoorPoint& IndoorPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IndoorPoint_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void IndoorPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.IndoorPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndoorPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IndoorPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndoorPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.IndoorPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.IndoorPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.IndoorPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndoorPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.IndoorPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.IndoorPoint)
}

::google::protobuf::uint8* IndoorPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.IndoorPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.IndoorPoint)
  return target;
}

size_t IndoorPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.IndoorPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndoorPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.IndoorPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IndoorPoint* source =
      ::google::protobuf::DynamicCastToGenerated<IndoorPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.IndoorPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.IndoorPoint)
    MergeFrom(*source);
  }
}

void IndoorPoint::MergeFrom(const IndoorPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.IndoorPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void IndoorPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.IndoorPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndoorPoint::CopyFrom(const IndoorPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.IndoorPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndoorPoint::IsInitialized() const {
  return true;
}

void IndoorPoint::Swap(IndoorPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndoorPoint::InternalSwap(IndoorPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata IndoorPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
  ::ric::geo::_Position_default_instance_._instance.get_mutable()->location_ = const_cast< ::ric::geo::Point*>(
      ::ric::geo::Point::internal_default_instance());
  ::ric::geo::_Position_default_instance_._instance.get_mutable()->indoor_location_ = const_cast< ::ric::geo::IndoorPoint*>(
      ::ric::geo::IndoorPoint::internal_default_instance());
}
class Position::HasBitSetters {
 public:
  static const ::ric::geo::Point& location(const Position* msg);
  static const ::ric::geo::IndoorPoint& indoor_location(const Position* msg);
};

const ::ric::geo::Point&
Position::HasBitSetters::location(const Position* msg) {
  return *msg->location_;
}
const ::ric::geo::IndoorPoint&
Position::HasBitSetters::indoor_location(const Position* msg) {
  return *msg->indoor_location_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLocationFieldNumber;
const int Position::kIndoorLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::ric::geo::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_indoor_location()) {
    indoor_location_ = new ::ric::geo::IndoorPoint(*from.indoor_location_);
  } else {
    indoor_location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.Position)
}

void Position::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indoor_location_) -
      reinterpret_cast<char*>(&location_)) + sizeof(indoor_location_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:ric.geo.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete indoor_location_;
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Position_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && indoor_location_ != nullptr) {
    delete indoor_location_;
  }
  indoor_location_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Point location = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Point::_InternalParse;
        object = msg->mutable_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.IndoorPoint indoor_location = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::IndoorPoint::_InternalParse;
        object = msg->mutable_indoor_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Point location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.IndoorPoint indoor_location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indoor_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Point location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::location(this), output);
  }

  // .ric.geo.IndoorPoint indoor_location = 2;
  if (this->has_indoor_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::indoor_location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Point location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::location(this), target);
  }

  // .ric.geo.IndoorPoint indoor_location = 2;
  if (this->has_indoor_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::indoor_location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.geo.Point location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .ric.geo.IndoorPoint indoor_location = 2;
  if (this->has_indoor_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *indoor_location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::ric::geo::Point::MergeFrom(from.location());
  }
  if (from.has_indoor_location()) {
    mutable_indoor_location()->::ric::geo::IndoorPoint::MergeFrom(from.indoor_location());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
  swap(indoor_location_, other->indoor_location_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckInRequest::InitAsDefaultInstance() {
  ::ric::geo::_CheckInRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::ric::geo::Position*>(
      ::ric::geo::Position::internal_default_instance());
  ::ric::geo::_CheckInRequest_default_instance_._instance.get_mutable()->zone_ = const_cast< ::ric::geo::Zone*>(
      ::ric::geo::Zone::internal_default_instance());
}
class CheckInRequest::HasBitSetters {
 public:
  static const ::ric::geo::Position& position(const CheckInRequest* msg);
  static const ::ric::geo::Zone& zone(const CheckInRequest* msg);
};

const ::ric::geo::Position&
CheckInRequest::HasBitSetters::position(const CheckInRequest* msg) {
  return *msg->position_;
}
const ::ric::geo::Zone&
CheckInRequest::HasBitSetters::zone(const CheckInRequest* msg) {
  return *msg->zone_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckInRequest::kPositionFieldNumber;
const int CheckInRequest::kZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckInRequest::CheckInRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.CheckInRequest)
}
CheckInRequest::CheckInRequest(const CheckInRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::ric::geo::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_zone()) {
    zone_ = new ::ric::geo::Zone(*from.zone_);
  } else {
    zone_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.geo.CheckInRequest)
}

void CheckInRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zone_) -
      reinterpret_cast<char*>(&position_)) + sizeof(zone_));
}

CheckInRequest::~CheckInRequest() {
  // @@protoc_insertion_point(destructor:ric.geo.CheckInRequest)
  SharedDtor();
}

void CheckInRequest::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete zone_;
}

void CheckInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckInRequest& CheckInRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckInRequest_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void CheckInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.CheckInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckInRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckInRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.geo.Position position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.geo.Zone zone = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::geo::Zone::_InternalParse;
        object = msg->mutable_zone();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckInRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.CheckInRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.geo.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.geo.Zone zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.CheckInRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.CheckInRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckInRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.CheckInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // .ric.geo.Zone zone = 2;
  if (this->has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::zone(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.CheckInRequest)
}

::google::protobuf::uint8* CheckInRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.CheckInRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.geo.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // .ric.geo.Zone zone = 2;
  if (this->has_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::zone(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.CheckInRequest)
  return target;
}

size_t CheckInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.CheckInRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.geo.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ric.geo.Zone zone = 2;
  if (this->has_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *zone_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckInRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.CheckInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckInRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CheckInRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.CheckInRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.CheckInRequest)
    MergeFrom(*source);
  }
}

void CheckInRequest::MergeFrom(const CheckInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.CheckInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::ric::geo::Position::MergeFrom(from.position());
  }
  if (from.has_zone()) {
    mutable_zone()->::ric::geo::Zone::MergeFrom(from.zone());
  }
}

void CheckInRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.CheckInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckInRequest::CopyFrom(const CheckInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.CheckInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckInRequest::IsInitialized() const {
  return true;
}

void CheckInRequest::Swap(CheckInRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckInRequest::InternalSwap(CheckInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(zone_, other->zone_);
}

::google::protobuf::Metadata CheckInRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CheckInResponse::InitAsDefaultInstance() {
}
class CheckInResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckInResponse::kInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckInResponse::CheckInResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.geo.CheckInResponse)
}
CheckInResponse::CheckInResponse(const CheckInResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  in_ = from.in_;
  // @@protoc_insertion_point(copy_constructor:ric.geo.CheckInResponse)
}

void CheckInResponse::SharedCtor() {
  in_ = false;
}

CheckInResponse::~CheckInResponse() {
  // @@protoc_insertion_point(destructor:ric.geo.CheckInResponse)
  SharedDtor();
}

void CheckInResponse::SharedDtor() {
}

void CheckInResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckInResponse& CheckInResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CheckInResponse_ric_2dgeo_2fricgeo_2eproto.base);
  return *internal_default_instance();
}


void CheckInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.geo.CheckInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckInResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CheckInResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool in = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_in(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckInResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.geo.CheckInResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool in = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.geo.CheckInResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.geo.CheckInResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckInResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.geo.CheckInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool in = 1;
  if (this->in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->in(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.geo.CheckInResponse)
}

::google::protobuf::uint8* CheckInResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.geo.CheckInResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool in = 1;
  if (this->in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->in(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.geo.CheckInResponse)
  return target;
}

size_t CheckInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.geo.CheckInResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool in = 1;
  if (this->in() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckInResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.geo.CheckInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckInResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CheckInResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.geo.CheckInResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.geo.CheckInResponse)
    MergeFrom(*source);
  }
}

void CheckInResponse::MergeFrom(const CheckInResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.geo.CheckInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.in() != 0) {
    set_in(from.in());
  }
}

void CheckInResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.geo.CheckInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckInResponse::CopyFrom(const CheckInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.geo.CheckInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckInResponse::IsInitialized() const {
  return true;
}

void CheckInResponse::Swap(CheckInResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckInResponse::InternalSwap(CheckInResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(in_, other->in_);
}

::google::protobuf::Metadata CheckInResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dgeo_2fricgeo_2eproto);
  return ::file_level_metadata_ric_2dgeo_2fricgeo_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geo
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::geo::EmptyResponse* Arena::CreateMaybeMessage< ::ric::geo::EmptyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::EmptyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::WatchGeofenceRequest* Arena::CreateMaybeMessage< ::ric::geo::WatchGeofenceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::WatchGeofenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::WatchRoomRequest* Arena::CreateMaybeMessage< ::ric::geo::WatchRoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::WatchRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Fence* Arena::CreateMaybeMessage< ::ric::geo::Fence >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Fence >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::WatchRouteRequest* Arena::CreateMaybeMessage< ::ric::geo::WatchRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::WatchRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::UpdateGeoRequest* Arena::CreateMaybeMessage< ::ric::geo::UpdateGeoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::UpdateGeoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GetObjectInfoRequest* Arena::CreateMaybeMessage< ::ric::geo::GetObjectInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetObjectInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* Arena::CreateMaybeMessage< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GetObjectInfoResponse* Arena::CreateMaybeMessage< ::ric::geo::GetObjectInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetObjectInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::WatchRequest* Arena::CreateMaybeMessage< ::ric::geo::WatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::WatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::StopRequest* Arena::CreateMaybeMessage< ::ric::geo::StopRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::ControlRequest* Arena::CreateMaybeMessage< ::ric::geo::ControlRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::ControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Time* Arena::CreateMaybeMessage< ::ric::geo::Time >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Circle* Arena::CreateMaybeMessage< ::ric::geo::Circle >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Circle >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::OsmResponse* Arena::CreateMaybeMessage< ::ric::geo::OsmResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::OsmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GeocodeRequest* Arena::CreateMaybeMessage< ::ric::geo::GeocodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GeocodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Point* Arena::CreateMaybeMessage< ::ric::geo::Point >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GeocodeReverseRequest* Arena::CreateMaybeMessage< ::ric::geo::GeocodeReverseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GeocodeReverseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::GetRouteRequest* Arena::CreateMaybeMessage< ::ric::geo::GetRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::GetRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::IndoorCircle* Arena::CreateMaybeMessage< ::ric::geo::IndoorCircle >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::IndoorCircle >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Zone* Arena::CreateMaybeMessage< ::ric::geo::Zone >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Zone >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::IndoorPoint* Arena::CreateMaybeMessage< ::ric::geo::IndoorPoint >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::IndoorPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::Position* Arena::CreateMaybeMessage< ::ric::geo::Position >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::CheckInRequest* Arena::CreateMaybeMessage< ::ric::geo::CheckInRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::CheckInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::geo::CheckInResponse* Arena::CreateMaybeMessage< ::ric::geo::CheckInResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::geo::CheckInResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
