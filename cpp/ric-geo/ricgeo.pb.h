// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-geo/ricgeo.proto

#ifndef PROTOBUF_INCLUDED_ric_2dgeo_2fricgeo_2eproto
#define PROTOBUF_INCLUDED_ric_2dgeo_2fricgeo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dgeo_2fricgeo_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dgeo_2fricgeo_2eproto();
namespace ric {
namespace geo {
class CheckInRequest;
class CheckInRequestDefaultTypeInternal;
extern CheckInRequestDefaultTypeInternal _CheckInRequest_default_instance_;
class CheckInResponse;
class CheckInResponseDefaultTypeInternal;
extern CheckInResponseDefaultTypeInternal _CheckInResponse_default_instance_;
class Circle;
class CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class GetObjectInfoRequest;
class GetObjectInfoRequestDefaultTypeInternal;
extern GetObjectInfoRequestDefaultTypeInternal _GetObjectInfoRequest_default_instance_;
class GetObjectInfoResponse;
class GetObjectInfoResponseDefaultTypeInternal;
extern GetObjectInfoResponseDefaultTypeInternal _GetObjectInfoResponse_default_instance_;
class GetObjectInfoResponse_ObjectGeofenceInfo;
class GetObjectInfoResponse_ObjectGeofenceInfoDefaultTypeInternal;
extern GetObjectInfoResponse_ObjectGeofenceInfoDefaultTypeInternal _GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_;
class IndoorCircle;
class IndoorCircleDefaultTypeInternal;
extern IndoorCircleDefaultTypeInternal _IndoorCircle_default_instance_;
class IndoorPoint;
class IndoorPointDefaultTypeInternal;
extern IndoorPointDefaultTypeInternal _IndoorPoint_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Zone;
class ZoneDefaultTypeInternal;
extern ZoneDefaultTypeInternal _Zone_default_instance_;
}  // namespace geo
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::geo::CheckInRequest* Arena::CreateMaybeMessage<::ric::geo::CheckInRequest>(Arena*);
template<> ::ric::geo::CheckInResponse* Arena::CreateMaybeMessage<::ric::geo::CheckInResponse>(Arena*);
template<> ::ric::geo::Circle* Arena::CreateMaybeMessage<::ric::geo::Circle>(Arena*);
template<> ::ric::geo::GetObjectInfoRequest* Arena::CreateMaybeMessage<::ric::geo::GetObjectInfoRequest>(Arena*);
template<> ::ric::geo::GetObjectInfoResponse* Arena::CreateMaybeMessage<::ric::geo::GetObjectInfoResponse>(Arena*);
template<> ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* Arena::CreateMaybeMessage<::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo>(Arena*);
template<> ::ric::geo::IndoorCircle* Arena::CreateMaybeMessage<::ric::geo::IndoorCircle>(Arena*);
template<> ::ric::geo::IndoorPoint* Arena::CreateMaybeMessage<::ric::geo::IndoorPoint>(Arena*);
template<> ::ric::geo::Point* Arena::CreateMaybeMessage<::ric::geo::Point>(Arena*);
template<> ::ric::geo::Position* Arena::CreateMaybeMessage<::ric::geo::Position>(Arena*);
template<> ::ric::geo::Zone* Arena::CreateMaybeMessage<::ric::geo::Zone>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace geo {

// ===================================================================

class GetObjectInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetObjectInfoRequest) */ {
 public:
  GetObjectInfoRequest();
  virtual ~GetObjectInfoRequest();

  GetObjectInfoRequest(const GetObjectInfoRequest& from);

  inline GetObjectInfoRequest& operator=(const GetObjectInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoRequest(GetObjectInfoRequest&& from) noexcept
    : GetObjectInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoRequest& operator=(GetObjectInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoRequest*>(
               &_GetObjectInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetObjectInfoRequest* other);
  friend void swap(GetObjectInfoRequest& a, GetObjectInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoRequest* New() const final {
    return CreateMaybeMessage<GetObjectInfoRequest>(nullptr);
  }

  GetObjectInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoRequest& from);
  void MergeFrom(const GetObjectInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.geo.GetObjectInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoResponse_ObjectGeofenceInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo) */ {
 public:
  GetObjectInfoResponse_ObjectGeofenceInfo();
  virtual ~GetObjectInfoResponse_ObjectGeofenceInfo();

  GetObjectInfoResponse_ObjectGeofenceInfo(const GetObjectInfoResponse_ObjectGeofenceInfo& from);

  inline GetObjectInfoResponse_ObjectGeofenceInfo& operator=(const GetObjectInfoResponse_ObjectGeofenceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoResponse_ObjectGeofenceInfo(GetObjectInfoResponse_ObjectGeofenceInfo&& from) noexcept
    : GetObjectInfoResponse_ObjectGeofenceInfo() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoResponse_ObjectGeofenceInfo& operator=(GetObjectInfoResponse_ObjectGeofenceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoResponse_ObjectGeofenceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoResponse_ObjectGeofenceInfo* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoResponse_ObjectGeofenceInfo*>(
               &_GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetObjectInfoResponse_ObjectGeofenceInfo* other);
  friend void swap(GetObjectInfoResponse_ObjectGeofenceInfo& a, GetObjectInfoResponse_ObjectGeofenceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoResponse_ObjectGeofenceInfo* New() const final {
    return CreateMaybeMessage<GetObjectInfoResponse_ObjectGeofenceInfo>(nullptr);
  }

  GetObjectInfoResponse_ObjectGeofenceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoResponse_ObjectGeofenceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from);
  void MergeFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoResponse_ObjectGeofenceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string geofence_id = 1;
  void clear_geofence_id();
  static const int kGeofenceIdFieldNumber = 1;
  const ::std::string& geofence_id() const;
  void set_geofence_id(const ::std::string& value);
  #if LANG_CXX11
  void set_geofence_id(::std::string&& value);
  #endif
  void set_geofence_id(const char* value);
  void set_geofence_id(const char* value, size_t size);
  ::std::string* mutable_geofence_id();
  ::std::string* release_geofence_id();
  void set_allocated_geofence_id(::std::string* geofence_id);

  // int64 last_packet_time = 3;
  void clear_last_packet_time();
  static const int kLastPacketTimeFieldNumber = 3;
  ::google::protobuf::int64 last_packet_time() const;
  void set_last_packet_time(::google::protobuf::int64 value);

  // int64 last_enter_time = 4;
  void clear_last_enter_time();
  static const int kLastEnterTimeFieldNumber = 4;
  ::google::protobuf::int64 last_enter_time() const;
  void set_last_enter_time(::google::protobuf::int64 value);

  // int64 last_leave_time = 5;
  void clear_last_leave_time();
  static const int kLastLeaveTimeFieldNumber = 5;
  ::google::protobuf::int64 last_leave_time() const;
  void set_last_leave_time(::google::protobuf::int64 value);

  // bool is_in = 2;
  void clear_is_in();
  static const int kIsInFieldNumber = 2;
  bool is_in() const;
  void set_is_in(bool value);

  // @@protoc_insertion_point(class_scope:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr geofence_id_;
  ::google::protobuf::int64 last_packet_time_;
  ::google::protobuf::int64 last_enter_time_;
  ::google::protobuf::int64 last_leave_time_;
  bool is_in_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetObjectInfoResponse) */ {
 public:
  GetObjectInfoResponse();
  virtual ~GetObjectInfoResponse();

  GetObjectInfoResponse(const GetObjectInfoResponse& from);

  inline GetObjectInfoResponse& operator=(const GetObjectInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoResponse(GetObjectInfoResponse&& from) noexcept
    : GetObjectInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoResponse& operator=(GetObjectInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoResponse*>(
               &_GetObjectInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetObjectInfoResponse* other);
  friend void swap(GetObjectInfoResponse& a, GetObjectInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoResponse* New() const final {
    return CreateMaybeMessage<GetObjectInfoResponse>(nullptr);
  }

  GetObjectInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoResponse& from);
  void MergeFrom(const GetObjectInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetObjectInfoResponse_ObjectGeofenceInfo ObjectGeofenceInfo;

  // accessors -------------------------------------------------------

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  int geofences_size() const;
  void clear_geofences();
  static const int kGeofencesFieldNumber = 1;
  ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* mutable_geofences(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >*
      mutable_geofences();
  const ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo& geofences(int index) const;
  ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* add_geofences();
  const ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >&
      geofences() const;

  // @@protoc_insertion_point(class_scope:ric.geo.GetObjectInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo > geofences_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class IndoorCircle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.IndoorCircle) */ {
 public:
  IndoorCircle();
  virtual ~IndoorCircle();

  IndoorCircle(const IndoorCircle& from);

  inline IndoorCircle& operator=(const IndoorCircle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndoorCircle(IndoorCircle&& from) noexcept
    : IndoorCircle() {
    *this = ::std::move(from);
  }

  inline IndoorCircle& operator=(IndoorCircle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IndoorCircle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndoorCircle* internal_default_instance() {
    return reinterpret_cast<const IndoorCircle*>(
               &_IndoorCircle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IndoorCircle* other);
  friend void swap(IndoorCircle& a, IndoorCircle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndoorCircle* New() const final {
    return CreateMaybeMessage<IndoorCircle>(nullptr);
  }

  IndoorCircle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndoorCircle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndoorCircle& from);
  void MergeFrom(const IndoorCircle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndoorCircle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double radius = 4;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.IndoorCircle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Circle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Circle) */ {
 public:
  Circle();
  virtual ~Circle();

  Circle(const Circle& from);

  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Circle(Circle&& from) noexcept
    : Circle() {
    *this = ::std::move(from);
  }

  inline Circle& operator=(Circle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Circle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
               &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Circle* other);
  friend void swap(Circle& a, Circle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Circle* New() const final {
    return CreateMaybeMessage<Circle>(nullptr);
  }

  Circle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Circle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // double radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.Circle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  double radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.Point)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Zone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Zone) */ {
 public:
  Zone();
  virtual ~Zone();

  Zone(const Zone& from);

  inline Zone& operator=(const Zone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zone(Zone&& from) noexcept
    : Zone() {
    *this = ::std::move(from);
  }

  inline Zone& operator=(Zone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Zone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Zone* internal_default_instance() {
    return reinterpret_cast<const Zone*>(
               &_Zone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Zone* other);
  friend void swap(Zone& a, Zone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zone* New() const final {
    return CreateMaybeMessage<Zone>(nullptr);
  }

  Zone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Zone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Zone& from);
  void MergeFrom(const Zone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.geo.Circle circle = 1;
  bool has_circle() const;
  void clear_circle();
  static const int kCircleFieldNumber = 1;
  const ::ric::geo::Circle& circle() const;
  ::ric::geo::Circle* release_circle();
  ::ric::geo::Circle* mutable_circle();
  void set_allocated_circle(::ric::geo::Circle* circle);

  // .ric.geo.IndoorCircle indoor_circle = 2;
  bool has_indoor_circle() const;
  void clear_indoor_circle();
  static const int kIndoorCircleFieldNumber = 2;
  const ::ric::geo::IndoorCircle& indoor_circle() const;
  ::ric::geo::IndoorCircle* release_indoor_circle();
  ::ric::geo::IndoorCircle* mutable_indoor_circle();
  void set_allocated_indoor_circle(::ric::geo::IndoorCircle* indoor_circle);

  // @@protoc_insertion_point(class_scope:ric.geo.Zone)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::geo::Circle* circle_;
  ::ric::geo::IndoorCircle* indoor_circle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class IndoorPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.IndoorPoint) */ {
 public:
  IndoorPoint();
  virtual ~IndoorPoint();

  IndoorPoint(const IndoorPoint& from);

  inline IndoorPoint& operator=(const IndoorPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndoorPoint(IndoorPoint&& from) noexcept
    : IndoorPoint() {
    *this = ::std::move(from);
  }

  inline IndoorPoint& operator=(IndoorPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IndoorPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndoorPoint* internal_default_instance() {
    return reinterpret_cast<const IndoorPoint*>(
               &_IndoorPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IndoorPoint* other);
  friend void swap(IndoorPoint& a, IndoorPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndoorPoint* New() const final {
    return CreateMaybeMessage<IndoorPoint>(nullptr);
  }

  IndoorPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndoorPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndoorPoint& from);
  void MergeFrom(const IndoorPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndoorPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.IndoorPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.geo.Point location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::ric::geo::Point& location() const;
  ::ric::geo::Point* release_location();
  ::ric::geo::Point* mutable_location();
  void set_allocated_location(::ric::geo::Point* location);

  // .ric.geo.IndoorPoint indoor_location = 2;
  bool has_indoor_location() const;
  void clear_indoor_location();
  static const int kIndoorLocationFieldNumber = 2;
  const ::ric::geo::IndoorPoint& indoor_location() const;
  ::ric::geo::IndoorPoint* release_indoor_location();
  ::ric::geo::IndoorPoint* mutable_indoor_location();
  void set_allocated_indoor_location(::ric::geo::IndoorPoint* indoor_location);

  // @@protoc_insertion_point(class_scope:ric.geo.Position)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::geo::Point* location_;
  ::ric::geo::IndoorPoint* indoor_location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class CheckInRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.CheckInRequest) */ {
 public:
  CheckInRequest();
  virtual ~CheckInRequest();

  CheckInRequest(const CheckInRequest& from);

  inline CheckInRequest& operator=(const CheckInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckInRequest(CheckInRequest&& from) noexcept
    : CheckInRequest() {
    *this = ::std::move(from);
  }

  inline CheckInRequest& operator=(CheckInRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckInRequest* internal_default_instance() {
    return reinterpret_cast<const CheckInRequest*>(
               &_CheckInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CheckInRequest* other);
  friend void swap(CheckInRequest& a, CheckInRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckInRequest* New() const final {
    return CreateMaybeMessage<CheckInRequest>(nullptr);
  }

  CheckInRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckInRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckInRequest& from);
  void MergeFrom(const CheckInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.geo.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::ric::geo::Position& position() const;
  ::ric::geo::Position* release_position();
  ::ric::geo::Position* mutable_position();
  void set_allocated_position(::ric::geo::Position* position);

  // .ric.geo.Zone zone = 2;
  bool has_zone() const;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::ric::geo::Zone& zone() const;
  ::ric::geo::Zone* release_zone();
  ::ric::geo::Zone* mutable_zone();
  void set_allocated_zone(::ric::geo::Zone* zone);

  // @@protoc_insertion_point(class_scope:ric.geo.CheckInRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::geo::Position* position_;
  ::ric::geo::Zone* zone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class CheckInResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.CheckInResponse) */ {
 public:
  CheckInResponse();
  virtual ~CheckInResponse();

  CheckInResponse(const CheckInResponse& from);

  inline CheckInResponse& operator=(const CheckInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckInResponse(CheckInResponse&& from) noexcept
    : CheckInResponse() {
    *this = ::std::move(from);
  }

  inline CheckInResponse& operator=(CheckInResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckInResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckInResponse* internal_default_instance() {
    return reinterpret_cast<const CheckInResponse*>(
               &_CheckInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CheckInResponse* other);
  friend void swap(CheckInResponse& a, CheckInResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckInResponse* New() const final {
    return CreateMaybeMessage<CheckInResponse>(nullptr);
  }

  CheckInResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckInResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckInResponse& from);
  void MergeFrom(const CheckInResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool in = 1;
  void clear_in();
  static const int kInFieldNumber = 1;
  bool in() const;
  void set_in(bool value);

  // @@protoc_insertion_point(class_scope:ric.geo.CheckInResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool in_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetObjectInfoRequest

// string object_id = 1;
inline void GetObjectInfoRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoRequest.object_id)
  return object_id_.GetNoArena();
}
inline void GetObjectInfoRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoRequest.object_id)
}
#if LANG_CXX11
inline void GetObjectInfoRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GetObjectInfoRequest.object_id)
}
#endif
inline void GetObjectInfoRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GetObjectInfoRequest.object_id)
}
inline void GetObjectInfoRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GetObjectInfoRequest.object_id)
}
inline ::std::string* GetObjectInfoRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GetObjectInfoRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.GetObjectInfoRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GetObjectInfoRequest.object_id)
}

// -------------------------------------------------------------------

// GetObjectInfoResponse_ObjectGeofenceInfo

// string geofence_id = 1;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_geofence_id() {
  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoResponse_ObjectGeofenceInfo::geofence_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
  return geofence_id_.GetNoArena();
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(const ::std::string& value) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
#if LANG_CXX11
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(::std::string&& value) {
  
  geofence_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
#endif
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(const char* value, size_t size) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
inline ::std::string* GetObjectInfoResponse_ObjectGeofenceInfo::mutable_geofence_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
  return geofence_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoResponse_ObjectGeofenceInfo::release_geofence_id() {
  // @@protoc_insertion_point(field_release:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
  
  return geofence_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_allocated_geofence_id(::std::string* geofence_id) {
  if (geofence_id != nullptr) {
    
  } else {
    
  }
  geofence_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geofence_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}

// bool is_in = 2;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_is_in() {
  is_in_ = false;
}
inline bool GetObjectInfoResponse_ObjectGeofenceInfo::is_in() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.is_in)
  return is_in_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_is_in(bool value) {
  
  is_in_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.is_in)
}

// int64 last_packet_time = 3;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_last_packet_time() {
  last_packet_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse_ObjectGeofenceInfo::last_packet_time() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_packet_time)
  return last_packet_time_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_last_packet_time(::google::protobuf::int64 value) {
  
  last_packet_time_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_packet_time)
}

// int64 last_enter_time = 4;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_last_enter_time() {
  last_enter_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse_ObjectGeofenceInfo::last_enter_time() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_enter_time)
  return last_enter_time_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_last_enter_time(::google::protobuf::int64 value) {
  
  last_enter_time_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_enter_time)
}

// int64 last_leave_time = 5;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_last_leave_time() {
  last_leave_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse_ObjectGeofenceInfo::last_leave_time() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_leave_time)
  return last_leave_time_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_last_leave_time(::google::protobuf::int64 value) {
  
  last_leave_time_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_leave_time)
}

// -------------------------------------------------------------------

// GetObjectInfoResponse

// repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
inline int GetObjectInfoResponse::geofences_size() const {
  return geofences_.size();
}
inline void GetObjectInfoResponse::clear_geofences() {
  geofences_.Clear();
}
inline ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* GetObjectInfoResponse::mutable_geofences(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >*
GetObjectInfoResponse::mutable_geofences() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.GetObjectInfoResponse.geofences)
  return &geofences_;
}
inline const ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo& GetObjectInfoResponse::geofences(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_.Get(index);
}
inline ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* GetObjectInfoResponse::add_geofences() {
  // @@protoc_insertion_point(field_add:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >&
GetObjectInfoResponse::geofences() const {
  // @@protoc_insertion_point(field_list:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_;
}

// -------------------------------------------------------------------

// IndoorCircle

// double x = 1;
inline void IndoorCircle::clear_x() {
  x_ = 0;
}
inline double IndoorCircle::x() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.x)
  return x_;
}
inline void IndoorCircle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.x)
}

// double y = 2;
inline void IndoorCircle::clear_y() {
  y_ = 0;
}
inline double IndoorCircle::y() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.y)
  return y_;
}
inline void IndoorCircle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.y)
}

// double z = 3;
inline void IndoorCircle::clear_z() {
  z_ = 0;
}
inline double IndoorCircle::z() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.z)
  return z_;
}
inline void IndoorCircle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.z)
}

// double radius = 4;
inline void IndoorCircle::clear_radius() {
  radius_ = 0;
}
inline double IndoorCircle::radius() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.radius)
  return radius_;
}
inline void IndoorCircle::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.radius)
}

// -------------------------------------------------------------------

// Circle

// double lat = 1;
inline void Circle::clear_lat() {
  lat_ = 0;
}
inline double Circle::lat() const {
  // @@protoc_insertion_point(field_get:ric.geo.Circle.lat)
  return lat_;
}
inline void Circle::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Circle.lat)
}

// double lon = 2;
inline void Circle::clear_lon() {
  lon_ = 0;
}
inline double Circle::lon() const {
  // @@protoc_insertion_point(field_get:ric.geo.Circle.lon)
  return lon_;
}
inline void Circle::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Circle.lon)
}

// double radius = 3;
inline void Circle::clear_radius() {
  radius_ = 0;
}
inline double Circle::radius() const {
  // @@protoc_insertion_point(field_get:ric.geo.Circle.radius)
  return radius_;
}
inline void Circle::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Circle.radius)
}

// -------------------------------------------------------------------

// Point

// double lat = 1;
inline void Point::clear_lat() {
  lat_ = 0;
}
inline double Point::lat() const {
  // @@protoc_insertion_point(field_get:ric.geo.Point.lat)
  return lat_;
}
inline void Point::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Point.lat)
}

// double lon = 2;
inline void Point::clear_lon() {
  lon_ = 0;
}
inline double Point::lon() const {
  // @@protoc_insertion_point(field_get:ric.geo.Point.lon)
  return lon_;
}
inline void Point::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Point.lon)
}

// -------------------------------------------------------------------

// Zone

// .ric.geo.Circle circle = 1;
inline bool Zone::has_circle() const {
  return this != internal_default_instance() && circle_ != nullptr;
}
inline void Zone::clear_circle() {
  if (GetArenaNoVirtual() == nullptr && circle_ != nullptr) {
    delete circle_;
  }
  circle_ = nullptr;
}
inline const ::ric::geo::Circle& Zone::circle() const {
  const ::ric::geo::Circle* p = circle_;
  // @@protoc_insertion_point(field_get:ric.geo.Zone.circle)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Circle*>(
      &::ric::geo::_Circle_default_instance_);
}
inline ::ric::geo::Circle* Zone::release_circle() {
  // @@protoc_insertion_point(field_release:ric.geo.Zone.circle)
  
  ::ric::geo::Circle* temp = circle_;
  circle_ = nullptr;
  return temp;
}
inline ::ric::geo::Circle* Zone::mutable_circle() {
  
  if (circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Circle>(GetArenaNoVirtual());
    circle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Zone.circle)
  return circle_;
}
inline void Zone::set_allocated_circle(::ric::geo::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete circle_;
  }
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    
  } else {
    
  }
  circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Zone.circle)
}

// .ric.geo.IndoorCircle indoor_circle = 2;
inline bool Zone::has_indoor_circle() const {
  return this != internal_default_instance() && indoor_circle_ != nullptr;
}
inline void Zone::clear_indoor_circle() {
  if (GetArenaNoVirtual() == nullptr && indoor_circle_ != nullptr) {
    delete indoor_circle_;
  }
  indoor_circle_ = nullptr;
}
inline const ::ric::geo::IndoorCircle& Zone::indoor_circle() const {
  const ::ric::geo::IndoorCircle* p = indoor_circle_;
  // @@protoc_insertion_point(field_get:ric.geo.Zone.indoor_circle)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::IndoorCircle*>(
      &::ric::geo::_IndoorCircle_default_instance_);
}
inline ::ric::geo::IndoorCircle* Zone::release_indoor_circle() {
  // @@protoc_insertion_point(field_release:ric.geo.Zone.indoor_circle)
  
  ::ric::geo::IndoorCircle* temp = indoor_circle_;
  indoor_circle_ = nullptr;
  return temp;
}
inline ::ric::geo::IndoorCircle* Zone::mutable_indoor_circle() {
  
  if (indoor_circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::IndoorCircle>(GetArenaNoVirtual());
    indoor_circle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Zone.indoor_circle)
  return indoor_circle_;
}
inline void Zone::set_allocated_indoor_circle(::ric::geo::IndoorCircle* indoor_circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indoor_circle_;
  }
  if (indoor_circle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indoor_circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indoor_circle, submessage_arena);
    }
    
  } else {
    
  }
  indoor_circle_ = indoor_circle;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Zone.indoor_circle)
}

// -------------------------------------------------------------------

// IndoorPoint

// double x = 1;
inline void IndoorPoint::clear_x() {
  x_ = 0;
}
inline double IndoorPoint::x() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorPoint.x)
  return x_;
}
inline void IndoorPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorPoint.x)
}

// double y = 2;
inline void IndoorPoint::clear_y() {
  y_ = 0;
}
inline double IndoorPoint::y() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorPoint.y)
  return y_;
}
inline void IndoorPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorPoint.y)
}

// double z = 3;
inline void IndoorPoint::clear_z() {
  z_ = 0;
}
inline double IndoorPoint::z() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorPoint.z)
  return z_;
}
inline void IndoorPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorPoint.z)
}

// -------------------------------------------------------------------

// Position

// .ric.geo.Point location = 1;
inline bool Position::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline void Position::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::ric::geo::Point& Position::location() const {
  const ::ric::geo::Point* p = location_;
  // @@protoc_insertion_point(field_get:ric.geo.Position.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Point*>(
      &::ric::geo::_Point_default_instance_);
}
inline ::ric::geo::Point* Position::release_location() {
  // @@protoc_insertion_point(field_release:ric.geo.Position.location)
  
  ::ric::geo::Point* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::ric::geo::Point* Position::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Point>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Position.location)
  return location_;
}
inline void Position::set_allocated_location(::ric::geo::Point* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Position.location)
}

// .ric.geo.IndoorPoint indoor_location = 2;
inline bool Position::has_indoor_location() const {
  return this != internal_default_instance() && indoor_location_ != nullptr;
}
inline void Position::clear_indoor_location() {
  if (GetArenaNoVirtual() == nullptr && indoor_location_ != nullptr) {
    delete indoor_location_;
  }
  indoor_location_ = nullptr;
}
inline const ::ric::geo::IndoorPoint& Position::indoor_location() const {
  const ::ric::geo::IndoorPoint* p = indoor_location_;
  // @@protoc_insertion_point(field_get:ric.geo.Position.indoor_location)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::IndoorPoint*>(
      &::ric::geo::_IndoorPoint_default_instance_);
}
inline ::ric::geo::IndoorPoint* Position::release_indoor_location() {
  // @@protoc_insertion_point(field_release:ric.geo.Position.indoor_location)
  
  ::ric::geo::IndoorPoint* temp = indoor_location_;
  indoor_location_ = nullptr;
  return temp;
}
inline ::ric::geo::IndoorPoint* Position::mutable_indoor_location() {
  
  if (indoor_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::IndoorPoint>(GetArenaNoVirtual());
    indoor_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Position.indoor_location)
  return indoor_location_;
}
inline void Position::set_allocated_indoor_location(::ric::geo::IndoorPoint* indoor_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indoor_location_;
  }
  if (indoor_location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indoor_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indoor_location, submessage_arena);
    }
    
  } else {
    
  }
  indoor_location_ = indoor_location;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Position.indoor_location)
}

// -------------------------------------------------------------------

// CheckInRequest

// .ric.geo.Position position = 1;
inline bool CheckInRequest::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void CheckInRequest::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ric::geo::Position& CheckInRequest::position() const {
  const ::ric::geo::Position* p = position_;
  // @@protoc_insertion_point(field_get:ric.geo.CheckInRequest.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Position*>(
      &::ric::geo::_Position_default_instance_);
}
inline ::ric::geo::Position* CheckInRequest::release_position() {
  // @@protoc_insertion_point(field_release:ric.geo.CheckInRequest.position)
  
  ::ric::geo::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ric::geo::Position* CheckInRequest::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.CheckInRequest.position)
  return position_;
}
inline void CheckInRequest::set_allocated_position(::ric::geo::Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.CheckInRequest.position)
}

// .ric.geo.Zone zone = 2;
inline bool CheckInRequest::has_zone() const {
  return this != internal_default_instance() && zone_ != nullptr;
}
inline void CheckInRequest::clear_zone() {
  if (GetArenaNoVirtual() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
}
inline const ::ric::geo::Zone& CheckInRequest::zone() const {
  const ::ric::geo::Zone* p = zone_;
  // @@protoc_insertion_point(field_get:ric.geo.CheckInRequest.zone)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Zone*>(
      &::ric::geo::_Zone_default_instance_);
}
inline ::ric::geo::Zone* CheckInRequest::release_zone() {
  // @@protoc_insertion_point(field_release:ric.geo.CheckInRequest.zone)
  
  ::ric::geo::Zone* temp = zone_;
  zone_ = nullptr;
  return temp;
}
inline ::ric::geo::Zone* CheckInRequest::mutable_zone() {
  
  if (zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Zone>(GetArenaNoVirtual());
    zone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.CheckInRequest.zone)
  return zone_;
}
inline void CheckInRequest::set_allocated_zone(::ric::geo::Zone* zone) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zone_;
  }
  if (zone) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zone = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone, submessage_arena);
    }
    
  } else {
    
  }
  zone_ = zone;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.CheckInRequest.zone)
}

// -------------------------------------------------------------------

// CheckInResponse

// bool in = 1;
inline void CheckInResponse::clear_in() {
  in_ = false;
}
inline bool CheckInResponse::in() const {
  // @@protoc_insertion_point(field_get:ric.geo.CheckInResponse.in)
  return in_;
}
inline void CheckInResponse::set_in(bool value) {
  
  in_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.CheckInResponse.in)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geo
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dgeo_2fricgeo_2eproto
