// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-geo/ricgeo.proto

#ifndef PROTOBUF_INCLUDED_ric_2dgeo_2fricgeo_2eproto
#define PROTOBUF_INCLUDED_ric_2dgeo_2fricgeo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dgeo_2fricgeo_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dgeo_2fricgeo_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dgeo_2fricgeo_2eproto();
namespace ric {
namespace geo {
class CheckInRequest;
class CheckInRequestDefaultTypeInternal;
extern CheckInRequestDefaultTypeInternal _CheckInRequest_default_instance_;
class CheckInResponse;
class CheckInResponseDefaultTypeInternal;
extern CheckInResponseDefaultTypeInternal _CheckInResponse_default_instance_;
class Circle;
class CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class ControlRequest;
class ControlRequestDefaultTypeInternal;
extern ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class Fence;
class FenceDefaultTypeInternal;
extern FenceDefaultTypeInternal _Fence_default_instance_;
class GeocodeRequest;
class GeocodeRequestDefaultTypeInternal;
extern GeocodeRequestDefaultTypeInternal _GeocodeRequest_default_instance_;
class GeocodeReverseRequest;
class GeocodeReverseRequestDefaultTypeInternal;
extern GeocodeReverseRequestDefaultTypeInternal _GeocodeReverseRequest_default_instance_;
class GetObjectInfoRequest;
class GetObjectInfoRequestDefaultTypeInternal;
extern GetObjectInfoRequestDefaultTypeInternal _GetObjectInfoRequest_default_instance_;
class GetObjectInfoResponse;
class GetObjectInfoResponseDefaultTypeInternal;
extern GetObjectInfoResponseDefaultTypeInternal _GetObjectInfoResponse_default_instance_;
class GetObjectInfoResponse_ObjectGeofenceInfo;
class GetObjectInfoResponse_ObjectGeofenceInfoDefaultTypeInternal;
extern GetObjectInfoResponse_ObjectGeofenceInfoDefaultTypeInternal _GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_;
class GetRouteRequest;
class GetRouteRequestDefaultTypeInternal;
extern GetRouteRequestDefaultTypeInternal _GetRouteRequest_default_instance_;
class IndoorCircle;
class IndoorCircleDefaultTypeInternal;
extern IndoorCircleDefaultTypeInternal _IndoorCircle_default_instance_;
class IndoorPoint;
class IndoorPointDefaultTypeInternal;
extern IndoorPointDefaultTypeInternal _IndoorPoint_default_instance_;
class OsmResponse;
class OsmResponseDefaultTypeInternal;
extern OsmResponseDefaultTypeInternal _OsmResponse_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class UpdateGeoRequest;
class UpdateGeoRequestDefaultTypeInternal;
extern UpdateGeoRequestDefaultTypeInternal _UpdateGeoRequest_default_instance_;
class WatchGeofenceRequest;
class WatchGeofenceRequestDefaultTypeInternal;
extern WatchGeofenceRequestDefaultTypeInternal _WatchGeofenceRequest_default_instance_;
class WatchRequest;
class WatchRequestDefaultTypeInternal;
extern WatchRequestDefaultTypeInternal _WatchRequest_default_instance_;
class WatchRoomRequest;
class WatchRoomRequestDefaultTypeInternal;
extern WatchRoomRequestDefaultTypeInternal _WatchRoomRequest_default_instance_;
class WatchRouteRequest;
class WatchRouteRequestDefaultTypeInternal;
extern WatchRouteRequestDefaultTypeInternal _WatchRouteRequest_default_instance_;
class Zone;
class ZoneDefaultTypeInternal;
extern ZoneDefaultTypeInternal _Zone_default_instance_;
}  // namespace geo
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::geo::CheckInRequest* Arena::CreateMaybeMessage<::ric::geo::CheckInRequest>(Arena*);
template<> ::ric::geo::CheckInResponse* Arena::CreateMaybeMessage<::ric::geo::CheckInResponse>(Arena*);
template<> ::ric::geo::Circle* Arena::CreateMaybeMessage<::ric::geo::Circle>(Arena*);
template<> ::ric::geo::ControlRequest* Arena::CreateMaybeMessage<::ric::geo::ControlRequest>(Arena*);
template<> ::ric::geo::EmptyResponse* Arena::CreateMaybeMessage<::ric::geo::EmptyResponse>(Arena*);
template<> ::ric::geo::Fence* Arena::CreateMaybeMessage<::ric::geo::Fence>(Arena*);
template<> ::ric::geo::GeocodeRequest* Arena::CreateMaybeMessage<::ric::geo::GeocodeRequest>(Arena*);
template<> ::ric::geo::GeocodeReverseRequest* Arena::CreateMaybeMessage<::ric::geo::GeocodeReverseRequest>(Arena*);
template<> ::ric::geo::GetObjectInfoRequest* Arena::CreateMaybeMessage<::ric::geo::GetObjectInfoRequest>(Arena*);
template<> ::ric::geo::GetObjectInfoResponse* Arena::CreateMaybeMessage<::ric::geo::GetObjectInfoResponse>(Arena*);
template<> ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* Arena::CreateMaybeMessage<::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo>(Arena*);
template<> ::ric::geo::GetRouteRequest* Arena::CreateMaybeMessage<::ric::geo::GetRouteRequest>(Arena*);
template<> ::ric::geo::IndoorCircle* Arena::CreateMaybeMessage<::ric::geo::IndoorCircle>(Arena*);
template<> ::ric::geo::IndoorPoint* Arena::CreateMaybeMessage<::ric::geo::IndoorPoint>(Arena*);
template<> ::ric::geo::OsmResponse* Arena::CreateMaybeMessage<::ric::geo::OsmResponse>(Arena*);
template<> ::ric::geo::Point* Arena::CreateMaybeMessage<::ric::geo::Point>(Arena*);
template<> ::ric::geo::Position* Arena::CreateMaybeMessage<::ric::geo::Position>(Arena*);
template<> ::ric::geo::StopRequest* Arena::CreateMaybeMessage<::ric::geo::StopRequest>(Arena*);
template<> ::ric::geo::Time* Arena::CreateMaybeMessage<::ric::geo::Time>(Arena*);
template<> ::ric::geo::UpdateGeoRequest* Arena::CreateMaybeMessage<::ric::geo::UpdateGeoRequest>(Arena*);
template<> ::ric::geo::WatchGeofenceRequest* Arena::CreateMaybeMessage<::ric::geo::WatchGeofenceRequest>(Arena*);
template<> ::ric::geo::WatchRequest* Arena::CreateMaybeMessage<::ric::geo::WatchRequest>(Arena*);
template<> ::ric::geo::WatchRoomRequest* Arena::CreateMaybeMessage<::ric::geo::WatchRoomRequest>(Arena*);
template<> ::ric::geo::WatchRouteRequest* Arena::CreateMaybeMessage<::ric::geo::WatchRouteRequest>(Arena*);
template<> ::ric::geo::Zone* Arena::CreateMaybeMessage<::ric::geo::Zone>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace geo {

enum WatchGeofenceRequest_EventType {
  WatchGeofenceRequest_EventType_ALL = 0,
  WatchGeofenceRequest_EventType_GEOFENCE_ENTER = 1,
  WatchGeofenceRequest_EventType_GEOFENCE_LEAVE = 2,
  WatchGeofenceRequest_EventType_WatchGeofenceRequest_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WatchGeofenceRequest_EventType_WatchGeofenceRequest_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WatchGeofenceRequest_EventType_IsValid(int value);
const WatchGeofenceRequest_EventType WatchGeofenceRequest_EventType_EventType_MIN = WatchGeofenceRequest_EventType_ALL;
const WatchGeofenceRequest_EventType WatchGeofenceRequest_EventType_EventType_MAX = WatchGeofenceRequest_EventType_GEOFENCE_LEAVE;
const int WatchGeofenceRequest_EventType_EventType_ARRAYSIZE = WatchGeofenceRequest_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WatchGeofenceRequest_EventType_descriptor();
inline const ::std::string& WatchGeofenceRequest_EventType_Name(WatchGeofenceRequest_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WatchGeofenceRequest_EventType_descriptor(), value);
}
inline bool WatchGeofenceRequest_EventType_Parse(
    const ::std::string& name, WatchGeofenceRequest_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WatchGeofenceRequest_EventType>(
    WatchGeofenceRequest_EventType_descriptor(), name, value);
}
enum WatchRoomRequest_EventType {
  WatchRoomRequest_EventType_ALL = 0,
  WatchRoomRequest_EventType_ROOM_ENTER = 1,
  WatchRoomRequest_EventType_ROOM_LEAVE = 2,
  WatchRoomRequest_EventType_WatchRoomRequest_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WatchRoomRequest_EventType_WatchRoomRequest_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WatchRoomRequest_EventType_IsValid(int value);
const WatchRoomRequest_EventType WatchRoomRequest_EventType_EventType_MIN = WatchRoomRequest_EventType_ALL;
const WatchRoomRequest_EventType WatchRoomRequest_EventType_EventType_MAX = WatchRoomRequest_EventType_ROOM_LEAVE;
const int WatchRoomRequest_EventType_EventType_ARRAYSIZE = WatchRoomRequest_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WatchRoomRequest_EventType_descriptor();
inline const ::std::string& WatchRoomRequest_EventType_Name(WatchRoomRequest_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WatchRoomRequest_EventType_descriptor(), value);
}
inline bool WatchRoomRequest_EventType_Parse(
    const ::std::string& name, WatchRoomRequest_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WatchRoomRequest_EventType>(
    WatchRoomRequest_EventType_descriptor(), name, value);
}
enum WatchRouteRequest_EventType {
  WatchRouteRequest_EventType_ALL = 0,
  WatchRouteRequest_EventType_ROUTE_ON = 1,
  WatchRouteRequest_EventType_ROUTE_OFF = 2,
  WatchRouteRequest_EventType_WatchRouteRequest_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WatchRouteRequest_EventType_WatchRouteRequest_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WatchRouteRequest_EventType_IsValid(int value);
const WatchRouteRequest_EventType WatchRouteRequest_EventType_EventType_MIN = WatchRouteRequest_EventType_ALL;
const WatchRouteRequest_EventType WatchRouteRequest_EventType_EventType_MAX = WatchRouteRequest_EventType_ROUTE_OFF;
const int WatchRouteRequest_EventType_EventType_ARRAYSIZE = WatchRouteRequest_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WatchRouteRequest_EventType_descriptor();
inline const ::std::string& WatchRouteRequest_EventType_Name(WatchRouteRequest_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WatchRouteRequest_EventType_descriptor(), value);
}
inline bool WatchRouteRequest_EventType_Parse(
    const ::std::string& name, WatchRouteRequest_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WatchRouteRequest_EventType>(
    WatchRouteRequest_EventType_descriptor(), name, value);
}
enum WatchRequest_EventType {
  WatchRequest_EventType_UNDEFINED = 0,
  WatchRequest_EventType_GEOFENCE_ENTER = 1,
  WatchRequest_EventType_GEOFENCE_LEAVE = 2,
  WatchRequest_EventType_GEOFENCE_BOTH = 3,
  WatchRequest_EventType_ROUTE_ON = 5,
  WatchRequest_EventType_ROUTE_OFF = 6,
  WatchRequest_EventType_ROUTE_BOTH = 7,
  WatchRequest_EventType_ROOM_ENTER = 9,
  WatchRequest_EventType_ROOM_LEAVE = 10,
  WatchRequest_EventType_ROOM_BOTH = 11,
  WatchRequest_EventType_WatchRequest_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WatchRequest_EventType_WatchRequest_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WatchRequest_EventType_IsValid(int value);
const WatchRequest_EventType WatchRequest_EventType_EventType_MIN = WatchRequest_EventType_UNDEFINED;
const WatchRequest_EventType WatchRequest_EventType_EventType_MAX = WatchRequest_EventType_ROOM_BOTH;
const int WatchRequest_EventType_EventType_ARRAYSIZE = WatchRequest_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WatchRequest_EventType_descriptor();
inline const ::std::string& WatchRequest_EventType_Name(WatchRequest_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WatchRequest_EventType_descriptor(), value);
}
inline bool WatchRequest_EventType_Parse(
    const ::std::string& name, WatchRequest_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WatchRequest_EventType>(
    WatchRequest_EventType_descriptor(), name, value);
}
// ===================================================================

class EmptyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EmptyResponse* other);
  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.geo.EmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class WatchGeofenceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.WatchGeofenceRequest) */ {
 public:
  WatchGeofenceRequest();
  virtual ~WatchGeofenceRequest();

  WatchGeofenceRequest(const WatchGeofenceRequest& from);

  inline WatchGeofenceRequest& operator=(const WatchGeofenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchGeofenceRequest(WatchGeofenceRequest&& from) noexcept
    : WatchGeofenceRequest() {
    *this = ::std::move(from);
  }

  inline WatchGeofenceRequest& operator=(WatchGeofenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WatchGeofenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchGeofenceRequest* internal_default_instance() {
    return reinterpret_cast<const WatchGeofenceRequest*>(
               &_WatchGeofenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WatchGeofenceRequest* other);
  friend void swap(WatchGeofenceRequest& a, WatchGeofenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchGeofenceRequest* New() const final {
    return CreateMaybeMessage<WatchGeofenceRequest>(nullptr);
  }

  WatchGeofenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WatchGeofenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WatchGeofenceRequest& from);
  void MergeFrom(const WatchGeofenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchGeofenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WatchGeofenceRequest_EventType EventType;
  static const EventType ALL =
    WatchGeofenceRequest_EventType_ALL;
  static const EventType GEOFENCE_ENTER =
    WatchGeofenceRequest_EventType_GEOFENCE_ENTER;
  static const EventType GEOFENCE_LEAVE =
    WatchGeofenceRequest_EventType_GEOFENCE_LEAVE;
  static inline bool EventType_IsValid(int value) {
    return WatchGeofenceRequest_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    WatchGeofenceRequest_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    WatchGeofenceRequest_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    WatchGeofenceRequest_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return WatchGeofenceRequest_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return WatchGeofenceRequest_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return WatchGeofenceRequest_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string geofences_ids = 3;
  int geofences_ids_size() const;
  void clear_geofences_ids();
  static const int kGeofencesIdsFieldNumber = 3;
  const ::std::string& geofences_ids(int index) const;
  ::std::string* mutable_geofences_ids(int index);
  void set_geofences_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_geofences_ids(int index, ::std::string&& value);
  #endif
  void set_geofences_ids(int index, const char* value);
  void set_geofences_ids(int index, const char* value, size_t size);
  ::std::string* add_geofences_ids();
  void add_geofences_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_geofences_ids(::std::string&& value);
  #endif
  void add_geofences_ids(const char* value);
  void add_geofences_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& geofences_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_geofences_ids();

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::ric::geo::WatchGeofenceRequest_EventType event_type() const;
  void set_event_type(::ric::geo::WatchGeofenceRequest_EventType value);

  // @@protoc_insertion_point(class_scope:ric.geo.WatchGeofenceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> geofences_ids_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  int event_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class WatchRoomRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.WatchRoomRequest) */ {
 public:
  WatchRoomRequest();
  virtual ~WatchRoomRequest();

  WatchRoomRequest(const WatchRoomRequest& from);

  inline WatchRoomRequest& operator=(const WatchRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchRoomRequest(WatchRoomRequest&& from) noexcept
    : WatchRoomRequest() {
    *this = ::std::move(from);
  }

  inline WatchRoomRequest& operator=(WatchRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WatchRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchRoomRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRoomRequest*>(
               &_WatchRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WatchRoomRequest* other);
  friend void swap(WatchRoomRequest& a, WatchRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchRoomRequest* New() const final {
    return CreateMaybeMessage<WatchRoomRequest>(nullptr);
  }

  WatchRoomRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WatchRoomRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WatchRoomRequest& from);
  void MergeFrom(const WatchRoomRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WatchRoomRequest_EventType EventType;
  static const EventType ALL =
    WatchRoomRequest_EventType_ALL;
  static const EventType ROOM_ENTER =
    WatchRoomRequest_EventType_ROOM_ENTER;
  static const EventType ROOM_LEAVE =
    WatchRoomRequest_EventType_ROOM_LEAVE;
  static inline bool EventType_IsValid(int value) {
    return WatchRoomRequest_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    WatchRoomRequest_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    WatchRoomRequest_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    WatchRoomRequest_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return WatchRoomRequest_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return WatchRoomRequest_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return WatchRoomRequest_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ric.geo.Fence fences = 3;
  int fences_size() const;
  void clear_fences();
  static const int kFencesFieldNumber = 3;
  ::ric::geo::Fence* mutable_fences(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >*
      mutable_fences();
  const ::ric::geo::Fence& fences(int index) const;
  ::ric::geo::Fence* add_fences();
  const ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >&
      fences() const;

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .ric.geo.WatchRoomRequest.EventType event_type = 2;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::ric::geo::WatchRoomRequest_EventType event_type() const;
  void set_event_type(::ric::geo::WatchRoomRequest_EventType value);

  // @@protoc_insertion_point(class_scope:ric.geo.WatchRoomRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence > fences_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  int event_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Fence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Fence) */ {
 public:
  Fence();
  virtual ~Fence();

  Fence(const Fence& from);

  inline Fence& operator=(const Fence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fence(Fence&& from) noexcept
    : Fence() {
    *this = ::std::move(from);
  }

  inline Fence& operator=(Fence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Fence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fence* internal_default_instance() {
    return reinterpret_cast<const Fence*>(
               &_Fence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Fence* other);
  friend void swap(Fence& a, Fence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fence* New() const final {
    return CreateMaybeMessage<Fence>(nullptr);
  }

  Fence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fence& from);
  void MergeFrom(const Fence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string geofence_id = 1;
  void clear_geofence_id();
  static const int kGeofenceIdFieldNumber = 1;
  const ::std::string& geofence_id() const;
  void set_geofence_id(const ::std::string& value);
  #if LANG_CXX11
  void set_geofence_id(::std::string&& value);
  #endif
  void set_geofence_id(const char* value);
  void set_geofence_id(const char* value, size_t size);
  ::std::string* mutable_geofence_id();
  ::std::string* release_geofence_id();
  void set_allocated_geofence_id(::std::string* geofence_id);

  // string floor_id = 2;
  void clear_floor_id();
  static const int kFloorIdFieldNumber = 2;
  const ::std::string& floor_id() const;
  void set_floor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_floor_id(::std::string&& value);
  #endif
  void set_floor_id(const char* value);
  void set_floor_id(const char* value, size_t size);
  ::std::string* mutable_floor_id();
  ::std::string* release_floor_id();
  void set_allocated_floor_id(::std::string* floor_id);

  // string room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:ric.geo.Fence)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr geofence_id_;
  ::google::protobuf::internal::ArenaStringPtr floor_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class WatchRouteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.WatchRouteRequest) */ {
 public:
  WatchRouteRequest();
  virtual ~WatchRouteRequest();

  WatchRouteRequest(const WatchRouteRequest& from);

  inline WatchRouteRequest& operator=(const WatchRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchRouteRequest(WatchRouteRequest&& from) noexcept
    : WatchRouteRequest() {
    *this = ::std::move(from);
  }

  inline WatchRouteRequest& operator=(WatchRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WatchRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchRouteRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRouteRequest*>(
               &_WatchRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WatchRouteRequest* other);
  friend void swap(WatchRouteRequest& a, WatchRouteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchRouteRequest* New() const final {
    return CreateMaybeMessage<WatchRouteRequest>(nullptr);
  }

  WatchRouteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WatchRouteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WatchRouteRequest& from);
  void MergeFrom(const WatchRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRouteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WatchRouteRequest_EventType EventType;
  static const EventType ALL =
    WatchRouteRequest_EventType_ALL;
  static const EventType ROUTE_ON =
    WatchRouteRequest_EventType_ROUTE_ON;
  static const EventType ROUTE_OFF =
    WatchRouteRequest_EventType_ROUTE_OFF;
  static inline bool EventType_IsValid(int value) {
    return WatchRouteRequest_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    WatchRouteRequest_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    WatchRouteRequest_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    WatchRouteRequest_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return WatchRouteRequest_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return WatchRouteRequest_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return WatchRouteRequest_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string routes_ids = 3;
  int routes_ids_size() const;
  void clear_routes_ids();
  static const int kRoutesIdsFieldNumber = 3;
  const ::std::string& routes_ids(int index) const;
  ::std::string* mutable_routes_ids(int index);
  void set_routes_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_routes_ids(int index, ::std::string&& value);
  #endif
  void set_routes_ids(int index, const char* value);
  void set_routes_ids(int index, const char* value, size_t size);
  ::std::string* add_routes_ids();
  void add_routes_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_routes_ids(::std::string&& value);
  #endif
  void add_routes_ids(const char* value);
  void add_routes_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& routes_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_routes_ids();

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .ric.geo.WatchRouteRequest.EventType event_type = 2;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::ric::geo::WatchRouteRequest_EventType event_type() const;
  void set_event_type(::ric::geo::WatchRouteRequest_EventType value);

  // @@protoc_insertion_point(class_scope:ric.geo.WatchRouteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> routes_ids_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  int event_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class UpdateGeoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.UpdateGeoRequest) */ {
 public:
  UpdateGeoRequest();
  virtual ~UpdateGeoRequest();

  UpdateGeoRequest(const UpdateGeoRequest& from);

  inline UpdateGeoRequest& operator=(const UpdateGeoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateGeoRequest(UpdateGeoRequest&& from) noexcept
    : UpdateGeoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGeoRequest& operator=(UpdateGeoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateGeoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGeoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGeoRequest*>(
               &_UpdateGeoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UpdateGeoRequest* other);
  friend void swap(UpdateGeoRequest& a, UpdateGeoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateGeoRequest* New() const final {
    return CreateMaybeMessage<UpdateGeoRequest>(nullptr);
  }

  UpdateGeoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGeoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateGeoRequest& from);
  void MergeFrom(const UpdateGeoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGeoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string geofence_id = 1;
  void clear_geofence_id();
  static const int kGeofenceIdFieldNumber = 1;
  const ::std::string& geofence_id() const;
  void set_geofence_id(const ::std::string& value);
  #if LANG_CXX11
  void set_geofence_id(::std::string&& value);
  #endif
  void set_geofence_id(const char* value);
  void set_geofence_id(const char* value, size_t size);
  ::std::string* mutable_geofence_id();
  ::std::string* release_geofence_id();
  void set_allocated_geofence_id(::std::string* geofence_id);

  // string floor_id = 2;
  void clear_floor_id();
  static const int kFloorIdFieldNumber = 2;
  const ::std::string& floor_id() const;
  void set_floor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_floor_id(::std::string&& value);
  #endif
  void set_floor_id(const char* value);
  void set_floor_id(const char* value, size_t size);
  ::std::string* mutable_floor_id();
  ::std::string* release_floor_id();
  void set_allocated_floor_id(::std::string* floor_id);

  // @@protoc_insertion_point(class_scope:ric.geo.UpdateGeoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr geofence_id_;
  ::google::protobuf::internal::ArenaStringPtr floor_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetObjectInfoRequest) */ {
 public:
  GetObjectInfoRequest();
  virtual ~GetObjectInfoRequest();

  GetObjectInfoRequest(const GetObjectInfoRequest& from);

  inline GetObjectInfoRequest& operator=(const GetObjectInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoRequest(GetObjectInfoRequest&& from) noexcept
    : GetObjectInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoRequest& operator=(GetObjectInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoRequest*>(
               &_GetObjectInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetObjectInfoRequest* other);
  friend void swap(GetObjectInfoRequest& a, GetObjectInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoRequest* New() const final {
    return CreateMaybeMessage<GetObjectInfoRequest>(nullptr);
  }

  GetObjectInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoRequest& from);
  void MergeFrom(const GetObjectInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.geo.GetObjectInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoResponse_ObjectGeofenceInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo) */ {
 public:
  GetObjectInfoResponse_ObjectGeofenceInfo();
  virtual ~GetObjectInfoResponse_ObjectGeofenceInfo();

  GetObjectInfoResponse_ObjectGeofenceInfo(const GetObjectInfoResponse_ObjectGeofenceInfo& from);

  inline GetObjectInfoResponse_ObjectGeofenceInfo& operator=(const GetObjectInfoResponse_ObjectGeofenceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoResponse_ObjectGeofenceInfo(GetObjectInfoResponse_ObjectGeofenceInfo&& from) noexcept
    : GetObjectInfoResponse_ObjectGeofenceInfo() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoResponse_ObjectGeofenceInfo& operator=(GetObjectInfoResponse_ObjectGeofenceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoResponse_ObjectGeofenceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoResponse_ObjectGeofenceInfo* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoResponse_ObjectGeofenceInfo*>(
               &_GetObjectInfoResponse_ObjectGeofenceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetObjectInfoResponse_ObjectGeofenceInfo* other);
  friend void swap(GetObjectInfoResponse_ObjectGeofenceInfo& a, GetObjectInfoResponse_ObjectGeofenceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoResponse_ObjectGeofenceInfo* New() const final {
    return CreateMaybeMessage<GetObjectInfoResponse_ObjectGeofenceInfo>(nullptr);
  }

  GetObjectInfoResponse_ObjectGeofenceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoResponse_ObjectGeofenceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from);
  void MergeFrom(const GetObjectInfoResponse_ObjectGeofenceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoResponse_ObjectGeofenceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string geofence_id = 1;
  void clear_geofence_id();
  static const int kGeofenceIdFieldNumber = 1;
  const ::std::string& geofence_id() const;
  void set_geofence_id(const ::std::string& value);
  #if LANG_CXX11
  void set_geofence_id(::std::string&& value);
  #endif
  void set_geofence_id(const char* value);
  void set_geofence_id(const char* value, size_t size);
  ::std::string* mutable_geofence_id();
  ::std::string* release_geofence_id();
  void set_allocated_geofence_id(::std::string* geofence_id);

  // int64 last_packet_time = 3;
  void clear_last_packet_time();
  static const int kLastPacketTimeFieldNumber = 3;
  ::google::protobuf::int64 last_packet_time() const;
  void set_last_packet_time(::google::protobuf::int64 value);

  // int64 last_enter_time = 4;
  void clear_last_enter_time();
  static const int kLastEnterTimeFieldNumber = 4;
  ::google::protobuf::int64 last_enter_time() const;
  void set_last_enter_time(::google::protobuf::int64 value);

  // int64 last_leave_time = 5;
  void clear_last_leave_time();
  static const int kLastLeaveTimeFieldNumber = 5;
  ::google::protobuf::int64 last_leave_time() const;
  void set_last_leave_time(::google::protobuf::int64 value);

  // bool is_in = 2;
  void clear_is_in();
  static const int kIsInFieldNumber = 2;
  bool is_in() const;
  void set_is_in(bool value);

  // @@protoc_insertion_point(class_scope:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr geofence_id_;
  ::google::protobuf::int64 last_packet_time_;
  ::google::protobuf::int64 last_enter_time_;
  ::google::protobuf::int64 last_leave_time_;
  bool is_in_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetObjectInfoResponse) */ {
 public:
  GetObjectInfoResponse();
  virtual ~GetObjectInfoResponse();

  GetObjectInfoResponse(const GetObjectInfoResponse& from);

  inline GetObjectInfoResponse& operator=(const GetObjectInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoResponse(GetObjectInfoResponse&& from) noexcept
    : GetObjectInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoResponse& operator=(GetObjectInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoResponse*>(
               &_GetObjectInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetObjectInfoResponse* other);
  friend void swap(GetObjectInfoResponse& a, GetObjectInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoResponse* New() const final {
    return CreateMaybeMessage<GetObjectInfoResponse>(nullptr);
  }

  GetObjectInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoResponse& from);
  void MergeFrom(const GetObjectInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetObjectInfoResponse_ObjectGeofenceInfo ObjectGeofenceInfo;

  // accessors -------------------------------------------------------

  // repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
  int geofences_size() const;
  void clear_geofences();
  static const int kGeofencesFieldNumber = 1;
  ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* mutable_geofences(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >*
      mutable_geofences();
  const ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo& geofences(int index) const;
  ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* add_geofences();
  const ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >&
      geofences() const;

  // @@protoc_insertion_point(class_scope:ric.geo.GetObjectInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo > geofences_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class WatchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.WatchRequest) */ {
 public:
  WatchRequest();
  virtual ~WatchRequest();

  WatchRequest(const WatchRequest& from);

  inline WatchRequest& operator=(const WatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchRequest(WatchRequest&& from) noexcept
    : WatchRequest() {
    *this = ::std::move(from);
  }

  inline WatchRequest& operator=(WatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRequest*>(
               &_WatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(WatchRequest* other);
  friend void swap(WatchRequest& a, WatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchRequest* New() const final {
    return CreateMaybeMessage<WatchRequest>(nullptr);
  }

  WatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WatchRequest& from);
  void MergeFrom(const WatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WatchRequest_EventType EventType;
  static const EventType UNDEFINED =
    WatchRequest_EventType_UNDEFINED;
  static const EventType GEOFENCE_ENTER =
    WatchRequest_EventType_GEOFENCE_ENTER;
  static const EventType GEOFENCE_LEAVE =
    WatchRequest_EventType_GEOFENCE_LEAVE;
  static const EventType GEOFENCE_BOTH =
    WatchRequest_EventType_GEOFENCE_BOTH;
  static const EventType ROUTE_ON =
    WatchRequest_EventType_ROUTE_ON;
  static const EventType ROUTE_OFF =
    WatchRequest_EventType_ROUTE_OFF;
  static const EventType ROUTE_BOTH =
    WatchRequest_EventType_ROUTE_BOTH;
  static const EventType ROOM_ENTER =
    WatchRequest_EventType_ROOM_ENTER;
  static const EventType ROOM_LEAVE =
    WatchRequest_EventType_ROOM_LEAVE;
  static const EventType ROOM_BOTH =
    WatchRequest_EventType_ROOM_BOTH;
  static inline bool EventType_IsValid(int value) {
    return WatchRequest_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    WatchRequest_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    WatchRequest_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    WatchRequest_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return WatchRequest_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return WatchRequest_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return WatchRequest_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ric.geo.Fence fences = 3;
  int fences_size() const;
  void clear_fences();
  static const int kFencesFieldNumber = 3;
  ::ric::geo::Fence* mutable_fences(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >*
      mutable_fences();
  const ::ric::geo::Fence& fences(int index) const;
  ::ric::geo::Fence* add_fences();
  const ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >&
      fences() const;

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .ric.geo.WatchRequest.EventType event_type = 2;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::ric::geo::WatchRequest_EventType event_type() const;
  void set_event_type(::ric::geo::WatchRequest_EventType value);

  // @@protoc_insertion_point(class_scope:ric.geo.WatchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence > fences_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  int event_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StopRequest* other);
  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.geo.Fence fences = 2;
  int fences_size() const;
  void clear_fences();
  static const int kFencesFieldNumber = 2;
  ::ric::geo::Fence* mutable_fences(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >*
      mutable_fences();
  const ::ric::geo::Fence& fences(int index) const;
  ::ric::geo::Fence* add_fences();
  const ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >&
      fences() const;

  // repeated string tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.geo.StopRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence > fences_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class ControlRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.ControlRequest) */ {
 public:
  ControlRequest();
  virtual ~ControlRequest();

  ControlRequest(const ControlRequest& from);

  inline ControlRequest& operator=(const ControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlRequest(ControlRequest&& from) noexcept
    : ControlRequest() {
    *this = ::std::move(from);
  }

  inline ControlRequest& operator=(ControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlRequest* internal_default_instance() {
    return reinterpret_cast<const ControlRequest*>(
               &_ControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ControlRequest* other);
  friend void swap(ControlRequest& a, ControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlRequest* New() const final {
    return CreateMaybeMessage<ControlRequest>(nullptr);
  }

  ControlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlRequest& from);
  void MergeFrom(const ControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .ric.geo.Time time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::ric::geo::Time& time() const;
  ::ric::geo::Time* release_time();
  ::ric::geo::Time* mutable_time();
  void set_allocated_time(::ric::geo::Time* time);

  // .ric.geo.Circle circle = 3;
  bool has_circle() const;
  void clear_circle();
  static const int kCircleFieldNumber = 3;
  const ::ric::geo::Circle& circle() const;
  ::ric::geo::Circle* release_circle();
  ::ric::geo::Circle* mutable_circle();
  void set_allocated_circle(::ric::geo::Circle* circle);

  // @@protoc_insertion_point(class_scope:ric.geo.ControlRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::ric::geo::Time* time_;
  ::ric::geo::Circle* circle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Time final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(nullptr);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 interval = 2;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  ::google::protobuf::int64 interval() const;
  void set_interval(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.geo.Time)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 interval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Circle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Circle) */ {
 public:
  Circle();
  virtual ~Circle();

  Circle(const Circle& from);

  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Circle(Circle&& from) noexcept
    : Circle() {
    *this = ::std::move(from);
  }

  inline Circle& operator=(Circle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Circle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
               &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Circle* other);
  friend void swap(Circle& a, Circle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Circle* New() const final {
    return CreateMaybeMessage<Circle>(nullptr);
  }

  Circle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Circle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // double radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.Circle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  double radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class OsmResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.OsmResponse) */ {
 public:
  OsmResponse();
  virtual ~OsmResponse();

  OsmResponse(const OsmResponse& from);

  inline OsmResponse& operator=(const OsmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OsmResponse(OsmResponse&& from) noexcept
    : OsmResponse() {
    *this = ::std::move(from);
  }

  inline OsmResponse& operator=(OsmResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OsmResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OsmResponse* internal_default_instance() {
    return reinterpret_cast<const OsmResponse*>(
               &_OsmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(OsmResponse* other);
  friend void swap(OsmResponse& a, OsmResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OsmResponse* New() const final {
    return CreateMaybeMessage<OsmResponse>(nullptr);
  }

  OsmResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OsmResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OsmResponse& from);
  void MergeFrom(const OsmResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsmResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.geo.OsmResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GeocodeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GeocodeRequest) */ {
 public:
  GeocodeRequest();
  virtual ~GeocodeRequest();

  GeocodeRequest(const GeocodeRequest& from);

  inline GeocodeRequest& operator=(const GeocodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeocodeRequest(GeocodeRequest&& from) noexcept
    : GeocodeRequest() {
    *this = ::std::move(from);
  }

  inline GeocodeRequest& operator=(GeocodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeocodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeocodeRequest* internal_default_instance() {
    return reinterpret_cast<const GeocodeRequest*>(
               &_GeocodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GeocodeRequest* other);
  friend void swap(GeocodeRequest& a, GeocodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeocodeRequest* New() const final {
    return CreateMaybeMessage<GeocodeRequest>(nullptr);
  }

  GeocodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeocodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeocodeRequest& from);
  void MergeFrom(const GeocodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeocodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string language = 2;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:ric.geo.GeocodeRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.Point)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GeocodeReverseRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GeocodeReverseRequest) */ {
 public:
  GeocodeReverseRequest();
  virtual ~GeocodeReverseRequest();

  GeocodeReverseRequest(const GeocodeReverseRequest& from);

  inline GeocodeReverseRequest& operator=(const GeocodeReverseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeocodeReverseRequest(GeocodeReverseRequest&& from) noexcept
    : GeocodeReverseRequest() {
    *this = ::std::move(from);
  }

  inline GeocodeReverseRequest& operator=(GeocodeReverseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeocodeReverseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeocodeReverseRequest* internal_default_instance() {
    return reinterpret_cast<const GeocodeReverseRequest*>(
               &_GeocodeReverseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GeocodeReverseRequest* other);
  friend void swap(GeocodeReverseRequest& a, GeocodeReverseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeocodeReverseRequest* New() const final {
    return CreateMaybeMessage<GeocodeReverseRequest>(nullptr);
  }

  GeocodeReverseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeocodeReverseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeocodeReverseRequest& from);
  void MergeFrom(const GeocodeReverseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeocodeReverseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string language = 2;
  void clear_language();
  static const int kLanguageFieldNumber = 2;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // .ric.geo.Point point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::ric::geo::Point& point() const;
  ::ric::geo::Point* release_point();
  ::ric::geo::Point* mutable_point();
  void set_allocated_point(::ric::geo::Point* point);

  // @@protoc_insertion_point(class_scope:ric.geo.GeocodeReverseRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::ric::geo::Point* point_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class GetRouteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.GetRouteRequest) */ {
 public:
  GetRouteRequest();
  virtual ~GetRouteRequest();

  GetRouteRequest(const GetRouteRequest& from);

  inline GetRouteRequest& operator=(const GetRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRouteRequest(GetRouteRequest&& from) noexcept
    : GetRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteRequest& operator=(GetRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteRequest*>(
               &_GetRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GetRouteRequest* other);
  friend void swap(GetRouteRequest& a, GetRouteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRouteRequest* New() const final {
    return CreateMaybeMessage<GetRouteRequest>(nullptr);
  }

  GetRouteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRouteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRouteRequest& from);
  void MergeFrom(const GetRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.geo.Point coordinates = 1;
  int coordinates_size() const;
  void clear_coordinates();
  static const int kCoordinatesFieldNumber = 1;
  ::ric::geo::Point* mutable_coordinates(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Point >*
      mutable_coordinates();
  const ::ric::geo::Point& coordinates(int index) const;
  ::ric::geo::Point* add_coordinates();
  const ::google::protobuf::RepeatedPtrField< ::ric::geo::Point >&
      coordinates() const;

  // bytes options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const void* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:ric.geo.GetRouteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::geo::Point > coordinates_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class IndoorCircle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.IndoorCircle) */ {
 public:
  IndoorCircle();
  virtual ~IndoorCircle();

  IndoorCircle(const IndoorCircle& from);

  inline IndoorCircle& operator=(const IndoorCircle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndoorCircle(IndoorCircle&& from) noexcept
    : IndoorCircle() {
    *this = ::std::move(from);
  }

  inline IndoorCircle& operator=(IndoorCircle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IndoorCircle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndoorCircle* internal_default_instance() {
    return reinterpret_cast<const IndoorCircle*>(
               &_IndoorCircle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(IndoorCircle* other);
  friend void swap(IndoorCircle& a, IndoorCircle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndoorCircle* New() const final {
    return CreateMaybeMessage<IndoorCircle>(nullptr);
  }

  IndoorCircle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndoorCircle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndoorCircle& from);
  void MergeFrom(const IndoorCircle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndoorCircle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double radius = 4;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.IndoorCircle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Zone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Zone) */ {
 public:
  Zone();
  virtual ~Zone();

  Zone(const Zone& from);

  inline Zone& operator=(const Zone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zone(Zone&& from) noexcept
    : Zone() {
    *this = ::std::move(from);
  }

  inline Zone& operator=(Zone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Zone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Zone* internal_default_instance() {
    return reinterpret_cast<const Zone*>(
               &_Zone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Zone* other);
  friend void swap(Zone& a, Zone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zone* New() const final {
    return CreateMaybeMessage<Zone>(nullptr);
  }

  Zone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Zone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Zone& from);
  void MergeFrom(const Zone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.geo.Circle circle = 1;
  bool has_circle() const;
  void clear_circle();
  static const int kCircleFieldNumber = 1;
  const ::ric::geo::Circle& circle() const;
  ::ric::geo::Circle* release_circle();
  ::ric::geo::Circle* mutable_circle();
  void set_allocated_circle(::ric::geo::Circle* circle);

  // .ric.geo.IndoorCircle indoor_circle = 2;
  bool has_indoor_circle() const;
  void clear_indoor_circle();
  static const int kIndoorCircleFieldNumber = 2;
  const ::ric::geo::IndoorCircle& indoor_circle() const;
  ::ric::geo::IndoorCircle* release_indoor_circle();
  ::ric::geo::IndoorCircle* mutable_indoor_circle();
  void set_allocated_indoor_circle(::ric::geo::IndoorCircle* indoor_circle);

  // @@protoc_insertion_point(class_scope:ric.geo.Zone)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::geo::Circle* circle_;
  ::ric::geo::IndoorCircle* indoor_circle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class IndoorPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.IndoorPoint) */ {
 public:
  IndoorPoint();
  virtual ~IndoorPoint();

  IndoorPoint(const IndoorPoint& from);

  inline IndoorPoint& operator=(const IndoorPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndoorPoint(IndoorPoint&& from) noexcept
    : IndoorPoint() {
    *this = ::std::move(from);
  }

  inline IndoorPoint& operator=(IndoorPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IndoorPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndoorPoint* internal_default_instance() {
    return reinterpret_cast<const IndoorPoint*>(
               &_IndoorPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(IndoorPoint* other);
  friend void swap(IndoorPoint& a, IndoorPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndoorPoint* New() const final {
    return CreateMaybeMessage<IndoorPoint>(nullptr);
  }

  IndoorPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndoorPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndoorPoint& from);
  void MergeFrom(const IndoorPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndoorPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ric.geo.IndoorPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.geo.Point location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::ric::geo::Point& location() const;
  ::ric::geo::Point* release_location();
  ::ric::geo::Point* mutable_location();
  void set_allocated_location(::ric::geo::Point* location);

  // .ric.geo.IndoorPoint indoor_location = 2;
  bool has_indoor_location() const;
  void clear_indoor_location();
  static const int kIndoorLocationFieldNumber = 2;
  const ::ric::geo::IndoorPoint& indoor_location() const;
  ::ric::geo::IndoorPoint* release_indoor_location();
  ::ric::geo::IndoorPoint* mutable_indoor_location();
  void set_allocated_indoor_location(::ric::geo::IndoorPoint* indoor_location);

  // @@protoc_insertion_point(class_scope:ric.geo.Position)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::geo::Point* location_;
  ::ric::geo::IndoorPoint* indoor_location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class CheckInRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.CheckInRequest) */ {
 public:
  CheckInRequest();
  virtual ~CheckInRequest();

  CheckInRequest(const CheckInRequest& from);

  inline CheckInRequest& operator=(const CheckInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckInRequest(CheckInRequest&& from) noexcept
    : CheckInRequest() {
    *this = ::std::move(from);
  }

  inline CheckInRequest& operator=(CheckInRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckInRequest* internal_default_instance() {
    return reinterpret_cast<const CheckInRequest*>(
               &_CheckInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CheckInRequest* other);
  friend void swap(CheckInRequest& a, CheckInRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckInRequest* New() const final {
    return CreateMaybeMessage<CheckInRequest>(nullptr);
  }

  CheckInRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckInRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckInRequest& from);
  void MergeFrom(const CheckInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.geo.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::ric::geo::Position& position() const;
  ::ric::geo::Position* release_position();
  ::ric::geo::Position* mutable_position();
  void set_allocated_position(::ric::geo::Position* position);

  // .ric.geo.Zone zone = 2;
  bool has_zone() const;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::ric::geo::Zone& zone() const;
  ::ric::geo::Zone* release_zone();
  ::ric::geo::Zone* mutable_zone();
  void set_allocated_zone(::ric::geo::Zone* zone);

  // @@protoc_insertion_point(class_scope:ric.geo.CheckInRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::geo::Position* position_;
  ::ric::geo::Zone* zone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// -------------------------------------------------------------------

class CheckInResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.geo.CheckInResponse) */ {
 public:
  CheckInResponse();
  virtual ~CheckInResponse();

  CheckInResponse(const CheckInResponse& from);

  inline CheckInResponse& operator=(const CheckInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckInResponse(CheckInResponse&& from) noexcept
    : CheckInResponse() {
    *this = ::std::move(from);
  }

  inline CheckInResponse& operator=(CheckInResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CheckInResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckInResponse* internal_default_instance() {
    return reinterpret_cast<const CheckInResponse*>(
               &_CheckInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CheckInResponse* other);
  friend void swap(CheckInResponse& a, CheckInResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckInResponse* New() const final {
    return CreateMaybeMessage<CheckInResponse>(nullptr);
  }

  CheckInResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckInResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckInResponse& from);
  void MergeFrom(const CheckInResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckInResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool in = 1;
  void clear_in();
  static const int kInFieldNumber = 1;
  bool in() const;
  void set_in(bool value);

  // @@protoc_insertion_point(class_scope:ric.geo.CheckInResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool in_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgeo_2fricgeo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyResponse

// -------------------------------------------------------------------

// WatchGeofenceRequest

// string object_id = 1;
inline void WatchGeofenceRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchGeofenceRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchGeofenceRequest.object_id)
  return object_id_.GetNoArena();
}
inline void WatchGeofenceRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.WatchGeofenceRequest.object_id)
}
#if LANG_CXX11
inline void WatchGeofenceRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.WatchGeofenceRequest.object_id)
}
#endif
inline void WatchGeofenceRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchGeofenceRequest.object_id)
}
inline void WatchGeofenceRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchGeofenceRequest.object_id)
}
inline ::std::string* WatchGeofenceRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchGeofenceRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchGeofenceRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.WatchGeofenceRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchGeofenceRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.WatchGeofenceRequest.object_id)
}

// .ric.geo.WatchGeofenceRequest.EventType event_type = 2;
inline void WatchGeofenceRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::ric::geo::WatchGeofenceRequest_EventType WatchGeofenceRequest::event_type() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchGeofenceRequest.event_type)
  return static_cast< ::ric::geo::WatchGeofenceRequest_EventType >(event_type_);
}
inline void WatchGeofenceRequest::set_event_type(::ric::geo::WatchGeofenceRequest_EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.WatchGeofenceRequest.event_type)
}

// repeated string geofences_ids = 3;
inline int WatchGeofenceRequest::geofences_ids_size() const {
  return geofences_ids_.size();
}
inline void WatchGeofenceRequest::clear_geofences_ids() {
  geofences_ids_.Clear();
}
inline const ::std::string& WatchGeofenceRequest::geofences_ids(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchGeofenceRequest.geofences_ids)
  return geofences_ids_.Get(index);
}
inline ::std::string* WatchGeofenceRequest::mutable_geofences_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchGeofenceRequest.geofences_ids)
  return geofences_ids_.Mutable(index);
}
inline void WatchGeofenceRequest::set_geofences_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchGeofenceRequest.geofences_ids)
  geofences_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchGeofenceRequest::set_geofences_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchGeofenceRequest.geofences_ids)
  geofences_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchGeofenceRequest::set_geofences_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  geofences_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchGeofenceRequest.geofences_ids)
}
inline void WatchGeofenceRequest::set_geofences_ids(int index, const char* value, size_t size) {
  geofences_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchGeofenceRequest.geofences_ids)
}
inline ::std::string* WatchGeofenceRequest::add_geofences_ids() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.WatchGeofenceRequest.geofences_ids)
  return geofences_ids_.Add();
}
inline void WatchGeofenceRequest::add_geofences_ids(const ::std::string& value) {
  geofences_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.WatchGeofenceRequest.geofences_ids)
}
#if LANG_CXX11
inline void WatchGeofenceRequest::add_geofences_ids(::std::string&& value) {
  geofences_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.WatchGeofenceRequest.geofences_ids)
}
#endif
inline void WatchGeofenceRequest::add_geofences_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  geofences_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.WatchGeofenceRequest.geofences_ids)
}
inline void WatchGeofenceRequest::add_geofences_ids(const char* value, size_t size) {
  geofences_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.WatchGeofenceRequest.geofences_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WatchGeofenceRequest::geofences_ids() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchGeofenceRequest.geofences_ids)
  return geofences_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WatchGeofenceRequest::mutable_geofences_ids() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchGeofenceRequest.geofences_ids)
  return &geofences_ids_;
}

// repeated string tags = 4;
inline int WatchGeofenceRequest::tags_size() const {
  return tags_.size();
}
inline void WatchGeofenceRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& WatchGeofenceRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchGeofenceRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* WatchGeofenceRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchGeofenceRequest.tags)
  return tags_.Mutable(index);
}
inline void WatchGeofenceRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchGeofenceRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchGeofenceRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchGeofenceRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchGeofenceRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchGeofenceRequest.tags)
}
inline void WatchGeofenceRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchGeofenceRequest.tags)
}
inline ::std::string* WatchGeofenceRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.WatchGeofenceRequest.tags)
  return tags_.Add();
}
inline void WatchGeofenceRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.WatchGeofenceRequest.tags)
}
#if LANG_CXX11
inline void WatchGeofenceRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.WatchGeofenceRequest.tags)
}
#endif
inline void WatchGeofenceRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.WatchGeofenceRequest.tags)
}
inline void WatchGeofenceRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.WatchGeofenceRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WatchGeofenceRequest::tags() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchGeofenceRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WatchGeofenceRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchGeofenceRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// WatchRoomRequest

// string object_id = 1;
inline void WatchRoomRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchRoomRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRoomRequest.object_id)
  return object_id_.GetNoArena();
}
inline void WatchRoomRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.WatchRoomRequest.object_id)
}
#if LANG_CXX11
inline void WatchRoomRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.WatchRoomRequest.object_id)
}
#endif
inline void WatchRoomRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRoomRequest.object_id)
}
inline void WatchRoomRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRoomRequest.object_id)
}
inline ::std::string* WatchRoomRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRoomRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchRoomRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.WatchRoomRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchRoomRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.WatchRoomRequest.object_id)
}

// .ric.geo.WatchRoomRequest.EventType event_type = 2;
inline void WatchRoomRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::ric::geo::WatchRoomRequest_EventType WatchRoomRequest::event_type() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRoomRequest.event_type)
  return static_cast< ::ric::geo::WatchRoomRequest_EventType >(event_type_);
}
inline void WatchRoomRequest::set_event_type(::ric::geo::WatchRoomRequest_EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.WatchRoomRequest.event_type)
}

// repeated .ric.geo.Fence fences = 3;
inline int WatchRoomRequest::fences_size() const {
  return fences_.size();
}
inline void WatchRoomRequest::clear_fences() {
  fences_.Clear();
}
inline ::ric::geo::Fence* WatchRoomRequest::mutable_fences(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRoomRequest.fences)
  return fences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >*
WatchRoomRequest::mutable_fences() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchRoomRequest.fences)
  return &fences_;
}
inline const ::ric::geo::Fence& WatchRoomRequest::fences(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRoomRequest.fences)
  return fences_.Get(index);
}
inline ::ric::geo::Fence* WatchRoomRequest::add_fences() {
  // @@protoc_insertion_point(field_add:ric.geo.WatchRoomRequest.fences)
  return fences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >&
WatchRoomRequest::fences() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchRoomRequest.fences)
  return fences_;
}

// repeated string tags = 4;
inline int WatchRoomRequest::tags_size() const {
  return tags_.size();
}
inline void WatchRoomRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& WatchRoomRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRoomRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* WatchRoomRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRoomRequest.tags)
  return tags_.Mutable(index);
}
inline void WatchRoomRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRoomRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchRoomRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRoomRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchRoomRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRoomRequest.tags)
}
inline void WatchRoomRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRoomRequest.tags)
}
inline ::std::string* WatchRoomRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.WatchRoomRequest.tags)
  return tags_.Add();
}
inline void WatchRoomRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.WatchRoomRequest.tags)
}
#if LANG_CXX11
inline void WatchRoomRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.WatchRoomRequest.tags)
}
#endif
inline void WatchRoomRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.WatchRoomRequest.tags)
}
inline void WatchRoomRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.WatchRoomRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WatchRoomRequest::tags() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchRoomRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WatchRoomRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchRoomRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// Fence

// string geofence_id = 1;
inline void Fence::clear_geofence_id() {
  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fence::geofence_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.Fence.geofence_id)
  return geofence_id_.GetNoArena();
}
inline void Fence::set_geofence_id(const ::std::string& value) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.Fence.geofence_id)
}
#if LANG_CXX11
inline void Fence::set_geofence_id(::std::string&& value) {
  
  geofence_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.Fence.geofence_id)
}
#endif
inline void Fence::set_geofence_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.Fence.geofence_id)
}
inline void Fence::set_geofence_id(const char* value, size_t size) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.Fence.geofence_id)
}
inline ::std::string* Fence::mutable_geofence_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.Fence.geofence_id)
  return geofence_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fence::release_geofence_id() {
  // @@protoc_insertion_point(field_release:ric.geo.Fence.geofence_id)
  
  return geofence_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fence::set_allocated_geofence_id(::std::string* geofence_id) {
  if (geofence_id != nullptr) {
    
  } else {
    
  }
  geofence_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geofence_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Fence.geofence_id)
}

// string floor_id = 2;
inline void Fence::clear_floor_id() {
  floor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fence::floor_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.Fence.floor_id)
  return floor_id_.GetNoArena();
}
inline void Fence::set_floor_id(const ::std::string& value) {
  
  floor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.Fence.floor_id)
}
#if LANG_CXX11
inline void Fence::set_floor_id(::std::string&& value) {
  
  floor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.Fence.floor_id)
}
#endif
inline void Fence::set_floor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  floor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.Fence.floor_id)
}
inline void Fence::set_floor_id(const char* value, size_t size) {
  
  floor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.Fence.floor_id)
}
inline ::std::string* Fence::mutable_floor_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.Fence.floor_id)
  return floor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fence::release_floor_id() {
  // @@protoc_insertion_point(field_release:ric.geo.Fence.floor_id)
  
  return floor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fence::set_allocated_floor_id(::std::string* floor_id) {
  if (floor_id != nullptr) {
    
  } else {
    
  }
  floor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floor_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Fence.floor_id)
}

// string room_id = 3;
inline void Fence::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fence::room_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.Fence.room_id)
  return room_id_.GetNoArena();
}
inline void Fence::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.Fence.room_id)
}
#if LANG_CXX11
inline void Fence::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.Fence.room_id)
}
#endif
inline void Fence::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.Fence.room_id)
}
inline void Fence::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.Fence.room_id)
}
inline ::std::string* Fence::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.Fence.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fence::release_room_id() {
  // @@protoc_insertion_point(field_release:ric.geo.Fence.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fence::set_allocated_room_id(::std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Fence.room_id)
}

// -------------------------------------------------------------------

// WatchRouteRequest

// string object_id = 1;
inline void WatchRouteRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchRouteRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRouteRequest.object_id)
  return object_id_.GetNoArena();
}
inline void WatchRouteRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.WatchRouteRequest.object_id)
}
#if LANG_CXX11
inline void WatchRouteRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.WatchRouteRequest.object_id)
}
#endif
inline void WatchRouteRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRouteRequest.object_id)
}
inline void WatchRouteRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRouteRequest.object_id)
}
inline ::std::string* WatchRouteRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRouteRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchRouteRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.WatchRouteRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchRouteRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.WatchRouteRequest.object_id)
}

// .ric.geo.WatchRouteRequest.EventType event_type = 2;
inline void WatchRouteRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::ric::geo::WatchRouteRequest_EventType WatchRouteRequest::event_type() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRouteRequest.event_type)
  return static_cast< ::ric::geo::WatchRouteRequest_EventType >(event_type_);
}
inline void WatchRouteRequest::set_event_type(::ric::geo::WatchRouteRequest_EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.WatchRouteRequest.event_type)
}

// repeated string routes_ids = 3;
inline int WatchRouteRequest::routes_ids_size() const {
  return routes_ids_.size();
}
inline void WatchRouteRequest::clear_routes_ids() {
  routes_ids_.Clear();
}
inline const ::std::string& WatchRouteRequest::routes_ids(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRouteRequest.routes_ids)
  return routes_ids_.Get(index);
}
inline ::std::string* WatchRouteRequest::mutable_routes_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRouteRequest.routes_ids)
  return routes_ids_.Mutable(index);
}
inline void WatchRouteRequest::set_routes_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRouteRequest.routes_ids)
  routes_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchRouteRequest::set_routes_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRouteRequest.routes_ids)
  routes_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchRouteRequest::set_routes_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  routes_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRouteRequest.routes_ids)
}
inline void WatchRouteRequest::set_routes_ids(int index, const char* value, size_t size) {
  routes_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRouteRequest.routes_ids)
}
inline ::std::string* WatchRouteRequest::add_routes_ids() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.WatchRouteRequest.routes_ids)
  return routes_ids_.Add();
}
inline void WatchRouteRequest::add_routes_ids(const ::std::string& value) {
  routes_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.WatchRouteRequest.routes_ids)
}
#if LANG_CXX11
inline void WatchRouteRequest::add_routes_ids(::std::string&& value) {
  routes_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.WatchRouteRequest.routes_ids)
}
#endif
inline void WatchRouteRequest::add_routes_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  routes_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.WatchRouteRequest.routes_ids)
}
inline void WatchRouteRequest::add_routes_ids(const char* value, size_t size) {
  routes_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.WatchRouteRequest.routes_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WatchRouteRequest::routes_ids() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchRouteRequest.routes_ids)
  return routes_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WatchRouteRequest::mutable_routes_ids() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchRouteRequest.routes_ids)
  return &routes_ids_;
}

// repeated string tags = 4;
inline int WatchRouteRequest::tags_size() const {
  return tags_.size();
}
inline void WatchRouteRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& WatchRouteRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRouteRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* WatchRouteRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRouteRequest.tags)
  return tags_.Mutable(index);
}
inline void WatchRouteRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRouteRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchRouteRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRouteRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchRouteRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRouteRequest.tags)
}
inline void WatchRouteRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRouteRequest.tags)
}
inline ::std::string* WatchRouteRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.WatchRouteRequest.tags)
  return tags_.Add();
}
inline void WatchRouteRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.WatchRouteRequest.tags)
}
#if LANG_CXX11
inline void WatchRouteRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.WatchRouteRequest.tags)
}
#endif
inline void WatchRouteRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.WatchRouteRequest.tags)
}
inline void WatchRouteRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.WatchRouteRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WatchRouteRequest::tags() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchRouteRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WatchRouteRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchRouteRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// UpdateGeoRequest

// string geofence_id = 1;
inline void UpdateGeoRequest::clear_geofence_id() {
  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateGeoRequest::geofence_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.UpdateGeoRequest.geofence_id)
  return geofence_id_.GetNoArena();
}
inline void UpdateGeoRequest::set_geofence_id(const ::std::string& value) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.UpdateGeoRequest.geofence_id)
}
#if LANG_CXX11
inline void UpdateGeoRequest::set_geofence_id(::std::string&& value) {
  
  geofence_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.UpdateGeoRequest.geofence_id)
}
#endif
inline void UpdateGeoRequest::set_geofence_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.UpdateGeoRequest.geofence_id)
}
inline void UpdateGeoRequest::set_geofence_id(const char* value, size_t size) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.UpdateGeoRequest.geofence_id)
}
inline ::std::string* UpdateGeoRequest::mutable_geofence_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.UpdateGeoRequest.geofence_id)
  return geofence_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateGeoRequest::release_geofence_id() {
  // @@protoc_insertion_point(field_release:ric.geo.UpdateGeoRequest.geofence_id)
  
  return geofence_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGeoRequest::set_allocated_geofence_id(::std::string* geofence_id) {
  if (geofence_id != nullptr) {
    
  } else {
    
  }
  geofence_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geofence_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.UpdateGeoRequest.geofence_id)
}

// string floor_id = 2;
inline void UpdateGeoRequest::clear_floor_id() {
  floor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateGeoRequest::floor_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.UpdateGeoRequest.floor_id)
  return floor_id_.GetNoArena();
}
inline void UpdateGeoRequest::set_floor_id(const ::std::string& value) {
  
  floor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.UpdateGeoRequest.floor_id)
}
#if LANG_CXX11
inline void UpdateGeoRequest::set_floor_id(::std::string&& value) {
  
  floor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.UpdateGeoRequest.floor_id)
}
#endif
inline void UpdateGeoRequest::set_floor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  floor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.UpdateGeoRequest.floor_id)
}
inline void UpdateGeoRequest::set_floor_id(const char* value, size_t size) {
  
  floor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.UpdateGeoRequest.floor_id)
}
inline ::std::string* UpdateGeoRequest::mutable_floor_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.UpdateGeoRequest.floor_id)
  return floor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateGeoRequest::release_floor_id() {
  // @@protoc_insertion_point(field_release:ric.geo.UpdateGeoRequest.floor_id)
  
  return floor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGeoRequest::set_allocated_floor_id(::std::string* floor_id) {
  if (floor_id != nullptr) {
    
  } else {
    
  }
  floor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floor_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.UpdateGeoRequest.floor_id)
}

// -------------------------------------------------------------------

// GetObjectInfoRequest

// string object_id = 1;
inline void GetObjectInfoRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoRequest.object_id)
  return object_id_.GetNoArena();
}
inline void GetObjectInfoRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoRequest.object_id)
}
#if LANG_CXX11
inline void GetObjectInfoRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GetObjectInfoRequest.object_id)
}
#endif
inline void GetObjectInfoRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GetObjectInfoRequest.object_id)
}
inline void GetObjectInfoRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GetObjectInfoRequest.object_id)
}
inline ::std::string* GetObjectInfoRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GetObjectInfoRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.GetObjectInfoRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GetObjectInfoRequest.object_id)
}

// -------------------------------------------------------------------

// GetObjectInfoResponse_ObjectGeofenceInfo

// string geofence_id = 1;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_geofence_id() {
  geofence_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoResponse_ObjectGeofenceInfo::geofence_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
  return geofence_id_.GetNoArena();
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(const ::std::string& value) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
#if LANG_CXX11
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(::std::string&& value) {
  
  geofence_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
#endif
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_geofence_id(const char* value, size_t size) {
  
  geofence_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}
inline ::std::string* GetObjectInfoResponse_ObjectGeofenceInfo::mutable_geofence_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
  return geofence_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoResponse_ObjectGeofenceInfo::release_geofence_id() {
  // @@protoc_insertion_point(field_release:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
  
  return geofence_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_allocated_geofence_id(::std::string* geofence_id) {
  if (geofence_id != nullptr) {
    
  } else {
    
  }
  geofence_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geofence_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.geofence_id)
}

// bool is_in = 2;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_is_in() {
  is_in_ = false;
}
inline bool GetObjectInfoResponse_ObjectGeofenceInfo::is_in() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.is_in)
  return is_in_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_is_in(bool value) {
  
  is_in_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.is_in)
}

// int64 last_packet_time = 3;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_last_packet_time() {
  last_packet_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse_ObjectGeofenceInfo::last_packet_time() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_packet_time)
  return last_packet_time_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_last_packet_time(::google::protobuf::int64 value) {
  
  last_packet_time_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_packet_time)
}

// int64 last_enter_time = 4;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_last_enter_time() {
  last_enter_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse_ObjectGeofenceInfo::last_enter_time() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_enter_time)
  return last_enter_time_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_last_enter_time(::google::protobuf::int64 value) {
  
  last_enter_time_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_enter_time)
}

// int64 last_leave_time = 5;
inline void GetObjectInfoResponse_ObjectGeofenceInfo::clear_last_leave_time() {
  last_leave_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse_ObjectGeofenceInfo::last_leave_time() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_leave_time)
  return last_leave_time_;
}
inline void GetObjectInfoResponse_ObjectGeofenceInfo::set_last_leave_time(::google::protobuf::int64 value) {
  
  last_leave_time_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo.last_leave_time)
}

// -------------------------------------------------------------------

// GetObjectInfoResponse

// repeated .ric.geo.GetObjectInfoResponse.ObjectGeofenceInfo geofences = 1;
inline int GetObjectInfoResponse::geofences_size() const {
  return geofences_.size();
}
inline void GetObjectInfoResponse::clear_geofences() {
  geofences_.Clear();
}
inline ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* GetObjectInfoResponse::mutable_geofences(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >*
GetObjectInfoResponse::mutable_geofences() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.GetObjectInfoResponse.geofences)
  return &geofences_;
}
inline const ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo& GetObjectInfoResponse::geofences(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_.Get(index);
}
inline ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo* GetObjectInfoResponse::add_geofences() {
  // @@protoc_insertion_point(field_add:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::geo::GetObjectInfoResponse_ObjectGeofenceInfo >&
GetObjectInfoResponse::geofences() const {
  // @@protoc_insertion_point(field_list:ric.geo.GetObjectInfoResponse.geofences)
  return geofences_;
}

// -------------------------------------------------------------------

// WatchRequest

// string object_id = 1;
inline void WatchRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRequest.object_id)
  return object_id_.GetNoArena();
}
inline void WatchRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.WatchRequest.object_id)
}
#if LANG_CXX11
inline void WatchRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.WatchRequest.object_id)
}
#endif
inline void WatchRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRequest.object_id)
}
inline void WatchRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRequest.object_id)
}
inline ::std::string* WatchRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.WatchRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.WatchRequest.object_id)
}

// .ric.geo.WatchRequest.EventType event_type = 2;
inline void WatchRequest::clear_event_type() {
  event_type_ = 0;
}
inline ::ric::geo::WatchRequest_EventType WatchRequest::event_type() const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRequest.event_type)
  return static_cast< ::ric::geo::WatchRequest_EventType >(event_type_);
}
inline void WatchRequest::set_event_type(::ric::geo::WatchRequest_EventType value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.WatchRequest.event_type)
}

// repeated .ric.geo.Fence fences = 3;
inline int WatchRequest::fences_size() const {
  return fences_.size();
}
inline void WatchRequest::clear_fences() {
  fences_.Clear();
}
inline ::ric::geo::Fence* WatchRequest::mutable_fences(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRequest.fences)
  return fences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >*
WatchRequest::mutable_fences() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchRequest.fences)
  return &fences_;
}
inline const ::ric::geo::Fence& WatchRequest::fences(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRequest.fences)
  return fences_.Get(index);
}
inline ::ric::geo::Fence* WatchRequest::add_fences() {
  // @@protoc_insertion_point(field_add:ric.geo.WatchRequest.fences)
  return fences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >&
WatchRequest::fences() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchRequest.fences)
  return fences_;
}

// repeated string tags = 4;
inline int WatchRequest::tags_size() const {
  return tags_.size();
}
inline void WatchRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& WatchRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.WatchRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* WatchRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.WatchRequest.tags)
  return tags_.Mutable(index);
}
inline void WatchRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.WatchRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.WatchRequest.tags)
}
inline void WatchRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.WatchRequest.tags)
}
inline ::std::string* WatchRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.WatchRequest.tags)
  return tags_.Add();
}
inline void WatchRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.WatchRequest.tags)
}
#if LANG_CXX11
inline void WatchRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.WatchRequest.tags)
}
#endif
inline void WatchRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.WatchRequest.tags)
}
inline void WatchRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.WatchRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
WatchRequest::tags() const {
  // @@protoc_insertion_point(field_list:ric.geo.WatchRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
WatchRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.WatchRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// StopRequest

// string object_id = 1;
inline void StopRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.StopRequest.object_id)
  return object_id_.GetNoArena();
}
inline void StopRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.StopRequest.object_id)
}
#if LANG_CXX11
inline void StopRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.StopRequest.object_id)
}
#endif
inline void StopRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.StopRequest.object_id)
}
inline void StopRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.StopRequest.object_id)
}
inline ::std::string* StopRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.StopRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.StopRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.StopRequest.object_id)
}

// repeated .ric.geo.Fence fences = 2;
inline int StopRequest::fences_size() const {
  return fences_.size();
}
inline void StopRequest::clear_fences() {
  fences_.Clear();
}
inline ::ric::geo::Fence* StopRequest::mutable_fences(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.StopRequest.fences)
  return fences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >*
StopRequest::mutable_fences() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.StopRequest.fences)
  return &fences_;
}
inline const ::ric::geo::Fence& StopRequest::fences(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.StopRequest.fences)
  return fences_.Get(index);
}
inline ::ric::geo::Fence* StopRequest::add_fences() {
  // @@protoc_insertion_point(field_add:ric.geo.StopRequest.fences)
  return fences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::geo::Fence >&
StopRequest::fences() const {
  // @@protoc_insertion_point(field_list:ric.geo.StopRequest.fences)
  return fences_;
}

// repeated string tags = 3;
inline int StopRequest::tags_size() const {
  return tags_.size();
}
inline void StopRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& StopRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.StopRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* StopRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.StopRequest.tags)
  return tags_.Mutable(index);
}
inline void StopRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.StopRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StopRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.StopRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StopRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.StopRequest.tags)
}
inline void StopRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.StopRequest.tags)
}
inline ::std::string* StopRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.StopRequest.tags)
  return tags_.Add();
}
inline void StopRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.StopRequest.tags)
}
#if LANG_CXX11
inline void StopRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.StopRequest.tags)
}
#endif
inline void StopRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.StopRequest.tags)
}
inline void StopRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.StopRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StopRequest::tags() const {
  // @@protoc_insertion_point(field_list:ric.geo.StopRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StopRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.StopRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// ControlRequest

// string object_id = 1;
inline void ControlRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.geo.ControlRequest.object_id)
  return object_id_.GetNoArena();
}
inline void ControlRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.ControlRequest.object_id)
}
#if LANG_CXX11
inline void ControlRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.ControlRequest.object_id)
}
#endif
inline void ControlRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.ControlRequest.object_id)
}
inline void ControlRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.ControlRequest.object_id)
}
inline ::std::string* ControlRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.ControlRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.geo.ControlRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.ControlRequest.object_id)
}

// .ric.geo.Time time = 2;
inline bool ControlRequest::has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline void ControlRequest::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
inline const ::ric::geo::Time& ControlRequest::time() const {
  const ::ric::geo::Time* p = time_;
  // @@protoc_insertion_point(field_get:ric.geo.ControlRequest.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Time*>(
      &::ric::geo::_Time_default_instance_);
}
inline ::ric::geo::Time* ControlRequest::release_time() {
  // @@protoc_insertion_point(field_release:ric.geo.ControlRequest.time)
  
  ::ric::geo::Time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::ric::geo::Time* ControlRequest::mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.ControlRequest.time)
  return time_;
}
inline void ControlRequest::set_allocated_time(::ric::geo::Time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.ControlRequest.time)
}

// .ric.geo.Circle circle = 3;
inline bool ControlRequest::has_circle() const {
  return this != internal_default_instance() && circle_ != nullptr;
}
inline void ControlRequest::clear_circle() {
  if (GetArenaNoVirtual() == nullptr && circle_ != nullptr) {
    delete circle_;
  }
  circle_ = nullptr;
}
inline const ::ric::geo::Circle& ControlRequest::circle() const {
  const ::ric::geo::Circle* p = circle_;
  // @@protoc_insertion_point(field_get:ric.geo.ControlRequest.circle)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Circle*>(
      &::ric::geo::_Circle_default_instance_);
}
inline ::ric::geo::Circle* ControlRequest::release_circle() {
  // @@protoc_insertion_point(field_release:ric.geo.ControlRequest.circle)
  
  ::ric::geo::Circle* temp = circle_;
  circle_ = nullptr;
  return temp;
}
inline ::ric::geo::Circle* ControlRequest::mutable_circle() {
  
  if (circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Circle>(GetArenaNoVirtual());
    circle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.ControlRequest.circle)
  return circle_;
}
inline void ControlRequest::set_allocated_circle(::ric::geo::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete circle_;
  }
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    
  } else {
    
  }
  circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.ControlRequest.circle)
}

// repeated string tags = 4;
inline int ControlRequest::tags_size() const {
  return tags_.size();
}
inline void ControlRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ControlRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.ControlRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* ControlRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.ControlRequest.tags)
  return tags_.Mutable(index);
}
inline void ControlRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.geo.ControlRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ControlRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.geo.ControlRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ControlRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.geo.ControlRequest.tags)
}
inline void ControlRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.geo.ControlRequest.tags)
}
inline ::std::string* ControlRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.geo.ControlRequest.tags)
  return tags_.Add();
}
inline void ControlRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.geo.ControlRequest.tags)
}
#if LANG_CXX11
inline void ControlRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.geo.ControlRequest.tags)
}
#endif
inline void ControlRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.geo.ControlRequest.tags)
}
inline void ControlRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.geo.ControlRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ControlRequest::tags() const {
  // @@protoc_insertion_point(field_list:ric.geo.ControlRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ControlRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.ControlRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// Time

// int64 start = 1;
inline void Time::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Time::start() const {
  // @@protoc_insertion_point(field_get:ric.geo.Time.start)
  return start_;
}
inline void Time::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Time.start)
}

// int64 interval = 2;
inline void Time::clear_interval() {
  interval_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Time::interval() const {
  // @@protoc_insertion_point(field_get:ric.geo.Time.interval)
  return interval_;
}
inline void Time::set_interval(::google::protobuf::int64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Time.interval)
}

// -------------------------------------------------------------------

// Circle

// double lat = 1;
inline void Circle::clear_lat() {
  lat_ = 0;
}
inline double Circle::lat() const {
  // @@protoc_insertion_point(field_get:ric.geo.Circle.lat)
  return lat_;
}
inline void Circle::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Circle.lat)
}

// double lon = 2;
inline void Circle::clear_lon() {
  lon_ = 0;
}
inline double Circle::lon() const {
  // @@protoc_insertion_point(field_get:ric.geo.Circle.lon)
  return lon_;
}
inline void Circle::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Circle.lon)
}

// double radius = 3;
inline void Circle::clear_radius() {
  radius_ = 0;
}
inline double Circle::radius() const {
  // @@protoc_insertion_point(field_get:ric.geo.Circle.radius)
  return radius_;
}
inline void Circle::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Circle.radius)
}

// -------------------------------------------------------------------

// OsmResponse

// bytes data = 1;
inline void OsmResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OsmResponse::data() const {
  // @@protoc_insertion_point(field_get:ric.geo.OsmResponse.data)
  return data_.GetNoArena();
}
inline void OsmResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.OsmResponse.data)
}
#if LANG_CXX11
inline void OsmResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.OsmResponse.data)
}
#endif
inline void OsmResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.OsmResponse.data)
}
inline void OsmResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.OsmResponse.data)
}
inline ::std::string* OsmResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.OsmResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OsmResponse::release_data() {
  // @@protoc_insertion_point(field_release:ric.geo.OsmResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OsmResponse::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.OsmResponse.data)
}

// -------------------------------------------------------------------

// GeocodeRequest

// string query = 1;
inline void GeocodeRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeocodeRequest::query() const {
  // @@protoc_insertion_point(field_get:ric.geo.GeocodeRequest.query)
  return query_.GetNoArena();
}
inline void GeocodeRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GeocodeRequest.query)
}
#if LANG_CXX11
inline void GeocodeRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GeocodeRequest.query)
}
#endif
inline void GeocodeRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GeocodeRequest.query)
}
inline void GeocodeRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GeocodeRequest.query)
}
inline ::std::string* GeocodeRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GeocodeRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeocodeRequest::release_query() {
  // @@protoc_insertion_point(field_release:ric.geo.GeocodeRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeocodeRequest::set_allocated_query(::std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GeocodeRequest.query)
}

// string language = 2;
inline void GeocodeRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeocodeRequest::language() const {
  // @@protoc_insertion_point(field_get:ric.geo.GeocodeRequest.language)
  return language_.GetNoArena();
}
inline void GeocodeRequest::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GeocodeRequest.language)
}
#if LANG_CXX11
inline void GeocodeRequest::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GeocodeRequest.language)
}
#endif
inline void GeocodeRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GeocodeRequest.language)
}
inline void GeocodeRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GeocodeRequest.language)
}
inline ::std::string* GeocodeRequest::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GeocodeRequest.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeocodeRequest::release_language() {
  // @@protoc_insertion_point(field_release:ric.geo.GeocodeRequest.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeocodeRequest::set_allocated_language(::std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GeocodeRequest.language)
}

// -------------------------------------------------------------------

// Point

// double lat = 1;
inline void Point::clear_lat() {
  lat_ = 0;
}
inline double Point::lat() const {
  // @@protoc_insertion_point(field_get:ric.geo.Point.lat)
  return lat_;
}
inline void Point::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Point.lat)
}

// double lon = 2;
inline void Point::clear_lon() {
  lon_ = 0;
}
inline double Point::lon() const {
  // @@protoc_insertion_point(field_get:ric.geo.Point.lon)
  return lon_;
}
inline void Point::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.Point.lon)
}

// -------------------------------------------------------------------

// GeocodeReverseRequest

// .ric.geo.Point point = 1;
inline bool GeocodeReverseRequest::has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline void GeocodeReverseRequest::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::ric::geo::Point& GeocodeReverseRequest::point() const {
  const ::ric::geo::Point* p = point_;
  // @@protoc_insertion_point(field_get:ric.geo.GeocodeReverseRequest.point)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Point*>(
      &::ric::geo::_Point_default_instance_);
}
inline ::ric::geo::Point* GeocodeReverseRequest::release_point() {
  // @@protoc_insertion_point(field_release:ric.geo.GeocodeReverseRequest.point)
  
  ::ric::geo::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::ric::geo::Point* GeocodeReverseRequest::mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Point>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.GeocodeReverseRequest.point)
  return point_;
}
inline void GeocodeReverseRequest::set_allocated_point(::ric::geo::Point* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GeocodeReverseRequest.point)
}

// string language = 2;
inline void GeocodeReverseRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeocodeReverseRequest::language() const {
  // @@protoc_insertion_point(field_get:ric.geo.GeocodeReverseRequest.language)
  return language_.GetNoArena();
}
inline void GeocodeReverseRequest::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GeocodeReverseRequest.language)
}
#if LANG_CXX11
inline void GeocodeReverseRequest::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GeocodeReverseRequest.language)
}
#endif
inline void GeocodeReverseRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GeocodeReverseRequest.language)
}
inline void GeocodeReverseRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GeocodeReverseRequest.language)
}
inline ::std::string* GeocodeReverseRequest::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GeocodeReverseRequest.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeocodeReverseRequest::release_language() {
  // @@protoc_insertion_point(field_release:ric.geo.GeocodeReverseRequest.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeocodeReverseRequest::set_allocated_language(::std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GeocodeReverseRequest.language)
}

// -------------------------------------------------------------------

// GetRouteRequest

// repeated .ric.geo.Point coordinates = 1;
inline int GetRouteRequest::coordinates_size() const {
  return coordinates_.size();
}
inline void GetRouteRequest::clear_coordinates() {
  coordinates_.Clear();
}
inline ::ric::geo::Point* GetRouteRequest::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:ric.geo.GetRouteRequest.coordinates)
  return coordinates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::geo::Point >*
GetRouteRequest::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:ric.geo.GetRouteRequest.coordinates)
  return &coordinates_;
}
inline const ::ric::geo::Point& GetRouteRequest::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:ric.geo.GetRouteRequest.coordinates)
  return coordinates_.Get(index);
}
inline ::ric::geo::Point* GetRouteRequest::add_coordinates() {
  // @@protoc_insertion_point(field_add:ric.geo.GetRouteRequest.coordinates)
  return coordinates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::geo::Point >&
GetRouteRequest::coordinates() const {
  // @@protoc_insertion_point(field_list:ric.geo.GetRouteRequest.coordinates)
  return coordinates_;
}

// bytes options = 2;
inline void GetRouteRequest::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRouteRequest::options() const {
  // @@protoc_insertion_point(field_get:ric.geo.GetRouteRequest.options)
  return options_.GetNoArena();
}
inline void GetRouteRequest::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.geo.GetRouteRequest.options)
}
#if LANG_CXX11
inline void GetRouteRequest::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.geo.GetRouteRequest.options)
}
#endif
inline void GetRouteRequest::set_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.geo.GetRouteRequest.options)
}
inline void GetRouteRequest::set_options(const void* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.geo.GetRouteRequest.options)
}
inline ::std::string* GetRouteRequest::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:ric.geo.GetRouteRequest.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRouteRequest::release_options() {
  // @@protoc_insertion_point(field_release:ric.geo.GetRouteRequest.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRouteRequest::set_allocated_options(::std::string* options) {
  if (options != nullptr) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:ric.geo.GetRouteRequest.options)
}

// -------------------------------------------------------------------

// IndoorCircle

// double x = 1;
inline void IndoorCircle::clear_x() {
  x_ = 0;
}
inline double IndoorCircle::x() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.x)
  return x_;
}
inline void IndoorCircle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.x)
}

// double y = 2;
inline void IndoorCircle::clear_y() {
  y_ = 0;
}
inline double IndoorCircle::y() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.y)
  return y_;
}
inline void IndoorCircle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.y)
}

// double z = 3;
inline void IndoorCircle::clear_z() {
  z_ = 0;
}
inline double IndoorCircle::z() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.z)
  return z_;
}
inline void IndoorCircle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.z)
}

// double radius = 4;
inline void IndoorCircle::clear_radius() {
  radius_ = 0;
}
inline double IndoorCircle::radius() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorCircle.radius)
  return radius_;
}
inline void IndoorCircle::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorCircle.radius)
}

// -------------------------------------------------------------------

// Zone

// .ric.geo.Circle circle = 1;
inline bool Zone::has_circle() const {
  return this != internal_default_instance() && circle_ != nullptr;
}
inline void Zone::clear_circle() {
  if (GetArenaNoVirtual() == nullptr && circle_ != nullptr) {
    delete circle_;
  }
  circle_ = nullptr;
}
inline const ::ric::geo::Circle& Zone::circle() const {
  const ::ric::geo::Circle* p = circle_;
  // @@protoc_insertion_point(field_get:ric.geo.Zone.circle)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Circle*>(
      &::ric::geo::_Circle_default_instance_);
}
inline ::ric::geo::Circle* Zone::release_circle() {
  // @@protoc_insertion_point(field_release:ric.geo.Zone.circle)
  
  ::ric::geo::Circle* temp = circle_;
  circle_ = nullptr;
  return temp;
}
inline ::ric::geo::Circle* Zone::mutable_circle() {
  
  if (circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Circle>(GetArenaNoVirtual());
    circle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Zone.circle)
  return circle_;
}
inline void Zone::set_allocated_circle(::ric::geo::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete circle_;
  }
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    
  } else {
    
  }
  circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Zone.circle)
}

// .ric.geo.IndoorCircle indoor_circle = 2;
inline bool Zone::has_indoor_circle() const {
  return this != internal_default_instance() && indoor_circle_ != nullptr;
}
inline void Zone::clear_indoor_circle() {
  if (GetArenaNoVirtual() == nullptr && indoor_circle_ != nullptr) {
    delete indoor_circle_;
  }
  indoor_circle_ = nullptr;
}
inline const ::ric::geo::IndoorCircle& Zone::indoor_circle() const {
  const ::ric::geo::IndoorCircle* p = indoor_circle_;
  // @@protoc_insertion_point(field_get:ric.geo.Zone.indoor_circle)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::IndoorCircle*>(
      &::ric::geo::_IndoorCircle_default_instance_);
}
inline ::ric::geo::IndoorCircle* Zone::release_indoor_circle() {
  // @@protoc_insertion_point(field_release:ric.geo.Zone.indoor_circle)
  
  ::ric::geo::IndoorCircle* temp = indoor_circle_;
  indoor_circle_ = nullptr;
  return temp;
}
inline ::ric::geo::IndoorCircle* Zone::mutable_indoor_circle() {
  
  if (indoor_circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::IndoorCircle>(GetArenaNoVirtual());
    indoor_circle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Zone.indoor_circle)
  return indoor_circle_;
}
inline void Zone::set_allocated_indoor_circle(::ric::geo::IndoorCircle* indoor_circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indoor_circle_;
  }
  if (indoor_circle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indoor_circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indoor_circle, submessage_arena);
    }
    
  } else {
    
  }
  indoor_circle_ = indoor_circle;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Zone.indoor_circle)
}

// -------------------------------------------------------------------

// IndoorPoint

// double x = 1;
inline void IndoorPoint::clear_x() {
  x_ = 0;
}
inline double IndoorPoint::x() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorPoint.x)
  return x_;
}
inline void IndoorPoint::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorPoint.x)
}

// double y = 2;
inline void IndoorPoint::clear_y() {
  y_ = 0;
}
inline double IndoorPoint::y() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorPoint.y)
  return y_;
}
inline void IndoorPoint::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorPoint.y)
}

// double z = 3;
inline void IndoorPoint::clear_z() {
  z_ = 0;
}
inline double IndoorPoint::z() const {
  // @@protoc_insertion_point(field_get:ric.geo.IndoorPoint.z)
  return z_;
}
inline void IndoorPoint::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.IndoorPoint.z)
}

// -------------------------------------------------------------------

// Position

// .ric.geo.Point location = 1;
inline bool Position::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline void Position::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::ric::geo::Point& Position::location() const {
  const ::ric::geo::Point* p = location_;
  // @@protoc_insertion_point(field_get:ric.geo.Position.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Point*>(
      &::ric::geo::_Point_default_instance_);
}
inline ::ric::geo::Point* Position::release_location() {
  // @@protoc_insertion_point(field_release:ric.geo.Position.location)
  
  ::ric::geo::Point* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::ric::geo::Point* Position::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Point>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Position.location)
  return location_;
}
inline void Position::set_allocated_location(::ric::geo::Point* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Position.location)
}

// .ric.geo.IndoorPoint indoor_location = 2;
inline bool Position::has_indoor_location() const {
  return this != internal_default_instance() && indoor_location_ != nullptr;
}
inline void Position::clear_indoor_location() {
  if (GetArenaNoVirtual() == nullptr && indoor_location_ != nullptr) {
    delete indoor_location_;
  }
  indoor_location_ = nullptr;
}
inline const ::ric::geo::IndoorPoint& Position::indoor_location() const {
  const ::ric::geo::IndoorPoint* p = indoor_location_;
  // @@protoc_insertion_point(field_get:ric.geo.Position.indoor_location)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::IndoorPoint*>(
      &::ric::geo::_IndoorPoint_default_instance_);
}
inline ::ric::geo::IndoorPoint* Position::release_indoor_location() {
  // @@protoc_insertion_point(field_release:ric.geo.Position.indoor_location)
  
  ::ric::geo::IndoorPoint* temp = indoor_location_;
  indoor_location_ = nullptr;
  return temp;
}
inline ::ric::geo::IndoorPoint* Position::mutable_indoor_location() {
  
  if (indoor_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::IndoorPoint>(GetArenaNoVirtual());
    indoor_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.Position.indoor_location)
  return indoor_location_;
}
inline void Position::set_allocated_indoor_location(::ric::geo::IndoorPoint* indoor_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indoor_location_;
  }
  if (indoor_location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indoor_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indoor_location, submessage_arena);
    }
    
  } else {
    
  }
  indoor_location_ = indoor_location;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.Position.indoor_location)
}

// -------------------------------------------------------------------

// CheckInRequest

// .ric.geo.Position position = 1;
inline bool CheckInRequest::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void CheckInRequest::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ric::geo::Position& CheckInRequest::position() const {
  const ::ric::geo::Position* p = position_;
  // @@protoc_insertion_point(field_get:ric.geo.CheckInRequest.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Position*>(
      &::ric::geo::_Position_default_instance_);
}
inline ::ric::geo::Position* CheckInRequest::release_position() {
  // @@protoc_insertion_point(field_release:ric.geo.CheckInRequest.position)
  
  ::ric::geo::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ric::geo::Position* CheckInRequest::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.CheckInRequest.position)
  return position_;
}
inline void CheckInRequest::set_allocated_position(::ric::geo::Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.CheckInRequest.position)
}

// .ric.geo.Zone zone = 2;
inline bool CheckInRequest::has_zone() const {
  return this != internal_default_instance() && zone_ != nullptr;
}
inline void CheckInRequest::clear_zone() {
  if (GetArenaNoVirtual() == nullptr && zone_ != nullptr) {
    delete zone_;
  }
  zone_ = nullptr;
}
inline const ::ric::geo::Zone& CheckInRequest::zone() const {
  const ::ric::geo::Zone* p = zone_;
  // @@protoc_insertion_point(field_get:ric.geo.CheckInRequest.zone)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::geo::Zone*>(
      &::ric::geo::_Zone_default_instance_);
}
inline ::ric::geo::Zone* CheckInRequest::release_zone() {
  // @@protoc_insertion_point(field_release:ric.geo.CheckInRequest.zone)
  
  ::ric::geo::Zone* temp = zone_;
  zone_ = nullptr;
  return temp;
}
inline ::ric::geo::Zone* CheckInRequest::mutable_zone() {
  
  if (zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::geo::Zone>(GetArenaNoVirtual());
    zone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.geo.CheckInRequest.zone)
  return zone_;
}
inline void CheckInRequest::set_allocated_zone(::ric::geo::Zone* zone) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zone_;
  }
  if (zone) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zone = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone, submessage_arena);
    }
    
  } else {
    
  }
  zone_ = zone;
  // @@protoc_insertion_point(field_set_allocated:ric.geo.CheckInRequest.zone)
}

// -------------------------------------------------------------------

// CheckInResponse

// bool in = 1;
inline void CheckInResponse::clear_in() {
  in_ = false;
}
inline bool CheckInResponse::in() const {
  // @@protoc_insertion_point(field_get:ric.geo.CheckInResponse.in)
  return in_;
}
inline void CheckInResponse::set_in(bool value) {
  
  in_ = value;
  // @@protoc_insertion_point(field_set:ric.geo.CheckInResponse.in)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geo
}  // namespace ric

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ric::geo::WatchGeofenceRequest_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::geo::WatchGeofenceRequest_EventType>() {
  return ::ric::geo::WatchGeofenceRequest_EventType_descriptor();
}
template <> struct is_proto_enum< ::ric::geo::WatchRoomRequest_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::geo::WatchRoomRequest_EventType>() {
  return ::ric::geo::WatchRoomRequest_EventType_descriptor();
}
template <> struct is_proto_enum< ::ric::geo::WatchRouteRequest_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::geo::WatchRouteRequest_EventType>() {
  return ::ric::geo::WatchRouteRequest_EventType_descriptor();
}
template <> struct is_proto_enum< ::ric::geo::WatchRequest_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::geo::WatchRequest_EventType>() {
  return ::ric::geo::WatchRequest_EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dgeo_2fricgeo_2eproto
