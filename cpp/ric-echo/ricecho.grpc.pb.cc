// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-echo/ricecho.proto

#include "ric-echo/ricecho.pb.h"
#include "ric-echo/ricecho.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ric {
namespace echo {

static const char* Echo_method_names[] = {
  "/ric.echo.Echo/SayHello",
};

std::unique_ptr< Echo::Stub> Echo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Echo::Stub> stub(new Echo::Stub(channel));
  return stub;
}

Echo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Echo_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Echo::Stub::SayHello(::grpc::ClientContext* context, const ::ric::echo::EchoRequest& request, ::ric::echo::EchoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Echo::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::ric::echo::EchoRequest* request, ::ric::echo::EchoReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Echo::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::echo::EchoReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::echo::EchoReply>* Echo::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::ric::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::echo::EchoReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::echo::EchoReply>* Echo::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::ric::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::echo::EchoReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

Echo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Echo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Echo::Service, ::ric::echo::EchoRequest, ::ric::echo::EchoReply>(
          std::mem_fn(&Echo::Service::SayHello), this)));
}

Echo::Service::~Service() {
}

::grpc::Status Echo::Service::SayHello(::grpc::ServerContext* context, const ::ric::echo::EchoRequest* request, ::ric::echo::EchoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ric
}  // namespace echo

