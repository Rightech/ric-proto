// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-tasks/rictasks.proto

#include "ric-tasks/rictasks.pb.h"
#include "ric-tasks/rictasks.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ric {
namespace tasks {

static const char* TaskService_method_names[] = {
  "/ric.tasks.TaskService/Create",
  "/ric.tasks.TaskService/Get",
  "/ric.tasks.TaskService/Update",
  "/ric.tasks.TaskService/Delete",
  "/ric.tasks.TaskService/UpdateOrder",
  "/ric.tasks.TaskService/ChangeStatus",
};

std::unique_ptr< TaskService::Stub> TaskService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TaskService::Stub> stub(new TaskService::Stub(channel));
  return stub;
}

TaskService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(TaskService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(TaskService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(TaskService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(TaskService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrder_(TaskService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeStatus_(TaskService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TaskService::Stub::Create(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::ric::tasks::CreateTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void TaskService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void TaskService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>* TaskService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::CreateTaskResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>* TaskService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::CreateTaskResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status TaskService::Stub::Get(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::ric::tasks::GetTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void TaskService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void TaskService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>* TaskService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::GetTaskResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>* TaskService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::GetTaskResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status TaskService::Stub::Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::ric::tasks::UpdateTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void TaskService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void TaskService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>* TaskService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::UpdateTaskResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>* TaskService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::UpdateTaskResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status TaskService::Stub::Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::ric::tasks::DeleteTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void TaskService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void TaskService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteTaskResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>* TaskService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::DeleteTaskResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>* TaskService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::DeleteTaskResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status TaskService::Stub::UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::ric::tasks::UpdateTaskOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateOrder_, context, request, response);
}

void TaskService::Stub::experimental_async::UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrder_, context, request, response, std::move(f));
}

void TaskService::Stub::experimental_async::UpdateOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateTaskOrderResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateOrder_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>* TaskService::Stub::AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::UpdateTaskOrderResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>* TaskService::Stub::PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::UpdateTaskOrderResponse>::Create(channel_.get(), cq, rpcmethod_UpdateOrder_, context, request, false);
}

::grpc::Status TaskService::Stub::ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::ric::tasks::ChangeTaskStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeStatus_, context, request, response);
}

void TaskService::Stub::experimental_async::ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeStatus_, context, request, response, std::move(f));
}

void TaskService::Stub::experimental_async::ChangeStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::ChangeTaskStatusResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeStatus_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>* TaskService::Stub::AsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::ChangeTaskStatusResponse>::Create(channel_.get(), cq, rpcmethod_ChangeStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>* TaskService::Stub::PrepareAsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::ChangeTaskStatusResponse>::Create(channel_.get(), cq, rpcmethod_ChangeStatus_, context, request, false);
}

TaskService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskService::Service, ::ric::tasks::CreateTaskRequest, ::ric::tasks::CreateTaskResponse>(
          std::mem_fn(&TaskService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskService::Service, ::ric::tasks::GetTaskRequest, ::ric::tasks::GetTaskResponse>(
          std::mem_fn(&TaskService::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskService::Service, ::ric::tasks::UpdateTaskRequest, ::ric::tasks::UpdateTaskResponse>(
          std::mem_fn(&TaskService::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskService::Service, ::ric::tasks::DeleteTaskRequest, ::ric::tasks::DeleteTaskResponse>(
          std::mem_fn(&TaskService::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskService::Service, ::ric::tasks::UpdateTaskOrderRequest, ::ric::tasks::UpdateTaskOrderResponse>(
          std::mem_fn(&TaskService::Service::UpdateOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TaskService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TaskService::Service, ::ric::tasks::ChangeTaskStatusRequest, ::ric::tasks::ChangeTaskStatusResponse>(
          std::mem_fn(&TaskService::Service::ChangeStatus), this)));
}

TaskService::Service::~Service() {
}

::grpc::Status TaskService::Service::Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskService::Service::Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskService::Service::Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskService::Service::Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskService::Service::UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskService::Service::ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* KindService_method_names[] = {
  "/ric.tasks.KindService/Create",
  "/ric.tasks.KindService/Get",
  "/ric.tasks.KindService/Update",
  "/ric.tasks.KindService/Delete",
};

std::unique_ptr< KindService::Stub> KindService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KindService::Stub> stub(new KindService::Stub(channel));
  return stub;
}

KindService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(KindService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(KindService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(KindService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(KindService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KindService::Stub::Create(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::ric::tasks::CreateKindResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void KindService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void KindService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>* KindService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::CreateKindResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>* KindService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::CreateKindResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status KindService::Stub::Get(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::ric::tasks::GetKindResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void KindService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void KindService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>* KindService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::GetKindResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>* KindService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::GetKindResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status KindService::Stub::Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::ric::tasks::UpdateKindResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void KindService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void KindService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>* KindService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::UpdateKindResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>* KindService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::UpdateKindResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status KindService::Stub::Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::ric::tasks::DeleteKindResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void KindService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void KindService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteKindResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>* KindService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::DeleteKindResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>* KindService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::tasks::DeleteKindResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

KindService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KindService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KindService::Service, ::ric::tasks::CreateKindRequest, ::ric::tasks::CreateKindResponse>(
          std::mem_fn(&KindService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KindService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KindService::Service, ::ric::tasks::GetKindRequest, ::ric::tasks::GetKindResponse>(
          std::mem_fn(&KindService::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KindService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KindService::Service, ::ric::tasks::UpdateKindRequest, ::ric::tasks::UpdateKindResponse>(
          std::mem_fn(&KindService::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KindService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KindService::Service, ::ric::tasks::DeleteKindRequest, ::ric::tasks::DeleteKindResponse>(
          std::mem_fn(&KindService::Service::Delete), this)));
}

KindService::Service::~Service() {
}

::grpc::Status KindService::Service::Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KindService::Service::Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KindService::Service::Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KindService::Service::Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ric
}  // namespace tasks

