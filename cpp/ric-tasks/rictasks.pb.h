// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-tasks/rictasks.proto

#ifndef PROTOBUF_INCLUDED_ric_2dtasks_2frictasks_2eproto
#define PROTOBUF_INCLUDED_ric_2dtasks_2frictasks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dtasks_2frictasks_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dtasks_2frictasks_2eproto();
namespace ric {
namespace tasks {
class ChangeTaskStatusRequest;
class ChangeTaskStatusRequestDefaultTypeInternal;
extern ChangeTaskStatusRequestDefaultTypeInternal _ChangeTaskStatusRequest_default_instance_;
class ChangeTaskStatusResponse;
class ChangeTaskStatusResponseDefaultTypeInternal;
extern ChangeTaskStatusResponseDefaultTypeInternal _ChangeTaskStatusResponse_default_instance_;
class CreateKindRequest;
class CreateKindRequestDefaultTypeInternal;
extern CreateKindRequestDefaultTypeInternal _CreateKindRequest_default_instance_;
class CreateKindResponse;
class CreateKindResponseDefaultTypeInternal;
extern CreateKindResponseDefaultTypeInternal _CreateKindResponse_default_instance_;
class CreateTaskRequest;
class CreateTaskRequestDefaultTypeInternal;
extern CreateTaskRequestDefaultTypeInternal _CreateTaskRequest_default_instance_;
class CreateTaskResponse;
class CreateTaskResponseDefaultTypeInternal;
extern CreateTaskResponseDefaultTypeInternal _CreateTaskResponse_default_instance_;
class Deadline;
class DeadlineDefaultTypeInternal;
extern DeadlineDefaultTypeInternal _Deadline_default_instance_;
class DeleteKindRequest;
class DeleteKindRequestDefaultTypeInternal;
extern DeleteKindRequestDefaultTypeInternal _DeleteKindRequest_default_instance_;
class DeleteKindResponse;
class DeleteKindResponseDefaultTypeInternal;
extern DeleteKindResponseDefaultTypeInternal _DeleteKindResponse_default_instance_;
class DeleteTaskRequest;
class DeleteTaskRequestDefaultTypeInternal;
extern DeleteTaskRequestDefaultTypeInternal _DeleteTaskRequest_default_instance_;
class DeleteTaskResponse;
class DeleteTaskResponseDefaultTypeInternal;
extern DeleteTaskResponseDefaultTypeInternal _DeleteTaskResponse_default_instance_;
class GetKindRequest;
class GetKindRequestDefaultTypeInternal;
extern GetKindRequestDefaultTypeInternal _GetKindRequest_default_instance_;
class GetKindResponse;
class GetKindResponseDefaultTypeInternal;
extern GetKindResponseDefaultTypeInternal _GetKindResponse_default_instance_;
class GetTaskRequest;
class GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class GetTaskResponse;
class GetTaskResponseDefaultTypeInternal;
extern GetTaskResponseDefaultTypeInternal _GetTaskResponse_default_instance_;
class IndoorLocation;
class IndoorLocationDefaultTypeInternal;
extern IndoorLocationDefaultTypeInternal _IndoorLocation_default_instance_;
class Kind;
class KindDefaultTypeInternal;
extern KindDefaultTypeInternal _Kind_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class ObjectId;
class ObjectIdDefaultTypeInternal;
extern ObjectIdDefaultTypeInternal _ObjectId_default_instance_;
class Report;
class ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
class ReportFormat;
class ReportFormatDefaultTypeInternal;
extern ReportFormatDefaultTypeInternal _ReportFormat_default_instance_;
class Review;
class ReviewDefaultTypeInternal;
extern ReviewDefaultTypeInternal _Review_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskEdit;
class TaskEditDefaultTypeInternal;
extern TaskEditDefaultTypeInternal _TaskEdit_default_instance_;
class UpdateKindRequest;
class UpdateKindRequestDefaultTypeInternal;
extern UpdateKindRequestDefaultTypeInternal _UpdateKindRequest_default_instance_;
class UpdateKindResponse;
class UpdateKindResponseDefaultTypeInternal;
extern UpdateKindResponseDefaultTypeInternal _UpdateKindResponse_default_instance_;
class UpdateTaskOrderRequest;
class UpdateTaskOrderRequestDefaultTypeInternal;
extern UpdateTaskOrderRequestDefaultTypeInternal _UpdateTaskOrderRequest_default_instance_;
class UpdateTaskOrderRequest_PositionsEntry_DoNotUse;
class UpdateTaskOrderRequest_PositionsEntry_DoNotUseDefaultTypeInternal;
extern UpdateTaskOrderRequest_PositionsEntry_DoNotUseDefaultTypeInternal _UpdateTaskOrderRequest_PositionsEntry_DoNotUse_default_instance_;
class UpdateTaskOrderResponse;
class UpdateTaskOrderResponseDefaultTypeInternal;
extern UpdateTaskOrderResponseDefaultTypeInternal _UpdateTaskOrderResponse_default_instance_;
class UpdateTaskRequest;
class UpdateTaskRequestDefaultTypeInternal;
extern UpdateTaskRequestDefaultTypeInternal _UpdateTaskRequest_default_instance_;
class UpdateTaskResponse;
class UpdateTaskResponseDefaultTypeInternal;
extern UpdateTaskResponseDefaultTypeInternal _UpdateTaskResponse_default_instance_;
class UserContext;
class UserContextDefaultTypeInternal;
extern UserContextDefaultTypeInternal _UserContext_default_instance_;
}  // namespace tasks
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::tasks::ChangeTaskStatusRequest* Arena::CreateMaybeMessage<::ric::tasks::ChangeTaskStatusRequest>(Arena*);
template<> ::ric::tasks::ChangeTaskStatusResponse* Arena::CreateMaybeMessage<::ric::tasks::ChangeTaskStatusResponse>(Arena*);
template<> ::ric::tasks::CreateKindRequest* Arena::CreateMaybeMessage<::ric::tasks::CreateKindRequest>(Arena*);
template<> ::ric::tasks::CreateKindResponse* Arena::CreateMaybeMessage<::ric::tasks::CreateKindResponse>(Arena*);
template<> ::ric::tasks::CreateTaskRequest* Arena::CreateMaybeMessage<::ric::tasks::CreateTaskRequest>(Arena*);
template<> ::ric::tasks::CreateTaskResponse* Arena::CreateMaybeMessage<::ric::tasks::CreateTaskResponse>(Arena*);
template<> ::ric::tasks::Deadline* Arena::CreateMaybeMessage<::ric::tasks::Deadline>(Arena*);
template<> ::ric::tasks::DeleteKindRequest* Arena::CreateMaybeMessage<::ric::tasks::DeleteKindRequest>(Arena*);
template<> ::ric::tasks::DeleteKindResponse* Arena::CreateMaybeMessage<::ric::tasks::DeleteKindResponse>(Arena*);
template<> ::ric::tasks::DeleteTaskRequest* Arena::CreateMaybeMessage<::ric::tasks::DeleteTaskRequest>(Arena*);
template<> ::ric::tasks::DeleteTaskResponse* Arena::CreateMaybeMessage<::ric::tasks::DeleteTaskResponse>(Arena*);
template<> ::ric::tasks::GetKindRequest* Arena::CreateMaybeMessage<::ric::tasks::GetKindRequest>(Arena*);
template<> ::ric::tasks::GetKindResponse* Arena::CreateMaybeMessage<::ric::tasks::GetKindResponse>(Arena*);
template<> ::ric::tasks::GetTaskRequest* Arena::CreateMaybeMessage<::ric::tasks::GetTaskRequest>(Arena*);
template<> ::ric::tasks::GetTaskResponse* Arena::CreateMaybeMessage<::ric::tasks::GetTaskResponse>(Arena*);
template<> ::ric::tasks::IndoorLocation* Arena::CreateMaybeMessage<::ric::tasks::IndoorLocation>(Arena*);
template<> ::ric::tasks::Kind* Arena::CreateMaybeMessage<::ric::tasks::Kind>(Arena*);
template<> ::ric::tasks::Location* Arena::CreateMaybeMessage<::ric::tasks::Location>(Arena*);
template<> ::ric::tasks::ObjectId* Arena::CreateMaybeMessage<::ric::tasks::ObjectId>(Arena*);
template<> ::ric::tasks::Report* Arena::CreateMaybeMessage<::ric::tasks::Report>(Arena*);
template<> ::ric::tasks::ReportFormat* Arena::CreateMaybeMessage<::ric::tasks::ReportFormat>(Arena*);
template<> ::ric::tasks::Review* Arena::CreateMaybeMessage<::ric::tasks::Review>(Arena*);
template<> ::ric::tasks::Task* Arena::CreateMaybeMessage<::ric::tasks::Task>(Arena*);
template<> ::ric::tasks::TaskEdit* Arena::CreateMaybeMessage<::ric::tasks::TaskEdit>(Arena*);
template<> ::ric::tasks::UpdateKindRequest* Arena::CreateMaybeMessage<::ric::tasks::UpdateKindRequest>(Arena*);
template<> ::ric::tasks::UpdateKindResponse* Arena::CreateMaybeMessage<::ric::tasks::UpdateKindResponse>(Arena*);
template<> ::ric::tasks::UpdateTaskOrderRequest* Arena::CreateMaybeMessage<::ric::tasks::UpdateTaskOrderRequest>(Arena*);
template<> ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse>(Arena*);
template<> ::ric::tasks::UpdateTaskOrderResponse* Arena::CreateMaybeMessage<::ric::tasks::UpdateTaskOrderResponse>(Arena*);
template<> ::ric::tasks::UpdateTaskRequest* Arena::CreateMaybeMessage<::ric::tasks::UpdateTaskRequest>(Arena*);
template<> ::ric::tasks::UpdateTaskResponse* Arena::CreateMaybeMessage<::ric::tasks::UpdateTaskResponse>(Arena*);
template<> ::ric::tasks::UserContext* Arena::CreateMaybeMessage<::ric::tasks::UserContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace tasks {

enum Task_Constrain {
  Task_Constrain_INVALID = 0,
  Task_Constrain_UNORDERED = 1,
  Task_Constrain_ORDERED = 2,
  Task_Constrain_Task_Constrain_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Task_Constrain_Task_Constrain_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Task_Constrain_IsValid(int value);
const Task_Constrain Task_Constrain_Constrain_MIN = Task_Constrain_INVALID;
const Task_Constrain Task_Constrain_Constrain_MAX = Task_Constrain_ORDERED;
const int Task_Constrain_Constrain_ARRAYSIZE = Task_Constrain_Constrain_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_Constrain_descriptor();
inline const ::std::string& Task_Constrain_Name(Task_Constrain value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_Constrain_descriptor(), value);
}
inline bool Task_Constrain_Parse(
    const ::std::string& name, Task_Constrain* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_Constrain>(
    Task_Constrain_descriptor(), name, value);
}
enum Task_Status {
  Task_Status_NOT_SET = 0,
  Task_Status_CREATED = 1,
  Task_Status_ASSIGNED = 2,
  Task_Status_IN_WORK = 3,
  Task_Status_CLOSED = 4,
  Task_Status_Task_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Task_Status_Task_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Task_Status_IsValid(int value);
const Task_Status Task_Status_Status_MIN = Task_Status_NOT_SET;
const Task_Status Task_Status_Status_MAX = Task_Status_CLOSED;
const int Task_Status_Status_ARRAYSIZE = Task_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_Status_descriptor();
inline const ::std::string& Task_Status_Name(Task_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_Status_descriptor(), value);
}
inline bool Task_Status_Parse(
    const ::std::string& name, Task_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_Status>(
    Task_Status_descriptor(), name, value);
}
enum ReportFormat_FieldType {
  ReportFormat_FieldType_INVALID = 0,
  ReportFormat_FieldType_BOOLEAN = 1,
  ReportFormat_FieldType_TEXT = 2,
  ReportFormat_FieldType_NUMBER = 3,
  ReportFormat_FieldType_FILE = 4,
  ReportFormat_FieldType_ReportFormat_FieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ReportFormat_FieldType_ReportFormat_FieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ReportFormat_FieldType_IsValid(int value);
const ReportFormat_FieldType ReportFormat_FieldType_FieldType_MIN = ReportFormat_FieldType_INVALID;
const ReportFormat_FieldType ReportFormat_FieldType_FieldType_MAX = ReportFormat_FieldType_FILE;
const int ReportFormat_FieldType_FieldType_ARRAYSIZE = ReportFormat_FieldType_FieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportFormat_FieldType_descriptor();
inline const ::std::string& ReportFormat_FieldType_Name(ReportFormat_FieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportFormat_FieldType_descriptor(), value);
}
inline bool ReportFormat_FieldType_Parse(
    const ::std::string& name, ReportFormat_FieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportFormat_FieldType>(
    ReportFormat_FieldType_descriptor(), name, value);
}
// ===================================================================

class ObjectId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.ObjectId) */ {
 public:
  ObjectId();
  virtual ~ObjectId();

  ObjectId(const ObjectId& from);

  inline ObjectId& operator=(const ObjectId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectId(ObjectId&& from) noexcept
    : ObjectId() {
    *this = ::std::move(from);
  }

  inline ObjectId& operator=(ObjectId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObjectId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectId* internal_default_instance() {
    return reinterpret_cast<const ObjectId*>(
               &_ObjectId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObjectId* other);
  friend void swap(ObjectId& a, ObjectId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectId* New() const final {
    return CreateMaybeMessage<ObjectId>(nullptr);
  }

  ObjectId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectId& from);
  void MergeFrom(const ObjectId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ric.tasks.ObjectId)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UserContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UserContext) */ {
 public:
  UserContext();
  virtual ~UserContext();

  UserContext(const UserContext& from);

  inline UserContext& operator=(const UserContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserContext(UserContext&& from) noexcept
    : UserContext() {
    *this = ::std::move(from);
  }

  inline UserContext& operator=(UserContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserContext* internal_default_instance() {
    return reinterpret_cast<const UserContext*>(
               &_UserContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserContext* other);
  friend void swap(UserContext& a, UserContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserContext* New() const final {
    return CreateMaybeMessage<UserContext>(nullptr);
  }

  UserContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserContext& from);
  void MergeFrom(const UserContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string span_id = 3;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 3;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // .ric.tasks.ObjectId group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::ric::tasks::ObjectId& group_id() const;
  ::ric::tasks::ObjectId* release_group_id();
  ::ric::tasks::ObjectId* mutable_group_id();
  void set_allocated_group_id(::ric::tasks::ObjectId* group_id);

  // .ric.tasks.ObjectId user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::ric::tasks::ObjectId& user_id() const;
  ::ric::tasks::ObjectId* release_user_id();
  ::ric::tasks::ObjectId* mutable_user_id();
  void set_allocated_user_id(::ric::tasks::ObjectId* user_id);

  // @@protoc_insertion_point(class_scope:ric.tasks.UserContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  ::ric::tasks::ObjectId* group_id_;
  ::ric::tasks::ObjectId* user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .ric.tasks.IndoorLocation indoor = 5;
  bool has_indoor() const;
  void clear_indoor();
  static const int kIndoorFieldNumber = 5;
  const ::ric::tasks::IndoorLocation& indoor() const;
  ::ric::tasks::IndoorLocation* release_indoor();
  ::ric::tasks::IndoorLocation* mutable_indoor();
  void set_allocated_indoor(::ric::tasks::IndoorLocation* indoor);

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lng = 2;
  void clear_lng();
  static const int kLngFieldNumber = 2;
  double lng() const;
  void set_lng(double value);

  // double radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:ric.tasks.Location)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::ric::tasks::IndoorLocation* indoor_;
  double lat_;
  double lng_;
  double radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class IndoorLocation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.IndoorLocation) */ {
 public:
  IndoorLocation();
  virtual ~IndoorLocation();

  IndoorLocation(const IndoorLocation& from);

  inline IndoorLocation& operator=(const IndoorLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndoorLocation(IndoorLocation&& from) noexcept
    : IndoorLocation() {
    *this = ::std::move(from);
  }

  inline IndoorLocation& operator=(IndoorLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IndoorLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndoorLocation* internal_default_instance() {
    return reinterpret_cast<const IndoorLocation*>(
               &_IndoorLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IndoorLocation* other);
  friend void swap(IndoorLocation& a, IndoorLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndoorLocation* New() const final {
    return CreateMaybeMessage<IndoorLocation>(nullptr);
  }

  IndoorLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndoorLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndoorLocation& from);
  void MergeFrom(const IndoorLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndoorLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double radius = 4;
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:ric.tasks.IndoorLocation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Task_Constrain Constrain;
  static const Constrain INVALID =
    Task_Constrain_INVALID;
  static const Constrain UNORDERED =
    Task_Constrain_UNORDERED;
  static const Constrain ORDERED =
    Task_Constrain_ORDERED;
  static inline bool Constrain_IsValid(int value) {
    return Task_Constrain_IsValid(value);
  }
  static const Constrain Constrain_MIN =
    Task_Constrain_Constrain_MIN;
  static const Constrain Constrain_MAX =
    Task_Constrain_Constrain_MAX;
  static const int Constrain_ARRAYSIZE =
    Task_Constrain_Constrain_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Constrain_descriptor() {
    return Task_Constrain_descriptor();
  }
  static inline const ::std::string& Constrain_Name(Constrain value) {
    return Task_Constrain_Name(value);
  }
  static inline bool Constrain_Parse(const ::std::string& name,
      Constrain* value) {
    return Task_Constrain_Parse(name, value);
  }

  typedef Task_Status Status;
  static const Status NOT_SET =
    Task_Status_NOT_SET;
  static const Status CREATED =
    Task_Status_CREATED;
  static const Status ASSIGNED =
    Task_Status_ASSIGNED;
  static const Status IN_WORK =
    Task_Status_IN_WORK;
  static const Status CLOSED =
    Task_Status_CLOSED;
  static inline bool Status_IsValid(int value) {
    return Task_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Task_Status_Status_MIN;
  static const Status Status_MAX =
    Task_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Task_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Task_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Task_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Task_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ric.tasks.Task subtasks = 5;
  int subtasks_size() const;
  void clear_subtasks();
  static const int kSubtasksFieldNumber = 5;
  ::ric::tasks::Task* mutable_subtasks(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Task >*
      mutable_subtasks();
  const ::ric::tasks::Task& subtasks(int index) const;
  ::ric::tasks::Task* add_subtasks();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Task >&
      subtasks() const;

  // repeated string tags = 6;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 6;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // repeated .ric.tasks.ReportFormat report_format = 15;
  int report_format_size() const;
  void clear_report_format();
  static const int kReportFormatFieldNumber = 15;
  ::ric::tasks::ReportFormat* mutable_report_format(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >*
      mutable_report_format();
  const ::ric::tasks::ReportFormat& report_format(int index) const;
  ::ric::tasks::ReportFormat* add_report_format();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >&
      report_format() const;

  // repeated .ric.tasks.Report report = 16;
  int report_size() const;
  void clear_report();
  static const int kReportFieldNumber = 16;
  ::ric::tasks::Report* mutable_report(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >*
      mutable_report();
  const ::ric::tasks::Report& report(int index) const;
  ::ric::tasks::Report* add_report();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >&
      report() const;

  // repeated .ric.tasks.Deadline deadlines = 19;
  int deadlines_size() const;
  void clear_deadlines();
  static const int kDeadlinesFieldNumber = 19;
  ::ric::tasks::Deadline* mutable_deadlines(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >*
      mutable_deadlines();
  const ::ric::tasks::Deadline& deadlines(int index) const;
  ::ric::tasks::Deadline* add_deadlines();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >&
      deadlines() const;

  // string name = 10;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 11;
  void clear_description();
  static const int kDescriptionFieldNumber = 11;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string assignee_type = 22;
  void clear_assignee_type();
  static const int kAssigneeTypeFieldNumber = 22;
  const ::std::string& assignee_type() const;
  void set_assignee_type(const ::std::string& value);
  #if LANG_CXX11
  void set_assignee_type(::std::string&& value);
  #endif
  void set_assignee_type(const char* value);
  void set_assignee_type(const char* value, size_t size);
  ::std::string* mutable_assignee_type();
  ::std::string* release_assignee_type();
  void set_allocated_assignee_type(::std::string* assignee_type);

  // bytes json = 24;
  void clear_json();
  static const int kJsonFieldNumber = 24;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const void* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // .ric.tasks.ObjectId oid = 1;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 1;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // .ric.tasks.ObjectId owner = 2;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::ric::tasks::ObjectId& owner() const;
  ::ric::tasks::ObjectId* release_owner();
  ::ric::tasks::ObjectId* mutable_owner();
  void set_allocated_owner(::ric::tasks::ObjectId* owner);

  // .ric.tasks.ObjectId group = 3;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::ric::tasks::ObjectId& group() const;
  ::ric::tasks::ObjectId* release_group();
  ::ric::tasks::ObjectId* mutable_group();
  void set_allocated_group(::ric::tasks::ObjectId* group);

  // .ric.tasks.ObjectId parent = 4;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::ric::tasks::ObjectId& parent() const;
  ::ric::tasks::ObjectId* release_parent();
  ::ric::tasks::ObjectId* mutable_parent();
  void set_allocated_parent(::ric::tasks::ObjectId* parent);

  // .ric.tasks.ObjectId object = 13;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 13;
  const ::ric::tasks::ObjectId& object() const;
  ::ric::tasks::ObjectId* release_object();
  ::ric::tasks::ObjectId* mutable_object();
  void set_allocated_object(::ric::tasks::ObjectId* object);

  // .ric.tasks.ObjectId kind = 14;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 14;
  const ::ric::tasks::ObjectId& kind() const;
  ::ric::tasks::ObjectId* release_kind();
  ::ric::tasks::ObjectId* mutable_kind();
  void set_allocated_kind(::ric::tasks::ObjectId* kind);

  // .ric.tasks.Location begin = 17;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 17;
  const ::ric::tasks::Location& begin() const;
  ::ric::tasks::Location* release_begin();
  ::ric::tasks::Location* mutable_begin();
  void set_allocated_begin(::ric::tasks::Location* begin);

  // .ric.tasks.Location end = 18;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 18;
  const ::ric::tasks::Location& end() const;
  ::ric::tasks::Location* release_end();
  ::ric::tasks::Location* mutable_end();
  void set_allocated_end(::ric::tasks::Location* end);

  // .google.protobuf.BoolValue success = 20;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 20;
  const ::google::protobuf::BoolValue& success() const;
  ::google::protobuf::BoolValue* release_success();
  ::google::protobuf::BoolValue* mutable_success();
  void set_allocated_success(::google::protobuf::BoolValue* success);

  // .ric.tasks.ObjectId assignee = 21;
  bool has_assignee() const;
  void clear_assignee();
  static const int kAssigneeFieldNumber = 21;
  const ::ric::tasks::ObjectId& assignee() const;
  ::ric::tasks::ObjectId* release_assignee();
  ::ric::tasks::ObjectId* mutable_assignee();
  void set_allocated_assignee(::ric::tasks::ObjectId* assignee);

  // .ric.tasks.Review review = 23;
  bool has_review() const;
  void clear_review();
  static const int kReviewFieldNumber = 23;
  const ::ric::tasks::Review& review() const;
  ::ric::tasks::Review* release_review();
  ::ric::tasks::Review* mutable_review();
  void set_allocated_review(::ric::tasks::Review* review);

  // .ric.tasks.Task.Constrain constrain = 7;
  void clear_constrain();
  static const int kConstrainFieldNumber = 7;
  ::ric::tasks::Task_Constrain constrain() const;
  void set_constrain(::ric::tasks::Task_Constrain value);

  // int32 priority = 8;
  void clear_priority();
  static const int kPriorityFieldNumber = 8;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // int64 created_at = 9;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 9;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // .ric.tasks.Task.Status status = 12;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  ::ric::tasks::Task_Status status() const;
  void set_status(::ric::tasks::Task_Status value);

  // @@protoc_insertion_point(class_scope:ric.tasks.Task)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Task > subtasks_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat > report_format_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report > report_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline > deadlines_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr assignee_type_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  ::ric::tasks::ObjectId* oid_;
  ::ric::tasks::ObjectId* owner_;
  ::ric::tasks::ObjectId* group_;
  ::ric::tasks::ObjectId* parent_;
  ::ric::tasks::ObjectId* object_;
  ::ric::tasks::ObjectId* kind_;
  ::ric::tasks::Location* begin_;
  ::ric::tasks::Location* end_;
  ::google::protobuf::BoolValue* success_;
  ::ric::tasks::ObjectId* assignee_;
  ::ric::tasks::Review* review_;
  int constrain_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int64 created_at_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class TaskEdit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.TaskEdit) */ {
 public:
  TaskEdit();
  virtual ~TaskEdit();

  TaskEdit(const TaskEdit& from);

  inline TaskEdit& operator=(const TaskEdit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskEdit(TaskEdit&& from) noexcept
    : TaskEdit() {
    *this = ::std::move(from);
  }

  inline TaskEdit& operator=(TaskEdit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskEdit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskEdit* internal_default_instance() {
    return reinterpret_cast<const TaskEdit*>(
               &_TaskEdit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TaskEdit* other);
  friend void swap(TaskEdit& a, TaskEdit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskEdit* New() const final {
    return CreateMaybeMessage<TaskEdit>(nullptr);
  }

  TaskEdit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskEdit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskEdit& from);
  void MergeFrom(const TaskEdit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskEdit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // repeated .ric.tasks.ReportFormat report_format = 11;
  int report_format_size() const;
  void clear_report_format();
  static const int kReportFormatFieldNumber = 11;
  ::ric::tasks::ReportFormat* mutable_report_format(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >*
      mutable_report_format();
  const ::ric::tasks::ReportFormat& report_format(int index) const;
  ::ric::tasks::ReportFormat* add_report_format();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >&
      report_format() const;

  // repeated .ric.tasks.Deadline deadlines = 14;
  int deadlines_size() const;
  void clear_deadlines();
  static const int kDeadlinesFieldNumber = 14;
  ::ric::tasks::Deadline* mutable_deadlines(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >*
      mutable_deadlines();
  const ::ric::tasks::Deadline& deadlines(int index) const;
  ::ric::tasks::Deadline* add_deadlines();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >&
      deadlines() const;

  // .ric.tasks.ObjectId owner = 1;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::ric::tasks::ObjectId& owner() const;
  ::ric::tasks::ObjectId* release_owner();
  ::ric::tasks::ObjectId* mutable_owner();
  void set_allocated_owner(::ric::tasks::ObjectId* owner);

  // .ric.tasks.ObjectId group = 2;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  const ::ric::tasks::ObjectId& group() const;
  ::ric::tasks::ObjectId* release_group();
  ::ric::tasks::ObjectId* mutable_group();
  void set_allocated_group(::ric::tasks::ObjectId* group);

  // .ric.tasks.ObjectId parent = 3;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 3;
  const ::ric::tasks::ObjectId& parent() const;
  ::ric::tasks::ObjectId* release_parent();
  ::ric::tasks::ObjectId* mutable_parent();
  void set_allocated_parent(::ric::tasks::ObjectId* parent);

  // .google.protobuf.Int32Value priority = 6;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  const ::google::protobuf::Int32Value& priority() const;
  ::google::protobuf::Int32Value* release_priority();
  ::google::protobuf::Int32Value* mutable_priority();
  void set_allocated_priority(::google::protobuf::Int32Value* priority);

  // .google.protobuf.StringValue name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::google::protobuf::StringValue& name() const;
  ::google::protobuf::StringValue* release_name();
  ::google::protobuf::StringValue* mutable_name();
  void set_allocated_name(::google::protobuf::StringValue* name);

  // .google.protobuf.StringValue description = 8;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 8;
  const ::google::protobuf::StringValue& description() const;
  ::google::protobuf::StringValue* release_description();
  ::google::protobuf::StringValue* mutable_description();
  void set_allocated_description(::google::protobuf::StringValue* description);

  // .ric.tasks.ObjectId object = 9;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 9;
  const ::ric::tasks::ObjectId& object() const;
  ::ric::tasks::ObjectId* release_object();
  ::ric::tasks::ObjectId* mutable_object();
  void set_allocated_object(::ric::tasks::ObjectId* object);

  // .ric.tasks.ObjectId kind = 10;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 10;
  const ::ric::tasks::ObjectId& kind() const;
  ::ric::tasks::ObjectId* release_kind();
  ::ric::tasks::ObjectId* mutable_kind();
  void set_allocated_kind(::ric::tasks::ObjectId* kind);

  // .ric.tasks.Location begin = 12;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 12;
  const ::ric::tasks::Location& begin() const;
  ::ric::tasks::Location* release_begin();
  ::ric::tasks::Location* mutable_begin();
  void set_allocated_begin(::ric::tasks::Location* begin);

  // .ric.tasks.Location end = 13;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 13;
  const ::ric::tasks::Location& end() const;
  ::ric::tasks::Location* release_end();
  ::ric::tasks::Location* mutable_end();
  void set_allocated_end(::ric::tasks::Location* end);

  // .ric.tasks.ObjectId assignee = 15;
  bool has_assignee() const;
  void clear_assignee();
  static const int kAssigneeFieldNumber = 15;
  const ::ric::tasks::ObjectId& assignee() const;
  ::ric::tasks::ObjectId* release_assignee();
  ::ric::tasks::ObjectId* mutable_assignee();
  void set_allocated_assignee(::ric::tasks::ObjectId* assignee);

  // .google.protobuf.StringValue assignee_type = 16;
  bool has_assignee_type() const;
  void clear_assignee_type();
  static const int kAssigneeTypeFieldNumber = 16;
  const ::google::protobuf::StringValue& assignee_type() const;
  ::google::protobuf::StringValue* release_assignee_type();
  ::google::protobuf::StringValue* mutable_assignee_type();
  void set_allocated_assignee_type(::google::protobuf::StringValue* assignee_type);

  // .ric.tasks.Review review = 17;
  bool has_review() const;
  void clear_review();
  static const int kReviewFieldNumber = 17;
  const ::ric::tasks::Review& review() const;
  ::ric::tasks::Review* release_review();
  ::ric::tasks::Review* mutable_review();
  void set_allocated_review(::ric::tasks::Review* review);

  // .google.protobuf.BytesValue json = 18;
  bool has_json() const;
  void clear_json();
  static const int kJsonFieldNumber = 18;
  const ::google::protobuf::BytesValue& json() const;
  ::google::protobuf::BytesValue* release_json();
  ::google::protobuf::BytesValue* mutable_json();
  void set_allocated_json(::google::protobuf::BytesValue* json);

  // .ric.tasks.Task.Constrain constrain = 5;
  void clear_constrain();
  static const int kConstrainFieldNumber = 5;
  ::ric::tasks::Task_Constrain constrain() const;
  void set_constrain(::ric::tasks::Task_Constrain value);

  // @@protoc_insertion_point(class_scope:ric.tasks.TaskEdit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat > report_format_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline > deadlines_;
  ::ric::tasks::ObjectId* owner_;
  ::ric::tasks::ObjectId* group_;
  ::ric::tasks::ObjectId* parent_;
  ::google::protobuf::Int32Value* priority_;
  ::google::protobuf::StringValue* name_;
  ::google::protobuf::StringValue* description_;
  ::ric::tasks::ObjectId* object_;
  ::ric::tasks::ObjectId* kind_;
  ::ric::tasks::Location* begin_;
  ::ric::tasks::Location* end_;
  ::ric::tasks::ObjectId* assignee_;
  ::google::protobuf::StringValue* assignee_type_;
  ::ric::tasks::Review* review_;
  ::google::protobuf::BytesValue* json_;
  int constrain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class Review final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.Review) */ {
 public:
  Review();
  virtual ~Review();

  Review(const Review& from);

  inline Review& operator=(const Review& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Review(Review&& from) noexcept
    : Review() {
    *this = ::std::move(from);
  }

  inline Review& operator=(Review&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Review& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Review* internal_default_instance() {
    return reinterpret_cast<const Review*>(
               &_Review_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Review* other);
  friend void swap(Review& a, Review& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Review* New() const final {
    return CreateMaybeMessage<Review>(nullptr);
  }

  Review* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Review>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Review& from);
  void MergeFrom(const Review& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Review* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // .ric.tasks.ObjectId reviewer = 1;
  bool has_reviewer() const;
  void clear_reviewer();
  static const int kReviewerFieldNumber = 1;
  const ::ric::tasks::ObjectId& reviewer() const;
  ::ric::tasks::ObjectId* release_reviewer();
  ::ric::tasks::ObjectId* mutable_reviewer();
  void set_allocated_reviewer(::ric::tasks::ObjectId* reviewer);

  // int32 rating = 2;
  void clear_rating();
  static const int kRatingFieldNumber = 2;
  ::google::protobuf::int32 rating() const;
  void set_rating(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.tasks.Review)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::ric::tasks::ObjectId* reviewer_;
  ::google::protobuf::int32 rating_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class Deadline final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.Deadline) */ {
 public:
  Deadline();
  virtual ~Deadline();

  Deadline(const Deadline& from);

  inline Deadline& operator=(const Deadline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Deadline(Deadline&& from) noexcept
    : Deadline() {
    *this = ::std::move(from);
  }

  inline Deadline& operator=(Deadline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Deadline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deadline* internal_default_instance() {
    return reinterpret_cast<const Deadline*>(
               &_Deadline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Deadline* other);
  friend void swap(Deadline& a, Deadline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Deadline* New() const final {
    return CreateMaybeMessage<Deadline>(nullptr);
  }

  Deadline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Deadline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Deadline& from);
  void MergeFrom(const Deadline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deadline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Int64Value notify_until = 2;
  bool has_notify_until() const;
  void clear_notify_until();
  static const int kNotifyUntilFieldNumber = 2;
  const ::google::protobuf::Int64Value& notify_until() const;
  ::google::protobuf::Int64Value* release_notify_until();
  ::google::protobuf::Int64Value* mutable_notify_until();
  void set_allocated_notify_until(::google::protobuf::Int64Value* notify_until);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .ric.tasks.Task.Status status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::ric::tasks::Task_Status status() const;
  void set_status(::ric::tasks::Task_Status value);

  // @@protoc_insertion_point(class_scope:ric.tasks.Deadline)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Int64Value* notify_until_;
  ::google::protobuf::int64 timestamp_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class ReportFormat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.ReportFormat) */ {
 public:
  ReportFormat();
  virtual ~ReportFormat();

  ReportFormat(const ReportFormat& from);

  inline ReportFormat& operator=(const ReportFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportFormat(ReportFormat&& from) noexcept
    : ReportFormat() {
    *this = ::std::move(from);
  }

  inline ReportFormat& operator=(ReportFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReportFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportFormat* internal_default_instance() {
    return reinterpret_cast<const ReportFormat*>(
               &_ReportFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReportFormat* other);
  friend void swap(ReportFormat& a, ReportFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportFormat* New() const final {
    return CreateMaybeMessage<ReportFormat>(nullptr);
  }

  ReportFormat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportFormat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportFormat& from);
  void MergeFrom(const ReportFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportFormat_FieldType FieldType;
  static const FieldType INVALID =
    ReportFormat_FieldType_INVALID;
  static const FieldType BOOLEAN =
    ReportFormat_FieldType_BOOLEAN;
  static const FieldType TEXT =
    ReportFormat_FieldType_TEXT;
  static const FieldType NUMBER =
    ReportFormat_FieldType_NUMBER;
  static const FieldType FILE =
    ReportFormat_FieldType_FILE;
  static inline bool FieldType_IsValid(int value) {
    return ReportFormat_FieldType_IsValid(value);
  }
  static const FieldType FieldType_MIN =
    ReportFormat_FieldType_FieldType_MIN;
  static const FieldType FieldType_MAX =
    ReportFormat_FieldType_FieldType_MAX;
  static const int FieldType_ARRAYSIZE =
    ReportFormat_FieldType_FieldType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FieldType_descriptor() {
    return ReportFormat_FieldType_descriptor();
  }
  static inline const ::std::string& FieldType_Name(FieldType value) {
    return ReportFormat_FieldType_Name(value);
  }
  static inline bool FieldType_Parse(const ::std::string& name,
      FieldType* value) {
    return ReportFormat_FieldType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.BoolValue required = 5;
  bool has_required() const;
  void clear_required();
  static const int kRequiredFieldNumber = 5;
  const ::google::protobuf::BoolValue& required() const;
  ::google::protobuf::BoolValue* release_required();
  ::google::protobuf::BoolValue* mutable_required();
  void set_allocated_required(::google::protobuf::BoolValue* required);

  // .ric.tasks.ReportFormat.FieldType field = 2;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  ::ric::tasks::ReportFormat_FieldType field() const;
  void set_field(::ric::tasks::ReportFormat_FieldType value);

  // @@protoc_insertion_point(class_scope:ric.tasks.ReportFormat)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::BoolValue* required_;
  int field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class Report final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.Report) */ {
 public:
  Report();
  virtual ~Report();

  Report(const Report& from);

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Report(Report&& from) noexcept
    : Report() {
    *this = ::std::move(from);
  }

  inline Report& operator=(Report&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Report* internal_default_instance() {
    return reinterpret_cast<const Report*>(
               &_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Report* other);
  friend void swap(Report& a, Report& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Report* New() const final {
    return CreateMaybeMessage<Report>(nullptr);
  }

  Report* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Report>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Report* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Any value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::protobuf::Any& value() const;
  ::google::protobuf::Any* release_value();
  ::google::protobuf::Any* mutable_value();
  void set_allocated_value(::google::protobuf::Any* value);

  // @@protoc_insertion_point(class_scope:ric.tasks.Report)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Any* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class Kind final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.Kind) */ {
 public:
  Kind();
  virtual ~Kind();

  Kind(const Kind& from);

  inline Kind& operator=(const Kind& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Kind(Kind&& from) noexcept
    : Kind() {
    *this = ::std::move(from);
  }

  inline Kind& operator=(Kind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Kind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kind* internal_default_instance() {
    return reinterpret_cast<const Kind*>(
               &_Kind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Kind* other);
  friend void swap(Kind& a, Kind& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Kind* New() const final {
    return CreateMaybeMessage<Kind>(nullptr);
  }

  Kind* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Kind>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Kind& from);
  void MergeFrom(const Kind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.tasks.ObjectId role = 5;
  int role_size() const;
  void clear_role();
  static const int kRoleFieldNumber = 5;
  ::ric::tasks::ObjectId* mutable_role(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ObjectId >*
      mutable_role();
  const ::ric::tasks::ObjectId& role(int index) const;
  ::ric::tasks::ObjectId* add_role();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ObjectId >&
      role() const;

  // repeated .ric.tasks.ReportFormat report_format = 6;
  int report_format_size() const;
  void clear_report_format();
  static const int kReportFormatFieldNumber = 6;
  ::ric::tasks::ReportFormat* mutable_report_format(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >*
      mutable_report_format();
  const ::ric::tasks::ReportFormat& report_format(int index) const;
  ::ric::tasks::ReportFormat* add_report_format();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >&
      report_format() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string discription = 3;
  void clear_discription();
  static const int kDiscriptionFieldNumber = 3;
  const ::std::string& discription() const;
  void set_discription(const ::std::string& value);
  #if LANG_CXX11
  void set_discription(::std::string&& value);
  #endif
  void set_discription(const char* value);
  void set_discription(const char* value, size_t size);
  ::std::string* mutable_discription();
  ::std::string* release_discription();
  void set_allocated_discription(::std::string* discription);

  // string svg = 4;
  void clear_svg();
  static const int kSvgFieldNumber = 4;
  const ::std::string& svg() const;
  void set_svg(const ::std::string& value);
  #if LANG_CXX11
  void set_svg(::std::string&& value);
  #endif
  void set_svg(const char* value);
  void set_svg(const char* value, size_t size);
  ::std::string* mutable_svg();
  ::std::string* release_svg();
  void set_allocated_svg(::std::string* svg);

  // .ric.tasks.ObjectId oid = 1;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 1;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // @@protoc_insertion_point(class_scope:ric.tasks.Kind)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ObjectId > role_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat > report_format_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr discription_;
  ::google::protobuf::internal::ArenaStringPtr svg_;
  ::ric::tasks::ObjectId* oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class CreateTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.CreateTaskRequest) */ {
 public:
  CreateTaskRequest();
  virtual ~CreateTaskRequest();

  CreateTaskRequest(const CreateTaskRequest& from);

  inline CreateTaskRequest& operator=(const CreateTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTaskRequest(CreateTaskRequest&& from) noexcept
    : CreateTaskRequest() {
    *this = ::std::move(from);
  }

  inline CreateTaskRequest& operator=(CreateTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTaskRequest*>(
               &_CreateTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CreateTaskRequest* other);
  friend void swap(CreateTaskRequest& a, CreateTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTaskRequest* New() const final {
    return CreateMaybeMessage<CreateTaskRequest>(nullptr);
  }

  CreateTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTaskRequest& from);
  void MergeFrom(const CreateTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.Task task = 2;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 2;
  const ::ric::tasks::Task& task() const;
  ::ric::tasks::Task* release_task();
  ::ric::tasks::Task* mutable_task();
  void set_allocated_task(::ric::tasks::Task* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.CreateTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::Task* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class CreateTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.CreateTaskResponse) */ {
 public:
  CreateTaskResponse();
  virtual ~CreateTaskResponse();

  CreateTaskResponse(const CreateTaskResponse& from);

  inline CreateTaskResponse& operator=(const CreateTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTaskResponse(CreateTaskResponse&& from) noexcept
    : CreateTaskResponse() {
    *this = ::std::move(from);
  }

  inline CreateTaskResponse& operator=(CreateTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTaskResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTaskResponse*>(
               &_CreateTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CreateTaskResponse* other);
  friend void swap(CreateTaskResponse& a, CreateTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTaskResponse* New() const final {
    return CreateMaybeMessage<CreateTaskResponse>(nullptr);
  }

  CreateTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTaskResponse& from);
  void MergeFrom(const CreateTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::ric::tasks::Task& task() const;
  ::ric::tasks::Task* release_task();
  ::ric::tasks::Task* mutable_task();
  void set_allocated_task(::ric::tasks::Task* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.CreateTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Task* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class GetTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.GetTaskRequest) */ {
 public:
  GetTaskRequest();
  virtual ~GetTaskRequest();

  GetTaskRequest(const GetTaskRequest& from);

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetTaskRequest* other);
  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskRequest* New() const final {
    return CreateMaybeMessage<GetTaskRequest>(nullptr);
  }

  GetTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTaskRequest& from);
  void MergeFrom(const GetTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // @@protoc_insertion_point(class_scope:ric.tasks.GetTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class GetTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.GetTaskResponse) */ {
 public:
  GetTaskResponse();
  virtual ~GetTaskResponse();

  GetTaskResponse(const GetTaskResponse& from);

  inline GetTaskResponse& operator=(const GetTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTaskResponse(GetTaskResponse&& from) noexcept
    : GetTaskResponse() {
    *this = ::std::move(from);
  }

  inline GetTaskResponse& operator=(GetTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskResponse* internal_default_instance() {
    return reinterpret_cast<const GetTaskResponse*>(
               &_GetTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GetTaskResponse* other);
  friend void swap(GetTaskResponse& a, GetTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskResponse* New() const final {
    return CreateMaybeMessage<GetTaskResponse>(nullptr);
  }

  GetTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTaskResponse& from);
  void MergeFrom(const GetTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::ric::tasks::Task& task() const;
  ::ric::tasks::Task* release_task();
  ::ric::tasks::Task* mutable_task();
  void set_allocated_task(::ric::tasks::Task* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.GetTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Task* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class DeleteTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.DeleteTaskRequest) */ {
 public:
  DeleteTaskRequest();
  virtual ~DeleteTaskRequest();

  DeleteTaskRequest(const DeleteTaskRequest& from);

  inline DeleteTaskRequest& operator=(const DeleteTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTaskRequest(DeleteTaskRequest&& from) noexcept
    : DeleteTaskRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTaskRequest& operator=(DeleteTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTaskRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTaskRequest*>(
               &_DeleteTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DeleteTaskRequest* other);
  friend void swap(DeleteTaskRequest& a, DeleteTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTaskRequest* New() const final {
    return CreateMaybeMessage<DeleteTaskRequest>(nullptr);
  }

  DeleteTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTaskRequest& from);
  void MergeFrom(const DeleteTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // @@protoc_insertion_point(class_scope:ric.tasks.DeleteTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class DeleteTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.DeleteTaskResponse) */ {
 public:
  DeleteTaskResponse();
  virtual ~DeleteTaskResponse();

  DeleteTaskResponse(const DeleteTaskResponse& from);

  inline DeleteTaskResponse& operator=(const DeleteTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTaskResponse(DeleteTaskResponse&& from) noexcept
    : DeleteTaskResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTaskResponse& operator=(DeleteTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTaskResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTaskResponse*>(
               &_DeleteTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(DeleteTaskResponse* other);
  friend void swap(DeleteTaskResponse& a, DeleteTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTaskResponse* New() const final {
    return CreateMaybeMessage<DeleteTaskResponse>(nullptr);
  }

  DeleteTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTaskResponse& from);
  void MergeFrom(const DeleteTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.tasks.DeleteTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UpdateTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UpdateTaskRequest) */ {
 public:
  UpdateTaskRequest();
  virtual ~UpdateTaskRequest();

  UpdateTaskRequest(const UpdateTaskRequest& from);

  inline UpdateTaskRequest& operator=(const UpdateTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTaskRequest(UpdateTaskRequest&& from) noexcept
    : UpdateTaskRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTaskRequest& operator=(UpdateTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTaskRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskRequest*>(
               &_UpdateTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(UpdateTaskRequest* other);
  friend void swap(UpdateTaskRequest& a, UpdateTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTaskRequest* New() const final {
    return CreateMaybeMessage<UpdateTaskRequest>(nullptr);
  }

  UpdateTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTaskRequest& from);
  void MergeFrom(const UpdateTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // .ric.tasks.TaskEdit task = 3;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 3;
  const ::ric::tasks::TaskEdit& task() const;
  ::ric::tasks::TaskEdit* release_task();
  ::ric::tasks::TaskEdit* mutable_task();
  void set_allocated_task(::ric::tasks::TaskEdit* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.UpdateTaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  ::ric::tasks::TaskEdit* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UpdateTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UpdateTaskResponse) */ {
 public:
  UpdateTaskResponse();
  virtual ~UpdateTaskResponse();

  UpdateTaskResponse(const UpdateTaskResponse& from);

  inline UpdateTaskResponse& operator=(const UpdateTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTaskResponse(UpdateTaskResponse&& from) noexcept
    : UpdateTaskResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTaskResponse& operator=(UpdateTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTaskResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskResponse*>(
               &_UpdateTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(UpdateTaskResponse* other);
  friend void swap(UpdateTaskResponse& a, UpdateTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTaskResponse* New() const final {
    return CreateMaybeMessage<UpdateTaskResponse>(nullptr);
  }

  UpdateTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTaskResponse& from);
  void MergeFrom(const UpdateTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::ric::tasks::Task& task() const;
  ::ric::tasks::Task* release_task();
  ::ric::tasks::Task* mutable_task();
  void set_allocated_task(::ric::tasks::Task* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.UpdateTaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Task* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UpdateTaskOrderRequest_PositionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UpdateTaskOrderRequest_PositionsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<UpdateTaskOrderRequest_PositionsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  UpdateTaskOrderRequest_PositionsEntry_DoNotUse();
  UpdateTaskOrderRequest_PositionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UpdateTaskOrderRequest_PositionsEntry_DoNotUse& other);
  static const UpdateTaskOrderRequest_PositionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdateTaskOrderRequest_PositionsEntry_DoNotUse*>(&_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UpdateTaskOrderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UpdateTaskOrderRequest) */ {
 public:
  UpdateTaskOrderRequest();
  virtual ~UpdateTaskOrderRequest();

  UpdateTaskOrderRequest(const UpdateTaskOrderRequest& from);

  inline UpdateTaskOrderRequest& operator=(const UpdateTaskOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTaskOrderRequest(UpdateTaskOrderRequest&& from) noexcept
    : UpdateTaskOrderRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTaskOrderRequest& operator=(UpdateTaskOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateTaskOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTaskOrderRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskOrderRequest*>(
               &_UpdateTaskOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(UpdateTaskOrderRequest* other);
  friend void swap(UpdateTaskOrderRequest& a, UpdateTaskOrderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTaskOrderRequest* New() const final {
    return CreateMaybeMessage<UpdateTaskOrderRequest>(nullptr);
  }

  UpdateTaskOrderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTaskOrderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTaskOrderRequest& from);
  void MergeFrom(const UpdateTaskOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTaskOrderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int32> positions = 3;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      positions() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_positions();

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // @@protoc_insertion_point(class_scope:ric.tasks.UpdateTaskOrderRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      UpdateTaskOrderRequest_PositionsEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > positions_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UpdateTaskOrderResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UpdateTaskOrderResponse) */ {
 public:
  UpdateTaskOrderResponse();
  virtual ~UpdateTaskOrderResponse();

  UpdateTaskOrderResponse(const UpdateTaskOrderResponse& from);

  inline UpdateTaskOrderResponse& operator=(const UpdateTaskOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTaskOrderResponse(UpdateTaskOrderResponse&& from) noexcept
    : UpdateTaskOrderResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTaskOrderResponse& operator=(UpdateTaskOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateTaskOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTaskOrderResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskOrderResponse*>(
               &_UpdateTaskOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(UpdateTaskOrderResponse* other);
  friend void swap(UpdateTaskOrderResponse& a, UpdateTaskOrderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTaskOrderResponse* New() const final {
    return CreateMaybeMessage<UpdateTaskOrderResponse>(nullptr);
  }

  UpdateTaskOrderResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTaskOrderResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTaskOrderResponse& from);
  void MergeFrom(const UpdateTaskOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTaskOrderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::ric::tasks::Task& task() const;
  ::ric::tasks::Task* release_task();
  ::ric::tasks::Task* mutable_task();
  void set_allocated_task(::ric::tasks::Task* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.UpdateTaskOrderResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Task* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class ChangeTaskStatusRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.ChangeTaskStatusRequest) */ {
 public:
  ChangeTaskStatusRequest();
  virtual ~ChangeTaskStatusRequest();

  ChangeTaskStatusRequest(const ChangeTaskStatusRequest& from);

  inline ChangeTaskStatusRequest& operator=(const ChangeTaskStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeTaskStatusRequest(ChangeTaskStatusRequest&& from) noexcept
    : ChangeTaskStatusRequest() {
    *this = ::std::move(from);
  }

  inline ChangeTaskStatusRequest& operator=(ChangeTaskStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChangeTaskStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeTaskStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeTaskStatusRequest*>(
               &_ChangeTaskStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ChangeTaskStatusRequest* other);
  friend void swap(ChangeTaskStatusRequest& a, ChangeTaskStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeTaskStatusRequest* New() const final {
    return CreateMaybeMessage<ChangeTaskStatusRequest>(nullptr);
  }

  ChangeTaskStatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeTaskStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeTaskStatusRequest& from);
  void MergeFrom(const ChangeTaskStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeTaskStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.tasks.Report report = 7;
  int report_size() const;
  void clear_report();
  static const int kReportFieldNumber = 7;
  ::ric::tasks::Report* mutable_report(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >*
      mutable_report();
  const ::ric::tasks::Report& report(int index) const;
  ::ric::tasks::Report* add_report();
  const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >&
      report() const;

  // string comment = 6;
  void clear_comment();
  static const int kCommentFieldNumber = 6;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // .ric.tasks.Location location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::ric::tasks::Location& location() const;
  ::ric::tasks::Location* release_location();
  ::ric::tasks::Location* mutable_location();
  void set_allocated_location(::ric::tasks::Location* location);

  // .google.protobuf.BoolValue success = 5;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 5;
  const ::google::protobuf::BoolValue& success() const;
  ::google::protobuf::BoolValue* release_success();
  ::google::protobuf::BoolValue* mutable_success();
  void set_allocated_success(::google::protobuf::BoolValue* success);

  // .ric.tasks.Task.Status new_status = 3;
  void clear_new_status();
  static const int kNewStatusFieldNumber = 3;
  ::ric::tasks::Task_Status new_status() const;
  void set_new_status(::ric::tasks::Task_Status value);

  // @@protoc_insertion_point(class_scope:ric.tasks.ChangeTaskStatusRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report > report_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  ::ric::tasks::Location* location_;
  ::google::protobuf::BoolValue* success_;
  int new_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class ChangeTaskStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.ChangeTaskStatusResponse) */ {
 public:
  ChangeTaskStatusResponse();
  virtual ~ChangeTaskStatusResponse();

  ChangeTaskStatusResponse(const ChangeTaskStatusResponse& from);

  inline ChangeTaskStatusResponse& operator=(const ChangeTaskStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeTaskStatusResponse(ChangeTaskStatusResponse&& from) noexcept
    : ChangeTaskStatusResponse() {
    *this = ::std::move(from);
  }

  inline ChangeTaskStatusResponse& operator=(ChangeTaskStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChangeTaskStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeTaskStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeTaskStatusResponse*>(
               &_ChangeTaskStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ChangeTaskStatusResponse* other);
  friend void swap(ChangeTaskStatusResponse& a, ChangeTaskStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeTaskStatusResponse* New() const final {
    return CreateMaybeMessage<ChangeTaskStatusResponse>(nullptr);
  }

  ChangeTaskStatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeTaskStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeTaskStatusResponse& from);
  void MergeFrom(const ChangeTaskStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeTaskStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::ric::tasks::Task& task() const;
  ::ric::tasks::Task* release_task();
  ::ric::tasks::Task* mutable_task();
  void set_allocated_task(::ric::tasks::Task* task);

  // @@protoc_insertion_point(class_scope:ric.tasks.ChangeTaskStatusResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Task* task_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class CreateKindRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.CreateKindRequest) */ {
 public:
  CreateKindRequest();
  virtual ~CreateKindRequest();

  CreateKindRequest(const CreateKindRequest& from);

  inline CreateKindRequest& operator=(const CreateKindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateKindRequest(CreateKindRequest&& from) noexcept
    : CreateKindRequest() {
    *this = ::std::move(from);
  }

  inline CreateKindRequest& operator=(CreateKindRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateKindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateKindRequest* internal_default_instance() {
    return reinterpret_cast<const CreateKindRequest*>(
               &_CreateKindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CreateKindRequest* other);
  friend void swap(CreateKindRequest& a, CreateKindRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateKindRequest* New() const final {
    return CreateMaybeMessage<CreateKindRequest>(nullptr);
  }

  CreateKindRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateKindRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateKindRequest& from);
  void MergeFrom(const CreateKindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateKindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.Kind kind = 2;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  const ::ric::tasks::Kind& kind() const;
  ::ric::tasks::Kind* release_kind();
  ::ric::tasks::Kind* mutable_kind();
  void set_allocated_kind(::ric::tasks::Kind* kind);

  // @@protoc_insertion_point(class_scope:ric.tasks.CreateKindRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::Kind* kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class CreateKindResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.CreateKindResponse) */ {
 public:
  CreateKindResponse();
  virtual ~CreateKindResponse();

  CreateKindResponse(const CreateKindResponse& from);

  inline CreateKindResponse& operator=(const CreateKindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateKindResponse(CreateKindResponse&& from) noexcept
    : CreateKindResponse() {
    *this = ::std::move(from);
  }

  inline CreateKindResponse& operator=(CreateKindResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateKindResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateKindResponse* internal_default_instance() {
    return reinterpret_cast<const CreateKindResponse*>(
               &_CreateKindResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CreateKindResponse* other);
  friend void swap(CreateKindResponse& a, CreateKindResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateKindResponse* New() const final {
    return CreateMaybeMessage<CreateKindResponse>(nullptr);
  }

  CreateKindResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateKindResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateKindResponse& from);
  void MergeFrom(const CreateKindResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateKindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Kind kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::ric::tasks::Kind& kind() const;
  ::ric::tasks::Kind* release_kind();
  ::ric::tasks::Kind* mutable_kind();
  void set_allocated_kind(::ric::tasks::Kind* kind);

  // @@protoc_insertion_point(class_scope:ric.tasks.CreateKindResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Kind* kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class GetKindRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.GetKindRequest) */ {
 public:
  GetKindRequest();
  virtual ~GetKindRequest();

  GetKindRequest(const GetKindRequest& from);

  inline GetKindRequest& operator=(const GetKindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetKindRequest(GetKindRequest&& from) noexcept
    : GetKindRequest() {
    *this = ::std::move(from);
  }

  inline GetKindRequest& operator=(GetKindRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetKindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetKindRequest* internal_default_instance() {
    return reinterpret_cast<const GetKindRequest*>(
               &_GetKindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(GetKindRequest* other);
  friend void swap(GetKindRequest& a, GetKindRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetKindRequest* New() const final {
    return CreateMaybeMessage<GetKindRequest>(nullptr);
  }

  GetKindRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetKindRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetKindRequest& from);
  void MergeFrom(const GetKindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // @@protoc_insertion_point(class_scope:ric.tasks.GetKindRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class GetKindResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.GetKindResponse) */ {
 public:
  GetKindResponse();
  virtual ~GetKindResponse();

  GetKindResponse(const GetKindResponse& from);

  inline GetKindResponse& operator=(const GetKindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetKindResponse(GetKindResponse&& from) noexcept
    : GetKindResponse() {
    *this = ::std::move(from);
  }

  inline GetKindResponse& operator=(GetKindResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetKindResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetKindResponse* internal_default_instance() {
    return reinterpret_cast<const GetKindResponse*>(
               &_GetKindResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GetKindResponse* other);
  friend void swap(GetKindResponse& a, GetKindResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetKindResponse* New() const final {
    return CreateMaybeMessage<GetKindResponse>(nullptr);
  }

  GetKindResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetKindResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetKindResponse& from);
  void MergeFrom(const GetKindResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Kind kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::ric::tasks::Kind& kind() const;
  ::ric::tasks::Kind* release_kind();
  ::ric::tasks::Kind* mutable_kind();
  void set_allocated_kind(::ric::tasks::Kind* kind);

  // @@protoc_insertion_point(class_scope:ric.tasks.GetKindResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Kind* kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UpdateKindRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UpdateKindRequest) */ {
 public:
  UpdateKindRequest();
  virtual ~UpdateKindRequest();

  UpdateKindRequest(const UpdateKindRequest& from);

  inline UpdateKindRequest& operator=(const UpdateKindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateKindRequest(UpdateKindRequest&& from) noexcept
    : UpdateKindRequest() {
    *this = ::std::move(from);
  }

  inline UpdateKindRequest& operator=(UpdateKindRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateKindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateKindRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateKindRequest*>(
               &_UpdateKindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(UpdateKindRequest* other);
  friend void swap(UpdateKindRequest& a, UpdateKindRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateKindRequest* New() const final {
    return CreateMaybeMessage<UpdateKindRequest>(nullptr);
  }

  UpdateKindRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateKindRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateKindRequest& from);
  void MergeFrom(const UpdateKindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateKindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.Kind kind = 2;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  const ::ric::tasks::Kind& kind() const;
  ::ric::tasks::Kind* release_kind();
  ::ric::tasks::Kind* mutable_kind();
  void set_allocated_kind(::ric::tasks::Kind* kind);

  // @@protoc_insertion_point(class_scope:ric.tasks.UpdateKindRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::Kind* kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class UpdateKindResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.UpdateKindResponse) */ {
 public:
  UpdateKindResponse();
  virtual ~UpdateKindResponse();

  UpdateKindResponse(const UpdateKindResponse& from);

  inline UpdateKindResponse& operator=(const UpdateKindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateKindResponse(UpdateKindResponse&& from) noexcept
    : UpdateKindResponse() {
    *this = ::std::move(from);
  }

  inline UpdateKindResponse& operator=(UpdateKindResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateKindResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateKindResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateKindResponse*>(
               &_UpdateKindResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(UpdateKindResponse* other);
  friend void swap(UpdateKindResponse& a, UpdateKindResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateKindResponse* New() const final {
    return CreateMaybeMessage<UpdateKindResponse>(nullptr);
  }

  UpdateKindResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateKindResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateKindResponse& from);
  void MergeFrom(const UpdateKindResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateKindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.Kind kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::ric::tasks::Kind& kind() const;
  ::ric::tasks::Kind* release_kind();
  ::ric::tasks::Kind* mutable_kind();
  void set_allocated_kind(::ric::tasks::Kind* kind);

  // @@protoc_insertion_point(class_scope:ric.tasks.UpdateKindResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::Kind* kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class DeleteKindRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.DeleteKindRequest) */ {
 public:
  DeleteKindRequest();
  virtual ~DeleteKindRequest();

  DeleteKindRequest(const DeleteKindRequest& from);

  inline DeleteKindRequest& operator=(const DeleteKindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteKindRequest(DeleteKindRequest&& from) noexcept
    : DeleteKindRequest() {
    *this = ::std::move(from);
  }

  inline DeleteKindRequest& operator=(DeleteKindRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteKindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteKindRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteKindRequest*>(
               &_DeleteKindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(DeleteKindRequest* other);
  friend void swap(DeleteKindRequest& a, DeleteKindRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteKindRequest* New() const final {
    return CreateMaybeMessage<DeleteKindRequest>(nullptr);
  }

  DeleteKindRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteKindRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteKindRequest& from);
  void MergeFrom(const DeleteKindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.tasks.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::tasks::UserContext& ctx() const;
  ::ric::tasks::UserContext* release_ctx();
  ::ric::tasks::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::tasks::UserContext* ctx);

  // .ric.tasks.ObjectId oid = 2;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 2;
  const ::ric::tasks::ObjectId& oid() const;
  ::ric::tasks::ObjectId* release_oid();
  ::ric::tasks::ObjectId* mutable_oid();
  void set_allocated_oid(::ric::tasks::ObjectId* oid);

  // @@protoc_insertion_point(class_scope:ric.tasks.DeleteKindRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::tasks::UserContext* ctx_;
  ::ric::tasks::ObjectId* oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// -------------------------------------------------------------------

class DeleteKindResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.tasks.DeleteKindResponse) */ {
 public:
  DeleteKindResponse();
  virtual ~DeleteKindResponse();

  DeleteKindResponse(const DeleteKindResponse& from);

  inline DeleteKindResponse& operator=(const DeleteKindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteKindResponse(DeleteKindResponse&& from) noexcept
    : DeleteKindResponse() {
    *this = ::std::move(from);
  }

  inline DeleteKindResponse& operator=(DeleteKindResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteKindResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteKindResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteKindResponse*>(
               &_DeleteKindResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(DeleteKindResponse* other);
  friend void swap(DeleteKindResponse& a, DeleteKindResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteKindResponse* New() const final {
    return CreateMaybeMessage<DeleteKindResponse>(nullptr);
  }

  DeleteKindResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteKindResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteKindResponse& from);
  void MergeFrom(const DeleteKindResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteKindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.tasks.DeleteKindResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dtasks_2frictasks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectId

// string id = 1;
inline void ObjectId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectId::id() const {
  // @@protoc_insertion_point(field_get:ric.tasks.ObjectId.id)
  return id_.GetNoArena();
}
inline void ObjectId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.ObjectId.id)
}
#if LANG_CXX11
inline void ObjectId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.ObjectId.id)
}
#endif
inline void ObjectId::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.ObjectId.id)
}
inline void ObjectId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.ObjectId.id)
}
inline ::std::string* ObjectId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.ObjectId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectId::release_id() {
  // @@protoc_insertion_point(field_release:ric.tasks.ObjectId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectId::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ObjectId.id)
}

// -------------------------------------------------------------------

// UserContext

// .ric.tasks.ObjectId group_id = 1;
inline bool UserContext::has_group_id() const {
  return this != internal_default_instance() && group_id_ != nullptr;
}
inline void UserContext::clear_group_id() {
  if (GetArenaNoVirtual() == nullptr && group_id_ != nullptr) {
    delete group_id_;
  }
  group_id_ = nullptr;
}
inline const ::ric::tasks::ObjectId& UserContext::group_id() const {
  const ::ric::tasks::ObjectId* p = group_id_;
  // @@protoc_insertion_point(field_get:ric.tasks.UserContext.group_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* UserContext::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.tasks.UserContext.group_id)
  
  ::ric::tasks::ObjectId* temp = group_id_;
  group_id_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* UserContext::mutable_group_id() {
  
  if (group_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    group_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UserContext.group_id)
  return group_id_;
}
inline void UserContext::set_allocated_group_id(::ric::tasks::ObjectId* group_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete group_id_;
  }
  if (group_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_id, submessage_arena);
    }
    
  } else {
    
  }
  group_id_ = group_id;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UserContext.group_id)
}

// .ric.tasks.ObjectId user_id = 2;
inline bool UserContext::has_user_id() const {
  return this != internal_default_instance() && user_id_ != nullptr;
}
inline void UserContext::clear_user_id() {
  if (GetArenaNoVirtual() == nullptr && user_id_ != nullptr) {
    delete user_id_;
  }
  user_id_ = nullptr;
}
inline const ::ric::tasks::ObjectId& UserContext::user_id() const {
  const ::ric::tasks::ObjectId* p = user_id_;
  // @@protoc_insertion_point(field_get:ric.tasks.UserContext.user_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* UserContext::release_user_id() {
  // @@protoc_insertion_point(field_release:ric.tasks.UserContext.user_id)
  
  ::ric::tasks::ObjectId* temp = user_id_;
  user_id_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* UserContext::mutable_user_id() {
  
  if (user_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UserContext.user_id)
  return user_id_;
}
inline void UserContext::set_allocated_user_id(::ric::tasks::ObjectId* user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_id_;
  }
  if (user_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UserContext.user_id)
}

// string span_id = 3;
inline void UserContext::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::span_id() const {
  // @@protoc_insertion_point(field_get:ric.tasks.UserContext.span_id)
  return span_id_.GetNoArena();
}
inline void UserContext::set_span_id(const ::std::string& value) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.UserContext.span_id)
}
#if LANG_CXX11
inline void UserContext::set_span_id(::std::string&& value) {
  
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.UserContext.span_id)
}
#endif
inline void UserContext::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.UserContext.span_id)
}
inline void UserContext::set_span_id(const char* value, size_t size) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.UserContext.span_id)
}
inline ::std::string* UserContext::mutable_span_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.UserContext.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_span_id() {
  // @@protoc_insertion_point(field_release:ric.tasks.UserContext.span_id)
  
  return span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_span_id(::std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UserContext.span_id)
}

// -------------------------------------------------------------------

// Location

// double lat = 1;
inline void Location::clear_lat() {
  lat_ = 0;
}
inline double Location::lat() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Location.lat)
  return lat_;
}
inline void Location::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Location.lat)
}

// double lng = 2;
inline void Location::clear_lng() {
  lng_ = 0;
}
inline double Location::lng() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Location.lng)
  return lng_;
}
inline void Location::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Location.lng)
}

// double radius = 3;
inline void Location::clear_radius() {
  radius_ = 0;
}
inline double Location::radius() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Location.radius)
  return radius_;
}
inline void Location::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Location.radius)
}

// string address = 4;
inline void Location::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::address() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Location.address)
  return address_.GetNoArena();
}
inline void Location::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Location.address)
}
#if LANG_CXX11
inline void Location::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Location.address)
}
#endif
inline void Location::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Location.address)
}
inline void Location::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Location.address)
}
inline ::std::string* Location::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Location.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_address() {
  // @@protoc_insertion_point(field_release:ric.tasks.Location.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Location.address)
}

// .ric.tasks.IndoorLocation indoor = 5;
inline bool Location::has_indoor() const {
  return this != internal_default_instance() && indoor_ != nullptr;
}
inline void Location::clear_indoor() {
  if (GetArenaNoVirtual() == nullptr && indoor_ != nullptr) {
    delete indoor_;
  }
  indoor_ = nullptr;
}
inline const ::ric::tasks::IndoorLocation& Location::indoor() const {
  const ::ric::tasks::IndoorLocation* p = indoor_;
  // @@protoc_insertion_point(field_get:ric.tasks.Location.indoor)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::IndoorLocation*>(
      &::ric::tasks::_IndoorLocation_default_instance_);
}
inline ::ric::tasks::IndoorLocation* Location::release_indoor() {
  // @@protoc_insertion_point(field_release:ric.tasks.Location.indoor)
  
  ::ric::tasks::IndoorLocation* temp = indoor_;
  indoor_ = nullptr;
  return temp;
}
inline ::ric::tasks::IndoorLocation* Location::mutable_indoor() {
  
  if (indoor_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::IndoorLocation>(GetArenaNoVirtual());
    indoor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Location.indoor)
  return indoor_;
}
inline void Location::set_allocated_indoor(::ric::tasks::IndoorLocation* indoor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indoor_;
  }
  if (indoor) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indoor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indoor, submessage_arena);
    }
    
  } else {
    
  }
  indoor_ = indoor;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Location.indoor)
}

// -------------------------------------------------------------------

// IndoorLocation

// double x = 1;
inline void IndoorLocation::clear_x() {
  x_ = 0;
}
inline double IndoorLocation::x() const {
  // @@protoc_insertion_point(field_get:ric.tasks.IndoorLocation.x)
  return x_;
}
inline void IndoorLocation::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.IndoorLocation.x)
}

// double y = 2;
inline void IndoorLocation::clear_y() {
  y_ = 0;
}
inline double IndoorLocation::y() const {
  // @@protoc_insertion_point(field_get:ric.tasks.IndoorLocation.y)
  return y_;
}
inline void IndoorLocation::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.IndoorLocation.y)
}

// double z = 3;
inline void IndoorLocation::clear_z() {
  z_ = 0;
}
inline double IndoorLocation::z() const {
  // @@protoc_insertion_point(field_get:ric.tasks.IndoorLocation.z)
  return z_;
}
inline void IndoorLocation::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.IndoorLocation.z)
}

// double radius = 4;
inline void IndoorLocation::clear_radius() {
  radius_ = 0;
}
inline double IndoorLocation::radius() const {
  // @@protoc_insertion_point(field_get:ric.tasks.IndoorLocation.radius)
  return radius_;
}
inline void IndoorLocation::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.IndoorLocation.radius)
}

// -------------------------------------------------------------------

// Task

// .ric.tasks.ObjectId oid = 1;
inline bool Task::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void Task::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.oid)
  return oid_;
}
inline void Task::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.oid)
}

// .ric.tasks.ObjectId owner = 2;
inline bool Task::has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline void Task::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::owner() const {
  const ::ric::tasks::ObjectId* p = owner_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_owner() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.owner)
  
  ::ric::tasks::ObjectId* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.owner)
  return owner_;
}
inline void Task::set_allocated_owner(::ric::tasks::ObjectId* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.owner)
}

// .ric.tasks.ObjectId group = 3;
inline bool Task::has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline void Task::clear_group() {
  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::group() const {
  const ::ric::tasks::ObjectId* p = group_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.group)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_group() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.group)
  
  ::ric::tasks::ObjectId* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    group_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.group)
  return group_;
}
inline void Task::set_allocated_group(::ric::tasks::ObjectId* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.group)
}

// .ric.tasks.ObjectId parent = 4;
inline bool Task::has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline void Task::clear_parent() {
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::parent() const {
  const ::ric::tasks::ObjectId* p = parent_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.parent)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_parent() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.parent)
  
  ::ric::tasks::ObjectId* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.parent)
  return parent_;
}
inline void Task::set_allocated_parent(::ric::tasks::ObjectId* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.parent)
}

// repeated .ric.tasks.Task subtasks = 5;
inline int Task::subtasks_size() const {
  return subtasks_.size();
}
inline void Task::clear_subtasks() {
  subtasks_.Clear();
}
inline ::ric::tasks::Task* Task::mutable_subtasks(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.subtasks)
  return subtasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::Task >*
Task::mutable_subtasks() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Task.subtasks)
  return &subtasks_;
}
inline const ::ric::tasks::Task& Task::subtasks(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.subtasks)
  return subtasks_.Get(index);
}
inline ::ric::tasks::Task* Task::add_subtasks() {
  // @@protoc_insertion_point(field_add:ric.tasks.Task.subtasks)
  return subtasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Task >&
Task::subtasks() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Task.subtasks)
  return subtasks_;
}

// repeated string tags = 6;
inline int Task::tags_size() const {
  return tags_.size();
}
inline void Task::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Task::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.tags)
  return tags_.Get(index);
}
inline ::std::string* Task::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.tags)
  return tags_.Mutable(index);
}
inline void Task::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.tasks.Task.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Task::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.tasks.Task.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Task::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.tasks.Task.tags)
}
inline void Task::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Task.tags)
}
inline ::std::string* Task::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.tasks.Task.tags)
  return tags_.Add();
}
inline void Task::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.tasks.Task.tags)
}
#if LANG_CXX11
inline void Task::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.tasks.Task.tags)
}
#endif
inline void Task::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.tasks.Task.tags)
}
inline void Task::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.tasks.Task.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Task::tags() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Task.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Task::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Task.tags)
  return &tags_;
}

// .ric.tasks.Task.Constrain constrain = 7;
inline void Task::clear_constrain() {
  constrain_ = 0;
}
inline ::ric::tasks::Task_Constrain Task::constrain() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.constrain)
  return static_cast< ::ric::tasks::Task_Constrain >(constrain_);
}
inline void Task::set_constrain(::ric::tasks::Task_Constrain value) {
  
  constrain_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Task.constrain)
}

// int32 priority = 8;
inline void Task::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 Task::priority() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.priority)
  return priority_;
}
inline void Task::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Task.priority)
}

// int64 created_at = 9;
inline void Task::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Task::created_at() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.created_at)
  return created_at_;
}
inline void Task::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Task.created_at)
}

// string name = 10;
inline void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.name)
  return name_.GetNoArena();
}
inline void Task::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Task.name)
}
#if LANG_CXX11
inline void Task::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Task.name)
}
#endif
inline void Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Task.name)
}
inline void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Task.name)
}
inline ::std::string* Task::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.name)
}

// string description = 11;
inline void Task::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.description)
  return description_.GetNoArena();
}
inline void Task::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Task.description)
}
#if LANG_CXX11
inline void Task::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Task.description)
}
#endif
inline void Task::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Task.description)
}
inline void Task::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Task.description)
}
inline ::std::string* Task::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.description)
}

// .ric.tasks.Task.Status status = 12;
inline void Task::clear_status() {
  status_ = 0;
}
inline ::ric::tasks::Task_Status Task::status() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.status)
  return static_cast< ::ric::tasks::Task_Status >(status_);
}
inline void Task::set_status(::ric::tasks::Task_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Task.status)
}

// .ric.tasks.ObjectId object = 13;
inline bool Task::has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline void Task::clear_object() {
  if (GetArenaNoVirtual() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::object() const {
  const ::ric::tasks::ObjectId* p = object_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.object)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_object() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.object)
  
  ::ric::tasks::ObjectId* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.object)
  return object_;
}
inline void Task::set_allocated_object(::ric::tasks::ObjectId* object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.object)
}

// .ric.tasks.ObjectId kind = 14;
inline bool Task::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void Task::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::kind() const {
  const ::ric::tasks::ObjectId* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.kind)
  
  ::ric::tasks::ObjectId* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.kind)
  return kind_;
}
inline void Task::set_allocated_kind(::ric::tasks::ObjectId* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.kind)
}

// repeated .ric.tasks.ReportFormat report_format = 15;
inline int Task::report_format_size() const {
  return report_format_.size();
}
inline void Task::clear_report_format() {
  report_format_.Clear();
}
inline ::ric::tasks::ReportFormat* Task::mutable_report_format(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.report_format)
  return report_format_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >*
Task::mutable_report_format() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Task.report_format)
  return &report_format_;
}
inline const ::ric::tasks::ReportFormat& Task::report_format(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.report_format)
  return report_format_.Get(index);
}
inline ::ric::tasks::ReportFormat* Task::add_report_format() {
  // @@protoc_insertion_point(field_add:ric.tasks.Task.report_format)
  return report_format_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >&
Task::report_format() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Task.report_format)
  return report_format_;
}

// repeated .ric.tasks.Report report = 16;
inline int Task::report_size() const {
  return report_.size();
}
inline void Task::clear_report() {
  report_.Clear();
}
inline ::ric::tasks::Report* Task::mutable_report(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.report)
  return report_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >*
Task::mutable_report() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Task.report)
  return &report_;
}
inline const ::ric::tasks::Report& Task::report(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.report)
  return report_.Get(index);
}
inline ::ric::tasks::Report* Task::add_report() {
  // @@protoc_insertion_point(field_add:ric.tasks.Task.report)
  return report_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >&
Task::report() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Task.report)
  return report_;
}

// .ric.tasks.Location begin = 17;
inline bool Task::has_begin() const {
  return this != internal_default_instance() && begin_ != nullptr;
}
inline void Task::clear_begin() {
  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
}
inline const ::ric::tasks::Location& Task::begin() const {
  const ::ric::tasks::Location* p = begin_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.begin)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Location*>(
      &::ric::tasks::_Location_default_instance_);
}
inline ::ric::tasks::Location* Task::release_begin() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.begin)
  
  ::ric::tasks::Location* temp = begin_;
  begin_ = nullptr;
  return temp;
}
inline ::ric::tasks::Location* Task::mutable_begin() {
  
  if (begin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Location>(GetArenaNoVirtual());
    begin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.begin)
  return begin_;
}
inline void Task::set_allocated_begin(::ric::tasks::Location* begin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete begin_;
  }
  if (begin) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      begin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin, submessage_arena);
    }
    
  } else {
    
  }
  begin_ = begin;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.begin)
}

// .ric.tasks.Location end = 18;
inline bool Task::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline void Task::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::ric::tasks::Location& Task::end() const {
  const ::ric::tasks::Location* p = end_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Location*>(
      &::ric::tasks::_Location_default_instance_);
}
inline ::ric::tasks::Location* Task::release_end() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.end)
  
  ::ric::tasks::Location* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::ric::tasks::Location* Task::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Location>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.end)
  return end_;
}
inline void Task::set_allocated_end(::ric::tasks::Location* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.end)
}

// repeated .ric.tasks.Deadline deadlines = 19;
inline int Task::deadlines_size() const {
  return deadlines_.size();
}
inline void Task::clear_deadlines() {
  deadlines_.Clear();
}
inline ::ric::tasks::Deadline* Task::mutable_deadlines(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.deadlines)
  return deadlines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >*
Task::mutable_deadlines() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Task.deadlines)
  return &deadlines_;
}
inline const ::ric::tasks::Deadline& Task::deadlines(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.deadlines)
  return deadlines_.Get(index);
}
inline ::ric::tasks::Deadline* Task::add_deadlines() {
  // @@protoc_insertion_point(field_add:ric.tasks.Task.deadlines)
  return deadlines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >&
Task::deadlines() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Task.deadlines)
  return deadlines_;
}

// .google.protobuf.BoolValue success = 20;
inline bool Task::has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline const ::google::protobuf::BoolValue& Task::success() const {
  const ::google::protobuf::BoolValue* p = success_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.success)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* Task::release_success() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.success)
  
  ::google::protobuf::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* Task::mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    success_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.success)
  return success_;
}
inline void Task::set_allocated_success(::google::protobuf::BoolValue* success) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(success_);
  }
  if (success) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(success)->GetArena();
    if (message_arena != submessage_arena) {
      success = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.success)
}

// .ric.tasks.ObjectId assignee = 21;
inline bool Task::has_assignee() const {
  return this != internal_default_instance() && assignee_ != nullptr;
}
inline void Task::clear_assignee() {
  if (GetArenaNoVirtual() == nullptr && assignee_ != nullptr) {
    delete assignee_;
  }
  assignee_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Task::assignee() const {
  const ::ric::tasks::ObjectId* p = assignee_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.assignee)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Task::release_assignee() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.assignee)
  
  ::ric::tasks::ObjectId* temp = assignee_;
  assignee_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Task::mutable_assignee() {
  
  if (assignee_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    assignee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.assignee)
  return assignee_;
}
inline void Task::set_allocated_assignee(::ric::tasks::ObjectId* assignee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assignee_;
  }
  if (assignee) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignee, submessage_arena);
    }
    
  } else {
    
  }
  assignee_ = assignee;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.assignee)
}

// string assignee_type = 22;
inline void Task::clear_assignee_type() {
  assignee_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::assignee_type() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.assignee_type)
  return assignee_type_.GetNoArena();
}
inline void Task::set_assignee_type(const ::std::string& value) {
  
  assignee_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Task.assignee_type)
}
#if LANG_CXX11
inline void Task::set_assignee_type(::std::string&& value) {
  
  assignee_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Task.assignee_type)
}
#endif
inline void Task::set_assignee_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assignee_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Task.assignee_type)
}
inline void Task::set_assignee_type(const char* value, size_t size) {
  
  assignee_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Task.assignee_type)
}
inline ::std::string* Task::mutable_assignee_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.assignee_type)
  return assignee_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_assignee_type() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.assignee_type)
  
  return assignee_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_assignee_type(::std::string* assignee_type) {
  if (assignee_type != nullptr) {
    
  } else {
    
  }
  assignee_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assignee_type);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.assignee_type)
}

// .ric.tasks.Review review = 23;
inline bool Task::has_review() const {
  return this != internal_default_instance() && review_ != nullptr;
}
inline void Task::clear_review() {
  if (GetArenaNoVirtual() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
}
inline const ::ric::tasks::Review& Task::review() const {
  const ::ric::tasks::Review* p = review_;
  // @@protoc_insertion_point(field_get:ric.tasks.Task.review)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Review*>(
      &::ric::tasks::_Review_default_instance_);
}
inline ::ric::tasks::Review* Task::release_review() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.review)
  
  ::ric::tasks::Review* temp = review_;
  review_ = nullptr;
  return temp;
}
inline ::ric::tasks::Review* Task::mutable_review() {
  
  if (review_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Review>(GetArenaNoVirtual());
    review_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.review)
  return review_;
}
inline void Task::set_allocated_review(::ric::tasks::Review* review) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete review_;
  }
  if (review) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      review = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, review, submessage_arena);
    }
    
  } else {
    
  }
  review_ = review;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.review)
}

// bytes json = 24;
inline void Task::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::json() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Task.json)
  return json_.GetNoArena();
}
inline void Task::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Task.json)
}
#if LANG_CXX11
inline void Task::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Task.json)
}
#endif
inline void Task::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Task.json)
}
inline void Task::set_json(const void* value, size_t size) {
  
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Task.json)
}
inline ::std::string* Task::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Task.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_json() {
  // @@protoc_insertion_point(field_release:ric.tasks.Task.json)
  
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Task.json)
}

// -------------------------------------------------------------------

// TaskEdit

// .ric.tasks.ObjectId owner = 1;
inline bool TaskEdit::has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline void TaskEdit::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
inline const ::ric::tasks::ObjectId& TaskEdit::owner() const {
  const ::ric::tasks::ObjectId* p = owner_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* TaskEdit::release_owner() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.owner)
  
  ::ric::tasks::ObjectId* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* TaskEdit::mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.owner)
  return owner_;
}
inline void TaskEdit::set_allocated_owner(::ric::tasks::ObjectId* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.owner)
}

// .ric.tasks.ObjectId group = 2;
inline bool TaskEdit::has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline void TaskEdit::clear_group() {
  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::ric::tasks::ObjectId& TaskEdit::group() const {
  const ::ric::tasks::ObjectId* p = group_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.group)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* TaskEdit::release_group() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.group)
  
  ::ric::tasks::ObjectId* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* TaskEdit::mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    group_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.group)
  return group_;
}
inline void TaskEdit::set_allocated_group(::ric::tasks::ObjectId* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.group)
}

// .ric.tasks.ObjectId parent = 3;
inline bool TaskEdit::has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline void TaskEdit::clear_parent() {
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::ric::tasks::ObjectId& TaskEdit::parent() const {
  const ::ric::tasks::ObjectId* p = parent_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.parent)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* TaskEdit::release_parent() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.parent)
  
  ::ric::tasks::ObjectId* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* TaskEdit::mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.parent)
  return parent_;
}
inline void TaskEdit::set_allocated_parent(::ric::tasks::ObjectId* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.parent)
}

// repeated string tags = 4;
inline int TaskEdit::tags_size() const {
  return tags_.size();
}
inline void TaskEdit::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& TaskEdit::tags(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.tags)
  return tags_.Get(index);
}
inline ::std::string* TaskEdit::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.tags)
  return tags_.Mutable(index);
}
inline void TaskEdit::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.tasks.TaskEdit.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TaskEdit::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.tasks.TaskEdit.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TaskEdit::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.tasks.TaskEdit.tags)
}
inline void TaskEdit::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.TaskEdit.tags)
}
inline ::std::string* TaskEdit::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ric.tasks.TaskEdit.tags)
  return tags_.Add();
}
inline void TaskEdit::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.tasks.TaskEdit.tags)
}
#if LANG_CXX11
inline void TaskEdit::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.tasks.TaskEdit.tags)
}
#endif
inline void TaskEdit::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.tasks.TaskEdit.tags)
}
inline void TaskEdit::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.tasks.TaskEdit.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TaskEdit::tags() const {
  // @@protoc_insertion_point(field_list:ric.tasks.TaskEdit.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TaskEdit::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.TaskEdit.tags)
  return &tags_;
}

// .ric.tasks.Task.Constrain constrain = 5;
inline void TaskEdit::clear_constrain() {
  constrain_ = 0;
}
inline ::ric::tasks::Task_Constrain TaskEdit::constrain() const {
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.constrain)
  return static_cast< ::ric::tasks::Task_Constrain >(constrain_);
}
inline void TaskEdit::set_constrain(::ric::tasks::Task_Constrain value) {
  
  constrain_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.TaskEdit.constrain)
}

// .google.protobuf.Int32Value priority = 6;
inline bool TaskEdit::has_priority() const {
  return this != internal_default_instance() && priority_ != nullptr;
}
inline const ::google::protobuf::Int32Value& TaskEdit::priority() const {
  const ::google::protobuf::Int32Value* p = priority_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.priority)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Int32Value*>(
      &::google::protobuf::_Int32Value_default_instance_);
}
inline ::google::protobuf::Int32Value* TaskEdit::release_priority() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.priority)
  
  ::google::protobuf::Int32Value* temp = priority_;
  priority_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int32Value* TaskEdit::mutable_priority() {
  
  if (priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int32Value>(GetArenaNoVirtual());
    priority_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.priority)
  return priority_;
}
inline void TaskEdit::set_allocated_priority(::google::protobuf::Int32Value* priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(priority_);
  }
  if (priority) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(priority)->GetArena();
    if (message_arena != submessage_arena) {
      priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    
  } else {
    
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.priority)
}

// .google.protobuf.StringValue name = 7;
inline bool TaskEdit::has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline const ::google::protobuf::StringValue& TaskEdit::name() const {
  const ::google::protobuf::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.name)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* TaskEdit::release_name() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* TaskEdit::mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.name)
  return name_;
}
inline void TaskEdit::set_allocated_name(::google::protobuf::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.name)
}

// .google.protobuf.StringValue description = 8;
inline bool TaskEdit::has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline const ::google::protobuf::StringValue& TaskEdit::description() const {
  const ::google::protobuf::StringValue* p = description_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.description)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* TaskEdit::release_description() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* TaskEdit::mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.description)
  return description_;
}
inline void TaskEdit::set_allocated_description(::google::protobuf::StringValue* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.description)
}

// .ric.tasks.ObjectId object = 9;
inline bool TaskEdit::has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline void TaskEdit::clear_object() {
  if (GetArenaNoVirtual() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
inline const ::ric::tasks::ObjectId& TaskEdit::object() const {
  const ::ric::tasks::ObjectId* p = object_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.object)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* TaskEdit::release_object() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.object)
  
  ::ric::tasks::ObjectId* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* TaskEdit::mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.object)
  return object_;
}
inline void TaskEdit::set_allocated_object(::ric::tasks::ObjectId* object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.object)
}

// .ric.tasks.ObjectId kind = 10;
inline bool TaskEdit::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void TaskEdit::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::ObjectId& TaskEdit::kind() const {
  const ::ric::tasks::ObjectId* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* TaskEdit::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.kind)
  
  ::ric::tasks::ObjectId* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* TaskEdit::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.kind)
  return kind_;
}
inline void TaskEdit::set_allocated_kind(::ric::tasks::ObjectId* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.kind)
}

// repeated .ric.tasks.ReportFormat report_format = 11;
inline int TaskEdit::report_format_size() const {
  return report_format_.size();
}
inline void TaskEdit::clear_report_format() {
  report_format_.Clear();
}
inline ::ric::tasks::ReportFormat* TaskEdit::mutable_report_format(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.report_format)
  return report_format_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >*
TaskEdit::mutable_report_format() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.TaskEdit.report_format)
  return &report_format_;
}
inline const ::ric::tasks::ReportFormat& TaskEdit::report_format(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.report_format)
  return report_format_.Get(index);
}
inline ::ric::tasks::ReportFormat* TaskEdit::add_report_format() {
  // @@protoc_insertion_point(field_add:ric.tasks.TaskEdit.report_format)
  return report_format_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >&
TaskEdit::report_format() const {
  // @@protoc_insertion_point(field_list:ric.tasks.TaskEdit.report_format)
  return report_format_;
}

// .ric.tasks.Location begin = 12;
inline bool TaskEdit::has_begin() const {
  return this != internal_default_instance() && begin_ != nullptr;
}
inline void TaskEdit::clear_begin() {
  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
}
inline const ::ric::tasks::Location& TaskEdit::begin() const {
  const ::ric::tasks::Location* p = begin_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.begin)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Location*>(
      &::ric::tasks::_Location_default_instance_);
}
inline ::ric::tasks::Location* TaskEdit::release_begin() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.begin)
  
  ::ric::tasks::Location* temp = begin_;
  begin_ = nullptr;
  return temp;
}
inline ::ric::tasks::Location* TaskEdit::mutable_begin() {
  
  if (begin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Location>(GetArenaNoVirtual());
    begin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.begin)
  return begin_;
}
inline void TaskEdit::set_allocated_begin(::ric::tasks::Location* begin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete begin_;
  }
  if (begin) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      begin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin, submessage_arena);
    }
    
  } else {
    
  }
  begin_ = begin;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.begin)
}

// .ric.tasks.Location end = 13;
inline bool TaskEdit::has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline void TaskEdit::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::ric::tasks::Location& TaskEdit::end() const {
  const ::ric::tasks::Location* p = end_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.end)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Location*>(
      &::ric::tasks::_Location_default_instance_);
}
inline ::ric::tasks::Location* TaskEdit::release_end() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.end)
  
  ::ric::tasks::Location* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::ric::tasks::Location* TaskEdit::mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Location>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.end)
  return end_;
}
inline void TaskEdit::set_allocated_end(::ric::tasks::Location* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.end)
}

// repeated .ric.tasks.Deadline deadlines = 14;
inline int TaskEdit::deadlines_size() const {
  return deadlines_.size();
}
inline void TaskEdit::clear_deadlines() {
  deadlines_.Clear();
}
inline ::ric::tasks::Deadline* TaskEdit::mutable_deadlines(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.deadlines)
  return deadlines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >*
TaskEdit::mutable_deadlines() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.TaskEdit.deadlines)
  return &deadlines_;
}
inline const ::ric::tasks::Deadline& TaskEdit::deadlines(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.deadlines)
  return deadlines_.Get(index);
}
inline ::ric::tasks::Deadline* TaskEdit::add_deadlines() {
  // @@protoc_insertion_point(field_add:ric.tasks.TaskEdit.deadlines)
  return deadlines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Deadline >&
TaskEdit::deadlines() const {
  // @@protoc_insertion_point(field_list:ric.tasks.TaskEdit.deadlines)
  return deadlines_;
}

// .ric.tasks.ObjectId assignee = 15;
inline bool TaskEdit::has_assignee() const {
  return this != internal_default_instance() && assignee_ != nullptr;
}
inline void TaskEdit::clear_assignee() {
  if (GetArenaNoVirtual() == nullptr && assignee_ != nullptr) {
    delete assignee_;
  }
  assignee_ = nullptr;
}
inline const ::ric::tasks::ObjectId& TaskEdit::assignee() const {
  const ::ric::tasks::ObjectId* p = assignee_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.assignee)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* TaskEdit::release_assignee() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.assignee)
  
  ::ric::tasks::ObjectId* temp = assignee_;
  assignee_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* TaskEdit::mutable_assignee() {
  
  if (assignee_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    assignee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.assignee)
  return assignee_;
}
inline void TaskEdit::set_allocated_assignee(::ric::tasks::ObjectId* assignee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assignee_;
  }
  if (assignee) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignee, submessage_arena);
    }
    
  } else {
    
  }
  assignee_ = assignee;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.assignee)
}

// .google.protobuf.StringValue assignee_type = 16;
inline bool TaskEdit::has_assignee_type() const {
  return this != internal_default_instance() && assignee_type_ != nullptr;
}
inline const ::google::protobuf::StringValue& TaskEdit::assignee_type() const {
  const ::google::protobuf::StringValue* p = assignee_type_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.assignee_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* TaskEdit::release_assignee_type() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.assignee_type)
  
  ::google::protobuf::StringValue* temp = assignee_type_;
  assignee_type_ = nullptr;
  return temp;
}
inline ::google::protobuf::StringValue* TaskEdit::mutable_assignee_type() {
  
  if (assignee_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    assignee_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.assignee_type)
  return assignee_type_;
}
inline void TaskEdit::set_allocated_assignee_type(::google::protobuf::StringValue* assignee_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(assignee_type_);
  }
  if (assignee_type) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(assignee_type)->GetArena();
    if (message_arena != submessage_arena) {
      assignee_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assignee_type, submessage_arena);
    }
    
  } else {
    
  }
  assignee_type_ = assignee_type;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.assignee_type)
}

// .ric.tasks.Review review = 17;
inline bool TaskEdit::has_review() const {
  return this != internal_default_instance() && review_ != nullptr;
}
inline void TaskEdit::clear_review() {
  if (GetArenaNoVirtual() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
}
inline const ::ric::tasks::Review& TaskEdit::review() const {
  const ::ric::tasks::Review* p = review_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.review)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Review*>(
      &::ric::tasks::_Review_default_instance_);
}
inline ::ric::tasks::Review* TaskEdit::release_review() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.review)
  
  ::ric::tasks::Review* temp = review_;
  review_ = nullptr;
  return temp;
}
inline ::ric::tasks::Review* TaskEdit::mutable_review() {
  
  if (review_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Review>(GetArenaNoVirtual());
    review_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.review)
  return review_;
}
inline void TaskEdit::set_allocated_review(::ric::tasks::Review* review) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete review_;
  }
  if (review) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      review = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, review, submessage_arena);
    }
    
  } else {
    
  }
  review_ = review;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.review)
}

// .google.protobuf.BytesValue json = 18;
inline bool TaskEdit::has_json() const {
  return this != internal_default_instance() && json_ != nullptr;
}
inline const ::google::protobuf::BytesValue& TaskEdit::json() const {
  const ::google::protobuf::BytesValue* p = json_;
  // @@protoc_insertion_point(field_get:ric.tasks.TaskEdit.json)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BytesValue*>(
      &::google::protobuf::_BytesValue_default_instance_);
}
inline ::google::protobuf::BytesValue* TaskEdit::release_json() {
  // @@protoc_insertion_point(field_release:ric.tasks.TaskEdit.json)
  
  ::google::protobuf::BytesValue* temp = json_;
  json_ = nullptr;
  return temp;
}
inline ::google::protobuf::BytesValue* TaskEdit::mutable_json() {
  
  if (json_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BytesValue>(GetArenaNoVirtual());
    json_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.TaskEdit.json)
  return json_;
}
inline void TaskEdit::set_allocated_json(::google::protobuf::BytesValue* json) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(json_);
  }
  if (json) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(json)->GetArena();
    if (message_arena != submessage_arena) {
      json = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, json, submessage_arena);
    }
    
  } else {
    
  }
  json_ = json;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.TaskEdit.json)
}

// -------------------------------------------------------------------

// Review

// .ric.tasks.ObjectId reviewer = 1;
inline bool Review::has_reviewer() const {
  return this != internal_default_instance() && reviewer_ != nullptr;
}
inline void Review::clear_reviewer() {
  if (GetArenaNoVirtual() == nullptr && reviewer_ != nullptr) {
    delete reviewer_;
  }
  reviewer_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Review::reviewer() const {
  const ::ric::tasks::ObjectId* p = reviewer_;
  // @@protoc_insertion_point(field_get:ric.tasks.Review.reviewer)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Review::release_reviewer() {
  // @@protoc_insertion_point(field_release:ric.tasks.Review.reviewer)
  
  ::ric::tasks::ObjectId* temp = reviewer_;
  reviewer_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Review::mutable_reviewer() {
  
  if (reviewer_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    reviewer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Review.reviewer)
  return reviewer_;
}
inline void Review::set_allocated_reviewer(::ric::tasks::ObjectId* reviewer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reviewer_;
  }
  if (reviewer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reviewer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reviewer, submessage_arena);
    }
    
  } else {
    
  }
  reviewer_ = reviewer;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Review.reviewer)
}

// int32 rating = 2;
inline void Review::clear_rating() {
  rating_ = 0;
}
inline ::google::protobuf::int32 Review::rating() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Review.rating)
  return rating_;
}
inline void Review::set_rating(::google::protobuf::int32 value) {
  
  rating_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Review.rating)
}

// string comment = 3;
inline void Review::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Review::comment() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Review.comment)
  return comment_.GetNoArena();
}
inline void Review::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Review.comment)
}
#if LANG_CXX11
inline void Review::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Review.comment)
}
#endif
inline void Review::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Review.comment)
}
inline void Review::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Review.comment)
}
inline ::std::string* Review::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Review.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Review::release_comment() {
  // @@protoc_insertion_point(field_release:ric.tasks.Review.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Review::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Review.comment)
}

// -------------------------------------------------------------------

// Deadline

// int64 timestamp = 1;
inline void Deadline::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Deadline::timestamp() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Deadline.timestamp)
  return timestamp_;
}
inline void Deadline::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Deadline.timestamp)
}

// .google.protobuf.Int64Value notify_until = 2;
inline bool Deadline::has_notify_until() const {
  return this != internal_default_instance() && notify_until_ != nullptr;
}
inline const ::google::protobuf::Int64Value& Deadline::notify_until() const {
  const ::google::protobuf::Int64Value* p = notify_until_;
  // @@protoc_insertion_point(field_get:ric.tasks.Deadline.notify_until)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Int64Value*>(
      &::google::protobuf::_Int64Value_default_instance_);
}
inline ::google::protobuf::Int64Value* Deadline::release_notify_until() {
  // @@protoc_insertion_point(field_release:ric.tasks.Deadline.notify_until)
  
  ::google::protobuf::Int64Value* temp = notify_until_;
  notify_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Int64Value* Deadline::mutable_notify_until() {
  
  if (notify_until_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaNoVirtual());
    notify_until_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Deadline.notify_until)
  return notify_until_;
}
inline void Deadline::set_allocated_notify_until(::google::protobuf::Int64Value* notify_until) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(notify_until_);
  }
  if (notify_until) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(notify_until)->GetArena();
    if (message_arena != submessage_arena) {
      notify_until = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notify_until, submessage_arena);
    }
    
  } else {
    
  }
  notify_until_ = notify_until;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Deadline.notify_until)
}

// .ric.tasks.Task.Status status = 3;
inline void Deadline::clear_status() {
  status_ = 0;
}
inline ::ric::tasks::Task_Status Deadline::status() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Deadline.status)
  return static_cast< ::ric::tasks::Task_Status >(status_);
}
inline void Deadline::set_status(::ric::tasks::Task_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.Deadline.status)
}

// -------------------------------------------------------------------

// ReportFormat

// string name = 1;
inline void ReportFormat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportFormat::name() const {
  // @@protoc_insertion_point(field_get:ric.tasks.ReportFormat.name)
  return name_.GetNoArena();
}
inline void ReportFormat::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.ReportFormat.name)
}
#if LANG_CXX11
inline void ReportFormat::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.ReportFormat.name)
}
#endif
inline void ReportFormat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.ReportFormat.name)
}
inline void ReportFormat::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.ReportFormat.name)
}
inline ::std::string* ReportFormat::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.ReportFormat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportFormat::release_name() {
  // @@protoc_insertion_point(field_release:ric.tasks.ReportFormat.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportFormat::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ReportFormat.name)
}

// .ric.tasks.ReportFormat.FieldType field = 2;
inline void ReportFormat::clear_field() {
  field_ = 0;
}
inline ::ric::tasks::ReportFormat_FieldType ReportFormat::field() const {
  // @@protoc_insertion_point(field_get:ric.tasks.ReportFormat.field)
  return static_cast< ::ric::tasks::ReportFormat_FieldType >(field_);
}
inline void ReportFormat::set_field(::ric::tasks::ReportFormat_FieldType value) {
  
  field_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.ReportFormat.field)
}

// .google.protobuf.BoolValue required = 5;
inline bool ReportFormat::has_required() const {
  return this != internal_default_instance() && required_ != nullptr;
}
inline const ::google::protobuf::BoolValue& ReportFormat::required() const {
  const ::google::protobuf::BoolValue* p = required_;
  // @@protoc_insertion_point(field_get:ric.tasks.ReportFormat.required)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* ReportFormat::release_required() {
  // @@protoc_insertion_point(field_release:ric.tasks.ReportFormat.required)
  
  ::google::protobuf::BoolValue* temp = required_;
  required_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* ReportFormat::mutable_required() {
  
  if (required_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    required_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.ReportFormat.required)
  return required_;
}
inline void ReportFormat::set_allocated_required(::google::protobuf::BoolValue* required) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(required_);
  }
  if (required) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(required)->GetArena();
    if (message_arena != submessage_arena) {
      required = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, required, submessage_arena);
    }
    
  } else {
    
  }
  required_ = required;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ReportFormat.required)
}

// -------------------------------------------------------------------

// Report

// string name = 1;
inline void Report::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Report::name() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Report.name)
  return name_.GetNoArena();
}
inline void Report::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Report.name)
}
#if LANG_CXX11
inline void Report::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Report.name)
}
#endif
inline void Report::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Report.name)
}
inline void Report::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Report.name)
}
inline ::std::string* Report::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Report.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_name() {
  // @@protoc_insertion_point(field_release:ric.tasks.Report.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Report.name)
}

// .google.protobuf.Any value = 2;
inline bool Report::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::google::protobuf::Any& Report::value() const {
  const ::google::protobuf::Any* p = value_;
  // @@protoc_insertion_point(field_get:ric.tasks.Report.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Report::release_value() {
  // @@protoc_insertion_point(field_release:ric.tasks.Report.value)
  
  ::google::protobuf::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Report::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Report.value)
  return value_;
}
inline void Report::set_allocated_value(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Report.value)
}

// -------------------------------------------------------------------

// Kind

// .ric.tasks.ObjectId oid = 1;
inline bool Kind::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void Kind::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& Kind::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.Kind.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* Kind::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.Kind.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* Kind::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.Kind.oid)
  return oid_;
}
inline void Kind::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Kind.oid)
}

// string name = 2;
inline void Kind::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kind::name() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Kind.name)
  return name_.GetNoArena();
}
inline void Kind::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Kind.name)
}
#if LANG_CXX11
inline void Kind::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Kind.name)
}
#endif
inline void Kind::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Kind.name)
}
inline void Kind::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Kind.name)
}
inline ::std::string* Kind::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Kind.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kind::release_name() {
  // @@protoc_insertion_point(field_release:ric.tasks.Kind.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kind::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Kind.name)
}

// string discription = 3;
inline void Kind::clear_discription() {
  discription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kind::discription() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Kind.discription)
  return discription_.GetNoArena();
}
inline void Kind::set_discription(const ::std::string& value) {
  
  discription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Kind.discription)
}
#if LANG_CXX11
inline void Kind::set_discription(::std::string&& value) {
  
  discription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Kind.discription)
}
#endif
inline void Kind::set_discription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  discription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Kind.discription)
}
inline void Kind::set_discription(const char* value, size_t size) {
  
  discription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Kind.discription)
}
inline ::std::string* Kind::mutable_discription() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Kind.discription)
  return discription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kind::release_discription() {
  // @@protoc_insertion_point(field_release:ric.tasks.Kind.discription)
  
  return discription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kind::set_allocated_discription(::std::string* discription) {
  if (discription != nullptr) {
    
  } else {
    
  }
  discription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discription);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Kind.discription)
}

// string svg = 4;
inline void Kind::clear_svg() {
  svg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kind::svg() const {
  // @@protoc_insertion_point(field_get:ric.tasks.Kind.svg)
  return svg_.GetNoArena();
}
inline void Kind::set_svg(const ::std::string& value) {
  
  svg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.Kind.svg)
}
#if LANG_CXX11
inline void Kind::set_svg(::std::string&& value) {
  
  svg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.Kind.svg)
}
#endif
inline void Kind::set_svg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  svg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.Kind.svg)
}
inline void Kind::set_svg(const char* value, size_t size) {
  
  svg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.Kind.svg)
}
inline ::std::string* Kind::mutable_svg() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.Kind.svg)
  return svg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kind::release_svg() {
  // @@protoc_insertion_point(field_release:ric.tasks.Kind.svg)
  
  return svg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kind::set_allocated_svg(::std::string* svg) {
  if (svg != nullptr) {
    
  } else {
    
  }
  svg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svg);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.Kind.svg)
}

// repeated .ric.tasks.ObjectId role = 5;
inline int Kind::role_size() const {
  return role_.size();
}
inline void Kind::clear_role() {
  role_.Clear();
}
inline ::ric::tasks::ObjectId* Kind::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Kind.role)
  return role_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::ObjectId >*
Kind::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Kind.role)
  return &role_;
}
inline const ::ric::tasks::ObjectId& Kind::role(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Kind.role)
  return role_.Get(index);
}
inline ::ric::tasks::ObjectId* Kind::add_role() {
  // @@protoc_insertion_point(field_add:ric.tasks.Kind.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ObjectId >&
Kind::role() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Kind.role)
  return role_;
}

// repeated .ric.tasks.ReportFormat report_format = 6;
inline int Kind::report_format_size() const {
  return report_format_.size();
}
inline void Kind::clear_report_format() {
  report_format_.Clear();
}
inline ::ric::tasks::ReportFormat* Kind::mutable_report_format(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.Kind.report_format)
  return report_format_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >*
Kind::mutable_report_format() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.Kind.report_format)
  return &report_format_;
}
inline const ::ric::tasks::ReportFormat& Kind::report_format(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.Kind.report_format)
  return report_format_.Get(index);
}
inline ::ric::tasks::ReportFormat* Kind::add_report_format() {
  // @@protoc_insertion_point(field_add:ric.tasks.Kind.report_format)
  return report_format_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::ReportFormat >&
Kind::report_format() const {
  // @@protoc_insertion_point(field_list:ric.tasks.Kind.report_format)
  return report_format_;
}

// -------------------------------------------------------------------

// CreateTaskRequest

// .ric.tasks.UserContext ctx = 1;
inline bool CreateTaskRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void CreateTaskRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& CreateTaskRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.CreateTaskRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* CreateTaskRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.CreateTaskRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* CreateTaskRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.CreateTaskRequest.ctx)
  return ctx_;
}
inline void CreateTaskRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.CreateTaskRequest.ctx)
}

// .ric.tasks.Task task = 2;
inline bool CreateTaskRequest::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void CreateTaskRequest::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::Task& CreateTaskRequest::task() const {
  const ::ric::tasks::Task* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.CreateTaskRequest.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Task*>(
      &::ric::tasks::_Task_default_instance_);
}
inline ::ric::tasks::Task* CreateTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.CreateTaskRequest.task)
  
  ::ric::tasks::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::Task* CreateTaskRequest::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.CreateTaskRequest.task)
  return task_;
}
inline void CreateTaskRequest::set_allocated_task(::ric::tasks::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.CreateTaskRequest.task)
}

// -------------------------------------------------------------------

// CreateTaskResponse

// .ric.tasks.Task task = 1;
inline bool CreateTaskResponse::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void CreateTaskResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::Task& CreateTaskResponse::task() const {
  const ::ric::tasks::Task* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.CreateTaskResponse.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Task*>(
      &::ric::tasks::_Task_default_instance_);
}
inline ::ric::tasks::Task* CreateTaskResponse::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.CreateTaskResponse.task)
  
  ::ric::tasks::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::Task* CreateTaskResponse::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.CreateTaskResponse.task)
  return task_;
}
inline void CreateTaskResponse::set_allocated_task(::ric::tasks::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.CreateTaskResponse.task)
}

// -------------------------------------------------------------------

// GetTaskRequest

// .ric.tasks.UserContext ctx = 1;
inline bool GetTaskRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void GetTaskRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& GetTaskRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.GetTaskRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* GetTaskRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.GetTaskRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* GetTaskRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.GetTaskRequest.ctx)
  return ctx_;
}
inline void GetTaskRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetTaskRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool GetTaskRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void GetTaskRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& GetTaskRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.GetTaskRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* GetTaskRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.GetTaskRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* GetTaskRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.GetTaskRequest.oid)
  return oid_;
}
inline void GetTaskRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetTaskRequest.oid)
}

// -------------------------------------------------------------------

// GetTaskResponse

// .ric.tasks.Task task = 1;
inline bool GetTaskResponse::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void GetTaskResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::Task& GetTaskResponse::task() const {
  const ::ric::tasks::Task* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.GetTaskResponse.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Task*>(
      &::ric::tasks::_Task_default_instance_);
}
inline ::ric::tasks::Task* GetTaskResponse::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.GetTaskResponse.task)
  
  ::ric::tasks::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::Task* GetTaskResponse::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.GetTaskResponse.task)
  return task_;
}
inline void GetTaskResponse::set_allocated_task(::ric::tasks::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetTaskResponse.task)
}

// -------------------------------------------------------------------

// DeleteTaskRequest

// .ric.tasks.UserContext ctx = 1;
inline bool DeleteTaskRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void DeleteTaskRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& DeleteTaskRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.DeleteTaskRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* DeleteTaskRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.DeleteTaskRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* DeleteTaskRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.DeleteTaskRequest.ctx)
  return ctx_;
}
inline void DeleteTaskRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.DeleteTaskRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool DeleteTaskRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void DeleteTaskRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& DeleteTaskRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.DeleteTaskRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* DeleteTaskRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.DeleteTaskRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* DeleteTaskRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.DeleteTaskRequest.oid)
  return oid_;
}
inline void DeleteTaskRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.DeleteTaskRequest.oid)
}

// -------------------------------------------------------------------

// DeleteTaskResponse

// -------------------------------------------------------------------

// UpdateTaskRequest

// .ric.tasks.UserContext ctx = 1;
inline bool UpdateTaskRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void UpdateTaskRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& UpdateTaskRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* UpdateTaskRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* UpdateTaskRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskRequest.ctx)
  return ctx_;
}
inline void UpdateTaskRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool UpdateTaskRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void UpdateTaskRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& UpdateTaskRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* UpdateTaskRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* UpdateTaskRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskRequest.oid)
  return oid_;
}
inline void UpdateTaskRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskRequest.oid)
}

// .ric.tasks.TaskEdit task = 3;
inline bool UpdateTaskRequest::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void UpdateTaskRequest::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::TaskEdit& UpdateTaskRequest::task() const {
  const ::ric::tasks::TaskEdit* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskRequest.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::TaskEdit*>(
      &::ric::tasks::_TaskEdit_default_instance_);
}
inline ::ric::tasks::TaskEdit* UpdateTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskRequest.task)
  
  ::ric::tasks::TaskEdit* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::TaskEdit* UpdateTaskRequest::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::TaskEdit>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskRequest.task)
  return task_;
}
inline void UpdateTaskRequest::set_allocated_task(::ric::tasks::TaskEdit* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskRequest.task)
}

// -------------------------------------------------------------------

// UpdateTaskResponse

// .ric.tasks.Task task = 1;
inline bool UpdateTaskResponse::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void UpdateTaskResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::Task& UpdateTaskResponse::task() const {
  const ::ric::tasks::Task* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskResponse.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Task*>(
      &::ric::tasks::_Task_default_instance_);
}
inline ::ric::tasks::Task* UpdateTaskResponse::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskResponse.task)
  
  ::ric::tasks::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::Task* UpdateTaskResponse::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskResponse.task)
  return task_;
}
inline void UpdateTaskResponse::set_allocated_task(::ric::tasks::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskResponse.task)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdateTaskOrderRequest

// .ric.tasks.UserContext ctx = 1;
inline bool UpdateTaskOrderRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void UpdateTaskOrderRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& UpdateTaskOrderRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskOrderRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* UpdateTaskOrderRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskOrderRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* UpdateTaskOrderRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskOrderRequest.ctx)
  return ctx_;
}
inline void UpdateTaskOrderRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskOrderRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool UpdateTaskOrderRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void UpdateTaskOrderRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& UpdateTaskOrderRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskOrderRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* UpdateTaskOrderRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskOrderRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* UpdateTaskOrderRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskOrderRequest.oid)
  return oid_;
}
inline void UpdateTaskOrderRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskOrderRequest.oid)
}

// map<string, int32> positions = 3;
inline int UpdateTaskOrderRequest::positions_size() const {
  return positions_.size();
}
inline void UpdateTaskOrderRequest::clear_positions() {
  positions_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
UpdateTaskOrderRequest::positions() const {
  // @@protoc_insertion_point(field_map:ric.tasks.UpdateTaskOrderRequest.positions)
  return positions_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
UpdateTaskOrderRequest::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_map:ric.tasks.UpdateTaskOrderRequest.positions)
  return positions_.MutableMap();
}

// -------------------------------------------------------------------

// UpdateTaskOrderResponse

// .ric.tasks.Task task = 1;
inline bool UpdateTaskOrderResponse::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void UpdateTaskOrderResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::Task& UpdateTaskOrderResponse::task() const {
  const ::ric::tasks::Task* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateTaskOrderResponse.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Task*>(
      &::ric::tasks::_Task_default_instance_);
}
inline ::ric::tasks::Task* UpdateTaskOrderResponse::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateTaskOrderResponse.task)
  
  ::ric::tasks::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::Task* UpdateTaskOrderResponse::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateTaskOrderResponse.task)
  return task_;
}
inline void UpdateTaskOrderResponse::set_allocated_task(::ric::tasks::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateTaskOrderResponse.task)
}

// -------------------------------------------------------------------

// ChangeTaskStatusRequest

// .ric.tasks.UserContext ctx = 1;
inline bool ChangeTaskStatusRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void ChangeTaskStatusRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& ChangeTaskStatusRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* ChangeTaskStatusRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.ChangeTaskStatusRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* ChangeTaskStatusRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusRequest.ctx)
  return ctx_;
}
inline void ChangeTaskStatusRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ChangeTaskStatusRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool ChangeTaskStatusRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void ChangeTaskStatusRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& ChangeTaskStatusRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* ChangeTaskStatusRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.ChangeTaskStatusRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* ChangeTaskStatusRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusRequest.oid)
  return oid_;
}
inline void ChangeTaskStatusRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ChangeTaskStatusRequest.oid)
}

// .ric.tasks.Task.Status new_status = 3;
inline void ChangeTaskStatusRequest::clear_new_status() {
  new_status_ = 0;
}
inline ::ric::tasks::Task_Status ChangeTaskStatusRequest::new_status() const {
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.new_status)
  return static_cast< ::ric::tasks::Task_Status >(new_status_);
}
inline void ChangeTaskStatusRequest::set_new_status(::ric::tasks::Task_Status value) {
  
  new_status_ = value;
  // @@protoc_insertion_point(field_set:ric.tasks.ChangeTaskStatusRequest.new_status)
}

// .ric.tasks.Location location = 4;
inline bool ChangeTaskStatusRequest::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline void ChangeTaskStatusRequest::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::ric::tasks::Location& ChangeTaskStatusRequest::location() const {
  const ::ric::tasks::Location* p = location_;
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Location*>(
      &::ric::tasks::_Location_default_instance_);
}
inline ::ric::tasks::Location* ChangeTaskStatusRequest::release_location() {
  // @@protoc_insertion_point(field_release:ric.tasks.ChangeTaskStatusRequest.location)
  
  ::ric::tasks::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::ric::tasks::Location* ChangeTaskStatusRequest::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusRequest.location)
  return location_;
}
inline void ChangeTaskStatusRequest::set_allocated_location(::ric::tasks::Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ChangeTaskStatusRequest.location)
}

// .google.protobuf.BoolValue success = 5;
inline bool ChangeTaskStatusRequest::has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline const ::google::protobuf::BoolValue& ChangeTaskStatusRequest::success() const {
  const ::google::protobuf::BoolValue* p = success_;
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.success)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* ChangeTaskStatusRequest::release_success() {
  // @@protoc_insertion_point(field_release:ric.tasks.ChangeTaskStatusRequest.success)
  
  ::google::protobuf::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* ChangeTaskStatusRequest::mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    success_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusRequest.success)
  return success_;
}
inline void ChangeTaskStatusRequest::set_allocated_success(::google::protobuf::BoolValue* success) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(success_);
  }
  if (success) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(success)->GetArena();
    if (message_arena != submessage_arena) {
      success = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ChangeTaskStatusRequest.success)
}

// string comment = 6;
inline void ChangeTaskStatusRequest::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeTaskStatusRequest::comment() const {
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.comment)
  return comment_.GetNoArena();
}
inline void ChangeTaskStatusRequest::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.tasks.ChangeTaskStatusRequest.comment)
}
#if LANG_CXX11
inline void ChangeTaskStatusRequest::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.tasks.ChangeTaskStatusRequest.comment)
}
#endif
inline void ChangeTaskStatusRequest::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.tasks.ChangeTaskStatusRequest.comment)
}
inline void ChangeTaskStatusRequest::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.tasks.ChangeTaskStatusRequest.comment)
}
inline ::std::string* ChangeTaskStatusRequest::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusRequest.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeTaskStatusRequest::release_comment() {
  // @@protoc_insertion_point(field_release:ric.tasks.ChangeTaskStatusRequest.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeTaskStatusRequest::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ChangeTaskStatusRequest.comment)
}

// repeated .ric.tasks.Report report = 7;
inline int ChangeTaskStatusRequest::report_size() const {
  return report_.size();
}
inline void ChangeTaskStatusRequest::clear_report() {
  report_.Clear();
}
inline ::ric::tasks::Report* ChangeTaskStatusRequest::mutable_report(int index) {
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusRequest.report)
  return report_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >*
ChangeTaskStatusRequest::mutable_report() {
  // @@protoc_insertion_point(field_mutable_list:ric.tasks.ChangeTaskStatusRequest.report)
  return &report_;
}
inline const ::ric::tasks::Report& ChangeTaskStatusRequest::report(int index) const {
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusRequest.report)
  return report_.Get(index);
}
inline ::ric::tasks::Report* ChangeTaskStatusRequest::add_report() {
  // @@protoc_insertion_point(field_add:ric.tasks.ChangeTaskStatusRequest.report)
  return report_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::tasks::Report >&
ChangeTaskStatusRequest::report() const {
  // @@protoc_insertion_point(field_list:ric.tasks.ChangeTaskStatusRequest.report)
  return report_;
}

// -------------------------------------------------------------------

// ChangeTaskStatusResponse

// .ric.tasks.Task task = 1;
inline bool ChangeTaskStatusResponse::has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline void ChangeTaskStatusResponse::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::ric::tasks::Task& ChangeTaskStatusResponse::task() const {
  const ::ric::tasks::Task* p = task_;
  // @@protoc_insertion_point(field_get:ric.tasks.ChangeTaskStatusResponse.task)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Task*>(
      &::ric::tasks::_Task_default_instance_);
}
inline ::ric::tasks::Task* ChangeTaskStatusResponse::release_task() {
  // @@protoc_insertion_point(field_release:ric.tasks.ChangeTaskStatusResponse.task)
  
  ::ric::tasks::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::ric::tasks::Task* ChangeTaskStatusResponse::mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.ChangeTaskStatusResponse.task)
  return task_;
}
inline void ChangeTaskStatusResponse::set_allocated_task(::ric::tasks::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.ChangeTaskStatusResponse.task)
}

// -------------------------------------------------------------------

// CreateKindRequest

// .ric.tasks.UserContext ctx = 1;
inline bool CreateKindRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void CreateKindRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& CreateKindRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.CreateKindRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* CreateKindRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.CreateKindRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* CreateKindRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.CreateKindRequest.ctx)
  return ctx_;
}
inline void CreateKindRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.CreateKindRequest.ctx)
}

// .ric.tasks.Kind kind = 2;
inline bool CreateKindRequest::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void CreateKindRequest::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::Kind& CreateKindRequest::kind() const {
  const ::ric::tasks::Kind* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.CreateKindRequest.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Kind*>(
      &::ric::tasks::_Kind_default_instance_);
}
inline ::ric::tasks::Kind* CreateKindRequest::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.CreateKindRequest.kind)
  
  ::ric::tasks::Kind* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::Kind* CreateKindRequest::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Kind>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.CreateKindRequest.kind)
  return kind_;
}
inline void CreateKindRequest::set_allocated_kind(::ric::tasks::Kind* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.CreateKindRequest.kind)
}

// -------------------------------------------------------------------

// CreateKindResponse

// .ric.tasks.Kind kind = 1;
inline bool CreateKindResponse::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void CreateKindResponse::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::Kind& CreateKindResponse::kind() const {
  const ::ric::tasks::Kind* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.CreateKindResponse.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Kind*>(
      &::ric::tasks::_Kind_default_instance_);
}
inline ::ric::tasks::Kind* CreateKindResponse::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.CreateKindResponse.kind)
  
  ::ric::tasks::Kind* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::Kind* CreateKindResponse::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Kind>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.CreateKindResponse.kind)
  return kind_;
}
inline void CreateKindResponse::set_allocated_kind(::ric::tasks::Kind* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.CreateKindResponse.kind)
}

// -------------------------------------------------------------------

// GetKindRequest

// .ric.tasks.UserContext ctx = 1;
inline bool GetKindRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void GetKindRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& GetKindRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.GetKindRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* GetKindRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.GetKindRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* GetKindRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.GetKindRequest.ctx)
  return ctx_;
}
inline void GetKindRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetKindRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool GetKindRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void GetKindRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& GetKindRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.GetKindRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* GetKindRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.GetKindRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* GetKindRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.GetKindRequest.oid)
  return oid_;
}
inline void GetKindRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetKindRequest.oid)
}

// -------------------------------------------------------------------

// GetKindResponse

// .ric.tasks.Kind kind = 1;
inline bool GetKindResponse::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void GetKindResponse::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::Kind& GetKindResponse::kind() const {
  const ::ric::tasks::Kind* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.GetKindResponse.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Kind*>(
      &::ric::tasks::_Kind_default_instance_);
}
inline ::ric::tasks::Kind* GetKindResponse::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.GetKindResponse.kind)
  
  ::ric::tasks::Kind* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::Kind* GetKindResponse::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Kind>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.GetKindResponse.kind)
  return kind_;
}
inline void GetKindResponse::set_allocated_kind(::ric::tasks::Kind* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.GetKindResponse.kind)
}

// -------------------------------------------------------------------

// UpdateKindRequest

// .ric.tasks.UserContext ctx = 1;
inline bool UpdateKindRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void UpdateKindRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& UpdateKindRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateKindRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* UpdateKindRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateKindRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* UpdateKindRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateKindRequest.ctx)
  return ctx_;
}
inline void UpdateKindRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateKindRequest.ctx)
}

// .ric.tasks.Kind kind = 2;
inline bool UpdateKindRequest::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void UpdateKindRequest::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::Kind& UpdateKindRequest::kind() const {
  const ::ric::tasks::Kind* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateKindRequest.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Kind*>(
      &::ric::tasks::_Kind_default_instance_);
}
inline ::ric::tasks::Kind* UpdateKindRequest::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateKindRequest.kind)
  
  ::ric::tasks::Kind* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::Kind* UpdateKindRequest::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Kind>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateKindRequest.kind)
  return kind_;
}
inline void UpdateKindRequest::set_allocated_kind(::ric::tasks::Kind* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateKindRequest.kind)
}

// -------------------------------------------------------------------

// UpdateKindResponse

// .ric.tasks.Kind kind = 1;
inline bool UpdateKindResponse::has_kind() const {
  return this != internal_default_instance() && kind_ != nullptr;
}
inline void UpdateKindResponse::clear_kind() {
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
}
inline const ::ric::tasks::Kind& UpdateKindResponse::kind() const {
  const ::ric::tasks::Kind* p = kind_;
  // @@protoc_insertion_point(field_get:ric.tasks.UpdateKindResponse.kind)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::Kind*>(
      &::ric::tasks::_Kind_default_instance_);
}
inline ::ric::tasks::Kind* UpdateKindResponse::release_kind() {
  // @@protoc_insertion_point(field_release:ric.tasks.UpdateKindResponse.kind)
  
  ::ric::tasks::Kind* temp = kind_;
  kind_ = nullptr;
  return temp;
}
inline ::ric::tasks::Kind* UpdateKindResponse::mutable_kind() {
  
  if (kind_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::Kind>(GetArenaNoVirtual());
    kind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.UpdateKindResponse.kind)
  return kind_;
}
inline void UpdateKindResponse::set_allocated_kind(::ric::tasks::Kind* kind) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kind_;
  }
  if (kind) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kind = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kind, submessage_arena);
    }
    
  } else {
    
  }
  kind_ = kind;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.UpdateKindResponse.kind)
}

// -------------------------------------------------------------------

// DeleteKindRequest

// .ric.tasks.UserContext ctx = 1;
inline bool DeleteKindRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void DeleteKindRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::tasks::UserContext& DeleteKindRequest::ctx() const {
  const ::ric::tasks::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.tasks.DeleteKindRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::UserContext*>(
      &::ric::tasks::_UserContext_default_instance_);
}
inline ::ric::tasks::UserContext* DeleteKindRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.tasks.DeleteKindRequest.ctx)
  
  ::ric::tasks::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::tasks::UserContext* DeleteKindRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.DeleteKindRequest.ctx)
  return ctx_;
}
inline void DeleteKindRequest::set_allocated_ctx(::ric::tasks::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.DeleteKindRequest.ctx)
}

// .ric.tasks.ObjectId oid = 2;
inline bool DeleteKindRequest::has_oid() const {
  return this != internal_default_instance() && oid_ != nullptr;
}
inline void DeleteKindRequest::clear_oid() {
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
}
inline const ::ric::tasks::ObjectId& DeleteKindRequest::oid() const {
  const ::ric::tasks::ObjectId* p = oid_;
  // @@protoc_insertion_point(field_get:ric.tasks.DeleteKindRequest.oid)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::tasks::ObjectId*>(
      &::ric::tasks::_ObjectId_default_instance_);
}
inline ::ric::tasks::ObjectId* DeleteKindRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.tasks.DeleteKindRequest.oid)
  
  ::ric::tasks::ObjectId* temp = oid_;
  oid_ = nullptr;
  return temp;
}
inline ::ric::tasks::ObjectId* DeleteKindRequest::mutable_oid() {
  
  if (oid_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::tasks::ObjectId>(GetArenaNoVirtual());
    oid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.tasks.DeleteKindRequest.oid)
  return oid_;
}
inline void DeleteKindRequest::set_allocated_oid(::ric::tasks::ObjectId* oid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oid_;
  }
  if (oid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oid, submessage_arena);
    }
    
  } else {
    
  }
  oid_ = oid;
  // @@protoc_insertion_point(field_set_allocated:ric.tasks.DeleteKindRequest.oid)
}

// -------------------------------------------------------------------

// DeleteKindResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tasks
}  // namespace ric

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ric::tasks::Task_Constrain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::tasks::Task_Constrain>() {
  return ::ric::tasks::Task_Constrain_descriptor();
}
template <> struct is_proto_enum< ::ric::tasks::Task_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::tasks::Task_Status>() {
  return ::ric::tasks::Task_Status_descriptor();
}
template <> struct is_proto_enum< ::ric::tasks::ReportFormat_FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::tasks::ReportFormat_FieldType>() {
  return ::ric::tasks::ReportFormat_FieldType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dtasks_2frictasks_2eproto
