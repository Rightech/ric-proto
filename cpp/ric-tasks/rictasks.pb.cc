// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-tasks/rictasks.proto

#include "ric-tasks/rictasks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BytesValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Deadline_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Location_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Report_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Review_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UserContext_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Kind_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_KindEdit_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Task_ric_2dtasks_2frictasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dtasks_2frictasks_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_TaskEdit_ric_2dtasks_2frictasks_2eproto;
namespace ric {
namespace tasks {
class ObjectIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectId> _instance;
} _ObjectId_default_instance_;
class UserContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserContext> _instance;
} _UserContext_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class IndoorLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndoorLocation> _instance;
} _IndoorLocation_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class TaskEditDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskEdit> _instance;
} _TaskEdit_default_instance_;
class ReviewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Review> _instance;
} _Review_default_instance_;
class DeadlineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deadline> _instance;
} _Deadline_default_instance_;
class ReportTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportTemplate> _instance;
} _ReportTemplate_default_instance_;
class ReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Report> _instance;
} _Report_default_instance_;
class KindDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Kind> _instance;
} _Kind_default_instance_;
class KindEditDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KindEdit> _instance;
} _KindEdit_default_instance_;
class CreateTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateTaskRequest> _instance;
} _CreateTaskRequest_default_instance_;
class CreateTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateTaskResponse> _instance;
} _CreateTaskResponse_default_instance_;
class GetTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTaskRequest> _instance;
} _GetTaskRequest_default_instance_;
class GetTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTaskResponse> _instance;
} _GetTaskResponse_default_instance_;
class DeleteTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTaskRequest> _instance;
} _DeleteTaskRequest_default_instance_;
class DeleteTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTaskResponse> _instance;
} _DeleteTaskResponse_default_instance_;
class UpdateTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTaskRequest> _instance;
} _UpdateTaskRequest_default_instance_;
class UpdateTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTaskResponse> _instance;
} _UpdateTaskResponse_default_instance_;
class UpdateTaskOrderRequest_PositionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTaskOrderRequest_PositionsEntry_DoNotUse> _instance;
} _UpdateTaskOrderRequest_PositionsEntry_DoNotUse_default_instance_;
class UpdateTaskOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTaskOrderRequest> _instance;
} _UpdateTaskOrderRequest_default_instance_;
class UpdateTaskOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTaskOrderResponse> _instance;
} _UpdateTaskOrderResponse_default_instance_;
class ChangeTaskStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeTaskStatusRequest> _instance;
} _ChangeTaskStatusRequest_default_instance_;
class ChangeTaskStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeTaskStatusResponse> _instance;
} _ChangeTaskStatusResponse_default_instance_;
class CreateKindRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateKindRequest> _instance;
} _CreateKindRequest_default_instance_;
class CreateKindResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateKindResponse> _instance;
} _CreateKindResponse_default_instance_;
class GetKindRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetKindRequest> _instance;
} _GetKindRequest_default_instance_;
class GetKindResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetKindResponse> _instance;
} _GetKindResponse_default_instance_;
class UpdateKindRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateKindRequest> _instance;
} _UpdateKindRequest_default_instance_;
class UpdateKindResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateKindResponse> _instance;
} _UpdateKindResponse_default_instance_;
class DeleteKindRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteKindRequest> _instance;
} _DeleteKindRequest_default_instance_;
class DeleteKindResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteKindResponse> _instance;
} _DeleteKindResponse_default_instance_;
}  // namespace tasks
}  // namespace ric
static void InitDefaultsObjectId_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ObjectId_default_instance_;
    new (ptr) ::ric::tasks::ObjectId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ObjectId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObjectId_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsUserContext_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UserContext_default_instance_;
    new (ptr) ::ric::tasks::UserContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UserContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserContext_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserContext_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsLocation_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Location_default_instance_;
    new (ptr) ::ric::tasks::Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Location_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocation_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsIndoorLocation_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_IndoorLocation_default_instance_;
    new (ptr) ::ric::tasks::IndoorLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::IndoorLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndoorLocation_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsTask_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Task_default_instance_;
    new (ptr) ::ric::tasks::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Task_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsTask_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Report_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Review_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsTaskEdit_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_TaskEdit_default_instance_;
    new (ptr) ::ric::tasks::TaskEdit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::TaskEdit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_TaskEdit_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsTaskEdit_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Review_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_BytesValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsReview_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Review_default_instance_;
    new (ptr) ::ric::tasks::Review();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Review::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Review_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReview_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeadline_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Deadline_default_instance_;
    new (ptr) ::ric::tasks::Deadline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Deadline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Deadline_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeadline_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsReportTemplate_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ReportTemplate_default_instance_;
    new (ptr) ::ric::tasks::ReportTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ReportTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportTemplate_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsReport_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Report_default_instance_;
    new (ptr) ::ric::tasks::Report();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Report::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Report_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReport_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsKind_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_Kind_default_instance_;
    new (ptr) ::ric::tasks::Kind();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::Kind::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Kind_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsKind_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsKindEdit_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_KindEdit_default_instance_;
    new (ptr) ::ric::tasks::KindEdit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::KindEdit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_KindEdit_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsKindEdit_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsCreateTaskRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_CreateTaskRequest_default_instance_;
    new (ptr) ::ric::tasks::CreateTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::CreateTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateTaskRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateTaskRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsCreateTaskResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_CreateTaskResponse_default_instance_;
    new (ptr) ::ric::tasks::CreateTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::CreateTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateTaskResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateTaskResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsGetTaskRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_GetTaskRequest_default_instance_;
    new (ptr) ::ric::tasks::GetTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::GetTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetTaskRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetTaskRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsGetTaskResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_GetTaskResponse_default_instance_;
    new (ptr) ::ric::tasks::GetTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::GetTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTaskResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTaskResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeleteTaskRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_DeleteTaskRequest_default_instance_;
    new (ptr) ::ric::tasks::DeleteTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::DeleteTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DeleteTaskRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDeleteTaskRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeleteTaskResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_DeleteTaskResponse_default_instance_;
    new (ptr) ::ric::tasks::DeleteTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::DeleteTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTaskResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteTaskResponse_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsUpdateTaskRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateTaskRequest_default_instance_;
    new (ptr) ::ric::tasks::UpdateTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateTaskRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateTaskRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_TaskEdit_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateTaskResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateTaskResponse_default_instance_;
    new (ptr) ::ric::tasks::UpdateTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateTaskResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateTaskResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateTaskOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse();
  }
  ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateTaskOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto}, {}};

static void InitDefaultsUpdateTaskOrderRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateTaskOrderRequest_default_instance_;
    new (ptr) ::ric::tasks::UpdateTaskOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateTaskOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateTaskOrderRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateTaskOrderRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateTaskOrderResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateTaskOrderResponse_default_instance_;
    new (ptr) ::ric::tasks::UpdateTaskOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateTaskOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateTaskOrderResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateTaskOrderResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsChangeTaskStatusRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ChangeTaskStatusRequest_default_instance_;
    new (ptr) ::ric::tasks::ChangeTaskStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ChangeTaskStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ChangeTaskStatusRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsChangeTaskStatusRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Report_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsChangeTaskStatusResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_ChangeTaskStatusResponse_default_instance_;
    new (ptr) ::ric::tasks::ChangeTaskStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::ChangeTaskStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChangeTaskStatusResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChangeTaskStatusResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsCreateKindRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_CreateKindRequest_default_instance_;
    new (ptr) ::ric::tasks::CreateKindRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::CreateKindRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateKindRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateKindRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsCreateKindResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_CreateKindResponse_default_instance_;
    new (ptr) ::ric::tasks::CreateKindResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::CreateKindResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateKindResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateKindResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsGetKindRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_GetKindRequest_default_instance_;
    new (ptr) ::ric::tasks::GetKindRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::GetKindRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetKindRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetKindRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsGetKindResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_GetKindResponse_default_instance_;
    new (ptr) ::ric::tasks::GetKindResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::GetKindResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetKindResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetKindResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateKindRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateKindRequest_default_instance_;
    new (ptr) ::ric::tasks::UpdateKindRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateKindRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateKindRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateKindRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_KindEdit_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsUpdateKindResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_UpdateKindResponse_default_instance_;
    new (ptr) ::ric::tasks::UpdateKindResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::UpdateKindResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateKindResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateKindResponse_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeleteKindRequest_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_DeleteKindRequest_default_instance_;
    new (ptr) ::ric::tasks::DeleteKindRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::DeleteKindRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DeleteKindRequest_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDeleteKindRequest_ric_2dtasks_2frictasks_2eproto}, {
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base,
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base,}};

static void InitDefaultsDeleteKindResponse_ric_2dtasks_2frictasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::tasks::_DeleteKindResponse_default_instance_;
    new (ptr) ::ric::tasks::DeleteKindResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::tasks::DeleteKindResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteKindResponse_ric_2dtasks_2frictasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteKindResponse_ric_2dtasks_2frictasks_2eproto}, {}};

void InitDefaults_ric_2dtasks_2frictasks_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Location_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Task_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskEdit_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Review_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Report_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KindEdit_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTaskOrderRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTaskOrderResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeTaskStatusRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeTaskStatusResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteKindResponse_ric_2dtasks_2frictasks_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dtasks_2frictasks_2eproto[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dtasks_2frictasks_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dtasks_2frictasks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ObjectId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, group_id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, user_id_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UserContext, span_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, lat_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, lng_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, radius_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, address_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Location, indoor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, x_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, y_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, z_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::IndoorLocation, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, owner_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, group_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, parent_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, subtasks_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, tags_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, constrain_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, priority_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, created_at_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, description_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, status_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, object_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, kind_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, report_templates_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, reports_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, begin_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, end_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, deadlines_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, success_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, assignee_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, assignee_type_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, review_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Task, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, owner_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, group_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, parent_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, tags_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, constrain_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, priority_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, description_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, object_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, kind_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, report_templates_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, begin_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, end_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, deadlines_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, assignee_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, assignee_type_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, review_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::TaskEdit, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Review, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Review, reviewer_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Review, rating_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Review, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, notify_until_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Deadline, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ReportTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ReportTemplate, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ReportTemplate, field_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ReportTemplate, required_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Report, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Report, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, discription_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, svg_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, roles_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::Kind, report_templates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::KindEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::KindEdit, name_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::KindEdit, discription_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::KindEdit, svg_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::KindEdit, roles_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::KindEdit, report_templates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateTaskRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateTaskRequest, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateTaskResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetTaskRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetTaskRequest, oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetTaskResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteTaskRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteTaskRequest, oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskRequest, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskRequest, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskResponse, task_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderRequest, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateTaskOrderResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, new_status_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, location_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, success_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, comment_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusRequest, report_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::ChangeTaskStatusResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateKindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateKindRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateKindRequest, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateKindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::CreateKindResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetKindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetKindRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetKindRequest, oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetKindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::GetKindResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateKindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateKindRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateKindRequest, oid_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateKindRequest, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateKindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::UpdateKindResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteKindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteKindRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteKindRequest, oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::tasks::DeleteKindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::tasks::ObjectId)},
  { 6, -1, sizeof(::ric::tasks::UserContext)},
  { 14, -1, sizeof(::ric::tasks::Location)},
  { 24, -1, sizeof(::ric::tasks::IndoorLocation)},
  { 33, -1, sizeof(::ric::tasks::Task)},
  { 62, -1, sizeof(::ric::tasks::TaskEdit)},
  { 85, -1, sizeof(::ric::tasks::Review)},
  { 93, -1, sizeof(::ric::tasks::Deadline)},
  { 101, -1, sizeof(::ric::tasks::ReportTemplate)},
  { 109, -1, sizeof(::ric::tasks::Report)},
  { 116, -1, sizeof(::ric::tasks::Kind)},
  { 127, -1, sizeof(::ric::tasks::KindEdit)},
  { 137, -1, sizeof(::ric::tasks::CreateTaskRequest)},
  { 144, -1, sizeof(::ric::tasks::CreateTaskResponse)},
  { 150, -1, sizeof(::ric::tasks::GetTaskRequest)},
  { 157, -1, sizeof(::ric::tasks::GetTaskResponse)},
  { 163, -1, sizeof(::ric::tasks::DeleteTaskRequest)},
  { 170, -1, sizeof(::ric::tasks::DeleteTaskResponse)},
  { 175, -1, sizeof(::ric::tasks::UpdateTaskRequest)},
  { 183, -1, sizeof(::ric::tasks::UpdateTaskResponse)},
  { 189, 196, sizeof(::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse)},
  { 198, -1, sizeof(::ric::tasks::UpdateTaskOrderRequest)},
  { 206, -1, sizeof(::ric::tasks::UpdateTaskOrderResponse)},
  { 212, -1, sizeof(::ric::tasks::ChangeTaskStatusRequest)},
  { 224, -1, sizeof(::ric::tasks::ChangeTaskStatusResponse)},
  { 230, -1, sizeof(::ric::tasks::CreateKindRequest)},
  { 237, -1, sizeof(::ric::tasks::CreateKindResponse)},
  { 243, -1, sizeof(::ric::tasks::GetKindRequest)},
  { 250, -1, sizeof(::ric::tasks::GetKindResponse)},
  { 256, -1, sizeof(::ric::tasks::UpdateKindRequest)},
  { 264, -1, sizeof(::ric::tasks::UpdateKindResponse)},
  { 270, -1, sizeof(::ric::tasks::DeleteKindRequest)},
  { 277, -1, sizeof(::ric::tasks::DeleteKindResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ObjectId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UserContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_IndoorLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_TaskEdit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Review_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Deadline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ReportTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_Kind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_KindEdit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_CreateTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_CreateTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_GetTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_GetTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_DeleteTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_DeleteTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateTaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateTaskOrderRequest_PositionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateTaskOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateTaskOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ChangeTaskStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_ChangeTaskStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_CreateKindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_CreateKindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_GetKindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_GetKindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateKindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_UpdateKindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_DeleteKindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::tasks::_DeleteKindResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dtasks_2frictasks_2eproto = {
  {}, AddDescriptors_ric_2dtasks_2frictasks_2eproto, "ric-tasks/rictasks.proto", schemas,
  file_default_instances, TableStruct_ric_2dtasks_2frictasks_2eproto::offsets,
  file_level_metadata_ric_2dtasks_2frictasks_2eproto, 33, file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto, file_level_service_descriptors_ric_2dtasks_2frictasks_2eproto,
};

const char descriptor_table_protodef_ric_2dtasks_2frictasks_2eproto[] =
  "\n\030ric-tasks/rictasks.proto\022\tric.tasks\032\031g"
  "oogle/protobuf/any.proto\032\036google/protobu"
  "f/wrappers.proto\"\026\n\010ObjectId\022\n\n\002id\030\001 \001(\t"
  "\"k\n\013UserContext\022%\n\010group_id\030\001 \001(\0132\023.ric."
  "tasks.ObjectId\022$\n\007user_id\030\002 \001(\0132\023.ric.ta"
  "sks.ObjectId\022\017\n\007span_id\030\003 \001(\t\"p\n\010Locatio"
  "n\022\013\n\003lat\030\001 \001(\001\022\013\n\003lng\030\002 \001(\001\022\016\n\006radius\030\003 "
  "\001(\001\022\017\n\007address\030\004 \001(\t\022)\n\006indoor\030\005 \001(\0132\031.r"
  "ic.tasks.IndoorLocation\"A\n\016IndoorLocatio"
  "n\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\016\n\006ra"
  "dius\030\004 \001(\001\"\221\007\n\004Task\022 \n\003oid\030\001 \001(\0132\023.ric.t"
  "asks.ObjectId\022\"\n\005owner\030\002 \001(\0132\023.ric.tasks"
  ".ObjectId\022\"\n\005group\030\003 \001(\0132\023.ric.tasks.Obj"
  "ectId\022#\n\006parent\030\004 \001(\0132\023.ric.tasks.Object"
  "Id\022!\n\010subtasks\030\005 \003(\0132\017.ric.tasks.Task\022\014\n"
  "\004tags\030\006 \003(\t\022,\n\tconstrain\030\007 \001(\0162\031.ric.tas"
  "ks.Task.Constrain\022\020\n\010priority\030\010 \001(\005\022\022\n\nc"
  "reated_at\030\t \001(\003\022\014\n\004name\030\n \001(\t\022\023\n\013descrip"
  "tion\030\013 \001(\t\022&\n\006status\030\014 \001(\0162\026.ric.tasks.T"
  "ask.Status\022#\n\006object\030\r \001(\0132\023.ric.tasks.O"
  "bjectId\022!\n\004kind\030\016 \001(\0132\023.ric.tasks.Object"
  "Id\0223\n\020report_templates\030\017 \003(\0132\031.ric.tasks"
  ".ReportTemplate\022\"\n\007reports\030\020 \003(\0132\021.ric.t"
  "asks.Report\022\"\n\005begin\030\021 \001(\0132\023.ric.tasks.L"
  "ocation\022 \n\003end\030\022 \001(\0132\023.ric.tasks.Locatio"
  "n\022&\n\tdeadlines\030\023 \003(\0132\023.ric.tasks.Deadlin"
  "e\022+\n\007success\030\024 \001(\0132\032.google.protobuf.Boo"
  "lValue\022%\n\010assignee\030\025 \001(\0132\023.ric.tasks.Obj"
  "ectId\022\025\n\rassignee_type\030\026 \001(\t\022!\n\006review\030\027"
  " \001(\0132\021.ric.tasks.Review\022\014\n\004json\030\030 \001(\014\"4\n"
  "\tConstrain\022\013\n\007INVALID\020\000\022\r\n\tUNORDERED\020\001\022\013"
  "\n\007ORDERED\020\002\"I\n\006Status\022\013\n\007NOT_SET\020\000\022\013\n\007CR"
  "EATED\020\001\022\014\n\010ASSIGNED\020\002\022\013\n\007IN_WORK\020\003\022\n\n\006CL"
  "OSED\020\004\"\326\005\n\010TaskEdit\022\"\n\005owner\030\001 \001(\0132\023.ric"
  ".tasks.ObjectId\022\"\n\005group\030\002 \001(\0132\023.ric.tas"
  "ks.ObjectId\022#\n\006parent\030\003 \001(\0132\023.ric.tasks."
  "ObjectId\022\014\n\004tags\030\004 \003(\t\022,\n\tconstrain\030\005 \001("
  "\0162\031.ric.tasks.Task.Constrain\022-\n\010priority"
  "\030\006 \001(\0132\033.google.protobuf.Int32Value\022*\n\004n"
  "ame\030\007 \001(\0132\034.google.protobuf.StringValue\022"
  "1\n\013description\030\010 \001(\0132\034.google.protobuf.S"
  "tringValue\022#\n\006object\030\t \001(\0132\023.ric.tasks.O"
  "bjectId\022!\n\004kind\030\n \001(\0132\023.ric.tasks.Object"
  "Id\0223\n\020report_templates\030\013 \003(\0132\031.ric.tasks"
  ".ReportTemplate\022\"\n\005begin\030\014 \001(\0132\023.ric.tas"
  "ks.Location\022 \n\003end\030\r \001(\0132\023.ric.tasks.Loc"
  "ation\022&\n\tdeadlines\030\016 \003(\0132\023.ric.tasks.Dea"
  "dline\022%\n\010assignee\030\017 \001(\0132\023.ric.tasks.Obje"
  "ctId\0223\n\rassignee_type\030\020 \001(\0132\034.google.pro"
  "tobuf.StringValue\022!\n\006review\030\021 \001(\0132\021.ric."
  "tasks.Review\022)\n\004json\030\022 \001(\0132\033.google.prot"
  "obuf.BytesValue\"P\n\006Review\022%\n\010reviewer\030\001 "
  "\001(\0132\023.ric.tasks.ObjectId\022\016\n\006rating\030\002 \001(\005"
  "\022\017\n\007comment\030\003 \001(\t\"x\n\010Deadline\022\021\n\ttimesta"
  "mp\030\001 \001(\003\0221\n\014notify_until\030\002 \001(\0132\033.google."
  "protobuf.Int64Value\022&\n\006status\030\003 \001(\0162\026.ri"
  "c.tasks.Task.Status\"\253\001\n\016ReportTemplate\022\014"
  "\n\004name\030\001 \001(\t\0222\n\005field\030\002 \001(\0162#.ric.tasks."
  "ReportTemplate.FieldType\022\020\n\010required\030\003 \001"
  "(\010\"E\n\tFieldType\022\013\n\007INVALID\020\000\022\013\n\007BOOLEAN\020"
  "\001\022\010\n\004TEXT\020\002\022\n\n\006NUMBER\020\003\022\010\n\004FILE\020\004\";\n\006Rep"
  "ort\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.googl"
  "e.protobuf.Any\"\261\001\n\004Kind\022 \n\003oid\030\001 \001(\0132\023.r"
  "ic.tasks.ObjectId\022\014\n\004name\030\002 \001(\t\022\023\n\013discr"
  "iption\030\003 \001(\t\022\013\n\003svg\030\004 \001(\t\022\"\n\005roles\030\005 \003(\013"
  "2\023.ric.tasks.ObjectId\0223\n\020report_template"
  "s\030\006 \003(\0132\031.ric.tasks.ReportTemplate\"\355\001\n\010K"
  "indEdit\022*\n\004name\030\001 \001(\0132\034.google.protobuf."
  "StringValue\0221\n\013discription\030\002 \001(\0132\034.googl"
  "e.protobuf.StringValue\022)\n\003svg\030\003 \001(\0132\034.go"
  "ogle.protobuf.StringValue\022\"\n\005roles\030\004 \003(\013"
  "2\023.ric.tasks.ObjectId\0223\n\020report_template"
  "s\030\005 \003(\0132\031.ric.tasks.ReportTemplate\"W\n\021Cr"
  "eateTaskRequest\022#\n\003ctx\030\001 \001(\0132\026.ric.tasks"
  ".UserContext\022\035\n\004task\030\002 \001(\0132\017.ric.tasks.T"
  "ask\"3\n\022CreateTaskResponse\022\035\n\004task\030\001 \001(\0132"
  "\017.ric.tasks.Task\"W\n\016GetTaskRequest\022#\n\003ct"
  "x\030\001 \001(\0132\026.ric.tasks.UserContext\022 \n\003oid\030\002"
  " \001(\0132\023.ric.tasks.ObjectId\"0\n\017GetTaskResp"
  "onse\022\035\n\004task\030\001 \001(\0132\017.ric.tasks.Task\"Z\n\021D"
  "eleteTaskRequest\022#\n\003ctx\030\001 \001(\0132\026.ric.task"
  "s.UserContext\022 \n\003oid\030\002 \001(\0132\023.ric.tasks.O"
  "bjectId\"\024\n\022DeleteTaskResponse\"}\n\021UpdateT"
  "askRequest\022#\n\003ctx\030\001 \001(\0132\026.ric.tasks.User"
  "Context\022 \n\003oid\030\002 \001(\0132\023.ric.tasks.ObjectI"
  "d\022!\n\004task\030\003 \001(\0132\023.ric.tasks.TaskEdit\"3\n\022"
  "UpdateTaskResponse\022\035\n\004task\030\001 \001(\0132\017.ric.t"
  "asks.Task\"\326\001\n\026UpdateTaskOrderRequest\022#\n\003"
  "ctx\030\001 \001(\0132\026.ric.tasks.UserContext\022 \n\003oid"
  "\030\002 \001(\0132\023.ric.tasks.ObjectId\022C\n\tpositions"
  "\030\003 \003(\01320.ric.tasks.UpdateTaskOrderReques"
  "t.PositionsEntry\0320\n\016PositionsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"8\n\027UpdateTask"
  "OrderResponse\022\035\n\004task\030\001 \001(\0132\017.ric.tasks."
  "Task\"\224\002\n\027ChangeTaskStatusRequest\022#\n\003ctx\030"
  "\001 \001(\0132\026.ric.tasks.UserContext\022 \n\003oid\030\002 \001"
  "(\0132\023.ric.tasks.ObjectId\022*\n\nnew_status\030\003 "
  "\001(\0162\026.ric.tasks.Task.Status\022%\n\010location\030"
  "\004 \001(\0132\023.ric.tasks.Location\022+\n\007success\030\005 "
  "\001(\0132\032.google.protobuf.BoolValue\022\017\n\007comme"
  "nt\030\006 \001(\t\022!\n\006report\030\007 \003(\0132\021.ric.tasks.Rep"
  "ort\"9\n\030ChangeTaskStatusResponse\022\035\n\004task\030"
  "\001 \001(\0132\017.ric.tasks.Task\"W\n\021CreateKindRequ"
  "est\022#\n\003ctx\030\001 \001(\0132\026.ric.tasks.UserContext"
  "\022\035\n\004kind\030\002 \001(\0132\017.ric.tasks.Kind\"3\n\022Creat"
  "eKindResponse\022\035\n\004kind\030\001 \001(\0132\017.ric.tasks."
  "Kind\"W\n\016GetKindRequest\022#\n\003ctx\030\001 \001(\0132\026.ri"
  "c.tasks.UserContext\022 \n\003oid\030\002 \001(\0132\023.ric.t"
  "asks.ObjectId\"0\n\017GetKindResponse\022\035\n\004kind"
  "\030\001 \001(\0132\017.ric.tasks.Kind\"}\n\021UpdateKindReq"
  "uest\022#\n\003ctx\030\001 \001(\0132\026.ric.tasks.UserContex"
  "t\022 \n\003oid\030\002 \001(\0132\023.ric.tasks.ObjectId\022!\n\004k"
  "ind\030\003 \001(\0132\023.ric.tasks.KindEdit\"3\n\022Update"
  "KindResponse\022\035\n\004kind\030\001 \001(\0132\017.ric.tasks.K"
  "ind\"Z\n\021DeleteKindRequest\022#\n\003ctx\030\001 \001(\0132\026."
  "ric.tasks.UserContext\022 \n\003oid\030\002 \001(\0132\023.ric"
  ".tasks.ObjectId\"\024\n\022DeleteKindResponse2\317\003"
  "\n\013TaskService\022E\n\006Create\022\034.ric.tasks.Crea"
  "teTaskRequest\032\035.ric.tasks.CreateTaskResp"
  "onse\022<\n\003Get\022\031.ric.tasks.GetTaskRequest\032\032"
  ".ric.tasks.GetTaskResponse\022E\n\006Update\022\034.r"
  "ic.tasks.UpdateTaskRequest\032\035.ric.tasks.U"
  "pdateTaskResponse\022E\n\006Delete\022\034.ric.tasks."
  "DeleteTaskRequest\032\035.ric.tasks.DeleteTask"
  "Response\022T\n\013UpdateOrder\022!.ric.tasks.Upda"
  "teTaskOrderRequest\032\".ric.tasks.UpdateTas"
  "kOrderResponse\022W\n\014ChangeStatus\022\".ric.tas"
  "ks.ChangeTaskStatusRequest\032#.ric.tasks.C"
  "hangeTaskStatusResponse2\240\002\n\013KindService\022"
  "E\n\006Create\022\034.ric.tasks.CreateKindRequest\032"
  "\035.ric.tasks.CreateKindResponse\022<\n\003Get\022\031."
  "ric.tasks.GetKindRequest\032\032.ric.tasks.Get"
  "KindResponse\022E\n\006Update\022\034.ric.tasks.Updat"
  "eKindRequest\032\035.ric.tasks.UpdateKindRespo"
  "nse\022E\n\006Delete\022\034.ric.tasks.DeleteKindRequ"
  "est\032\035.ric.tasks.DeleteKindResponseB\026Z\024./"
  "ric-tasks;rictasksb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dtasks_2frictasks_2eproto = {
  false, InitDefaults_ric_2dtasks_2frictasks_2eproto, 
  descriptor_table_protodef_ric_2dtasks_2frictasks_2eproto,
  "ric-tasks/rictasks.proto", &assign_descriptors_table_ric_2dtasks_2frictasks_2eproto, 5466,
};

void AddDescriptors_ric_2dtasks_2frictasks_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2fprotobuf_2fany_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dtasks_2frictasks_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dtasks_2frictasks_2eproto = []() { AddDescriptors_ric_2dtasks_2frictasks_2eproto(); return true; }();
namespace ric {
namespace tasks {
const ::google::protobuf::EnumDescriptor* Task_Constrain_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[0];
}
bool Task_Constrain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Task_Constrain Task::INVALID;
const Task_Constrain Task::UNORDERED;
const Task_Constrain Task::ORDERED;
const Task_Constrain Task::Constrain_MIN;
const Task_Constrain Task::Constrain_MAX;
const int Task::Constrain_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Task_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[1];
}
bool Task_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Task_Status Task::NOT_SET;
const Task_Status Task::CREATED;
const Task_Status Task::ASSIGNED;
const Task_Status Task::IN_WORK;
const Task_Status Task::CLOSED;
const Task_Status Task::Status_MIN;
const Task_Status Task::Status_MAX;
const int Task::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReportTemplate_FieldType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return file_level_enum_descriptors_ric_2dtasks_2frictasks_2eproto[2];
}
bool ReportTemplate_FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReportTemplate_FieldType ReportTemplate::INVALID;
const ReportTemplate_FieldType ReportTemplate::BOOLEAN;
const ReportTemplate_FieldType ReportTemplate::TEXT;
const ReportTemplate_FieldType ReportTemplate::NUMBER;
const ReportTemplate_FieldType ReportTemplate::FILE;
const ReportTemplate_FieldType ReportTemplate::FieldType_MIN;
const ReportTemplate_FieldType ReportTemplate::FieldType_MAX;
const int ReportTemplate::FieldType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ObjectId::InitAsDefaultInstance() {
}
class ObjectId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectId::ObjectId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ObjectId)
}
ObjectId::ObjectId(const ObjectId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ObjectId)
}

void ObjectId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObjectId::~ObjectId() {
  // @@protoc_insertion_point(destructor:ric.tasks.ObjectId)
  SharedDtor();
}

void ObjectId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectId& ObjectId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObjectId_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObjectId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.ObjectId.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ObjectId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.ObjectId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ObjectId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ObjectId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ObjectId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ObjectId)
}

::google::protobuf::uint8* ObjectId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ObjectId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ObjectId)
  return target;
}

size_t ObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ObjectId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectId* source =
      ::google::protobuf::DynamicCastToGenerated<ObjectId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ObjectId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ObjectId)
    MergeFrom(*source);
  }
}

void ObjectId::MergeFrom(const ObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void ObjectId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectId::CopyFrom(const ObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectId::IsInitialized() const {
  return true;
}

void ObjectId::Swap(ObjectId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectId::InternalSwap(ObjectId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ObjectId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserContext::InitAsDefaultInstance() {
  ::ric::tasks::_UserContext_default_instance_._instance.get_mutable()->group_id_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_UserContext_default_instance_._instance.get_mutable()->user_id_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class UserContext::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& group_id(const UserContext* msg);
  static const ::ric::tasks::ObjectId& user_id(const UserContext* msg);
};

const ::ric::tasks::ObjectId&
UserContext::HasBitSetters::group_id(const UserContext* msg) {
  return *msg->group_id_;
}
const ::ric::tasks::ObjectId&
UserContext::HasBitSetters::user_id(const UserContext* msg) {
  return *msg->user_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserContext::kGroupIdFieldNumber;
const int UserContext::kUserIdFieldNumber;
const int UserContext::kSpanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserContext::UserContext()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UserContext)
}
UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  if (from.has_group_id()) {
    group_id_ = new ::ric::tasks::ObjectId(*from.group_id_);
  } else {
    group_id_ = nullptr;
  }
  if (from.has_user_id()) {
    user_id_ = new ::ric::tasks::ObjectId(*from.user_id_);
  } else {
    user_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UserContext)
}

void UserContext::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base);
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(user_id_));
}

UserContext::~UserContext() {
  // @@protoc_insertion_point(destructor:ric.tasks.UserContext)
  SharedDtor();
}

void UserContext::SharedDtor() {
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_id_;
  if (this != internal_default_instance()) delete user_id_;
}

void UserContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserContext& UserContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserContext_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UserContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && group_id_ != nullptr) {
    delete group_id_;
  }
  group_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_id_ != nullptr) {
    delete user_id_;
  }
  user_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserContext::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserContext*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_group_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_user_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string span_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.UserContext.span_id");
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UserContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->span_id().data(), static_cast<int>(this->span_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.UserContext.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UserContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UserContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId group_id = 1;
  if (this->has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::group_id(this), output);
  }

  // .ric.tasks.ObjectId user_id = 2;
  if (this->has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::user_id(this), output);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->span_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UserContext)
}

::google::protobuf::uint8* UserContext::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId group_id = 1;
  if (this->has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::group_id(this), target);
  }

  // .ric.tasks.ObjectId user_id = 2;
  if (this->has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::user_id(this), target);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.UserContext.span_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->span_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UserContext)
  return target;
}

size_t UserContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UserContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_id());
  }

  // .ric.tasks.ObjectId group_id = 1;
  if (this->has_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *group_id_);
  }

  // .ric.tasks.ObjectId user_id = 2;
  if (this->has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserContext* source =
      ::google::protobuf::DynamicCastToGenerated<UserContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UserContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UserContext)
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  if (from.has_group_id()) {
    mutable_group_id()->::ric::tasks::ObjectId::MergeFrom(from.group_id());
  }
  if (from.has_user_id()) {
    mutable_user_id()->::ric::tasks::ObjectId::MergeFrom(from.user_id());
  }
}

void UserContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserContext::InternalSwap(UserContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_id_, other->group_id_);
  swap(user_id_, other->user_id_);
}

::google::protobuf::Metadata UserContext::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::ric::tasks::_Location_default_instance_._instance.get_mutable()->indoor_ = const_cast< ::ric::tasks::IndoorLocation*>(
      ::ric::tasks::IndoorLocation::internal_default_instance());
}
class Location::HasBitSetters {
 public:
  static const ::ric::tasks::IndoorLocation& indoor(const Location* msg);
};

const ::ric::tasks::IndoorLocation&
Location::HasBitSetters::indoor(const Location* msg) {
  return *msg->indoor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kLatFieldNumber;
const int Location::kLngFieldNumber;
const int Location::kRadiusFieldNumber;
const int Location::kAddressFieldNumber;
const int Location::kIndoorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_indoor()) {
    indoor_ = new ::ric::tasks::IndoorLocation(*from.indoor_);
  } else {
    indoor_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Location)
}

void Location::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Location_ric_2dtasks_2frictasks_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&indoor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&indoor_)) + sizeof(radius_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:ric.tasks.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete indoor_;
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Location_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && indoor_ != nullptr) {
    delete indoor_;
  }
  indoor_ = nullptr;
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lng = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lng(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string address = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Location.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.tasks.IndoorLocation indoor = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::IndoorLocation::_InternalParse;
        object = msg->mutable_indoor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Location.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.IndoorLocation indoor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_indoor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lng = 2;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lng(), output);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Location.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // .ric.tasks.IndoorLocation indoor = 5;
  if (this->has_indoor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::indoor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lng = 2;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lng(), target);
  }

  // double radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Location.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // .ric.tasks.IndoorLocation indoor = 5;
  if (this->has_indoor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::indoor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .ric.tasks.IndoorLocation indoor = 5;
  if (this->has_indoor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *indoor_);
  }

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_indoor()) {
    mutable_indoor()->::ric::tasks::IndoorLocation::MergeFrom(from.indoor());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(indoor_, other->indoor_);
  swap(lat_, other->lat_);
  swap(lng_, other->lng_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IndoorLocation::InitAsDefaultInstance() {
}
class IndoorLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndoorLocation::kXFieldNumber;
const int IndoorLocation::kYFieldNumber;
const int IndoorLocation::kZFieldNumber;
const int IndoorLocation::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndoorLocation::IndoorLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.IndoorLocation)
}
IndoorLocation::IndoorLocation(const IndoorLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.IndoorLocation)
}

void IndoorLocation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
}

IndoorLocation::~IndoorLocation() {
  // @@protoc_insertion_point(destructor:ric.tasks.IndoorLocation)
  SharedDtor();
}

void IndoorLocation::SharedDtor() {
}

void IndoorLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndoorLocation& IndoorLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IndoorLocation_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void IndoorLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.IndoorLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndoorLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IndoorLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double radius = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndoorLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.IndoorLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.IndoorLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.IndoorLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndoorLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.IndoorLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.IndoorLocation)
}

::google::protobuf::uint8* IndoorLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.IndoorLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.IndoorLocation)
  return target;
}

size_t IndoorLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.IndoorLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndoorLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.IndoorLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const IndoorLocation* source =
      ::google::protobuf::DynamicCastToGenerated<IndoorLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.IndoorLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.IndoorLocation)
    MergeFrom(*source);
  }
}

void IndoorLocation::MergeFrom(const IndoorLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.IndoorLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void IndoorLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.IndoorLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndoorLocation::CopyFrom(const IndoorLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.IndoorLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndoorLocation::IsInitialized() const {
  return true;
}

void IndoorLocation::Swap(IndoorLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndoorLocation::InternalSwap(IndoorLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(radius_, other->radius_);
}

::google::protobuf::Metadata IndoorLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->owner_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->group_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->parent_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->object_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->begin_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->end_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->success_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->assignee_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_Task_default_instance_._instance.get_mutable()->review_ = const_cast< ::ric::tasks::Review*>(
      ::ric::tasks::Review::internal_default_instance());
}
class Task::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& oid(const Task* msg);
  static const ::ric::tasks::ObjectId& owner(const Task* msg);
  static const ::ric::tasks::ObjectId& group(const Task* msg);
  static const ::ric::tasks::ObjectId& parent(const Task* msg);
  static const ::ric::tasks::ObjectId& object(const Task* msg);
  static const ::ric::tasks::ObjectId& kind(const Task* msg);
  static const ::ric::tasks::Location& begin(const Task* msg);
  static const ::ric::tasks::Location& end(const Task* msg);
  static const ::google::protobuf::BoolValue& success(const Task* msg);
  static const ::ric::tasks::ObjectId& assignee(const Task* msg);
  static const ::ric::tasks::Review& review(const Task* msg);
};

const ::ric::tasks::ObjectId&
Task::HasBitSetters::oid(const Task* msg) {
  return *msg->oid_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::owner(const Task* msg) {
  return *msg->owner_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::group(const Task* msg) {
  return *msg->group_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::parent(const Task* msg) {
  return *msg->parent_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::object(const Task* msg) {
  return *msg->object_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::kind(const Task* msg) {
  return *msg->kind_;
}
const ::ric::tasks::Location&
Task::HasBitSetters::begin(const Task* msg) {
  return *msg->begin_;
}
const ::ric::tasks::Location&
Task::HasBitSetters::end(const Task* msg) {
  return *msg->end_;
}
const ::google::protobuf::BoolValue&
Task::HasBitSetters::success(const Task* msg) {
  return *msg->success_;
}
const ::ric::tasks::ObjectId&
Task::HasBitSetters::assignee(const Task* msg) {
  return *msg->assignee_;
}
const ::ric::tasks::Review&
Task::HasBitSetters::review(const Task* msg) {
  return *msg->review_;
}
void Task::clear_success() {
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kOidFieldNumber;
const int Task::kOwnerFieldNumber;
const int Task::kGroupFieldNumber;
const int Task::kParentFieldNumber;
const int Task::kSubtasksFieldNumber;
const int Task::kTagsFieldNumber;
const int Task::kConstrainFieldNumber;
const int Task::kPriorityFieldNumber;
const int Task::kCreatedAtFieldNumber;
const int Task::kNameFieldNumber;
const int Task::kDescriptionFieldNumber;
const int Task::kStatusFieldNumber;
const int Task::kObjectFieldNumber;
const int Task::kKindFieldNumber;
const int Task::kReportTemplatesFieldNumber;
const int Task::kReportsFieldNumber;
const int Task::kBeginFieldNumber;
const int Task::kEndFieldNumber;
const int Task::kDeadlinesFieldNumber;
const int Task::kSuccessFieldNumber;
const int Task::kAssigneeFieldNumber;
const int Task::kAssigneeTypeFieldNumber;
const int Task::kReviewFieldNumber;
const int Task::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      subtasks_(from.subtasks_),
      tags_(from.tags_),
      report_templates_(from.report_templates_),
      reports_(from.reports_),
      deadlines_(from.deadlines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  assignee_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assignee_type().size() > 0) {
    assignee_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assignee_type_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json().size() > 0) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  if (from.has_owner()) {
    owner_ = new ::ric::tasks::ObjectId(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_group()) {
    group_ = new ::ric::tasks::ObjectId(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from.has_parent()) {
    parent_ = new ::ric::tasks::ObjectId(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from.has_object()) {
    object_ = new ::ric::tasks::ObjectId(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::ObjectId(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  if (from.has_begin()) {
    begin_ = new ::ric::tasks::Location(*from.begin_);
  } else {
    begin_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::ric::tasks::Location(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from.has_success()) {
    success_ = new ::google::protobuf::BoolValue(*from.success_);
  } else {
    success_ = nullptr;
  }
  if (from.has_assignee()) {
    assignee_ = new ::ric::tasks::ObjectId(*from.assignee_);
  } else {
    assignee_ = nullptr;
  }
  if (from.has_review()) {
    review_ = new ::ric::tasks::Review(*from.review_);
  } else {
    review_ = nullptr;
  }
  ::memcpy(&constrain_, &from.constrain_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&constrain_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Task)
}

void Task::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Task_ric_2dtasks_2frictasks_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assignee_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&oid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&oid_)) + sizeof(status_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:ric.tasks.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assignee_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oid_;
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete kind_;
  if (this != internal_default_instance()) delete begin_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete success_;
  if (this != internal_default_instance()) delete assignee_;
  if (this != internal_default_instance()) delete review_;
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Task_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtasks_.Clear();
  tags_.Clear();
  report_templates_.Clear();
  reports_.Clear();
  deadlines_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assignee_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && assignee_ != nullptr) {
    delete assignee_;
  }
  assignee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
  ::memset(&constrain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&constrain_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Task::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Task*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId owner = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_owner();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_group();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId parent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_parent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.Task subtasks = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Task::_InternalParse;
          object = msg->add_subtasks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated string tags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.tasks.Task.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .ric.tasks.Task.Constrain constrain = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_constrain(static_cast<::ric::tasks::Task_Constrain>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 priority = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 created_at = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_created_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.tasks.Task.Status status = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::ric::tasks::Task_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ric.tasks.ObjectId object = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_object();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId kind = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.ReportTemplate report_templates = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::ReportTemplate::_InternalParse;
          object = msg->add_report_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // repeated .ric.tasks.Report reports = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Report::_InternalParse;
          object = msg->add_reports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      // .ric.tasks.Location begin = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_begin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Location end = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.Deadline deadlines = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Deadline::_InternalParse;
          object = msg->add_deadlines();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 410 && (ptr += 2));
        break;
      }
      // .google.protobuf.BoolValue success = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_success();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId assignee = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_assignee();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string assignee_type = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Task.assignee_type");
        object = msg->mutable_assignee_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.tasks.Review review = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Review::_InternalParse;
        object = msg->mutable_review();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes json = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Task subtasks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subtasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Constrain constrain = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constrain(static_cast< ::ric::tasks::Task_Constrain >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created_at = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Status status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ric::tasks::Task_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId object = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId kind = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.ReportTemplate report_templates = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_report_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Report reports = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location begin = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location end = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Deadline deadlines = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deadlines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue success = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId assignee = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assignee_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignee_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assignee_type().data(), static_cast<int>(this->assignee_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Task.assignee_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Review review = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_review()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes json = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.ObjectId owner = 2;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::owner(this), output);
  }

  // .ric.tasks.ObjectId group = 3;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::group(this), output);
  }

  // .ric.tasks.ObjectId parent = 4;
  if (this->has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::parent(this), output);
  }

  // repeated .ric.tasks.Task subtasks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subtasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->subtasks(static_cast<int>(i)),
      output);
  }

  // repeated string tags = 6;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // .ric.tasks.Task.Constrain constrain = 7;
  if (this->constrain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->constrain(), output);
  }

  // int32 priority = 8;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->priority(), output);
  }

  // int64 created_at = 9;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->created_at(), output);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // string description = 11;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->description(), output);
  }

  // .ric.tasks.Task.Status status = 12;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->status(), output);
  }

  // .ric.tasks.ObjectId object = 13;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::object(this), output);
  }

  // .ric.tasks.ObjectId kind = 14;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::kind(this), output);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->report_templates(static_cast<int>(i)),
      output);
  }

  // repeated .ric.tasks.Report reports = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->reports(static_cast<int>(i)),
      output);
  }

  // .ric.tasks.Location begin = 17;
  if (this->has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::begin(this), output);
  }

  // .ric.tasks.Location end = 18;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::end(this), output);
  }

  // repeated .ric.tasks.Deadline deadlines = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->deadlines(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.BoolValue success = 20;
  if (this->has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::success(this), output);
  }

  // .ric.tasks.ObjectId assignee = 21;
  if (this->has_assignee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::assignee(this), output);
  }

  // string assignee_type = 22;
  if (this->assignee_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assignee_type().data(), static_cast<int>(this->assignee_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.assignee_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->assignee_type(), output);
  }

  // .ric.tasks.Review review = 23;
  if (this->has_review()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::review(this), output);
  }

  // bytes json = 24;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.ObjectId owner = 2;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::owner(this), target);
  }

  // .ric.tasks.ObjectId group = 3;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::group(this), target);
  }

  // .ric.tasks.ObjectId parent = 4;
  if (this->has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::parent(this), target);
  }

  // repeated .ric.tasks.Task subtasks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subtasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->subtasks(static_cast<int>(i)), target);
  }

  // repeated string tags = 6;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tags(i), target);
  }

  // .ric.tasks.Task.Constrain constrain = 7;
  if (this->constrain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->constrain(), target);
  }

  // int32 priority = 8;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->priority(), target);
  }

  // int64 created_at = 9;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->created_at(), target);
  }

  // string name = 10;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // string description = 11;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->description(), target);
  }

  // .ric.tasks.Task.Status status = 12;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->status(), target);
  }

  // .ric.tasks.ObjectId object = 13;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::object(this), target);
  }

  // .ric.tasks.ObjectId kind = 14;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::kind(this), target);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->report_templates(static_cast<int>(i)), target);
  }

  // repeated .ric.tasks.Report reports = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->reports(static_cast<int>(i)), target);
  }

  // .ric.tasks.Location begin = 17;
  if (this->has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::begin(this), target);
  }

  // .ric.tasks.Location end = 18;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::end(this), target);
  }

  // repeated .ric.tasks.Deadline deadlines = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->deadlines(static_cast<int>(i)), target);
  }

  // .google.protobuf.BoolValue success = 20;
  if (this->has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::success(this), target);
  }

  // .ric.tasks.ObjectId assignee = 21;
  if (this->has_assignee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::assignee(this), target);
  }

  // string assignee_type = 22;
  if (this->assignee_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assignee_type().data(), static_cast<int>(this->assignee_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Task.assignee_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->assignee_type(), target);
  }

  // .ric.tasks.Review review = 23;
  if (this->has_review()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::review(this), target);
  }

  // bytes json = 24;
  if (this->json().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.Task subtasks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->subtasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subtasks(static_cast<int>(i)));
    }
  }

  // repeated string tags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->report_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->report_templates(static_cast<int>(i)));
    }
  }

  // repeated .ric.tasks.Report reports = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->reports_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reports(static_cast<int>(i)));
    }
  }

  // repeated .ric.tasks.Deadline deadlines = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->deadlines_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deadlines(static_cast<int>(i)));
    }
  }

  // string name = 10;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 11;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string assignee_type = 22;
  if (this->assignee_type().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assignee_type());
  }

  // bytes json = 24;
  if (this->json().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->json());
  }

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  // .ric.tasks.ObjectId owner = 2;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .ric.tasks.ObjectId group = 3;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .ric.tasks.ObjectId parent = 4;
  if (this->has_parent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .ric.tasks.ObjectId object = 13;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .ric.tasks.ObjectId kind = 14;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  // .ric.tasks.Location begin = 17;
  if (this->has_begin()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *begin_);
  }

  // .ric.tasks.Location end = 18;
  if (this->has_end()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .google.protobuf.BoolValue success = 20;
  if (this->has_success()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *success_);
  }

  // .ric.tasks.ObjectId assignee = 21;
  if (this->has_assignee()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *assignee_);
  }

  // .ric.tasks.Review review = 23;
  if (this->has_review()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *review_);
  }

  // .ric.tasks.Task.Constrain constrain = 7;
  if (this->constrain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constrain());
  }

  // int32 priority = 8;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // int64 created_at = 9;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // .ric.tasks.Task.Status status = 12;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subtasks_.MergeFrom(from.subtasks_);
  tags_.MergeFrom(from.tags_);
  report_templates_.MergeFrom(from.report_templates_);
  reports_.MergeFrom(from.reports_);
  deadlines_.MergeFrom(from.deadlines_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.assignee_type().size() > 0) {

    assignee_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assignee_type_);
  }
  if (from.json().size() > 0) {

    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
  if (from.has_owner()) {
    mutable_owner()->::ric::tasks::ObjectId::MergeFrom(from.owner());
  }
  if (from.has_group()) {
    mutable_group()->::ric::tasks::ObjectId::MergeFrom(from.group());
  }
  if (from.has_parent()) {
    mutable_parent()->::ric::tasks::ObjectId::MergeFrom(from.parent());
  }
  if (from.has_object()) {
    mutable_object()->::ric::tasks::ObjectId::MergeFrom(from.object());
  }
  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::ObjectId::MergeFrom(from.kind());
  }
  if (from.has_begin()) {
    mutable_begin()->::ric::tasks::Location::MergeFrom(from.begin());
  }
  if (from.has_end()) {
    mutable_end()->::ric::tasks::Location::MergeFrom(from.end());
  }
  if (from.has_success()) {
    mutable_success()->::google::protobuf::BoolValue::MergeFrom(from.success());
  }
  if (from.has_assignee()) {
    mutable_assignee()->::ric::tasks::ObjectId::MergeFrom(from.assignee());
  }
  if (from.has_review()) {
    mutable_review()->::ric::tasks::Review::MergeFrom(from.review());
  }
  if (from.constrain() != 0) {
    set_constrain(from.constrain());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subtasks_)->InternalSwap(CastToBase(&other->subtasks_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  CastToBase(&report_templates_)->InternalSwap(CastToBase(&other->report_templates_));
  CastToBase(&reports_)->InternalSwap(CastToBase(&other->reports_));
  CastToBase(&deadlines_)->InternalSwap(CastToBase(&other->deadlines_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assignee_type_.Swap(&other->assignee_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(oid_, other->oid_);
  swap(owner_, other->owner_);
  swap(group_, other->group_);
  swap(parent_, other->parent_);
  swap(object_, other->object_);
  swap(kind_, other->kind_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  swap(success_, other->success_);
  swap(assignee_, other->assignee_);
  swap(review_, other->review_);
  swap(constrain_, other->constrain_);
  swap(priority_, other->priority_);
  swap(created_at_, other->created_at_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskEdit::InitAsDefaultInstance() {
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->owner_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->group_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->parent_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->priority_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->description_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->object_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->begin_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->end_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->assignee_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->assignee_type_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->review_ = const_cast< ::ric::tasks::Review*>(
      ::ric::tasks::Review::internal_default_instance());
  ::ric::tasks::_TaskEdit_default_instance_._instance.get_mutable()->json_ = const_cast< ::google::protobuf::BytesValue*>(
      ::google::protobuf::BytesValue::internal_default_instance());
}
class TaskEdit::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& owner(const TaskEdit* msg);
  static const ::ric::tasks::ObjectId& group(const TaskEdit* msg);
  static const ::ric::tasks::ObjectId& parent(const TaskEdit* msg);
  static const ::google::protobuf::Int32Value& priority(const TaskEdit* msg);
  static const ::google::protobuf::StringValue& name(const TaskEdit* msg);
  static const ::google::protobuf::StringValue& description(const TaskEdit* msg);
  static const ::ric::tasks::ObjectId& object(const TaskEdit* msg);
  static const ::ric::tasks::ObjectId& kind(const TaskEdit* msg);
  static const ::ric::tasks::Location& begin(const TaskEdit* msg);
  static const ::ric::tasks::Location& end(const TaskEdit* msg);
  static const ::ric::tasks::ObjectId& assignee(const TaskEdit* msg);
  static const ::google::protobuf::StringValue& assignee_type(const TaskEdit* msg);
  static const ::ric::tasks::Review& review(const TaskEdit* msg);
  static const ::google::protobuf::BytesValue& json(const TaskEdit* msg);
};

const ::ric::tasks::ObjectId&
TaskEdit::HasBitSetters::owner(const TaskEdit* msg) {
  return *msg->owner_;
}
const ::ric::tasks::ObjectId&
TaskEdit::HasBitSetters::group(const TaskEdit* msg) {
  return *msg->group_;
}
const ::ric::tasks::ObjectId&
TaskEdit::HasBitSetters::parent(const TaskEdit* msg) {
  return *msg->parent_;
}
const ::google::protobuf::Int32Value&
TaskEdit::HasBitSetters::priority(const TaskEdit* msg) {
  return *msg->priority_;
}
const ::google::protobuf::StringValue&
TaskEdit::HasBitSetters::name(const TaskEdit* msg) {
  return *msg->name_;
}
const ::google::protobuf::StringValue&
TaskEdit::HasBitSetters::description(const TaskEdit* msg) {
  return *msg->description_;
}
const ::ric::tasks::ObjectId&
TaskEdit::HasBitSetters::object(const TaskEdit* msg) {
  return *msg->object_;
}
const ::ric::tasks::ObjectId&
TaskEdit::HasBitSetters::kind(const TaskEdit* msg) {
  return *msg->kind_;
}
const ::ric::tasks::Location&
TaskEdit::HasBitSetters::begin(const TaskEdit* msg) {
  return *msg->begin_;
}
const ::ric::tasks::Location&
TaskEdit::HasBitSetters::end(const TaskEdit* msg) {
  return *msg->end_;
}
const ::ric::tasks::ObjectId&
TaskEdit::HasBitSetters::assignee(const TaskEdit* msg) {
  return *msg->assignee_;
}
const ::google::protobuf::StringValue&
TaskEdit::HasBitSetters::assignee_type(const TaskEdit* msg) {
  return *msg->assignee_type_;
}
const ::ric::tasks::Review&
TaskEdit::HasBitSetters::review(const TaskEdit* msg) {
  return *msg->review_;
}
const ::google::protobuf::BytesValue&
TaskEdit::HasBitSetters::json(const TaskEdit* msg) {
  return *msg->json_;
}
void TaskEdit::clear_priority() {
  if (GetArenaNoVirtual() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
}
void TaskEdit::clear_name() {
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
void TaskEdit::clear_description() {
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
void TaskEdit::clear_assignee_type() {
  if (GetArenaNoVirtual() == nullptr && assignee_type_ != nullptr) {
    delete assignee_type_;
  }
  assignee_type_ = nullptr;
}
void TaskEdit::clear_json() {
  if (GetArenaNoVirtual() == nullptr && json_ != nullptr) {
    delete json_;
  }
  json_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskEdit::kOwnerFieldNumber;
const int TaskEdit::kGroupFieldNumber;
const int TaskEdit::kParentFieldNumber;
const int TaskEdit::kTagsFieldNumber;
const int TaskEdit::kConstrainFieldNumber;
const int TaskEdit::kPriorityFieldNumber;
const int TaskEdit::kNameFieldNumber;
const int TaskEdit::kDescriptionFieldNumber;
const int TaskEdit::kObjectFieldNumber;
const int TaskEdit::kKindFieldNumber;
const int TaskEdit::kReportTemplatesFieldNumber;
const int TaskEdit::kBeginFieldNumber;
const int TaskEdit::kEndFieldNumber;
const int TaskEdit::kDeadlinesFieldNumber;
const int TaskEdit::kAssigneeFieldNumber;
const int TaskEdit::kAssigneeTypeFieldNumber;
const int TaskEdit::kReviewFieldNumber;
const int TaskEdit::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskEdit::TaskEdit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.TaskEdit)
}
TaskEdit::TaskEdit(const TaskEdit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      report_templates_(from.report_templates_),
      deadlines_(from.deadlines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner()) {
    owner_ = new ::ric::tasks::ObjectId(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_group()) {
    group_ = new ::ric::tasks::ObjectId(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from.has_parent()) {
    parent_ = new ::ric::tasks::ObjectId(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from.has_priority()) {
    priority_ = new ::google::protobuf::Int32Value(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from.has_name()) {
    name_ = new ::google::protobuf::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from.has_description()) {
    description_ = new ::google::protobuf::StringValue(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from.has_object()) {
    object_ = new ::ric::tasks::ObjectId(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::ObjectId(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  if (from.has_begin()) {
    begin_ = new ::ric::tasks::Location(*from.begin_);
  } else {
    begin_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::ric::tasks::Location(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from.has_assignee()) {
    assignee_ = new ::ric::tasks::ObjectId(*from.assignee_);
  } else {
    assignee_ = nullptr;
  }
  if (from.has_assignee_type()) {
    assignee_type_ = new ::google::protobuf::StringValue(*from.assignee_type_);
  } else {
    assignee_type_ = nullptr;
  }
  if (from.has_review()) {
    review_ = new ::ric::tasks::Review(*from.review_);
  } else {
    review_ = nullptr;
  }
  if (from.has_json()) {
    json_ = new ::google::protobuf::BytesValue(*from.json_);
  } else {
    json_ = nullptr;
  }
  constrain_ = from.constrain_;
  // @@protoc_insertion_point(copy_constructor:ric.tasks.TaskEdit)
}

void TaskEdit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskEdit_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&constrain_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(constrain_));
}

TaskEdit::~TaskEdit() {
  // @@protoc_insertion_point(destructor:ric.tasks.TaskEdit)
  SharedDtor();
}

void TaskEdit::SharedDtor() {
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete kind_;
  if (this != internal_default_instance()) delete begin_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete assignee_;
  if (this != internal_default_instance()) delete assignee_type_;
  if (this != internal_default_instance()) delete review_;
  if (this != internal_default_instance()) delete json_;
}

void TaskEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskEdit& TaskEdit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskEdit_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void TaskEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.TaskEdit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  report_templates_.Clear();
  deadlines_.Clear();
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && assignee_ != nullptr) {
    delete assignee_;
  }
  assignee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && assignee_type_ != nullptr) {
    delete assignee_type_;
  }
  assignee_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && review_ != nullptr) {
    delete review_;
  }
  review_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && json_ != nullptr) {
    delete json_;
  }
  json_ = nullptr;
  constrain_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskEdit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskEdit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId owner = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_owner();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId group = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_group();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId parent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_parent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string tags = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.tasks.TaskEdit.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .ric.tasks.Task.Constrain constrain = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_constrain(static_cast<::ric::tasks::Task_Constrain>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Int32Value priority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Int32Value::_InternalParse;
        object = msg->mutable_priority();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.StringValue name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::StringValue::_InternalParse;
        object = msg->mutable_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.StringValue description = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::StringValue::_InternalParse;
        object = msg->mutable_description();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId object = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_object();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId kind = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.ReportTemplate report_templates = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::ReportTemplate::_InternalParse;
          object = msg->add_report_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // .ric.tasks.Location begin = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_begin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Location end = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.Deadline deadlines = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Deadline::_InternalParse;
          object = msg->add_deadlines();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      // .ric.tasks.ObjectId assignee = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_assignee();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.StringValue assignee_type = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::StringValue::_InternalParse;
        object = msg->mutable_assignee_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Review review = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Review::_InternalParse;
        object = msg->mutable_review();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BytesValue json = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BytesValue::_InternalParse;
        object = msg->mutable_json();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskEdit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.TaskEdit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId parent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.TaskEdit.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Constrain constrain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constrain(static_cast< ::ric::tasks::Task_Constrain >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue description = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId object = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId kind = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.ReportTemplate report_templates = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_report_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location begin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location end = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Deadline deadlines = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deadlines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId assignee = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue assignee_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assignee_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Review review = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_review()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BytesValue json = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_json()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.TaskEdit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.TaskEdit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskEdit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.TaskEdit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId owner = 1;
  if (this->has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::owner(this), output);
  }

  // .ric.tasks.ObjectId group = 2;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::group(this), output);
  }

  // .ric.tasks.ObjectId parent = 3;
  if (this->has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::parent(this), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.TaskEdit.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // .ric.tasks.Task.Constrain constrain = 5;
  if (this->constrain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->constrain(), output);
  }

  // .google.protobuf.Int32Value priority = 6;
  if (this->has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::priority(this), output);
  }

  // .google.protobuf.StringValue name = 7;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::name(this), output);
  }

  // .google.protobuf.StringValue description = 8;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::description(this), output);
  }

  // .ric.tasks.ObjectId object = 9;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::object(this), output);
  }

  // .ric.tasks.ObjectId kind = 10;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::kind(this), output);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->report_templates(static_cast<int>(i)),
      output);
  }

  // .ric.tasks.Location begin = 12;
  if (this->has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::begin(this), output);
  }

  // .ric.tasks.Location end = 13;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::end(this), output);
  }

  // repeated .ric.tasks.Deadline deadlines = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->deadlines(static_cast<int>(i)),
      output);
  }

  // .ric.tasks.ObjectId assignee = 15;
  if (this->has_assignee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::assignee(this), output);
  }

  // .google.protobuf.StringValue assignee_type = 16;
  if (this->has_assignee_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::assignee_type(this), output);
  }

  // .ric.tasks.Review review = 17;
  if (this->has_review()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::review(this), output);
  }

  // .google.protobuf.BytesValue json = 18;
  if (this->has_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::json(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.TaskEdit)
}

::google::protobuf::uint8* TaskEdit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.TaskEdit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId owner = 1;
  if (this->has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::owner(this), target);
  }

  // .ric.tasks.ObjectId group = 2;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::group(this), target);
  }

  // .ric.tasks.ObjectId parent = 3;
  if (this->has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::parent(this), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.TaskEdit.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // .ric.tasks.Task.Constrain constrain = 5;
  if (this->constrain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->constrain(), target);
  }

  // .google.protobuf.Int32Value priority = 6;
  if (this->has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::priority(this), target);
  }

  // .google.protobuf.StringValue name = 7;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::name(this), target);
  }

  // .google.protobuf.StringValue description = 8;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::description(this), target);
  }

  // .ric.tasks.ObjectId object = 9;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::object(this), target);
  }

  // .ric.tasks.ObjectId kind = 10;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::kind(this), target);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->report_templates(static_cast<int>(i)), target);
  }

  // .ric.tasks.Location begin = 12;
  if (this->has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::begin(this), target);
  }

  // .ric.tasks.Location end = 13;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::end(this), target);
  }

  // repeated .ric.tasks.Deadline deadlines = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->deadlines(static_cast<int>(i)), target);
  }

  // .ric.tasks.ObjectId assignee = 15;
  if (this->has_assignee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::assignee(this), target);
  }

  // .google.protobuf.StringValue assignee_type = 16;
  if (this->has_assignee_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::assignee_type(this), target);
  }

  // .ric.tasks.Review review = 17;
  if (this->has_review()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::review(this), target);
  }

  // .google.protobuf.BytesValue json = 18;
  if (this->has_json()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::json(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.TaskEdit)
  return target;
}

size_t TaskEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.TaskEdit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->report_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->report_templates(static_cast<int>(i)));
    }
  }

  // repeated .ric.tasks.Deadline deadlines = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->deadlines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deadlines(static_cast<int>(i)));
    }
  }

  // .ric.tasks.ObjectId owner = 1;
  if (this->has_owner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .ric.tasks.ObjectId group = 2;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .ric.tasks.ObjectId parent = 3;
  if (this->has_parent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .google.protobuf.Int32Value priority = 6;
  if (this->has_priority()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .google.protobuf.StringValue name = 7;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.StringValue description = 8;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .ric.tasks.ObjectId object = 9;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .ric.tasks.ObjectId kind = 10;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  // .ric.tasks.Location begin = 12;
  if (this->has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *begin_);
  }

  // .ric.tasks.Location end = 13;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .ric.tasks.ObjectId assignee = 15;
  if (this->has_assignee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *assignee_);
  }

  // .google.protobuf.StringValue assignee_type = 16;
  if (this->has_assignee_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *assignee_type_);
  }

  // .ric.tasks.Review review = 17;
  if (this->has_review()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *review_);
  }

  // .google.protobuf.BytesValue json = 18;
  if (this->has_json()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *json_);
  }

  // .ric.tasks.Task.Constrain constrain = 5;
  if (this->constrain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constrain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskEdit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.TaskEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskEdit* source =
      ::google::protobuf::DynamicCastToGenerated<TaskEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.TaskEdit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.TaskEdit)
    MergeFrom(*source);
  }
}

void TaskEdit::MergeFrom(const TaskEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.TaskEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  report_templates_.MergeFrom(from.report_templates_);
  deadlines_.MergeFrom(from.deadlines_);
  if (from.has_owner()) {
    mutable_owner()->::ric::tasks::ObjectId::MergeFrom(from.owner());
  }
  if (from.has_group()) {
    mutable_group()->::ric::tasks::ObjectId::MergeFrom(from.group());
  }
  if (from.has_parent()) {
    mutable_parent()->::ric::tasks::ObjectId::MergeFrom(from.parent());
  }
  if (from.has_priority()) {
    mutable_priority()->::google::protobuf::Int32Value::MergeFrom(from.priority());
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.has_description()) {
    mutable_description()->::google::protobuf::StringValue::MergeFrom(from.description());
  }
  if (from.has_object()) {
    mutable_object()->::ric::tasks::ObjectId::MergeFrom(from.object());
  }
  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::ObjectId::MergeFrom(from.kind());
  }
  if (from.has_begin()) {
    mutable_begin()->::ric::tasks::Location::MergeFrom(from.begin());
  }
  if (from.has_end()) {
    mutable_end()->::ric::tasks::Location::MergeFrom(from.end());
  }
  if (from.has_assignee()) {
    mutable_assignee()->::ric::tasks::ObjectId::MergeFrom(from.assignee());
  }
  if (from.has_assignee_type()) {
    mutable_assignee_type()->::google::protobuf::StringValue::MergeFrom(from.assignee_type());
  }
  if (from.has_review()) {
    mutable_review()->::ric::tasks::Review::MergeFrom(from.review());
  }
  if (from.has_json()) {
    mutable_json()->::google::protobuf::BytesValue::MergeFrom(from.json());
  }
  if (from.constrain() != 0) {
    set_constrain(from.constrain());
  }
}

void TaskEdit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.TaskEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskEdit::CopyFrom(const TaskEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.TaskEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskEdit::IsInitialized() const {
  return true;
}

void TaskEdit::Swap(TaskEdit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskEdit::InternalSwap(TaskEdit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  CastToBase(&report_templates_)->InternalSwap(CastToBase(&other->report_templates_));
  CastToBase(&deadlines_)->InternalSwap(CastToBase(&other->deadlines_));
  swap(owner_, other->owner_);
  swap(group_, other->group_);
  swap(parent_, other->parent_);
  swap(priority_, other->priority_);
  swap(name_, other->name_);
  swap(description_, other->description_);
  swap(object_, other->object_);
  swap(kind_, other->kind_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  swap(assignee_, other->assignee_);
  swap(assignee_type_, other->assignee_type_);
  swap(review_, other->review_);
  swap(json_, other->json_);
  swap(constrain_, other->constrain_);
}

::google::protobuf::Metadata TaskEdit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Review::InitAsDefaultInstance() {
  ::ric::tasks::_Review_default_instance_._instance.get_mutable()->reviewer_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class Review::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& reviewer(const Review* msg);
};

const ::ric::tasks::ObjectId&
Review::HasBitSetters::reviewer(const Review* msg) {
  return *msg->reviewer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Review::kReviewerFieldNumber;
const int Review::kRatingFieldNumber;
const int Review::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Review::Review()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Review)
}
Review::Review(const Review& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_reviewer()) {
    reviewer_ = new ::ric::tasks::ObjectId(*from.reviewer_);
  } else {
    reviewer_ = nullptr;
  }
  rating_ = from.rating_;
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Review)
}

void Review::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Review_ric_2dtasks_2frictasks_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reviewer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rating_) -
      reinterpret_cast<char*>(&reviewer_)) + sizeof(rating_));
}

Review::~Review() {
  // @@protoc_insertion_point(destructor:ric.tasks.Review)
  SharedDtor();
}

void Review::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reviewer_;
}

void Review::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Review& Review::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Review_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Review::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Review)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reviewer_ != nullptr) {
    delete reviewer_;
  }
  reviewer_ = nullptr;
  rating_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Review::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Review*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId reviewer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_reviewer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 rating = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rating(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Review.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Review::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Review)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId reviewer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reviewer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rating = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Review.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Review)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Review)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Review::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Review)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId reviewer = 1;
  if (this->has_reviewer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::reviewer(this), output);
  }

  // int32 rating = 2;
  if (this->rating() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rating(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Review.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Review)
}

::google::protobuf::uint8* Review::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Review)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId reviewer = 1;
  if (this->has_reviewer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::reviewer(this), target);
  }

  // int32 rating = 2;
  if (this->rating() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rating(), target);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Review.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Review)
  return target;
}

size_t Review::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Review)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .ric.tasks.ObjectId reviewer = 1;
  if (this->has_reviewer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reviewer_);
  }

  // int32 rating = 2;
  if (this->rating() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rating());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Review::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Review)
  GOOGLE_DCHECK_NE(&from, this);
  const Review* source =
      ::google::protobuf::DynamicCastToGenerated<Review>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Review)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Review)
    MergeFrom(*source);
  }
}

void Review::MergeFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Review)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_reviewer()) {
    mutable_reviewer()->::ric::tasks::ObjectId::MergeFrom(from.reviewer());
  }
  if (from.rating() != 0) {
    set_rating(from.rating());
  }
}

void Review::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Review)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Review::CopyFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Review)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Review::IsInitialized() const {
  return true;
}

void Review::Swap(Review* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Review::InternalSwap(Review* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reviewer_, other->reviewer_);
  swap(rating_, other->rating_);
}

::google::protobuf::Metadata Review::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Deadline::InitAsDefaultInstance() {
  ::ric::tasks::_Deadline_default_instance_._instance.get_mutable()->notify_until_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
class Deadline::HasBitSetters {
 public:
  static const ::google::protobuf::Int64Value& notify_until(const Deadline* msg);
};

const ::google::protobuf::Int64Value&
Deadline::HasBitSetters::notify_until(const Deadline* msg) {
  return *msg->notify_until_;
}
void Deadline::clear_notify_until() {
  if (GetArenaNoVirtual() == nullptr && notify_until_ != nullptr) {
    delete notify_until_;
  }
  notify_until_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deadline::kTimestampFieldNumber;
const int Deadline::kNotifyUntilFieldNumber;
const int Deadline::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deadline::Deadline()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Deadline)
}
Deadline::Deadline(const Deadline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notify_until()) {
    notify_until_ = new ::google::protobuf::Int64Value(*from.notify_until_);
  } else {
    notify_until_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Deadline)
}

void Deadline::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&notify_until_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&notify_until_)) + sizeof(status_));
}

Deadline::~Deadline() {
  // @@protoc_insertion_point(destructor:ric.tasks.Deadline)
  SharedDtor();
}

void Deadline::SharedDtor() {
  if (this != internal_default_instance()) delete notify_until_;
}

void Deadline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deadline& Deadline::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Deadline_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Deadline::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Deadline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && notify_until_ != nullptr) {
    delete notify_until_;
  }
  notify_until_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Deadline::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Deadline*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Int64Value notify_until = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Int64Value::_InternalParse;
        object = msg->mutable_notify_until();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Task.Status status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::ric::tasks::Task_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Deadline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Deadline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value notify_until = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notify_until()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::ric::tasks::Task_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Deadline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Deadline)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Deadline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Deadline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .google.protobuf.Int64Value notify_until = 2;
  if (this->has_notify_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::notify_until(this), output);
  }

  // .ric.tasks.Task.Status status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Deadline)
}

::google::protobuf::uint8* Deadline::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Deadline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .google.protobuf.Int64Value notify_until = 2;
  if (this->has_notify_until()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::notify_until(this), target);
  }

  // .ric.tasks.Task.Status status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Deadline)
  return target;
}

size_t Deadline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Deadline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value notify_until = 2;
  if (this->has_notify_until()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *notify_until_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .ric.tasks.Task.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deadline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Deadline)
  GOOGLE_DCHECK_NE(&from, this);
  const Deadline* source =
      ::google::protobuf::DynamicCastToGenerated<Deadline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Deadline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Deadline)
    MergeFrom(*source);
  }
}

void Deadline::MergeFrom(const Deadline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Deadline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_notify_until()) {
    mutable_notify_until()->::google::protobuf::Int64Value::MergeFrom(from.notify_until());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Deadline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Deadline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deadline::CopyFrom(const Deadline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Deadline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deadline::IsInitialized() const {
  return true;
}

void Deadline::Swap(Deadline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deadline::InternalSwap(Deadline* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(notify_until_, other->notify_until_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Deadline::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportTemplate::InitAsDefaultInstance() {
}
class ReportTemplate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportTemplate::kNameFieldNumber;
const int ReportTemplate::kFieldFieldNumber;
const int ReportTemplate::kRequiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportTemplate::ReportTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ReportTemplate)
}
ReportTemplate::ReportTemplate(const ReportTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&field_, &from.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_) -
    reinterpret_cast<char*>(&field_)) + sizeof(required_));
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ReportTemplate)
}

void ReportTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&field_)) + sizeof(required_));
}

ReportTemplate::~ReportTemplate() {
  // @@protoc_insertion_point(destructor:ric.tasks.ReportTemplate)
  SharedDtor();
}

void ReportTemplate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReportTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportTemplate& ReportTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportTemplate_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ReportTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ReportTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&field_)) + sizeof(required_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.ReportTemplate.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.tasks.ReportTemplate.FieldType field = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_field(static_cast<::ric::tasks::ReportTemplate_FieldType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool required = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_required(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ReportTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.ReportTemplate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ReportTemplate.FieldType field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_field(static_cast< ::ric::tasks::ReportTemplate_FieldType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool required = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ReportTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ReportTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ReportTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ReportTemplate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .ric.tasks.ReportTemplate.FieldType field = 2;
  if (this->field() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->field(), output);
  }

  // bool required = 3;
  if (this->required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->required(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ReportTemplate)
}

::google::protobuf::uint8* ReportTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ReportTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ReportTemplate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .ric.tasks.ReportTemplate.FieldType field = 2;
  if (this->field() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->field(), target);
  }

  // bool required = 3;
  if (this->required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->required(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ReportTemplate)
  return target;
}

size_t ReportTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ReportTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .ric.tasks.ReportTemplate.FieldType field = 2;
  if (this->field() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->field());
  }

  // bool required = 3;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ReportTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<ReportTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ReportTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ReportTemplate)
    MergeFrom(*source);
  }
}

void ReportTemplate::MergeFrom(const ReportTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ReportTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.field() != 0) {
    set_field(from.field());
  }
  if (from.required() != 0) {
    set_required(from.required());
  }
}

void ReportTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ReportTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportTemplate::CopyFrom(const ReportTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ReportTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportTemplate::IsInitialized() const {
  return true;
}

void ReportTemplate::Swap(ReportTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportTemplate::InternalSwap(ReportTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_, other->field_);
  swap(required_, other->required_);
}

::google::protobuf::Metadata ReportTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Report::InitAsDefaultInstance() {
  ::ric::tasks::_Report_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
class Report::HasBitSetters {
 public:
  static const ::google::protobuf::Any& value(const Report* msg);
};

const ::google::protobuf::Any&
Report::HasBitSetters::value(const Report* msg) {
  return *msg->value_;
}
void Report::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report::kNameFieldNumber;
const int Report::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report::Report()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Report)
}
Report::Report(const Report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::google::protobuf::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Report)
}

void Report::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Report_ric_2dtasks_2frictasks_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:ric.tasks.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report& Report::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Report_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Report::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Report*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Report.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Any value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Report)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Report.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Report)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Report.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Report)
}

::google::protobuf::uint8* Report::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Report.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Report* source =
      ::google::protobuf::DynamicCastToGenerated<Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Report)
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::google::protobuf::Any::MergeFrom(from.value());
  }
}

void Report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::Swap(Report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report::InternalSwap(Report* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::google::protobuf::Metadata Report::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Kind::InitAsDefaultInstance() {
  ::ric::tasks::_Kind_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class Kind::HasBitSetters {
 public:
  static const ::ric::tasks::ObjectId& oid(const Kind* msg);
};

const ::ric::tasks::ObjectId&
Kind::HasBitSetters::oid(const Kind* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Kind::kOidFieldNumber;
const int Kind::kNameFieldNumber;
const int Kind::kDiscriptionFieldNumber;
const int Kind::kSvgFieldNumber;
const int Kind::kRolesFieldNumber;
const int Kind::kReportTemplatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Kind::Kind()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.Kind)
}
Kind::Kind(const Kind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      roles_(from.roles_),
      report_templates_(from.report_templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  discription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.discription().size() > 0) {
    discription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discription_);
  }
  svg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.svg().size() > 0) {
    svg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svg_);
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.Kind)
}

void Kind::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_ = nullptr;
}

Kind::~Kind() {
  // @@protoc_insertion_point(destructor:ric.tasks.Kind)
  SharedDtor();
}

void Kind::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oid_;
}

void Kind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Kind& Kind::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Kind_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void Kind::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.Kind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  report_templates_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Kind::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Kind*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Kind.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string discription = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Kind.discription");
        object = msg->mutable_discription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string svg = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.Kind.svg");
        object = msg->mutable_svg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ric.tasks.ObjectId roles = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
          object = msg->add_roles();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .ric.tasks.ReportTemplate report_templates = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::ReportTemplate::_InternalParse;
          object = msg->add_report_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Kind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.Kind)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.ObjectId oid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Kind.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string discription = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->discription().data(), static_cast<int>(this->discription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Kind.discription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string svg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->svg().data(), static_cast<int>(this->svg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.Kind.svg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.ObjectId roles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.ReportTemplate report_templates = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_report_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.Kind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.Kind)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Kind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.Kind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::oid(this), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Kind.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string discription = 3;
  if (this->discription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discription().data(), static_cast<int>(this->discription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Kind.discription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->discription(), output);
  }

  // string svg = 4;
  if (this->svg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->svg().data(), static_cast<int>(this->svg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Kind.svg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->svg(), output);
  }

  // repeated .ric.tasks.ObjectId roles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->roles(static_cast<int>(i)),
      output);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->report_templates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.Kind)
}

::google::protobuf::uint8* Kind::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.Kind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::oid(this), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Kind.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string discription = 3;
  if (this->discription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discription().data(), static_cast<int>(this->discription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Kind.discription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->discription(), target);
  }

  // string svg = 4;
  if (this->svg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->svg().data(), static_cast<int>(this->svg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.Kind.svg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->svg(), target);
  }

  // repeated .ric.tasks.ObjectId roles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->roles(static_cast<int>(i)), target);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->report_templates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.Kind)
  return target;
}

size_t Kind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.Kind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.ObjectId roles = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->report_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->report_templates(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string discription = 3;
  if (this->discription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->discription());
  }

  // string svg = 4;
  if (this->svg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->svg());
  }

  // .ric.tasks.ObjectId oid = 1;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.Kind)
  GOOGLE_DCHECK_NE(&from, this);
  const Kind* source =
      ::google::protobuf::DynamicCastToGenerated<Kind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.Kind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.Kind)
    MergeFrom(*source);
  }
}

void Kind::MergeFrom(const Kind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.Kind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  report_templates_.MergeFrom(from.report_templates_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.discription().size() > 0) {

    discription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discription_);
  }
  if (from.svg().size() > 0) {

    svg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svg_);
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void Kind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.Kind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kind::CopyFrom(const Kind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.Kind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kind::IsInitialized() const {
  return true;
}

void Kind::Swap(Kind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kind::InternalSwap(Kind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&roles_)->InternalSwap(CastToBase(&other->roles_));
  CastToBase(&report_templates_)->InternalSwap(CastToBase(&other->report_templates_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  discription_.Swap(&other->discription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  svg_.Swap(&other->svg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata Kind::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KindEdit::InitAsDefaultInstance() {
  ::ric::tasks::_KindEdit_default_instance_._instance.get_mutable()->name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::ric::tasks::_KindEdit_default_instance_._instance.get_mutable()->discription_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::ric::tasks::_KindEdit_default_instance_._instance.get_mutable()->svg_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
class KindEdit::HasBitSetters {
 public:
  static const ::google::protobuf::StringValue& name(const KindEdit* msg);
  static const ::google::protobuf::StringValue& discription(const KindEdit* msg);
  static const ::google::protobuf::StringValue& svg(const KindEdit* msg);
};

const ::google::protobuf::StringValue&
KindEdit::HasBitSetters::name(const KindEdit* msg) {
  return *msg->name_;
}
const ::google::protobuf::StringValue&
KindEdit::HasBitSetters::discription(const KindEdit* msg) {
  return *msg->discription_;
}
const ::google::protobuf::StringValue&
KindEdit::HasBitSetters::svg(const KindEdit* msg) {
  return *msg->svg_;
}
void KindEdit::clear_name() {
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
void KindEdit::clear_discription() {
  if (GetArenaNoVirtual() == nullptr && discription_ != nullptr) {
    delete discription_;
  }
  discription_ = nullptr;
}
void KindEdit::clear_svg() {
  if (GetArenaNoVirtual() == nullptr && svg_ != nullptr) {
    delete svg_;
  }
  svg_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KindEdit::kNameFieldNumber;
const int KindEdit::kDiscriptionFieldNumber;
const int KindEdit::kSvgFieldNumber;
const int KindEdit::kRolesFieldNumber;
const int KindEdit::kReportTemplatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KindEdit::KindEdit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.KindEdit)
}
KindEdit::KindEdit(const KindEdit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      roles_(from.roles_),
      report_templates_(from.report_templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::google::protobuf::StringValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from.has_discription()) {
    discription_ = new ::google::protobuf::StringValue(*from.discription_);
  } else {
    discription_ = nullptr;
  }
  if (from.has_svg()) {
    svg_ = new ::google::protobuf::StringValue(*from.svg_);
  } else {
    svg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.KindEdit)
}

void KindEdit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KindEdit_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svg_) -
      reinterpret_cast<char*>(&name_)) + sizeof(svg_));
}

KindEdit::~KindEdit() {
  // @@protoc_insertion_point(destructor:ric.tasks.KindEdit)
  SharedDtor();
}

void KindEdit::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete discription_;
  if (this != internal_default_instance()) delete svg_;
}

void KindEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KindEdit& KindEdit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KindEdit_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void KindEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.KindEdit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  report_templates_.Clear();
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && discription_ != nullptr) {
    delete discription_;
  }
  discription_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && svg_ != nullptr) {
    delete svg_;
  }
  svg_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KindEdit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KindEdit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.StringValue name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::StringValue::_InternalParse;
        object = msg->mutable_name();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.StringValue discription = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::StringValue::_InternalParse;
        object = msg->mutable_discription();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.StringValue svg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::StringValue::_InternalParse;
        object = msg->mutable_svg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.tasks.ObjectId roles = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
          object = msg->add_roles();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .ric.tasks.ReportTemplate report_templates = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::ReportTemplate::_InternalParse;
          object = msg->add_report_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KindEdit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.KindEdit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue discription = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_discription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue svg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_svg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.ObjectId roles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.ReportTemplate report_templates = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_report_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.KindEdit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.KindEdit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KindEdit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.KindEdit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue name = 1;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::name(this), output);
  }

  // .google.protobuf.StringValue discription = 2;
  if (this->has_discription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::discription(this), output);
  }

  // .google.protobuf.StringValue svg = 3;
  if (this->has_svg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::svg(this), output);
  }

  // repeated .ric.tasks.ObjectId roles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->roles(static_cast<int>(i)),
      output);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->report_templates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.KindEdit)
}

::google::protobuf::uint8* KindEdit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.KindEdit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue name = 1;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::name(this), target);
  }

  // .google.protobuf.StringValue discription = 2;
  if (this->has_discription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::discription(this), target);
  }

  // .google.protobuf.StringValue svg = 3;
  if (this->has_svg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::svg(this), target);
  }

  // repeated .ric.tasks.ObjectId roles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->roles(static_cast<int>(i)), target);
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->report_templates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.KindEdit)
  return target;
}

size_t KindEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.KindEdit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.ObjectId roles = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // repeated .ric.tasks.ReportTemplate report_templates = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->report_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->report_templates(static_cast<int>(i)));
    }
  }

  // .google.protobuf.StringValue name = 1;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.StringValue discription = 2;
  if (this->has_discription()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *discription_);
  }

  // .google.protobuf.StringValue svg = 3;
  if (this->has_svg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *svg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KindEdit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.KindEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const KindEdit* source =
      ::google::protobuf::DynamicCastToGenerated<KindEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.KindEdit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.KindEdit)
    MergeFrom(*source);
  }
}

void KindEdit::MergeFrom(const KindEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.KindEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  report_templates_.MergeFrom(from.report_templates_);
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.has_discription()) {
    mutable_discription()->::google::protobuf::StringValue::MergeFrom(from.discription());
  }
  if (from.has_svg()) {
    mutable_svg()->::google::protobuf::StringValue::MergeFrom(from.svg());
  }
}

void KindEdit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.KindEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KindEdit::CopyFrom(const KindEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.KindEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KindEdit::IsInitialized() const {
  return true;
}

void KindEdit::Swap(KindEdit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KindEdit::InternalSwap(KindEdit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&roles_)->InternalSwap(CastToBase(&other->roles_));
  CastToBase(&report_templates_)->InternalSwap(CastToBase(&other->report_templates_));
  swap(name_, other->name_);
  swap(discription_, other->discription_);
  swap(svg_, other->svg_);
}

::google::protobuf::Metadata KindEdit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateTaskRequest::InitAsDefaultInstance() {
  ::ric::tasks::_CreateTaskRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_CreateTaskRequest_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::Task*>(
      ::ric::tasks::Task::internal_default_instance());
}
class CreateTaskRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const CreateTaskRequest* msg);
  static const ::ric::tasks::Task& task(const CreateTaskRequest* msg);
};

const ::ric::tasks::UserContext&
CreateTaskRequest::HasBitSetters::ctx(const CreateTaskRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::Task&
CreateTaskRequest::HasBitSetters::task(const CreateTaskRequest* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTaskRequest::kCtxFieldNumber;
const int CreateTaskRequest::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTaskRequest::CreateTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.CreateTaskRequest)
}
CreateTaskRequest::CreateTaskRequest(const CreateTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_task()) {
    task_ = new ::ric::tasks::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.CreateTaskRequest)
}

void CreateTaskRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(task_));
}

CreateTaskRequest::~CreateTaskRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.CreateTaskRequest)
  SharedDtor();
}

void CreateTaskRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete task_;
}

void CreateTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTaskRequest& CreateTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void CreateTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.CreateTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateTaskRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateTaskRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Task task = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Task::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.CreateTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.CreateTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.CreateTaskRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.CreateTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.Task task = 2;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.CreateTaskRequest)
}

::google::protobuf::uint8* CreateTaskRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.CreateTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.Task task = 2;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.CreateTaskRequest)
  return target;
}

size_t CreateTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.CreateTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.Task task = 2;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.CreateTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTaskRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.CreateTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.CreateTaskRequest)
    MergeFrom(*source);
  }
}

void CreateTaskRequest::MergeFrom(const CreateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.CreateTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_task()) {
    mutable_task()->::ric::tasks::Task::MergeFrom(from.task());
  }
}

void CreateTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.CreateTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTaskRequest::CopyFrom(const CreateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.CreateTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskRequest::IsInitialized() const {
  return true;
}

void CreateTaskRequest::Swap(CreateTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTaskRequest::InternalSwap(CreateTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata CreateTaskRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateTaskResponse::InitAsDefaultInstance() {
  ::ric::tasks::_CreateTaskResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::Task*>(
      ::ric::tasks::Task::internal_default_instance());
}
class CreateTaskResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Task& task(const CreateTaskResponse* msg);
};

const ::ric::tasks::Task&
CreateTaskResponse::HasBitSetters::task(const CreateTaskResponse* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTaskResponse::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTaskResponse::CreateTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.CreateTaskResponse)
}
CreateTaskResponse::CreateTaskResponse(const CreateTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::ric::tasks::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.CreateTaskResponse)
}

void CreateTaskResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  task_ = nullptr;
}

CreateTaskResponse::~CreateTaskResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.CreateTaskResponse)
  SharedDtor();
}

void CreateTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete task_;
}

void CreateTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTaskResponse& CreateTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void CreateTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.CreateTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateTaskResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateTaskResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Task::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.CreateTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.CreateTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.CreateTaskResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.CreateTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.CreateTaskResponse)
}

::google::protobuf::uint8* CreateTaskResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.CreateTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.CreateTaskResponse)
  return target;
}

size_t CreateTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.CreateTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.CreateTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTaskResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.CreateTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.CreateTaskResponse)
    MergeFrom(*source);
  }
}

void CreateTaskResponse::MergeFrom(const CreateTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.CreateTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::ric::tasks::Task::MergeFrom(from.task());
  }
}

void CreateTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.CreateTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTaskResponse::CopyFrom(const CreateTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.CreateTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTaskResponse::IsInitialized() const {
  return true;
}

void CreateTaskResponse::Swap(CreateTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTaskResponse::InternalSwap(CreateTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata CreateTaskResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetTaskRequest::InitAsDefaultInstance() {
  ::ric::tasks::_GetTaskRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_GetTaskRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class GetTaskRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const GetTaskRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const GetTaskRequest* msg);
};

const ::ric::tasks::UserContext&
GetTaskRequest::HasBitSetters::ctx(const GetTaskRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
GetTaskRequest::HasBitSetters::oid(const GetTaskRequest* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTaskRequest::kCtxFieldNumber;
const int GetTaskRequest::kOidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTaskRequest::GetTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.GetTaskRequest)
}
GetTaskRequest::GetTaskRequest(const GetTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.GetTaskRequest)
}

void GetTaskRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oid_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(oid_));
}

GetTaskRequest::~GetTaskRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.GetTaskRequest)
  SharedDtor();
}

void GetTaskRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
}

void GetTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskRequest& GetTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void GetTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.GetTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTaskRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetTaskRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.GetTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.GetTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.GetTaskRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.GetTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.GetTaskRequest)
}

::google::protobuf::uint8* GetTaskRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.GetTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.GetTaskRequest)
  return target;
}

size_t GetTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.GetTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.GetTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.GetTaskRequest)
    MergeFrom(*source);
  }
}

void GetTaskRequest::MergeFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void GetTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskRequest::CopyFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskRequest::IsInitialized() const {
  return true;
}

void GetTaskRequest::Swap(GetTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTaskRequest::InternalSwap(GetTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata GetTaskRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetTaskResponse::InitAsDefaultInstance() {
  ::ric::tasks::_GetTaskResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::Task*>(
      ::ric::tasks::Task::internal_default_instance());
}
class GetTaskResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Task& task(const GetTaskResponse* msg);
};

const ::ric::tasks::Task&
GetTaskResponse::HasBitSetters::task(const GetTaskResponse* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTaskResponse::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTaskResponse::GetTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.GetTaskResponse)
}
GetTaskResponse::GetTaskResponse(const GetTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::ric::tasks::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.GetTaskResponse)
}

void GetTaskResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  task_ = nullptr;
}

GetTaskResponse::~GetTaskResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.GetTaskResponse)
  SharedDtor();
}

void GetTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete task_;
}

void GetTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskResponse& GetTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void GetTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.GetTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTaskResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetTaskResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Task::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.GetTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.GetTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.GetTaskResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.GetTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.GetTaskResponse)
}

::google::protobuf::uint8* GetTaskResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.GetTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.GetTaskResponse)
  return target;
}

size_t GetTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.GetTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.GetTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.GetTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.GetTaskResponse)
    MergeFrom(*source);
  }
}

void GetTaskResponse::MergeFrom(const GetTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.GetTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::ric::tasks::Task::MergeFrom(from.task());
  }
}

void GetTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.GetTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskResponse::CopyFrom(const GetTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.GetTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskResponse::IsInitialized() const {
  return true;
}

void GetTaskResponse::Swap(GetTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTaskResponse::InternalSwap(GetTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata GetTaskResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteTaskRequest::InitAsDefaultInstance() {
  ::ric::tasks::_DeleteTaskRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_DeleteTaskRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class DeleteTaskRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const DeleteTaskRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const DeleteTaskRequest* msg);
};

const ::ric::tasks::UserContext&
DeleteTaskRequest::HasBitSetters::ctx(const DeleteTaskRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
DeleteTaskRequest::HasBitSetters::oid(const DeleteTaskRequest* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTaskRequest::kCtxFieldNumber;
const int DeleteTaskRequest::kOidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTaskRequest::DeleteTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.DeleteTaskRequest)
}
DeleteTaskRequest::DeleteTaskRequest(const DeleteTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.DeleteTaskRequest)
}

void DeleteTaskRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oid_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(oid_));
}

DeleteTaskRequest::~DeleteTaskRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.DeleteTaskRequest)
  SharedDtor();
}

void DeleteTaskRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
}

void DeleteTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTaskRequest& DeleteTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void DeleteTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.DeleteTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteTaskRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteTaskRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.DeleteTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.DeleteTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.DeleteTaskRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.DeleteTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.DeleteTaskRequest)
}

::google::protobuf::uint8* DeleteTaskRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.DeleteTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.DeleteTaskRequest)
  return target;
}

size_t DeleteTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.DeleteTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.DeleteTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTaskRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.DeleteTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.DeleteTaskRequest)
    MergeFrom(*source);
  }
}

void DeleteTaskRequest::MergeFrom(const DeleteTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.DeleteTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void DeleteTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.DeleteTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTaskRequest::CopyFrom(const DeleteTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.DeleteTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTaskRequest::IsInitialized() const {
  return true;
}

void DeleteTaskRequest::Swap(DeleteTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTaskRequest::InternalSwap(DeleteTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata DeleteTaskRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteTaskResponse::InitAsDefaultInstance() {
}
class DeleteTaskResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTaskResponse::DeleteTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.DeleteTaskResponse)
}
DeleteTaskResponse::DeleteTaskResponse(const DeleteTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.tasks.DeleteTaskResponse)
}

void DeleteTaskResponse::SharedCtor() {
}

DeleteTaskResponse::~DeleteTaskResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.DeleteTaskResponse)
  SharedDtor();
}

void DeleteTaskResponse::SharedDtor() {
}

void DeleteTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTaskResponse& DeleteTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void DeleteTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.DeleteTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteTaskResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteTaskResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.DeleteTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.DeleteTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.DeleteTaskResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.DeleteTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.DeleteTaskResponse)
}

::google::protobuf::uint8* DeleteTaskResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.DeleteTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.DeleteTaskResponse)
  return target;
}

size_t DeleteTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.DeleteTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.DeleteTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTaskResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.DeleteTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.DeleteTaskResponse)
    MergeFrom(*source);
  }
}

void DeleteTaskResponse::MergeFrom(const DeleteTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.DeleteTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.DeleteTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTaskResponse::CopyFrom(const DeleteTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.DeleteTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTaskResponse::IsInitialized() const {
  return true;
}

void DeleteTaskResponse::Swap(DeleteTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTaskResponse::InternalSwap(DeleteTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteTaskResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateTaskRequest::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateTaskRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_UpdateTaskRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_UpdateTaskRequest_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::TaskEdit*>(
      ::ric::tasks::TaskEdit::internal_default_instance());
}
class UpdateTaskRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const UpdateTaskRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const UpdateTaskRequest* msg);
  static const ::ric::tasks::TaskEdit& task(const UpdateTaskRequest* msg);
};

const ::ric::tasks::UserContext&
UpdateTaskRequest::HasBitSetters::ctx(const UpdateTaskRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
UpdateTaskRequest::HasBitSetters::oid(const UpdateTaskRequest* msg) {
  return *msg->oid_;
}
const ::ric::tasks::TaskEdit&
UpdateTaskRequest::HasBitSetters::task(const UpdateTaskRequest* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTaskRequest::kCtxFieldNumber;
const int UpdateTaskRequest::kOidFieldNumber;
const int UpdateTaskRequest::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTaskRequest::UpdateTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateTaskRequest)
}
UpdateTaskRequest::UpdateTaskRequest(const UpdateTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  if (from.has_task()) {
    task_ = new ::ric::tasks::TaskEdit(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateTaskRequest)
}

void UpdateTaskRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(task_));
}

UpdateTaskRequest::~UpdateTaskRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateTaskRequest)
  SharedDtor();
}

void UpdateTaskRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
  if (this != internal_default_instance()) delete task_;
}

void UpdateTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTaskRequest& UpdateTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateTaskRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateTaskRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateTaskRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.TaskEdit task = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::TaskEdit::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.TaskEdit task = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateTaskRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.TaskEdit task = 3;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateTaskRequest)
}

::google::protobuf::uint8* UpdateTaskRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.TaskEdit task = 3;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateTaskRequest)
  return target;
}

size_t UpdateTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  // .ric.tasks.TaskEdit task = 3;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTaskRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateTaskRequest)
    MergeFrom(*source);
  }
}

void UpdateTaskRequest::MergeFrom(const UpdateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
  if (from.has_task()) {
    mutable_task()->::ric::tasks::TaskEdit::MergeFrom(from.task());
  }
}

void UpdateTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTaskRequest::CopyFrom(const UpdateTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTaskRequest::IsInitialized() const {
  return true;
}

void UpdateTaskRequest::Swap(UpdateTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTaskRequest::InternalSwap(UpdateTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata UpdateTaskRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateTaskResponse::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateTaskResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::Task*>(
      ::ric::tasks::Task::internal_default_instance());
}
class UpdateTaskResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Task& task(const UpdateTaskResponse* msg);
};

const ::ric::tasks::Task&
UpdateTaskResponse::HasBitSetters::task(const UpdateTaskResponse* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTaskResponse::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTaskResponse::UpdateTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateTaskResponse)
}
UpdateTaskResponse::UpdateTaskResponse(const UpdateTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::ric::tasks::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateTaskResponse)
}

void UpdateTaskResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  task_ = nullptr;
}

UpdateTaskResponse::~UpdateTaskResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateTaskResponse)
  SharedDtor();
}

void UpdateTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete task_;
}

void UpdateTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTaskResponse& UpdateTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateTaskResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateTaskResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateTaskResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Task::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateTaskResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateTaskResponse)
}

::google::protobuf::uint8* UpdateTaskResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateTaskResponse)
  return target;
}

size_t UpdateTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTaskResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateTaskResponse)
    MergeFrom(*source);
  }
}

void UpdateTaskResponse::MergeFrom(const UpdateTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::ric::tasks::Task::MergeFrom(from.task());
  }
}

void UpdateTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTaskResponse::CopyFrom(const UpdateTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTaskResponse::IsInitialized() const {
  return true;
}

void UpdateTaskResponse::Swap(UpdateTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTaskResponse::InternalSwap(UpdateTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata UpdateTaskResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

UpdateTaskOrderRequest_PositionsEntry_DoNotUse::UpdateTaskOrderRequest_PositionsEntry_DoNotUse() {}
UpdateTaskOrderRequest_PositionsEntry_DoNotUse::UpdateTaskOrderRequest_PositionsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void UpdateTaskOrderRequest_PositionsEntry_DoNotUse::MergeFrom(const UpdateTaskOrderRequest_PositionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata UpdateTaskOrderRequest_PositionsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[20];
}
void UpdateTaskOrderRequest_PositionsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateTaskOrderRequest_PositionsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      UpdateTaskOrderRequest_PositionsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.tasks.UpdateTaskOrderRequest.PositionsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void UpdateTaskOrderRequest::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateTaskOrderRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_UpdateTaskOrderRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class UpdateTaskOrderRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const UpdateTaskOrderRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const UpdateTaskOrderRequest* msg);
};

const ::ric::tasks::UserContext&
UpdateTaskOrderRequest::HasBitSetters::ctx(const UpdateTaskOrderRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
UpdateTaskOrderRequest::HasBitSetters::oid(const UpdateTaskOrderRequest* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTaskOrderRequest::kCtxFieldNumber;
const int UpdateTaskOrderRequest::kOidFieldNumber;
const int UpdateTaskOrderRequest::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTaskOrderRequest::UpdateTaskOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateTaskOrderRequest)
}
UpdateTaskOrderRequest::UpdateTaskOrderRequest(const UpdateTaskOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positions_.MergeFrom(from.positions_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateTaskOrderRequest)
}

void UpdateTaskOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateTaskOrderRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oid_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(oid_));
}

UpdateTaskOrderRequest::~UpdateTaskOrderRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateTaskOrderRequest)
  SharedDtor();
}

void UpdateTaskOrderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
}

void UpdateTaskOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTaskOrderRequest& UpdateTaskOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateTaskOrderRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateTaskOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateTaskOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateTaskOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateTaskOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, int32> positions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->positions_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateTaskOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateTaskOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> positions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          UpdateTaskOrderRequest_PositionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              UpdateTaskOrderRequest_PositionsEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&positions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.UpdateTaskOrderRequest.PositionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateTaskOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateTaskOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateTaskOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateTaskOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  // map<string, int32> positions = 3;
  if (!this->positions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.tasks.UpdateTaskOrderRequest.PositionsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->positions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->positions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateTaskOrderRequest_PositionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(positions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateTaskOrderRequest_PositionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it) {
        entry.reset(positions_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateTaskOrderRequest)
}

::google::protobuf::uint8* UpdateTaskOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateTaskOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  // map<string, int32> positions = 3;
  if (!this->positions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.tasks.UpdateTaskOrderRequest.PositionsEntry.key");
      }
    };

    if (false &&
        this->positions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->positions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateTaskOrderRequest_PositionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(positions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateTaskOrderRequest_PositionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it) {
        entry.reset(positions_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateTaskOrderRequest)
  return target;
}

size_t UpdateTaskOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateTaskOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> positions = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->positions_size());
  {
    ::std::unique_ptr<UpdateTaskOrderRequest_PositionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->positions().begin();
        it != this->positions().end(); ++it) {
      entry.reset(positions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTaskOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateTaskOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTaskOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateTaskOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateTaskOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateTaskOrderRequest)
    MergeFrom(*source);
  }
}

void UpdateTaskOrderRequest::MergeFrom(const UpdateTaskOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateTaskOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void UpdateTaskOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateTaskOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTaskOrderRequest::CopyFrom(const UpdateTaskOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateTaskOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTaskOrderRequest::IsInitialized() const {
  return true;
}

void UpdateTaskOrderRequest::Swap(UpdateTaskOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTaskOrderRequest::InternalSwap(UpdateTaskOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  positions_.Swap(&other->positions_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata UpdateTaskOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateTaskOrderResponse::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateTaskOrderResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::Task*>(
      ::ric::tasks::Task::internal_default_instance());
}
class UpdateTaskOrderResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Task& task(const UpdateTaskOrderResponse* msg);
};

const ::ric::tasks::Task&
UpdateTaskOrderResponse::HasBitSetters::task(const UpdateTaskOrderResponse* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTaskOrderResponse::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTaskOrderResponse::UpdateTaskOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateTaskOrderResponse)
}
UpdateTaskOrderResponse::UpdateTaskOrderResponse(const UpdateTaskOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::ric::tasks::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateTaskOrderResponse)
}

void UpdateTaskOrderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateTaskOrderResponse_ric_2dtasks_2frictasks_2eproto.base);
  task_ = nullptr;
}

UpdateTaskOrderResponse::~UpdateTaskOrderResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateTaskOrderResponse)
  SharedDtor();
}

void UpdateTaskOrderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete task_;
}

void UpdateTaskOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTaskOrderResponse& UpdateTaskOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateTaskOrderResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateTaskOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateTaskOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateTaskOrderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateTaskOrderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Task::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateTaskOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateTaskOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateTaskOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateTaskOrderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateTaskOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateTaskOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateTaskOrderResponse)
}

::google::protobuf::uint8* UpdateTaskOrderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateTaskOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateTaskOrderResponse)
  return target;
}

size_t UpdateTaskOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateTaskOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTaskOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateTaskOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTaskOrderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateTaskOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateTaskOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateTaskOrderResponse)
    MergeFrom(*source);
  }
}

void UpdateTaskOrderResponse::MergeFrom(const UpdateTaskOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateTaskOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::ric::tasks::Task::MergeFrom(from.task());
  }
}

void UpdateTaskOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateTaskOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTaskOrderResponse::CopyFrom(const UpdateTaskOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateTaskOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTaskOrderResponse::IsInitialized() const {
  return true;
}

void UpdateTaskOrderResponse::Swap(UpdateTaskOrderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTaskOrderResponse::InternalSwap(UpdateTaskOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata UpdateTaskOrderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangeTaskStatusRequest::InitAsDefaultInstance() {
  ::ric::tasks::_ChangeTaskStatusRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_ChangeTaskStatusRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_ChangeTaskStatusRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::ric::tasks::Location*>(
      ::ric::tasks::Location::internal_default_instance());
  ::ric::tasks::_ChangeTaskStatusRequest_default_instance_._instance.get_mutable()->success_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
class ChangeTaskStatusRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const ChangeTaskStatusRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const ChangeTaskStatusRequest* msg);
  static const ::ric::tasks::Location& location(const ChangeTaskStatusRequest* msg);
  static const ::google::protobuf::BoolValue& success(const ChangeTaskStatusRequest* msg);
};

const ::ric::tasks::UserContext&
ChangeTaskStatusRequest::HasBitSetters::ctx(const ChangeTaskStatusRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
ChangeTaskStatusRequest::HasBitSetters::oid(const ChangeTaskStatusRequest* msg) {
  return *msg->oid_;
}
const ::ric::tasks::Location&
ChangeTaskStatusRequest::HasBitSetters::location(const ChangeTaskStatusRequest* msg) {
  return *msg->location_;
}
const ::google::protobuf::BoolValue&
ChangeTaskStatusRequest::HasBitSetters::success(const ChangeTaskStatusRequest* msg) {
  return *msg->success_;
}
void ChangeTaskStatusRequest::clear_success() {
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeTaskStatusRequest::kCtxFieldNumber;
const int ChangeTaskStatusRequest::kOidFieldNumber;
const int ChangeTaskStatusRequest::kNewStatusFieldNumber;
const int ChangeTaskStatusRequest::kLocationFieldNumber;
const int ChangeTaskStatusRequest::kSuccessFieldNumber;
const int ChangeTaskStatusRequest::kCommentFieldNumber;
const int ChangeTaskStatusRequest::kReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeTaskStatusRequest::ChangeTaskStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ChangeTaskStatusRequest)
}
ChangeTaskStatusRequest::ChangeTaskStatusRequest(const ChangeTaskStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      report_(from.report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  if (from.has_location()) {
    location_ = new ::ric::tasks::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_success()) {
    success_ = new ::google::protobuf::BoolValue(*from.success_);
  } else {
    success_ = nullptr;
  }
  new_status_ = from.new_status_;
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ChangeTaskStatusRequest)
}

void ChangeTaskStatusRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangeTaskStatusRequest_ric_2dtasks_2frictasks_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_status_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(new_status_));
}

ChangeTaskStatusRequest::~ChangeTaskStatusRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.ChangeTaskStatusRequest)
  SharedDtor();
}

void ChangeTaskStatusRequest::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete success_;
}

void ChangeTaskStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeTaskStatusRequest& ChangeTaskStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangeTaskStatusRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ChangeTaskStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ChangeTaskStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_.Clear();
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && success_ != nullptr) {
    delete success_;
  }
  success_ = nullptr;
  new_status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangeTaskStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangeTaskStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Task.Status new_status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_new_status(static_cast<::ric::tasks::Task_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ric.tasks.Location location = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Location::_InternalParse;
        object = msg->mutable_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue success = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_success();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string comment = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.tasks.ChangeTaskStatusRequest.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ric.tasks.Report report = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::tasks::Report::_InternalParse;
          object = msg->add_report();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangeTaskStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ChangeTaskStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Task.Status new_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_new_status(static_cast< ::ric::tasks::Task_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.tasks.ChangeTaskStatusRequest.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.tasks.Report report = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ChangeTaskStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ChangeTaskStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangeTaskStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ChangeTaskStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.Task.Status new_status = 3;
  if (this->new_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_status(), output);
  }

  // .ric.tasks.Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::location(this), output);
  }

  // .google.protobuf.BoolValue success = 5;
  if (this->has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::success(this), output);
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ChangeTaskStatusRequest.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->comment(), output);
  }

  // repeated .ric.tasks.Report report = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->report(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ChangeTaskStatusRequest)
}

::google::protobuf::uint8* ChangeTaskStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ChangeTaskStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.Task.Status new_status = 3;
  if (this->new_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_status(), target);
  }

  // .ric.tasks.Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::location(this), target);
  }

  // .google.protobuf.BoolValue success = 5;
  if (this->has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::success(this), target);
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.tasks.ChangeTaskStatusRequest.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comment(), target);
  }

  // repeated .ric.tasks.Report report = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->report_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->report(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ChangeTaskStatusRequest)
  return target;
}

size_t ChangeTaskStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ChangeTaskStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.tasks.Report report = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->report_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->report(static_cast<int>(i)));
    }
  }

  // string comment = 6;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  // .ric.tasks.Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .google.protobuf.BoolValue success = 5;
  if (this->has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *success_);
  }

  // .ric.tasks.Task.Status new_status = 3;
  if (this->new_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeTaskStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ChangeTaskStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTaskStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ChangeTaskStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ChangeTaskStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ChangeTaskStatusRequest)
    MergeFrom(*source);
  }
}

void ChangeTaskStatusRequest::MergeFrom(const ChangeTaskStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ChangeTaskStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  report_.MergeFrom(from.report_);
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
  if (from.has_location()) {
    mutable_location()->::ric::tasks::Location::MergeFrom(from.location());
  }
  if (from.has_success()) {
    mutable_success()->::google::protobuf::BoolValue::MergeFrom(from.success());
  }
  if (from.new_status() != 0) {
    set_new_status(from.new_status());
  }
}

void ChangeTaskStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ChangeTaskStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTaskStatusRequest::CopyFrom(const ChangeTaskStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ChangeTaskStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTaskStatusRequest::IsInitialized() const {
  return true;
}

void ChangeTaskStatusRequest::Swap(ChangeTaskStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeTaskStatusRequest::InternalSwap(ChangeTaskStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&report_)->InternalSwap(CastToBase(&other->report_));
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
  swap(location_, other->location_);
  swap(success_, other->success_);
  swap(new_status_, other->new_status_);
}

::google::protobuf::Metadata ChangeTaskStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangeTaskStatusResponse::InitAsDefaultInstance() {
  ::ric::tasks::_ChangeTaskStatusResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::ric::tasks::Task*>(
      ::ric::tasks::Task::internal_default_instance());
}
class ChangeTaskStatusResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Task& task(const ChangeTaskStatusResponse* msg);
};

const ::ric::tasks::Task&
ChangeTaskStatusResponse::HasBitSetters::task(const ChangeTaskStatusResponse* msg) {
  return *msg->task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeTaskStatusResponse::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeTaskStatusResponse::ChangeTaskStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.ChangeTaskStatusResponse)
}
ChangeTaskStatusResponse::ChangeTaskStatusResponse(const ChangeTaskStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task()) {
    task_ = new ::ric::tasks::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.ChangeTaskStatusResponse)
}

void ChangeTaskStatusResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangeTaskStatusResponse_ric_2dtasks_2frictasks_2eproto.base);
  task_ = nullptr;
}

ChangeTaskStatusResponse::~ChangeTaskStatusResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.ChangeTaskStatusResponse)
  SharedDtor();
}

void ChangeTaskStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete task_;
}

void ChangeTaskStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeTaskStatusResponse& ChangeTaskStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangeTaskStatusResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void ChangeTaskStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.ChangeTaskStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangeTaskStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangeTaskStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Task::_InternalParse;
        object = msg->mutable_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangeTaskStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.ChangeTaskStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Task task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.ChangeTaskStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.ChangeTaskStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangeTaskStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.ChangeTaskStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.ChangeTaskStatusResponse)
}

::google::protobuf::uint8* ChangeTaskStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.ChangeTaskStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.ChangeTaskStatusResponse)
  return target;
}

size_t ChangeTaskStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.ChangeTaskStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Task task = 1;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeTaskStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.ChangeTaskStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeTaskStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ChangeTaskStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.ChangeTaskStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.ChangeTaskStatusResponse)
    MergeFrom(*source);
  }
}

void ChangeTaskStatusResponse::MergeFrom(const ChangeTaskStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.ChangeTaskStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task()) {
    mutable_task()->::ric::tasks::Task::MergeFrom(from.task());
  }
}

void ChangeTaskStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.ChangeTaskStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTaskStatusResponse::CopyFrom(const ChangeTaskStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.ChangeTaskStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTaskStatusResponse::IsInitialized() const {
  return true;
}

void ChangeTaskStatusResponse::Swap(ChangeTaskStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeTaskStatusResponse::InternalSwap(ChangeTaskStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_, other->task_);
}

::google::protobuf::Metadata ChangeTaskStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateKindRequest::InitAsDefaultInstance() {
  ::ric::tasks::_CreateKindRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_CreateKindRequest_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::Kind*>(
      ::ric::tasks::Kind::internal_default_instance());
}
class CreateKindRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const CreateKindRequest* msg);
  static const ::ric::tasks::Kind& kind(const CreateKindRequest* msg);
};

const ::ric::tasks::UserContext&
CreateKindRequest::HasBitSetters::ctx(const CreateKindRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::Kind&
CreateKindRequest::HasBitSetters::kind(const CreateKindRequest* msg) {
  return *msg->kind_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateKindRequest::kCtxFieldNumber;
const int CreateKindRequest::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateKindRequest::CreateKindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.CreateKindRequest)
}
CreateKindRequest::CreateKindRequest(const CreateKindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::Kind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.CreateKindRequest)
}

void CreateKindRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(kind_));
}

CreateKindRequest::~CreateKindRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.CreateKindRequest)
  SharedDtor();
}

void CreateKindRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete kind_;
}

void CreateKindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateKindRequest& CreateKindRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void CreateKindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.CreateKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateKindRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateKindRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.Kind kind = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Kind::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateKindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.CreateKindRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.Kind kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.CreateKindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.CreateKindRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateKindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.CreateKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.Kind kind = 2;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::kind(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.CreateKindRequest)
}

::google::protobuf::uint8* CreateKindRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.CreateKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.Kind kind = 2;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::kind(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.CreateKindRequest)
  return target;
}

size_t CreateKindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.CreateKindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.Kind kind = 2;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateKindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.CreateKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateKindRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateKindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.CreateKindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.CreateKindRequest)
    MergeFrom(*source);
  }
}

void CreateKindRequest::MergeFrom(const CreateKindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.CreateKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::Kind::MergeFrom(from.kind());
  }
}

void CreateKindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.CreateKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateKindRequest::CopyFrom(const CreateKindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.CreateKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateKindRequest::IsInitialized() const {
  return true;
}

void CreateKindRequest::Swap(CreateKindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateKindRequest::InternalSwap(CreateKindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata CreateKindRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateKindResponse::InitAsDefaultInstance() {
  ::ric::tasks::_CreateKindResponse_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::Kind*>(
      ::ric::tasks::Kind::internal_default_instance());
}
class CreateKindResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Kind& kind(const CreateKindResponse* msg);
};

const ::ric::tasks::Kind&
CreateKindResponse::HasBitSetters::kind(const CreateKindResponse* msg) {
  return *msg->kind_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateKindResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateKindResponse::CreateKindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.CreateKindResponse)
}
CreateKindResponse::CreateKindResponse(const CreateKindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::Kind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.CreateKindResponse)
}

void CreateKindResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  kind_ = nullptr;
}

CreateKindResponse::~CreateKindResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.CreateKindResponse)
  SharedDtor();
}

void CreateKindResponse::SharedDtor() {
  if (this != internal_default_instance()) delete kind_;
}

void CreateKindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateKindResponse& CreateKindResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void CreateKindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.CreateKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateKindResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateKindResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Kind kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Kind::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateKindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.CreateKindResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Kind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.CreateKindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.CreateKindResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateKindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.CreateKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::kind(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.CreateKindResponse)
}

::google::protobuf::uint8* CreateKindResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.CreateKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::kind(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.CreateKindResponse)
  return target;
}

size_t CreateKindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.CreateKindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateKindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.CreateKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateKindResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateKindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.CreateKindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.CreateKindResponse)
    MergeFrom(*source);
  }
}

void CreateKindResponse::MergeFrom(const CreateKindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.CreateKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::Kind::MergeFrom(from.kind());
  }
}

void CreateKindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.CreateKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateKindResponse::CopyFrom(const CreateKindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.CreateKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateKindResponse::IsInitialized() const {
  return true;
}

void CreateKindResponse::Swap(CreateKindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateKindResponse::InternalSwap(CreateKindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata CreateKindResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetKindRequest::InitAsDefaultInstance() {
  ::ric::tasks::_GetKindRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_GetKindRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class GetKindRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const GetKindRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const GetKindRequest* msg);
};

const ::ric::tasks::UserContext&
GetKindRequest::HasBitSetters::ctx(const GetKindRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
GetKindRequest::HasBitSetters::oid(const GetKindRequest* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetKindRequest::kCtxFieldNumber;
const int GetKindRequest::kOidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetKindRequest::GetKindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.GetKindRequest)
}
GetKindRequest::GetKindRequest(const GetKindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.GetKindRequest)
}

void GetKindRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oid_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(oid_));
}

GetKindRequest::~GetKindRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.GetKindRequest)
  SharedDtor();
}

void GetKindRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
}

void GetKindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetKindRequest& GetKindRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void GetKindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.GetKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetKindRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetKindRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetKindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.GetKindRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.GetKindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.GetKindRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetKindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.GetKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.GetKindRequest)
}

::google::protobuf::uint8* GetKindRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.GetKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.GetKindRequest)
  return target;
}

size_t GetKindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.GetKindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.GetKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKindRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetKindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.GetKindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.GetKindRequest)
    MergeFrom(*source);
  }
}

void GetKindRequest::MergeFrom(const GetKindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.GetKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void GetKindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.GetKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKindRequest::CopyFrom(const GetKindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.GetKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKindRequest::IsInitialized() const {
  return true;
}

void GetKindRequest::Swap(GetKindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetKindRequest::InternalSwap(GetKindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata GetKindRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetKindResponse::InitAsDefaultInstance() {
  ::ric::tasks::_GetKindResponse_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::Kind*>(
      ::ric::tasks::Kind::internal_default_instance());
}
class GetKindResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Kind& kind(const GetKindResponse* msg);
};

const ::ric::tasks::Kind&
GetKindResponse::HasBitSetters::kind(const GetKindResponse* msg) {
  return *msg->kind_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetKindResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetKindResponse::GetKindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.GetKindResponse)
}
GetKindResponse::GetKindResponse(const GetKindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::Kind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.GetKindResponse)
}

void GetKindResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  kind_ = nullptr;
}

GetKindResponse::~GetKindResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.GetKindResponse)
  SharedDtor();
}

void GetKindResponse::SharedDtor() {
  if (this != internal_default_instance()) delete kind_;
}

void GetKindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetKindResponse& GetKindResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void GetKindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.GetKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetKindResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetKindResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Kind kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Kind::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetKindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.GetKindResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Kind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.GetKindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.GetKindResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetKindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.GetKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::kind(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.GetKindResponse)
}

::google::protobuf::uint8* GetKindResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.GetKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::kind(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.GetKindResponse)
  return target;
}

size_t GetKindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.GetKindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetKindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.GetKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetKindResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetKindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.GetKindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.GetKindResponse)
    MergeFrom(*source);
  }
}

void GetKindResponse::MergeFrom(const GetKindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.GetKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::Kind::MergeFrom(from.kind());
  }
}

void GetKindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.GetKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKindResponse::CopyFrom(const GetKindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.GetKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKindResponse::IsInitialized() const {
  return true;
}

void GetKindResponse::Swap(GetKindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetKindResponse::InternalSwap(GetKindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata GetKindResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateKindRequest::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateKindRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_UpdateKindRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
  ::ric::tasks::_UpdateKindRequest_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::KindEdit*>(
      ::ric::tasks::KindEdit::internal_default_instance());
}
class UpdateKindRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const UpdateKindRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const UpdateKindRequest* msg);
  static const ::ric::tasks::KindEdit& kind(const UpdateKindRequest* msg);
};

const ::ric::tasks::UserContext&
UpdateKindRequest::HasBitSetters::ctx(const UpdateKindRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
UpdateKindRequest::HasBitSetters::oid(const UpdateKindRequest* msg) {
  return *msg->oid_;
}
const ::ric::tasks::KindEdit&
UpdateKindRequest::HasBitSetters::kind(const UpdateKindRequest* msg) {
  return *msg->kind_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateKindRequest::kCtxFieldNumber;
const int UpdateKindRequest::kOidFieldNumber;
const int UpdateKindRequest::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateKindRequest::UpdateKindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateKindRequest)
}
UpdateKindRequest::UpdateKindRequest(const UpdateKindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::KindEdit(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateKindRequest)
}

void UpdateKindRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(kind_));
}

UpdateKindRequest::~UpdateKindRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateKindRequest)
  SharedDtor();
}

void UpdateKindRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
  if (this != internal_default_instance()) delete kind_;
}

void UpdateKindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateKindRequest& UpdateKindRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateKindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateKindRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateKindRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.KindEdit kind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::KindEdit::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateKindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateKindRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.KindEdit kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateKindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateKindRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateKindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  // .ric.tasks.KindEdit kind = 3;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::kind(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateKindRequest)
}

::google::protobuf::uint8* UpdateKindRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  // .ric.tasks.KindEdit kind = 3;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::kind(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateKindRequest)
  return target;
}

size_t UpdateKindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateKindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  // .ric.tasks.KindEdit kind = 3;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateKindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateKindRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateKindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateKindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateKindRequest)
    MergeFrom(*source);
  }
}

void UpdateKindRequest::MergeFrom(const UpdateKindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::KindEdit::MergeFrom(from.kind());
  }
}

void UpdateKindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateKindRequest::CopyFrom(const UpdateKindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateKindRequest::IsInitialized() const {
  return true;
}

void UpdateKindRequest::Swap(UpdateKindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateKindRequest::InternalSwap(UpdateKindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata UpdateKindRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateKindResponse::InitAsDefaultInstance() {
  ::ric::tasks::_UpdateKindResponse_default_instance_._instance.get_mutable()->kind_ = const_cast< ::ric::tasks::Kind*>(
      ::ric::tasks::Kind::internal_default_instance());
}
class UpdateKindResponse::HasBitSetters {
 public:
  static const ::ric::tasks::Kind& kind(const UpdateKindResponse* msg);
};

const ::ric::tasks::Kind&
UpdateKindResponse::HasBitSetters::kind(const UpdateKindResponse* msg) {
  return *msg->kind_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateKindResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateKindResponse::UpdateKindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.UpdateKindResponse)
}
UpdateKindResponse::UpdateKindResponse(const UpdateKindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kind()) {
    kind_ = new ::ric::tasks::Kind(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.UpdateKindResponse)
}

void UpdateKindResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  kind_ = nullptr;
}

UpdateKindResponse::~UpdateKindResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.UpdateKindResponse)
  SharedDtor();
}

void UpdateKindResponse::SharedDtor() {
  if (this != internal_default_instance()) delete kind_;
}

void UpdateKindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateKindResponse& UpdateKindResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void UpdateKindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.UpdateKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateKindResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateKindResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.Kind kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::Kind::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateKindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.UpdateKindResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.Kind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.UpdateKindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.UpdateKindResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateKindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.UpdateKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::kind(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.UpdateKindResponse)
}

::google::protobuf::uint8* UpdateKindResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.UpdateKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::kind(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.UpdateKindResponse)
  return target;
}

size_t UpdateKindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.UpdateKindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.Kind kind = 1;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateKindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.UpdateKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateKindResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateKindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.UpdateKindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.UpdateKindResponse)
    MergeFrom(*source);
  }
}

void UpdateKindResponse::MergeFrom(const UpdateKindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.UpdateKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kind()) {
    mutable_kind()->::ric::tasks::Kind::MergeFrom(from.kind());
  }
}

void UpdateKindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.UpdateKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateKindResponse::CopyFrom(const UpdateKindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.UpdateKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateKindResponse::IsInitialized() const {
  return true;
}

void UpdateKindResponse::Swap(UpdateKindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateKindResponse::InternalSwap(UpdateKindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata UpdateKindResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteKindRequest::InitAsDefaultInstance() {
  ::ric::tasks::_DeleteKindRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::tasks::UserContext*>(
      ::ric::tasks::UserContext::internal_default_instance());
  ::ric::tasks::_DeleteKindRequest_default_instance_._instance.get_mutable()->oid_ = const_cast< ::ric::tasks::ObjectId*>(
      ::ric::tasks::ObjectId::internal_default_instance());
}
class DeleteKindRequest::HasBitSetters {
 public:
  static const ::ric::tasks::UserContext& ctx(const DeleteKindRequest* msg);
  static const ::ric::tasks::ObjectId& oid(const DeleteKindRequest* msg);
};

const ::ric::tasks::UserContext&
DeleteKindRequest::HasBitSetters::ctx(const DeleteKindRequest* msg) {
  return *msg->ctx_;
}
const ::ric::tasks::ObjectId&
DeleteKindRequest::HasBitSetters::oid(const DeleteKindRequest* msg) {
  return *msg->oid_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteKindRequest::kCtxFieldNumber;
const int DeleteKindRequest::kOidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteKindRequest::DeleteKindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.DeleteKindRequest)
}
DeleteKindRequest::DeleteKindRequest(const DeleteKindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ctx()) {
    ctx_ = new ::ric::tasks::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_oid()) {
    oid_ = new ::ric::tasks::ObjectId(*from.oid_);
  } else {
    oid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.tasks.DeleteKindRequest)
}

void DeleteKindRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oid_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(oid_));
}

DeleteKindRequest::~DeleteKindRequest() {
  // @@protoc_insertion_point(destructor:ric.tasks.DeleteKindRequest)
  SharedDtor();
}

void DeleteKindRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete oid_;
}

void DeleteKindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteKindRequest& DeleteKindRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteKindRequest_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void DeleteKindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.DeleteKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && oid_ != nullptr) {
    delete oid_;
  }
  oid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteKindRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteKindRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::tasks::ObjectId::_InternalParse;
        object = msg->mutable_oid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteKindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.DeleteKindRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.tasks.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.tasks.ObjectId oid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.DeleteKindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.DeleteKindRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteKindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.DeleteKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::oid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.DeleteKindRequest)
}

::google::protobuf::uint8* DeleteKindRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.DeleteKindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::oid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.DeleteKindRequest)
  return target;
}

size_t DeleteKindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.DeleteKindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.tasks.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.tasks.ObjectId oid = 2;
  if (this->has_oid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteKindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.DeleteKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteKindRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteKindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.DeleteKindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.DeleteKindRequest)
    MergeFrom(*source);
  }
}

void DeleteKindRequest::MergeFrom(const DeleteKindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.DeleteKindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctx()) {
    mutable_ctx()->::ric::tasks::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_oid()) {
    mutable_oid()->::ric::tasks::ObjectId::MergeFrom(from.oid());
  }
}

void DeleteKindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.DeleteKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteKindRequest::CopyFrom(const DeleteKindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.DeleteKindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKindRequest::IsInitialized() const {
  return true;
}

void DeleteKindRequest::Swap(DeleteKindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteKindRequest::InternalSwap(DeleteKindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctx_, other->ctx_);
  swap(oid_, other->oid_);
}

::google::protobuf::Metadata DeleteKindRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteKindResponse::InitAsDefaultInstance() {
}
class DeleteKindResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteKindResponse::DeleteKindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.tasks.DeleteKindResponse)
}
DeleteKindResponse::DeleteKindResponse(const DeleteKindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.tasks.DeleteKindResponse)
}

void DeleteKindResponse::SharedCtor() {
}

DeleteKindResponse::~DeleteKindResponse() {
  // @@protoc_insertion_point(destructor:ric.tasks.DeleteKindResponse)
  SharedDtor();
}

void DeleteKindResponse::SharedDtor() {
}

void DeleteKindResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteKindResponse& DeleteKindResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteKindResponse_ric_2dtasks_2frictasks_2eproto.base);
  return *internal_default_instance();
}


void DeleteKindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.tasks.DeleteKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteKindResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteKindResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteKindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.tasks.DeleteKindResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.tasks.DeleteKindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.tasks.DeleteKindResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteKindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.tasks.DeleteKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.tasks.DeleteKindResponse)
}

::google::protobuf::uint8* DeleteKindResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.tasks.DeleteKindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.tasks.DeleteKindResponse)
  return target;
}

size_t DeleteKindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.tasks.DeleteKindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteKindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.tasks.DeleteKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteKindResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteKindResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.tasks.DeleteKindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.tasks.DeleteKindResponse)
    MergeFrom(*source);
  }
}

void DeleteKindResponse::MergeFrom(const DeleteKindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.tasks.DeleteKindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteKindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.tasks.DeleteKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteKindResponse::CopyFrom(const DeleteKindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.tasks.DeleteKindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKindResponse::IsInitialized() const {
  return true;
}

void DeleteKindResponse::Swap(DeleteKindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteKindResponse::InternalSwap(DeleteKindResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteKindResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dtasks_2frictasks_2eproto);
  return ::file_level_metadata_ric_2dtasks_2frictasks_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tasks
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::tasks::ObjectId* Arena::CreateMaybeMessage< ::ric::tasks::ObjectId >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ObjectId >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UserContext* Arena::CreateMaybeMessage< ::ric::tasks::UserContext >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UserContext >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Location* Arena::CreateMaybeMessage< ::ric::tasks::Location >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::IndoorLocation* Arena::CreateMaybeMessage< ::ric::tasks::IndoorLocation >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::IndoorLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Task* Arena::CreateMaybeMessage< ::ric::tasks::Task >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::TaskEdit* Arena::CreateMaybeMessage< ::ric::tasks::TaskEdit >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::TaskEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Review* Arena::CreateMaybeMessage< ::ric::tasks::Review >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Review >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Deadline* Arena::CreateMaybeMessage< ::ric::tasks::Deadline >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Deadline >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::ReportTemplate* Arena::CreateMaybeMessage< ::ric::tasks::ReportTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ReportTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Report* Arena::CreateMaybeMessage< ::ric::tasks::Report >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Report >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::Kind* Arena::CreateMaybeMessage< ::ric::tasks::Kind >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::Kind >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::KindEdit* Arena::CreateMaybeMessage< ::ric::tasks::KindEdit >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::KindEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::CreateTaskRequest* Arena::CreateMaybeMessage< ::ric::tasks::CreateTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::CreateTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::CreateTaskResponse* Arena::CreateMaybeMessage< ::ric::tasks::CreateTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::CreateTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::GetTaskRequest* Arena::CreateMaybeMessage< ::ric::tasks::GetTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::GetTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::GetTaskResponse* Arena::CreateMaybeMessage< ::ric::tasks::GetTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::GetTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::DeleteTaskRequest* Arena::CreateMaybeMessage< ::ric::tasks::DeleteTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::DeleteTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::DeleteTaskResponse* Arena::CreateMaybeMessage< ::ric::tasks::DeleteTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::DeleteTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateTaskRequest* Arena::CreateMaybeMessage< ::ric::tasks::UpdateTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateTaskResponse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateTaskOrderRequest_PositionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateTaskOrderRequest* Arena::CreateMaybeMessage< ::ric::tasks::UpdateTaskOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateTaskOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateTaskOrderResponse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateTaskOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateTaskOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::ChangeTaskStatusRequest* Arena::CreateMaybeMessage< ::ric::tasks::ChangeTaskStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ChangeTaskStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::ChangeTaskStatusResponse* Arena::CreateMaybeMessage< ::ric::tasks::ChangeTaskStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::ChangeTaskStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::CreateKindRequest* Arena::CreateMaybeMessage< ::ric::tasks::CreateKindRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::CreateKindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::CreateKindResponse* Arena::CreateMaybeMessage< ::ric::tasks::CreateKindResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::CreateKindResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::GetKindRequest* Arena::CreateMaybeMessage< ::ric::tasks::GetKindRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::GetKindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::GetKindResponse* Arena::CreateMaybeMessage< ::ric::tasks::GetKindResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::GetKindResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateKindRequest* Arena::CreateMaybeMessage< ::ric::tasks::UpdateKindRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateKindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::UpdateKindResponse* Arena::CreateMaybeMessage< ::ric::tasks::UpdateKindResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::UpdateKindResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::DeleteKindRequest* Arena::CreateMaybeMessage< ::ric::tasks::DeleteKindRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::DeleteKindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::tasks::DeleteKindResponse* Arena::CreateMaybeMessage< ::ric::tasks::DeleteKindResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::tasks::DeleteKindResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
