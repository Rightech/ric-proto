// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-tasks/rictasks.proto
#ifndef GRPC_ric_2dtasks_2frictasks_2eproto__INCLUDED
#define GRPC_ric_2dtasks_2frictasks_2eproto__INCLUDED

#include "ric-tasks/rictasks.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ric {
namespace tasks {

class TaskService final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.tasks.TaskService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // create task. if parent field exists than add it to the end of
    // parent subtasks
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::ric::tasks::CreateTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateTaskResponse>> AsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateTaskResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateTaskResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateTaskResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // get task by it id
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::ric::tasks::GetTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetTaskResponse>> AsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetTaskResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetTaskResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetTaskResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // update task
    // this method can't update (return error):
    // 1. tasks status (use ChangeStatus)
    // 2. tasks deadlines if status not equal to CREATED or ASSIGNED
    // 3. subtasks order (use UpdateOrder)
    // 4. begin and end location if status not equal to CREATED or ASSIGNED
    //
    // new subtasks can be added but they always append to end of subtasks list
    // use UpdateOrder after this if you need add subtask to specific position
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::ric::tasks::UpdateTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // delete task
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::ric::tasks::DeleteTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteTaskResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteTaskResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteTaskResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteTaskResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // update subtasks order
    // order can be updated only if following true:
    // 1. all subtasks has status CREATED or ASSIGNED
    // 2. all subtasks has no deadlines
    //    (if subtask have deadline you can unset it via Update method)
    virtual ::grpc::Status UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::ric::tasks::UpdateTaskOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskOrderResponse>> AsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskOrderResponse>>(AsyncUpdateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskOrderResponse>> PrepareAsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskOrderResponse>>(PrepareAsyncUpdateOrderRaw(context, request, cq));
    }
    // change subtask status
    // if parent field exists than check parent constrain before change status
    // so if constraint ordered you can't take in work this task if previous task
    // not closed
    //
    // the following status change is allowed:
    // CREATED -> ASSIGNED
    // ASSIGNED -> IN_WORK
    // IN_WORK -> CLOSED (with success flag)
    // CLOSED -> CREATED
    // ASSIGNED -> CREATED
    // ASSIGNED -> CLOSED (method always set success flag to false)
    // CREATED -> CLOSED (method always set success flag to false)
    //
    // if task has begin location -> change status to IN_WORK can be done only
    // in this location
    //
    // if task has end location -> change status to CLOSED can be done only
    // in this location
    virtual ::grpc::Status ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::ric::tasks::ChangeTaskStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeTaskStatusResponse>> AsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeTaskStatusResponse>>(AsyncChangeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeTaskStatusResponse>> PrepareAsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeTaskStatusResponse>>(PrepareAsyncChangeStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // create task. if parent field exists than add it to the end of
      // parent subtasks
      virtual void Create(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      // get task by it id
      virtual void Get(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      // update task
      // this method can't update (return error):
      // 1. tasks status (use ChangeStatus)
      // 2. tasks deadlines if status not equal to CREATED or ASSIGNED
      // 3. subtasks order (use UpdateOrder)
      // 4. begin and end location if status not equal to CREATED or ASSIGNED
      //
      // new subtasks can be added but they always append to end of subtasks list
      // use UpdateOrder after this if you need add subtask to specific position
      virtual void Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      // delete task
      virtual void Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      // update subtasks order
      // order can be updated only if following true:
      // 1. all subtasks has status CREATED or ASSIGNED
      // 2. all subtasks has no deadlines
      //    (if subtask have deadline you can unset it via Update method)
      virtual void UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateTaskOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      // change subtask status
      // if parent field exists than check parent constrain before change status
      // so if constraint ordered you can't take in work this task if previous task
      // not closed
      //
      // the following status change is allowed:
      // CREATED -> ASSIGNED
      // ASSIGNED -> IN_WORK
      // IN_WORK -> CLOSED (with success flag)
      // CLOSED -> CREATED
      // ASSIGNED -> CREATED
      // ASSIGNED -> CLOSED (method always set success flag to false)
      // CREATED -> CLOSED (method always set success flag to false)
      //
      // if task has begin location -> change status to IN_WORK can be done only
      // in this location
      //
      // if task has end location -> change status to CLOSED can be done only
      // in this location
      virtual void ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::ChangeTaskStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateTaskResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateTaskResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetTaskResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetTaskResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteTaskResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteTaskResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskOrderResponse>* AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateTaskOrderResponse>* PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeTaskStatusResponse>* AsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::ChangeTaskStatusResponse>* PrepareAsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::ric::tasks::CreateTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>> AsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::ric::tasks::GetTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>> AsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::ric::tasks::UpdateTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::ric::tasks::DeleteTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::ric::tasks::UpdateTaskOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>> AsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>>(AsyncUpdateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>> PrepareAsyncUpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>>(PrepareAsyncUpdateOrderRaw(context, request, cq));
    }
    ::grpc::Status ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::ric::tasks::ChangeTaskStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>> AsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>>(AsyncChangeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>> PrepareAsyncChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>>(PrepareAsyncChangeStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrder(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateTaskOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeStatus(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::ChangeTaskStatusResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateTaskResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetTaskResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteTaskResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>* AsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateTaskOrderResponse>* PrepareAsyncUpdateOrderRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateTaskOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>* AsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::ChangeTaskStatusResponse>* PrepareAsyncChangeStatusRaw(::grpc::ClientContext* context, const ::ric::tasks::ChangeTaskStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // create task. if parent field exists than add it to the end of
    // parent subtasks
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response);
    // get task by it id
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response);
    // update task
    // this method can't update (return error):
    // 1. tasks status (use ChangeStatus)
    // 2. tasks deadlines if status not equal to CREATED or ASSIGNED
    // 3. subtasks order (use UpdateOrder)
    // 4. begin and end location if status not equal to CREATED or ASSIGNED
    //
    // new subtasks can be added but they always append to end of subtasks list
    // use UpdateOrder after this if you need add subtask to specific position
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response);
    // delete task
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response);
    // update subtasks order
    // order can be updated only if following true:
    // 1. all subtasks has status CREATED or ASSIGNED
    // 2. all subtasks has no deadlines
    //    (if subtask have deadline you can unset it via Update method)
    virtual ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response);
    // change subtask status
    // if parent field exists than check parent constrain before change status
    // so if constraint ordered you can't take in work this task if previous task
    // not closed
    //
    // the following status change is allowed:
    // CREATED -> ASSIGNED
    // ASSIGNED -> IN_WORK
    // IN_WORK -> CLOSED (with success flag)
    // CLOSED -> CREATED
    // ASSIGNED -> CREATED
    // ASSIGNED -> CLOSED (method always set success flag to false)
    // CREATED -> CLOSED (method always set success flag to false)
    //
    // if task has begin location -> change status to IN_WORK can be done only
    // in this location
    //
    // if task has end location -> change status to CLOSED can be done only
    // in this location
    virtual ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::ric::tasks::CreateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::CreateTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::ric::tasks::GetTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::GetTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::ric::tasks::UpdateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::UpdateTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::ric::tasks::DeleteTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::DeleteTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrder(::grpc::ServerContext* context, ::ric::tasks::UpdateTaskOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::UpdateTaskOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeStatus(::grpc::ServerContext* context, ::ric::tasks::ChangeTaskStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::ChangeTaskStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_Update<WithAsyncMethod_Delete<WithAsyncMethod_UpdateOrder<WithAsyncMethod_ChangeStatus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::CreateTaskRequest, ::ric::tasks::CreateTaskResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::CreateTaskRequest* request,
                 ::ric::tasks::CreateTaskResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::GetTaskRequest, ::ric::tasks::GetTaskResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::GetTaskRequest* request,
                 ::ric::tasks::GetTaskResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::UpdateTaskRequest, ::ric::tasks::UpdateTaskResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::UpdateTaskRequest* request,
                 ::ric::tasks::UpdateTaskResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::DeleteTaskRequest, ::ric::tasks::DeleteTaskResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::DeleteTaskRequest* request,
                 ::ric::tasks::DeleteTaskResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOrder() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::UpdateTaskOrderRequest, ::ric::tasks::UpdateTaskOrderResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::UpdateTaskOrderRequest* request,
                 ::ric::tasks::UpdateTaskOrderResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateOrder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ChangeStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::ChangeTaskStatusRequest, ::ric::tasks::ChangeTaskStatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::ChangeTaskStatusRequest* request,
                 ::ric::tasks::ChangeTaskStatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ChangeStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_UpdateOrder<ExperimentalWithCallbackMethod_ChangeStatus<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOrder() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateOrder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateOrder(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ChangeStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ChangeStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ChangeStatus(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::CreateTaskRequest, ::ric::tasks::CreateTaskResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateTaskRequest* request, ::ric::tasks::CreateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::CreateTaskRequest,::ric::tasks::CreateTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::GetTaskRequest, ::ric::tasks::GetTaskResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetTaskRequest* request, ::ric::tasks::GetTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::GetTaskRequest,::ric::tasks::GetTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::UpdateTaskRequest, ::ric::tasks::UpdateTaskResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskRequest* request, ::ric::tasks::UpdateTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::UpdateTaskRequest,::ric::tasks::UpdateTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::DeleteTaskRequest, ::ric::tasks::DeleteTaskResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteTaskRequest* request, ::ric::tasks::DeleteTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::DeleteTaskRequest,::ric::tasks::DeleteTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOrder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::UpdateTaskOrderRequest, ::ric::tasks::UpdateTaskOrderResponse>(std::bind(&WithStreamedUnaryMethod_UpdateOrder<BaseClass>::StreamedUpdateOrder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrder(::grpc::ServerContext* context, const ::ric::tasks::UpdateTaskOrderRequest* request, ::ric::tasks::UpdateTaskOrderResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::UpdateTaskOrderRequest,::ric::tasks::UpdateTaskOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ChangeStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::ChangeTaskStatusRequest, ::ric::tasks::ChangeTaskStatusResponse>(std::bind(&WithStreamedUnaryMethod_ChangeStatus<BaseClass>::StreamedChangeStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ChangeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeStatus(::grpc::ServerContext* context, const ::ric::tasks::ChangeTaskStatusRequest* request, ::ric::tasks::ChangeTaskStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::ChangeTaskStatusRequest,::ric::tasks::ChangeTaskStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_UpdateOrder<WithStreamedUnaryMethod_ChangeStatus<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_UpdateOrder<WithStreamedUnaryMethod_ChangeStatus<Service > > > > > > StreamedService;
};

class KindService final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.tasks.KindService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::ric::tasks::CreateKindResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateKindResponse>> AsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateKindResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateKindResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateKindResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::ric::tasks::GetKindResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetKindResponse>> AsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetKindResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetKindResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetKindResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::ric::tasks::UpdateKindResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateKindResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateKindResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateKindResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateKindResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::ric::tasks::DeleteKindResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteKindResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteKindResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteKindResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteKindResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteKindResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateKindResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::CreateKindResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetKindResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::GetKindResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateKindResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::UpdateKindResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteKindResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::tasks::DeleteKindResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::ric::tasks::CreateKindResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>> AsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::ric::tasks::GetKindResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>> AsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::ric::tasks::UpdateKindResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::ric::tasks::DeleteKindResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>> AsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::CreateKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::GetKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::UpdateKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::tasks::DeleteKindResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::CreateKindResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ric::tasks::CreateKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::GetKindResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ric::tasks::GetKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::UpdateKindResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::ric::tasks::UpdateKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::tasks::DeleteKindResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ric::tasks::DeleteKindRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::ric::tasks::CreateKindRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::CreateKindResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::ric::tasks::GetKindRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::GetKindResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::ric::tasks::UpdateKindRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::UpdateKindResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::ric::tasks::DeleteKindRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::tasks::DeleteKindResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_Update<WithAsyncMethod_Delete<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::CreateKindRequest, ::ric::tasks::CreateKindResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::CreateKindRequest* request,
                 ::ric::tasks::CreateKindResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::GetKindRequest, ::ric::tasks::GetKindResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::GetKindRequest* request,
                 ::ric::tasks::GetKindResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::UpdateKindRequest, ::ric::tasks::UpdateKindResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::UpdateKindRequest* request,
                 ::ric::tasks::UpdateKindResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::tasks::DeleteKindRequest, ::ric::tasks::DeleteKindResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::tasks::DeleteKindRequest* request,
                 ::ric::tasks::DeleteKindResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::CreateKindRequest, ::ric::tasks::CreateKindResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::ric::tasks::CreateKindRequest* request, ::ric::tasks::CreateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::CreateKindRequest,::ric::tasks::CreateKindResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::GetKindRequest, ::ric::tasks::GetKindResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::ric::tasks::GetKindRequest* request, ::ric::tasks::GetKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::GetKindRequest,::ric::tasks::GetKindResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::UpdateKindRequest, ::ric::tasks::UpdateKindResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::ric::tasks::UpdateKindRequest* request, ::ric::tasks::UpdateKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::UpdateKindRequest,::ric::tasks::UpdateKindResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::tasks::DeleteKindRequest, ::ric::tasks::DeleteKindResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::ric::tasks::DeleteKindRequest* request, ::ric::tasks::DeleteKindResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::tasks::DeleteKindRequest,::ric::tasks::DeleteKindResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<Service > > > > StreamedService;
};

}  // namespace tasks
}  // namespace ric


#endif  // GRPC_ric_2dtasks_2frictasks_2eproto__INCLUDED
