// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-gate/ric-gate.proto

#ifndef PROTOBUF_INCLUDED_ric_2dgate_2fric_2dgate_2eproto
#define PROTOBUF_INCLUDED_ric_2dgate_2fric_2dgate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dgate_2fric_2dgate_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dgate_2fric_2dgate_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dgate_2fric_2dgate_2eproto();
namespace ric {
namespace gate {
class AuthRequest;
class AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResponse;
class AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandReplyRequest;
class CommandReplyRequestDefaultTypeInternal;
extern CommandReplyRequestDefaultTypeInternal _CommandReplyRequest_default_instance_;
class DataRequest;
class DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class InitRequest;
class InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class LimitingParams;
class LimitingParamsDefaultTypeInternal;
extern LimitingParamsDefaultTypeInternal _LimitingParams_default_instance_;
class OfflineRequest;
class OfflineRequestDefaultTypeInternal;
extern OfflineRequestDefaultTypeInternal _OfflineRequest_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
}  // namespace gate
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::gate::AuthRequest* Arena::CreateMaybeMessage<::ric::gate::AuthRequest>(Arena*);
template<> ::ric::gate::AuthResponse* Arena::CreateMaybeMessage<::ric::gate::AuthResponse>(Arena*);
template<> ::ric::gate::Command* Arena::CreateMaybeMessage<::ric::gate::Command>(Arena*);
template<> ::ric::gate::CommandReplyRequest* Arena::CreateMaybeMessage<::ric::gate::CommandReplyRequest>(Arena*);
template<> ::ric::gate::DataRequest* Arena::CreateMaybeMessage<::ric::gate::DataRequest>(Arena*);
template<> ::ric::gate::EmptyResponse* Arena::CreateMaybeMessage<::ric::gate::EmptyResponse>(Arena*);
template<> ::ric::gate::InitRequest* Arena::CreateMaybeMessage<::ric::gate::InitRequest>(Arena*);
template<> ::ric::gate::LimitingParams* Arena::CreateMaybeMessage<::ric::gate::LimitingParams>(Arena*);
template<> ::ric::gate::OfflineRequest* Arena::CreateMaybeMessage<::ric::gate::OfflineRequest>(Arena*);
template<> ::ric::gate::Ping* Arena::CreateMaybeMessage<::ric::gate::Ping>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace gate {

enum DataRequest_DataType {
  DataRequest_DataType_UNKNOWN = 0,
  DataRequest_DataType_PARAMS = 1,
  DataRequest_DataType_FILE = 2,
  DataRequest_DataType_EVENT = 3,
  DataRequest_DataType_RPC = 4,
  DataRequest_DataType_DataRequest_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DataRequest_DataType_DataRequest_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DataRequest_DataType_IsValid(int value);
const DataRequest_DataType DataRequest_DataType_DataType_MIN = DataRequest_DataType_UNKNOWN;
const DataRequest_DataType DataRequest_DataType_DataType_MAX = DataRequest_DataType_RPC;
const int DataRequest_DataType_DataType_ARRAYSIZE = DataRequest_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataRequest_DataType_descriptor();
inline const ::std::string& DataRequest_DataType_Name(DataRequest_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataRequest_DataType_descriptor(), value);
}
inline bool DataRequest_DataType_Parse(
    const ::std::string& name, DataRequest_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataRequest_DataType>(
    DataRequest_DataType_descriptor(), name, value);
}
enum CommandReplyRequest_Stage {
  CommandReplyRequest_Stage_UNKNOWN = 0,
  CommandReplyRequest_Stage_ERROR = 1,
  CommandReplyRequest_Stage_INLET = 2,
  CommandReplyRequest_Stage_OBJECT = 3,
  CommandReplyRequest_Stage_PACKET = 4,
  CommandReplyRequest_Stage_CommandReplyRequest_Stage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CommandReplyRequest_Stage_CommandReplyRequest_Stage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CommandReplyRequest_Stage_IsValid(int value);
const CommandReplyRequest_Stage CommandReplyRequest_Stage_Stage_MIN = CommandReplyRequest_Stage_UNKNOWN;
const CommandReplyRequest_Stage CommandReplyRequest_Stage_Stage_MAX = CommandReplyRequest_Stage_PACKET;
const int CommandReplyRequest_Stage_Stage_ARRAYSIZE = CommandReplyRequest_Stage_Stage_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandReplyRequest_Stage_descriptor();
inline const ::std::string& CommandReplyRequest_Stage_Name(CommandReplyRequest_Stage value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandReplyRequest_Stage_descriptor(), value);
}
inline bool CommandReplyRequest_Stage_Parse(
    const ::std::string& name, CommandReplyRequest_Stage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandReplyRequest_Stage>(
    CommandReplyRequest_Stage_descriptor(), name, value);
}
// ===================================================================

class InitRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.InitRequest) */ {
 public:
  InitRequest();
  virtual ~InitRequest();

  InitRequest(const InitRequest& from);

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InitRequest* other);
  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitRequest* New() const final {
    return CreateMaybeMessage<InitRequest>(nullptr);
  }

  InitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitRequest& from);
  void MergeFrom(const InitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // @@protoc_insertion_point(class_scope:ric.gate.InitRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class AuthRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.AuthRequest) */ {
 public:
  AuthRequest();
  virtual ~AuthRequest();

  AuthRequest(const AuthRequest& from);

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthRequest(AuthRequest&& from) noexcept
    : AuthRequest() {
    *this = ::std::move(from);
  }

  inline AuthRequest& operator=(AuthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
               &_AuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthRequest* other);
  friend void swap(AuthRequest& a, AuthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthRequest* New() const final {
    return CreateMaybeMessage<AuthRequest>(nullptr);
  }

  AuthRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthRequest& from);
  void MergeFrom(const AuthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string login = 3;
  void clear_login();
  static const int kLoginFieldNumber = 3;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bool is_bot = 5;
  void clear_is_bot();
  static const int kIsBotFieldNumber = 5;
  bool is_bot() const;
  void set_is_bot(bool value);

  // @@protoc_insertion_point(class_scope:ric.gate.AuthRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  bool is_bot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class LimitingParams final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.LimitingParams) */ {
 public:
  LimitingParams();
  virtual ~LimitingParams();

  LimitingParams(const LimitingParams& from);

  inline LimitingParams& operator=(const LimitingParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LimitingParams(LimitingParams&& from) noexcept
    : LimitingParams() {
    *this = ::std::move(from);
  }

  inline LimitingParams& operator=(LimitingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LimitingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitingParams* internal_default_instance() {
    return reinterpret_cast<const LimitingParams*>(
               &_LimitingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LimitingParams* other);
  friend void swap(LimitingParams& a, LimitingParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LimitingParams* New() const final {
    return CreateMaybeMessage<LimitingParams>(nullptr);
  }

  LimitingParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LimitingParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LimitingParams& from);
  void MergeFrom(const LimitingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitingParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float packet_size = 1;
  void clear_packet_size();
  static const int kPacketSizeFieldNumber = 1;
  float packet_size() const;
  void set_packet_size(float value);

  // float packet_frequency = 2;
  void clear_packet_frequency();
  static const int kPacketFrequencyFieldNumber = 2;
  float packet_frequency() const;
  void set_packet_frequency(float value);

  // float excesses_allowed = 3;
  void clear_excesses_allowed();
  static const int kExcessesAllowedFieldNumber = 3;
  float excesses_allowed() const;
  void set_excesses_allowed(float value);

  // float current_packets = 4;
  void clear_current_packets();
  static const int kCurrentPacketsFieldNumber = 4;
  float current_packets() const;
  void set_current_packets(float value);

  // float current_excesses = 5;
  void clear_current_excesses();
  static const int kCurrentExcessesFieldNumber = 5;
  float current_excesses() const;
  void set_current_excesses(float value);

  // @@protoc_insertion_point(class_scope:ric.gate.LimitingParams)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float packet_size_;
  float packet_frequency_;
  float excesses_allowed_;
  float current_packets_;
  float current_excesses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class AuthResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.AuthResponse) */ {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AuthResponse* other);
  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthResponse* New() const final {
    return CreateMaybeMessage<AuthResponse>(nullptr);
  }

  AuthResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string license_id = 3;
  void clear_license_id();
  static const int kLicenseIdFieldNumber = 3;
  const ::std::string& license_id() const;
  void set_license_id(const ::std::string& value);
  #if LANG_CXX11
  void set_license_id(::std::string&& value);
  #endif
  void set_license_id(const char* value);
  void set_license_id(const char* value, size_t size);
  ::std::string* mutable_license_id();
  ::std::string* release_license_id();
  void set_allocated_license_id(::std::string* license_id);

  // string session_id = 4;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // bytes config = 5;
  void clear_config();
  static const int kConfigFieldNumber = 5;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // .ric.gate.LimitingParams limits = 6;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 6;
  const ::ric::gate::LimitingParams& limits() const;
  ::ric::gate::LimitingParams* release_limits();
  ::ric::gate::LimitingParams* mutable_limits();
  void set_allocated_limits(::ric::gate::LimitingParams* limits);

  // @@protoc_insertion_point(class_scope:ric.gate.AuthResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr license_id_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::ric::gate::LimitingParams* limits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class DataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.DataRequest) */ {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DataRequest* other);
  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataRequest* New() const final {
    return CreateMaybeMessage<DataRequest>(nullptr);
  }

  DataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataRequest_DataType DataType;
  static const DataType UNKNOWN =
    DataRequest_DataType_UNKNOWN;
  static const DataType PARAMS =
    DataRequest_DataType_PARAMS;
  static const DataType FILE =
    DataRequest_DataType_FILE;
  static const DataType EVENT =
    DataRequest_DataType_EVENT;
  static const DataType RPC =
    DataRequest_DataType_RPC;
  static inline bool DataType_IsValid(int value) {
    return DataRequest_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    DataRequest_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    DataRequest_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    DataRequest_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return DataRequest_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return DataRequest_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return DataRequest_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes binary_data = 4;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 4;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  #if LANG_CXX11
  void set_binary_data(::std::string&& value);
  #endif
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);

  // .ric.gate.DataRequest.DataType data_type = 5;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 5;
  ::ric::gate::DataRequest_DataType data_type() const;
  void set_data_type(::ric::gate::DataRequest_DataType value);

  // @@protoc_insertion_point(class_scope:ric.gate.DataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  int data_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class Ping final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Ping* other);
  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // @@protoc_insertion_point(class_scope:ric.gate.Ping)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class CommandReplyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.CommandReplyRequest) */ {
 public:
  CommandReplyRequest();
  virtual ~CommandReplyRequest();

  CommandReplyRequest(const CommandReplyRequest& from);

  inline CommandReplyRequest& operator=(const CommandReplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandReplyRequest(CommandReplyRequest&& from) noexcept
    : CommandReplyRequest() {
    *this = ::std::move(from);
  }

  inline CommandReplyRequest& operator=(CommandReplyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommandReplyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandReplyRequest* internal_default_instance() {
    return reinterpret_cast<const CommandReplyRequest*>(
               &_CommandReplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CommandReplyRequest* other);
  friend void swap(CommandReplyRequest& a, CommandReplyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandReplyRequest* New() const final {
    return CreateMaybeMessage<CommandReplyRequest>(nullptr);
  }

  CommandReplyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandReplyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandReplyRequest& from);
  void MergeFrom(const CommandReplyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandReplyRequest_Stage Stage;
  static const Stage UNKNOWN =
    CommandReplyRequest_Stage_UNKNOWN;
  static const Stage ERROR =
    CommandReplyRequest_Stage_ERROR;
  static const Stage INLET =
    CommandReplyRequest_Stage_INLET;
  static const Stage OBJECT =
    CommandReplyRequest_Stage_OBJECT;
  static const Stage PACKET =
    CommandReplyRequest_Stage_PACKET;
  static inline bool Stage_IsValid(int value) {
    return CommandReplyRequest_Stage_IsValid(value);
  }
  static const Stage Stage_MIN =
    CommandReplyRequest_Stage_Stage_MIN;
  static const Stage Stage_MAX =
    CommandReplyRequest_Stage_Stage_MAX;
  static const int Stage_ARRAYSIZE =
    CommandReplyRequest_Stage_Stage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Stage_descriptor() {
    return CommandReplyRequest_Stage_descriptor();
  }
  static inline const ::std::string& Stage_Name(Stage value) {
    return CommandReplyRequest_Stage_Name(value);
  }
  static inline bool Stage_Parse(const ::std::string& name,
      Stage* value) {
    return CommandReplyRequest_Stage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  const ::std::string& command_id() const;
  void set_command_id(const ::std::string& value);
  #if LANG_CXX11
  void set_command_id(::std::string&& value);
  #endif
  void set_command_id(const char* value);
  void set_command_id(const char* value, size_t size);
  ::std::string* mutable_command_id();
  ::std::string* release_command_id();
  void set_allocated_command_id(::std::string* command_id);

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string error = 5;
  void clear_error();
  static const int kErrorFieldNumber = 5;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // .ric.gate.CommandReplyRequest.Stage stage = 4;
  void clear_stage();
  static const int kStageFieldNumber = 4;
  ::ric::gate::CommandReplyRequest_Stage stage() const;
  void set_stage(::ric::gate::CommandReplyRequest_Stage value);

  // @@protoc_insertion_point(class_scope:ric.gate.CommandReplyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_id_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  int stage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class OfflineRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.OfflineRequest) */ {
 public:
  OfflineRequest();
  virtual ~OfflineRequest();

  OfflineRequest(const OfflineRequest& from);

  inline OfflineRequest& operator=(const OfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OfflineRequest(OfflineRequest&& from) noexcept
    : OfflineRequest() {
    *this = ::std::move(from);
  }

  inline OfflineRequest& operator=(OfflineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OfflineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineRequest* internal_default_instance() {
    return reinterpret_cast<const OfflineRequest*>(
               &_OfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(OfflineRequest* other);
  friend void swap(OfflineRequest& a, OfflineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfflineRequest* New() const final {
    return CreateMaybeMessage<OfflineRequest>(nullptr);
  }

  OfflineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OfflineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OfflineRequest& from);
  void MergeFrom(const OfflineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.gate.OfflineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  const ::std::string& command_id() const;
  void set_command_id(const ::std::string& value);
  #if LANG_CXX11
  void set_command_id(::std::string&& value);
  #endif
  void set_command_id(const char* value);
  void set_command_id(const char* value, size_t size);
  ::std::string* mutable_command_id();
  ::std::string* release_command_id();
  void set_allocated_command_id(::std::string* command_id);

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string method = 3;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // bytes params = 4;
  void clear_params();
  static const int kParamsFieldNumber = 4;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const void* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:ric.gate.Command)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_id_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.gate.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(EmptyResponse* other);
  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.gate.EmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dgate_2fric_2dgate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitRequest

// string instance_id = 1;
inline void InitRequest::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.InitRequest.instance_id)
  return instance_id_.GetNoArena();
}
inline void InitRequest::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.InitRequest.instance_id)
}
#if LANG_CXX11
inline void InitRequest::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.InitRequest.instance_id)
}
#endif
inline void InitRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.InitRequest.instance_id)
}
inline void InitRequest::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.InitRequest.instance_id)
}
inline ::std::string* InitRequest::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.InitRequest.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:ric.gate.InitRequest.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.InitRequest.instance_id)
}

// -------------------------------------------------------------------

// AuthRequest

// string instance_id = 1;
inline void AuthRequest::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthRequest.instance_id)
  return instance_id_.GetNoArena();
}
inline void AuthRequest::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthRequest.instance_id)
}
#if LANG_CXX11
inline void AuthRequest::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthRequest.instance_id)
}
#endif
inline void AuthRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthRequest.instance_id)
}
inline void AuthRequest::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthRequest.instance_id)
}
inline ::std::string* AuthRequest::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthRequest.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthRequest.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthRequest.instance_id)
}

// string id = 2;
inline void AuthRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::id() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthRequest.id)
  return id_.GetNoArena();
}
inline void AuthRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthRequest.id)
}
#if LANG_CXX11
inline void AuthRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthRequest.id)
}
#endif
inline void AuthRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthRequest.id)
}
inline void AuthRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthRequest.id)
}
inline ::std::string* AuthRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_id() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthRequest.id)
}

// string login = 3;
inline void AuthRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::login() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthRequest.login)
  return login_.GetNoArena();
}
inline void AuthRequest::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthRequest.login)
}
#if LANG_CXX11
inline void AuthRequest::set_login(::std::string&& value) {
  
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthRequest.login)
}
#endif
inline void AuthRequest::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthRequest.login)
}
inline void AuthRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthRequest.login)
}
inline ::std::string* AuthRequest::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthRequest.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_login() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthRequest.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_login(::std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthRequest.login)
}

// string password = 4;
inline void AuthRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::password() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthRequest.password)
  return password_.GetNoArena();
}
inline void AuthRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthRequest.password)
}
#if LANG_CXX11
inline void AuthRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthRequest.password)
}
#endif
inline void AuthRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthRequest.password)
}
inline void AuthRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthRequest.password)
}
inline ::std::string* AuthRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_password() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthRequest.password)
}

// bool is_bot = 5;
inline void AuthRequest::clear_is_bot() {
  is_bot_ = false;
}
inline bool AuthRequest::is_bot() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthRequest.is_bot)
  return is_bot_;
}
inline void AuthRequest::set_is_bot(bool value) {
  
  is_bot_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.AuthRequest.is_bot)
}

// -------------------------------------------------------------------

// LimitingParams

// float packet_size = 1;
inline void LimitingParams::clear_packet_size() {
  packet_size_ = 0;
}
inline float LimitingParams::packet_size() const {
  // @@protoc_insertion_point(field_get:ric.gate.LimitingParams.packet_size)
  return packet_size_;
}
inline void LimitingParams::set_packet_size(float value) {
  
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.LimitingParams.packet_size)
}

// float packet_frequency = 2;
inline void LimitingParams::clear_packet_frequency() {
  packet_frequency_ = 0;
}
inline float LimitingParams::packet_frequency() const {
  // @@protoc_insertion_point(field_get:ric.gate.LimitingParams.packet_frequency)
  return packet_frequency_;
}
inline void LimitingParams::set_packet_frequency(float value) {
  
  packet_frequency_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.LimitingParams.packet_frequency)
}

// float excesses_allowed = 3;
inline void LimitingParams::clear_excesses_allowed() {
  excesses_allowed_ = 0;
}
inline float LimitingParams::excesses_allowed() const {
  // @@protoc_insertion_point(field_get:ric.gate.LimitingParams.excesses_allowed)
  return excesses_allowed_;
}
inline void LimitingParams::set_excesses_allowed(float value) {
  
  excesses_allowed_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.LimitingParams.excesses_allowed)
}

// float current_packets = 4;
inline void LimitingParams::clear_current_packets() {
  current_packets_ = 0;
}
inline float LimitingParams::current_packets() const {
  // @@protoc_insertion_point(field_get:ric.gate.LimitingParams.current_packets)
  return current_packets_;
}
inline void LimitingParams::set_current_packets(float value) {
  
  current_packets_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.LimitingParams.current_packets)
}

// float current_excesses = 5;
inline void LimitingParams::clear_current_excesses() {
  current_excesses_ = 0;
}
inline float LimitingParams::current_excesses() const {
  // @@protoc_insertion_point(field_get:ric.gate.LimitingParams.current_excesses)
  return current_excesses_;
}
inline void LimitingParams::set_current_excesses(float value) {
  
  current_excesses_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.LimitingParams.current_excesses)
}

// -------------------------------------------------------------------

// AuthResponse

// string object_id = 1;
inline void AuthResponse::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthResponse::object_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthResponse.object_id)
  return object_id_.GetNoArena();
}
inline void AuthResponse::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthResponse.object_id)
}
#if LANG_CXX11
inline void AuthResponse::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthResponse.object_id)
}
#endif
inline void AuthResponse::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthResponse.object_id)
}
inline void AuthResponse::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthResponse.object_id)
}
inline ::std::string* AuthResponse::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthResponse.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthResponse.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthResponse.object_id)
}

// string group_id = 2;
inline void AuthResponse::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthResponse::group_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthResponse.group_id)
  return group_id_.GetNoArena();
}
inline void AuthResponse::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthResponse.group_id)
}
#if LANG_CXX11
inline void AuthResponse::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthResponse.group_id)
}
#endif
inline void AuthResponse::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthResponse.group_id)
}
inline void AuthResponse::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthResponse.group_id)
}
inline ::std::string* AuthResponse::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthResponse.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthResponse.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthResponse.group_id)
}

// string license_id = 3;
inline void AuthResponse::clear_license_id() {
  license_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthResponse::license_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthResponse.license_id)
  return license_id_.GetNoArena();
}
inline void AuthResponse::set_license_id(const ::std::string& value) {
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthResponse.license_id)
}
#if LANG_CXX11
inline void AuthResponse::set_license_id(::std::string&& value) {
  
  license_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthResponse.license_id)
}
#endif
inline void AuthResponse::set_license_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthResponse.license_id)
}
inline void AuthResponse::set_license_id(const char* value, size_t size) {
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthResponse.license_id)
}
inline ::std::string* AuthResponse::mutable_license_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthResponse.license_id)
  return license_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_license_id() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthResponse.license_id)
  
  return license_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_license_id(::std::string* license_id) {
  if (license_id != nullptr) {
    
  } else {
    
  }
  license_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthResponse.license_id)
}

// string session_id = 4;
inline void AuthResponse::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthResponse::session_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthResponse.session_id)
  return session_id_.GetNoArena();
}
inline void AuthResponse::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthResponse.session_id)
}
#if LANG_CXX11
inline void AuthResponse::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthResponse.session_id)
}
#endif
inline void AuthResponse::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthResponse.session_id)
}
inline void AuthResponse::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthResponse.session_id)
}
inline ::std::string* AuthResponse::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthResponse.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthResponse.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_session_id(::std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthResponse.session_id)
}

// bytes config = 5;
inline void AuthResponse::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthResponse::config() const {
  // @@protoc_insertion_point(field_get:ric.gate.AuthResponse.config)
  return config_.GetNoArena();
}
inline void AuthResponse::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.AuthResponse.config)
}
#if LANG_CXX11
inline void AuthResponse::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.AuthResponse.config)
}
#endif
inline void AuthResponse::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.AuthResponse.config)
}
inline void AuthResponse::set_config(const void* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.AuthResponse.config)
}
inline ::std::string* AuthResponse::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthResponse.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_config() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthResponse.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_config(::std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthResponse.config)
}

// .ric.gate.LimitingParams limits = 6;
inline bool AuthResponse::has_limits() const {
  return this != internal_default_instance() && limits_ != nullptr;
}
inline void AuthResponse::clear_limits() {
  if (GetArenaNoVirtual() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
}
inline const ::ric::gate::LimitingParams& AuthResponse::limits() const {
  const ::ric::gate::LimitingParams* p = limits_;
  // @@protoc_insertion_point(field_get:ric.gate.AuthResponse.limits)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::gate::LimitingParams*>(
      &::ric::gate::_LimitingParams_default_instance_);
}
inline ::ric::gate::LimitingParams* AuthResponse::release_limits() {
  // @@protoc_insertion_point(field_release:ric.gate.AuthResponse.limits)
  
  ::ric::gate::LimitingParams* temp = limits_;
  limits_ = nullptr;
  return temp;
}
inline ::ric::gate::LimitingParams* AuthResponse::mutable_limits() {
  
  if (limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::gate::LimitingParams>(GetArenaNoVirtual());
    limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.gate.AuthResponse.limits)
  return limits_;
}
inline void AuthResponse::set_allocated_limits(::ric::gate::LimitingParams* limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete limits_;
  }
  if (limits) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:ric.gate.AuthResponse.limits)
}

// -------------------------------------------------------------------

// DataRequest

// string instance_id = 1;
inline void DataRequest::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.DataRequest.instance_id)
  return instance_id_.GetNoArena();
}
inline void DataRequest::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.DataRequest.instance_id)
}
#if LANG_CXX11
inline void DataRequest::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.DataRequest.instance_id)
}
#endif
inline void DataRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.DataRequest.instance_id)
}
inline void DataRequest::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.DataRequest.instance_id)
}
inline ::std::string* DataRequest::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.DataRequest.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:ric.gate.DataRequest.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.DataRequest.instance_id)
}

// string object_id = 2;
inline void DataRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.DataRequest.object_id)
  return object_id_.GetNoArena();
}
inline void DataRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.DataRequest.object_id)
}
#if LANG_CXX11
inline void DataRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.DataRequest.object_id)
}
#endif
inline void DataRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.DataRequest.object_id)
}
inline void DataRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.DataRequest.object_id)
}
inline ::std::string* DataRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.DataRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.gate.DataRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.DataRequest.object_id)
}

// bytes data = 3;
inline void DataRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::data() const {
  // @@protoc_insertion_point(field_get:ric.gate.DataRequest.data)
  return data_.GetNoArena();
}
inline void DataRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.DataRequest.data)
}
#if LANG_CXX11
inline void DataRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.DataRequest.data)
}
#endif
inline void DataRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.DataRequest.data)
}
inline void DataRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.DataRequest.data)
}
inline ::std::string* DataRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.DataRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_data() {
  // @@protoc_insertion_point(field_release:ric.gate.DataRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.DataRequest.data)
}

// bytes binary_data = 4;
inline void DataRequest::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataRequest::binary_data() const {
  // @@protoc_insertion_point(field_get:ric.gate.DataRequest.binary_data)
  return binary_data_.GetNoArena();
}
inline void DataRequest::set_binary_data(const ::std::string& value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.DataRequest.binary_data)
}
#if LANG_CXX11
inline void DataRequest::set_binary_data(::std::string&& value) {
  
  binary_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.DataRequest.binary_data)
}
#endif
inline void DataRequest::set_binary_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.DataRequest.binary_data)
}
inline void DataRequest::set_binary_data(const void* value, size_t size) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.DataRequest.binary_data)
}
inline ::std::string* DataRequest::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.DataRequest.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataRequest::release_binary_data() {
  // @@protoc_insertion_point(field_release:ric.gate.DataRequest.binary_data)
  
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != nullptr) {
    
  } else {
    
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.DataRequest.binary_data)
}

// .ric.gate.DataRequest.DataType data_type = 5;
inline void DataRequest::clear_data_type() {
  data_type_ = 0;
}
inline ::ric::gate::DataRequest_DataType DataRequest::data_type() const {
  // @@protoc_insertion_point(field_get:ric.gate.DataRequest.data_type)
  return static_cast< ::ric::gate::DataRequest_DataType >(data_type_);
}
inline void DataRequest::set_data_type(::ric::gate::DataRequest_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.DataRequest.data_type)
}

// -------------------------------------------------------------------

// Ping

// string instance_id = 1;
inline void Ping::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ping::instance_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.Ping.instance_id)
  return instance_id_.GetNoArena();
}
inline void Ping::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.Ping.instance_id)
}
#if LANG_CXX11
inline void Ping::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.Ping.instance_id)
}
#endif
inline void Ping::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.Ping.instance_id)
}
inline void Ping::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.Ping.instance_id)
}
inline ::std::string* Ping::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.Ping.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ping::release_instance_id() {
  // @@protoc_insertion_point(field_release:ric.gate.Ping.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.Ping.instance_id)
}

// -------------------------------------------------------------------

// CommandReplyRequest

// string command_id = 1;
inline void CommandReplyRequest::clear_command_id() {
  command_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandReplyRequest::command_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.CommandReplyRequest.command_id)
  return command_id_.GetNoArena();
}
inline void CommandReplyRequest::set_command_id(const ::std::string& value) {
  
  command_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.CommandReplyRequest.command_id)
}
#if LANG_CXX11
inline void CommandReplyRequest::set_command_id(::std::string&& value) {
  
  command_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.CommandReplyRequest.command_id)
}
#endif
inline void CommandReplyRequest::set_command_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.CommandReplyRequest.command_id)
}
inline void CommandReplyRequest::set_command_id(const char* value, size_t size) {
  
  command_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.CommandReplyRequest.command_id)
}
inline ::std::string* CommandReplyRequest::mutable_command_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.CommandReplyRequest.command_id)
  return command_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandReplyRequest::release_command_id() {
  // @@protoc_insertion_point(field_release:ric.gate.CommandReplyRequest.command_id)
  
  return command_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReplyRequest::set_allocated_command_id(::std::string* command_id) {
  if (command_id != nullptr) {
    
  } else {
    
  }
  command_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.CommandReplyRequest.command_id)
}

// string object_id = 2;
inline void CommandReplyRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandReplyRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.CommandReplyRequest.object_id)
  return object_id_.GetNoArena();
}
inline void CommandReplyRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.CommandReplyRequest.object_id)
}
#if LANG_CXX11
inline void CommandReplyRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.CommandReplyRequest.object_id)
}
#endif
inline void CommandReplyRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.CommandReplyRequest.object_id)
}
inline void CommandReplyRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.CommandReplyRequest.object_id)
}
inline ::std::string* CommandReplyRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.CommandReplyRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandReplyRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.gate.CommandReplyRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReplyRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.CommandReplyRequest.object_id)
}

// bytes data = 3;
inline void CommandReplyRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandReplyRequest::data() const {
  // @@protoc_insertion_point(field_get:ric.gate.CommandReplyRequest.data)
  return data_.GetNoArena();
}
inline void CommandReplyRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.CommandReplyRequest.data)
}
#if LANG_CXX11
inline void CommandReplyRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.CommandReplyRequest.data)
}
#endif
inline void CommandReplyRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.CommandReplyRequest.data)
}
inline void CommandReplyRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.CommandReplyRequest.data)
}
inline ::std::string* CommandReplyRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.CommandReplyRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandReplyRequest::release_data() {
  // @@protoc_insertion_point(field_release:ric.gate.CommandReplyRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReplyRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.CommandReplyRequest.data)
}

// .ric.gate.CommandReplyRequest.Stage stage = 4;
inline void CommandReplyRequest::clear_stage() {
  stage_ = 0;
}
inline ::ric::gate::CommandReplyRequest_Stage CommandReplyRequest::stage() const {
  // @@protoc_insertion_point(field_get:ric.gate.CommandReplyRequest.stage)
  return static_cast< ::ric::gate::CommandReplyRequest_Stage >(stage_);
}
inline void CommandReplyRequest::set_stage(::ric::gate::CommandReplyRequest_Stage value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:ric.gate.CommandReplyRequest.stage)
}

// string error = 5;
inline void CommandReplyRequest::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandReplyRequest::error() const {
  // @@protoc_insertion_point(field_get:ric.gate.CommandReplyRequest.error)
  return error_.GetNoArena();
}
inline void CommandReplyRequest::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.CommandReplyRequest.error)
}
#if LANG_CXX11
inline void CommandReplyRequest::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.CommandReplyRequest.error)
}
#endif
inline void CommandReplyRequest::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.CommandReplyRequest.error)
}
inline void CommandReplyRequest::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.CommandReplyRequest.error)
}
inline ::std::string* CommandReplyRequest::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.CommandReplyRequest.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandReplyRequest::release_error() {
  // @@protoc_insertion_point(field_release:ric.gate.CommandReplyRequest.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandReplyRequest::set_allocated_error(::std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.CommandReplyRequest.error)
}

// -------------------------------------------------------------------

// OfflineRequest

// string instance_id = 1;
inline void OfflineRequest::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.OfflineRequest.instance_id)
  return instance_id_.GetNoArena();
}
inline void OfflineRequest::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.OfflineRequest.instance_id)
}
#if LANG_CXX11
inline void OfflineRequest::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.OfflineRequest.instance_id)
}
#endif
inline void OfflineRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.OfflineRequest.instance_id)
}
inline void OfflineRequest::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.OfflineRequest.instance_id)
}
inline ::std::string* OfflineRequest::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.OfflineRequest.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:ric.gate.OfflineRequest.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineRequest::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.OfflineRequest.instance_id)
}

// string object_id = 2;
inline void OfflineRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.OfflineRequest.object_id)
  return object_id_.GetNoArena();
}
inline void OfflineRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.OfflineRequest.object_id)
}
#if LANG_CXX11
inline void OfflineRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.OfflineRequest.object_id)
}
#endif
inline void OfflineRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.OfflineRequest.object_id)
}
inline void OfflineRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.OfflineRequest.object_id)
}
inline ::std::string* OfflineRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.OfflineRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.gate.OfflineRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.OfflineRequest.object_id)
}

// -------------------------------------------------------------------

// Command

// string command_id = 1;
inline void Command::clear_command_id() {
  command_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::command_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.Command.command_id)
  return command_id_.GetNoArena();
}
inline void Command::set_command_id(const ::std::string& value) {
  
  command_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.Command.command_id)
}
#if LANG_CXX11
inline void Command::set_command_id(::std::string&& value) {
  
  command_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.Command.command_id)
}
#endif
inline void Command::set_command_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.Command.command_id)
}
inline void Command::set_command_id(const char* value, size_t size) {
  
  command_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.Command.command_id)
}
inline ::std::string* Command::mutable_command_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.Command.command_id)
  return command_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_command_id() {
  // @@protoc_insertion_point(field_release:ric.gate.Command.command_id)
  
  return command_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_command_id(::std::string* command_id) {
  if (command_id != nullptr) {
    
  } else {
    
  }
  command_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.Command.command_id)
}

// string object_id = 2;
inline void Command::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::object_id() const {
  // @@protoc_insertion_point(field_get:ric.gate.Command.object_id)
  return object_id_.GetNoArena();
}
inline void Command::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.Command.object_id)
}
#if LANG_CXX11
inline void Command::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.Command.object_id)
}
#endif
inline void Command::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.Command.object_id)
}
inline void Command::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.Command.object_id)
}
inline ::std::string* Command::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.Command.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.gate.Command.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.Command.object_id)
}

// string method = 3;
inline void Command::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::method() const {
  // @@protoc_insertion_point(field_get:ric.gate.Command.method)
  return method_.GetNoArena();
}
inline void Command::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.Command.method)
}
#if LANG_CXX11
inline void Command::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.Command.method)
}
#endif
inline void Command::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.Command.method)
}
inline void Command::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.Command.method)
}
inline ::std::string* Command::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.Command.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_method() {
  // @@protoc_insertion_point(field_release:ric.gate.Command.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_method(::std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.Command.method)
}

// bytes params = 4;
inline void Command::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::params() const {
  // @@protoc_insertion_point(field_get:ric.gate.Command.params)
  return params_.GetNoArena();
}
inline void Command::set_params(const ::std::string& value) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.gate.Command.params)
}
#if LANG_CXX11
inline void Command::set_params(::std::string&& value) {
  
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.gate.Command.params)
}
#endif
inline void Command::set_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.gate.Command.params)
}
inline void Command::set_params(const void* value, size_t size) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.gate.Command.params)
}
inline ::std::string* Command::mutable_params() {
  
  // @@protoc_insertion_point(field_mutable:ric.gate.Command.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_params() {
  // @@protoc_insertion_point(field_release:ric.gate.Command.params)
  
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_params(::std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:ric.gate.Command.params)
}

// -------------------------------------------------------------------

// EmptyResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gate
}  // namespace ric

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ric::gate::DataRequest_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::gate::DataRequest_DataType>() {
  return ::ric::gate::DataRequest_DataType_descriptor();
}
template <> struct is_proto_enum< ::ric::gate::CommandReplyRequest_Stage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::gate::CommandReplyRequest_Stage>() {
  return ::ric::gate::CommandReplyRequest_Stage_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dgate_2fric_2dgate_2eproto
