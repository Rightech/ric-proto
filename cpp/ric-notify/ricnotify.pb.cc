// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-notify/ricnotify.proto

#include "ric-notify/ricnotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Attachment_ric_2dnotify_2fricnotify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto;
namespace ric {
namespace notify {
class UserContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserContext> _instance;
} _UserContext_default_instance_;
class SMPPSendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPSendRequest> _instance;
} _SMPPSendRequest_default_instance_;
class SMPPSendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPSendResponse> _instance;
} _SMPPSendResponse_default_instance_;
class SMPPStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPStatusRequest> _instance;
} _SMPPStatusRequest_default_instance_;
class SMPPStatusResponse_SMPPStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPStatusResponse_SMPPStatus> _instance;
} _SMPPStatusResponse_SMPPStatus_default_instance_;
class SMPPStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPStatusResponse> _instance;
} _SMPPStatusResponse_default_instance_;
class SMPPGatewayInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPGatewayInfoRequest> _instance;
} _SMPPGatewayInfoRequest_default_instance_;
class SMPPGatewayInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPGatewayInfoResponse> _instance;
} _SMPPGatewayInfoResponse_default_instance_;
class SMPPCheckGatewayRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPCheckGatewayRequest> _instance;
} _SMPPCheckGatewayRequest_default_instance_;
class SMPPCheckGatewayResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMPPCheckGatewayResponse> _instance;
} _SMPPCheckGatewayResponse_default_instance_;
class AttachmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Attachment> _instance;
} _Attachment_default_instance_;
class SMTPSendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPSendRequest> _instance;
} _SMTPSendRequest_default_instance_;
class SMTPSendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPSendResponse> _instance;
} _SMTPSendResponse_default_instance_;
class SMTPGatewayInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPGatewayInfoRequest> _instance;
} _SMTPGatewayInfoRequest_default_instance_;
class SMTPGatewayInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPGatewayInfoResponse> _instance;
} _SMTPGatewayInfoResponse_default_instance_;
class SMTPCheckGatewayRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPCheckGatewayRequest> _instance;
} _SMTPCheckGatewayRequest_default_instance_;
class SMTPCheckGatewayResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMTPCheckGatewayResponse> _instance;
} _SMTPCheckGatewayResponse_default_instance_;
class PushSendRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushSendRequest> _instance;
} _PushSendRequest_default_instance_;
class PushSendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushSendResponse> _instance;
} _PushSendResponse_default_instance_;
}  // namespace notify
}  // namespace ric
static void InitDefaultsUserContext_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_UserContext_default_instance_;
    new (ptr) ::ric::notify::UserContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::UserContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserContext_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPSendRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPSendRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPSendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPSendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSMPPSendRequest_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base,}};

static void InitDefaultsSMPPSendResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPSendResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPSendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPSendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPSendResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPStatusRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPStatusResponse_SMPPStatus_default_instance_;
    new (ptr) ::ric::notify::SMPPStatusResponse_SMPPStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPStatusResponse_SMPPStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPStatusResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base,}};

static void InitDefaultsSMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPGatewayInfoRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPGatewayInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPGatewayInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPGatewayInfoResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPGatewayInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPGatewayInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPCheckGatewayRequest_default_instance_;
    new (ptr) ::ric::notify::SMPPCheckGatewayRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPCheckGatewayRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMPPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMPPCheckGatewayResponse_default_instance_;
    new (ptr) ::ric::notify::SMPPCheckGatewayResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMPPCheckGatewayResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMPPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMPPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsAttachment_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_Attachment_default_instance_;
    new (ptr) ::ric::notify::Attachment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::Attachment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Attachment_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAttachment_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPSendRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPSendRequest_default_instance_;
    new (ptr) ::ric::notify::SMTPSendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPSendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSMTPSendRequest_ric_2dnotify_2fricnotify_2eproto}, {
      &scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Attachment_ric_2dnotify_2fricnotify_2eproto.base,}};

static void InitDefaultsSMTPSendResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPSendResponse_default_instance_;
    new (ptr) ::ric::notify::SMTPSendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPSendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPSendResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPSendResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPGatewayInfoRequest_default_instance_;
    new (ptr) ::ric::notify::SMTPGatewayInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPGatewayInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPGatewayInfoResponse_default_instance_;
    new (ptr) ::ric::notify::SMTPGatewayInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPGatewayInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPCheckGatewayRequest_default_instance_;
    new (ptr) ::ric::notify::SMTPCheckGatewayRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPCheckGatewayRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsSMTPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_SMTPCheckGatewayResponse_default_instance_;
    new (ptr) ::ric::notify::SMTPCheckGatewayResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::SMTPCheckGatewayResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SMTPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSMTPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsPushSendRequest_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_PushSendRequest_default_instance_;
    new (ptr) ::ric::notify::PushSendRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::PushSendRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PushSendRequest_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPushSendRequest_ric_2dnotify_2fricnotify_2eproto}, {}};

static void InitDefaultsPushSendResponse_ric_2dnotify_2fricnotify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::notify::_PushSendResponse_default_instance_;
    new (ptr) ::ric::notify::PushSendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::notify::PushSendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PushSendResponse_ric_2dnotify_2fricnotify_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPushSendResponse_ric_2dnotify_2fricnotify_2eproto}, {}};

void InitDefaults_ric_2dnotify_2fricnotify_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMPPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Attachment_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SMTPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dnotify_2fricnotify_2eproto[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ric_2dnotify_2fricnotify_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dnotify_2fricnotify_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dnotify_2fricnotify_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, group_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, user_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::UserContext, span_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, phone_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPSendResponse, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusRequest, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusRequest, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, msg_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, msg_state_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, final_date_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse_SMPPStatus, err_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, state_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, description_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPStatusResponse, smpp_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoRequest, gateway_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoResponse, online_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPGatewayInfoResponse, uptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayRequest, host_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayRequest, port_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayRequest, username_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayRequest, password_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayRequest, system_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMPPCheckGatewayResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::Attachment, filename_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::Attachment, content_type_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::Attachment, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, to_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, sender_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, subject_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, text_body_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, html_body_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, host_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, port_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, username_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, password_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, use_starttls_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, use_ssl_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendRequest, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoRequest, gateway_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, gateway_id_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, sender_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, host_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, port_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, username_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, password_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, use_starttls_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, use_ssl_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPGatewayInfoResponse, system_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, host_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, port_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, username_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, password_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, use_starttls_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayRequest, use_ssl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::SMTPCheckGatewayResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::PushSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::notify::PushSendRequest, text_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::PushSendRequest, level_),
  PROTOBUF_FIELD_OFFSET(::ric::notify::PushSendRequest, oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::notify::PushSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::notify::UserContext)},
  { 8, -1, sizeof(::ric::notify::SMPPSendRequest)},
  { 17, -1, sizeof(::ric::notify::SMPPSendResponse)},
  { 23, -1, sizeof(::ric::notify::SMPPStatusRequest)},
  { 30, -1, sizeof(::ric::notify::SMPPStatusResponse_SMPPStatus)},
  { 39, -1, sizeof(::ric::notify::SMPPStatusResponse)},
  { 47, -1, sizeof(::ric::notify::SMPPGatewayInfoRequest)},
  { 53, -1, sizeof(::ric::notify::SMPPGatewayInfoResponse)},
  { 60, -1, sizeof(::ric::notify::SMPPCheckGatewayRequest)},
  { 70, -1, sizeof(::ric::notify::SMPPCheckGatewayResponse)},
  { 76, -1, sizeof(::ric::notify::Attachment)},
  { 84, -1, sizeof(::ric::notify::SMTPSendRequest)},
  { 103, -1, sizeof(::ric::notify::SMTPSendResponse)},
  { 108, -1, sizeof(::ric::notify::SMTPGatewayInfoRequest)},
  { 114, -1, sizeof(::ric::notify::SMTPGatewayInfoResponse)},
  { 128, -1, sizeof(::ric::notify::SMTPCheckGatewayRequest)},
  { 139, -1, sizeof(::ric::notify::SMTPCheckGatewayResponse)},
  { 145, -1, sizeof(::ric::notify::PushSendRequest)},
  { 153, -1, sizeof(::ric::notify::PushSendResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_UserContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPSendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPStatusResponse_SMPPStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPGatewayInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPGatewayInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPCheckGatewayRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMPPCheckGatewayResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_Attachment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPSendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPGatewayInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPGatewayInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPCheckGatewayRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_SMTPCheckGatewayResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_PushSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::notify::_PushSendResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto = {
  {}, AddDescriptors_ric_2dnotify_2fricnotify_2eproto, "ric-notify/ricnotify.proto", schemas,
  file_default_instances, TableStruct_ric_2dnotify_2fricnotify_2eproto::offsets,
  file_level_metadata_ric_2dnotify_2fricnotify_2eproto, 19, file_level_enum_descriptors_ric_2dnotify_2fricnotify_2eproto, file_level_service_descriptors_ric_2dnotify_2fricnotify_2eproto,
};

const char descriptor_table_protodef_ric_2dnotify_2fricnotify_2eproto[] =
  "\n\032ric-notify/ricnotify.proto\022\nric.notify"
  "\032\036google/protobuf/wrappers.proto\"A\n\013User"
  "Context\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001"
  "(\t\022\017\n\007span_id\030\003 \001(\t\"k\n\017SMPPSendRequest\022$"
  "\n\003ctx\030\001 \001(\0132\027.ric.notify.UserContext\022\022\n\n"
  "gateway_id\030\002 \001(\t\022\r\n\005phone\030\003 \001(\t\022\017\n\007messa"
  "ge\030\004 \001(\t\"&\n\020SMPPSendResponse\022\022\n\nmessage_"
  "id\030\001 \001(\t\";\n\021SMPPStatusRequest\022\022\n\ngateway"
  "_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\"\330\002\n\022SMPPSt"
  "atusResponse\0223\n\005state\030\001 \001(\0162$.ric.notify"
  ".SMPPStatusResponse.State\022\023\n\013description"
  "\030\002 \001(\t\022>\n\013smpp_status\030\003 \001(\0132).ric.notify"
  ".SMPPStatusResponse.SMPPStatus\032U\n\nSMPPSt"
  "atus\022\016\n\006msg_id\030\001 \001(\t\022\021\n\tmsg_state\030\002 \001(\t\022"
  "\022\n\nfinal_date\030\003 \001(\t\022\020\n\010err_code\030\004 \001(\005\"a\n"
  "\005State\022\013\n\007UNKNOWN\020\000\022\014\n\010SCHEDULE\020\001\022\016\n\nSEN"
  "D_ERROR\020\002\022\030\n\024MAX_RETRIES_EXCEEDED\020\003\022\010\n\004S"
  "ENT\020\004\022\t\n\005ERROR\020\005\",\n\026SMPPGatewayInfoReque"
  "st\022\022\n\ngateway_id\030\001 \001(\t\"9\n\027SMPPGatewayInf"
  "oResponse\022\016\n\006online\030\001 \001(\010\022\016\n\006uptime\030\002 \001("
  "\003\"n\n\027SMPPCheckGatewayRequest\022\014\n\004host\030\001 \001"
  "(\t\022\014\n\004port\030\002 \001(\005\022\020\n\010username\030\003 \001(\t\022\020\n\010pa"
  "ssword\030\004 \001(\t\022\023\n\013system_type\030\005 \001(\t\"+\n\030SMP"
  "PCheckGatewayResponse\022\017\n\007success\030\001 \001(\010\"E"
  "\n\nAttachment\022\020\n\010filename\030\001 \001(\t\022\024\n\014conten"
  "t_type\030\002 \001(\t\022\017\n\007content\030\003 \001(\014\"\352\002\n\017SMTPSe"
  "ndRequest\022$\n\003ctx\030\001 \001(\0132\027.ric.notify.User"
  "Context\022\022\n\ngateway_id\030\002 \001(\t\022\n\n\002to\030\003 \003(\t\022"
  "\016\n\006sender\030\004 \001(\t\022\017\n\007subject\030\005 \001(\t\022\021\n\ttext"
  "_body\030\006 \001(\t\022\021\n\thtml_body\030\007 \001(\t\022\014\n\004host\030\010"
  " \001(\t\022\014\n\004port\030\t \001(\005\022\020\n\010username\030\n \001(\t\022\020\n\010"
  "password\030\013 \001(\t\0220\n\014use_starttls\030\014 \001(\0132\032.g"
  "oogle.protobuf.BoolValue\022+\n\007use_ssl\030\r \001("
  "\0132\032.google.protobuf.BoolValue\022+\n\013attachm"
  "ents\030\016 \003(\0132\026.ric.notify.Attachment\"\022\n\020SM"
  "TPSendResponse\",\n\026SMTPGatewayInfoRequest"
  "\022\022\n\ngateway_id\030\001 \001(\t\"\264\001\n\027SMTPGatewayInfo"
  "Response\022\022\n\ngateway_id\030\001 \001(\t\022\016\n\006sender\030\002"
  " \001(\t\022\014\n\004host\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\020\n\010user"
  "name\030\005 \001(\t\022\020\n\010password\030\006 \001(\t\022\024\n\014use_star"
  "ttls\030\007 \001(\010\022\017\n\007use_ssl\030\010 \001(\010\022\016\n\006system\030\t "
  "\001(\010\"\200\001\n\027SMTPCheckGatewayRequest\022\014\n\004host\030"
  "\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\020\n\010username\030\003 \001(\t\022\020\n"
  "\010password\030\004 \001(\t\022\024\n\014use_starttls\030\005 \001(\010\022\017\n"
  "\007use_ssl\030\006 \001(\010\"+\n\030SMTPCheckGatewayRespon"
  "se\022\017\n\007success\030\001 \001(\010\";\n\017PushSendRequest\022\014"
  "\n\004text\030\001 \001(\t\022\r\n\005level\030\002 \001(\t\022\013\n\003oid\030\003 \001(\t"
  "\"\022\n\020PushSendResponse2\305\002\n\004SMPP\022A\n\004Send\022\033."
  "ric.notify.SMPPSendRequest\032\034.ric.notify."
  "SMPPSendResponse\022G\n\006Status\022\035.ric.notify."
  "SMPPStatusRequest\032\036.ric.notify.SMPPStatu"
  "sResponse\022V\n\013GatewayInfo\022\".ric.notify.SM"
  "PPGatewayInfoRequest\032#.ric.notify.SMPPGa"
  "tewayInfoResponse\022Y\n\014CheckGateway\022#.ric."
  "notify.SMPPCheckGatewayRequest\032$.ric.not"
  "ify.SMPPCheckGatewayResponse2\374\001\n\004SMTP\022A\n"
  "\004Send\022\033.ric.notify.SMTPSendRequest\032\034.ric"
  ".notify.SMTPSendResponse\022V\n\013GatewayInfo\022"
  "\".ric.notify.SMTPGatewayInfoRequest\032#.ri"
  "c.notify.SMTPGatewayInfoResponse\022Y\n\014Chec"
  "kGateway\022#.ric.notify.SMTPCheckGatewayRe"
  "quest\032$.ric.notify.SMTPCheckGatewayRespo"
  "nse2I\n\004Push\022A\n\004Send\022\033.ric.notify.PushSen"
  "dRequest\032\034.ric.notify.PushSendResponseB\030"
  "Z\026./ric-notify;ricnotifyb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dnotify_2fricnotify_2eproto = {
  false, InitDefaults_ric_2dnotify_2fricnotify_2eproto, 
  descriptor_table_protodef_ric_2dnotify_2fricnotify_2eproto,
  "ric-notify/ricnotify.proto", &assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto, 2592,
};

void AddDescriptors_ric_2dnotify_2fricnotify_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dnotify_2fricnotify_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dnotify_2fricnotify_2eproto = []() { AddDescriptors_ric_2dnotify_2fricnotify_2eproto(); return true; }();
namespace ric {
namespace notify {
const ::google::protobuf::EnumDescriptor* SMPPStatusResponse_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return file_level_enum_descriptors_ric_2dnotify_2fricnotify_2eproto[0];
}
bool SMPPStatusResponse_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SMPPStatusResponse_State SMPPStatusResponse::UNKNOWN;
const SMPPStatusResponse_State SMPPStatusResponse::SCHEDULE;
const SMPPStatusResponse_State SMPPStatusResponse::SEND_ERROR;
const SMPPStatusResponse_State SMPPStatusResponse::MAX_RETRIES_EXCEEDED;
const SMPPStatusResponse_State SMPPStatusResponse::SENT;
const SMPPStatusResponse_State SMPPStatusResponse::ERROR;
const SMPPStatusResponse_State SMPPStatusResponse::State_MIN;
const SMPPStatusResponse_State SMPPStatusResponse::State_MAX;
const int SMPPStatusResponse::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void UserContext::InitAsDefaultInstance() {
}
class UserContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserContext::kGroupIdFieldNumber;
const int UserContext::kUserIdFieldNumber;
const int UserContext::kSpanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserContext::UserContext()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.UserContext)
}
UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.UserContext)
}

void UserContext::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserContext::~UserContext() {
  // @@protoc_insertion_point(destructor:ric.notify.UserContext)
  SharedDtor();
}

void UserContext::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserContext& UserContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserContext_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void UserContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserContext::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserContext*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.UserContext.group_id");
        object = msg->mutable_group_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.UserContext.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string span_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.UserContext.span_id");
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.UserContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.UserContext.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.UserContext.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->span_id().data(), static_cast<int>(this->span_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.UserContext.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.UserContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.UserContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->span_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.UserContext)
}

::google::protobuf::uint8* UserContext::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.UserContext.span_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->span_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.UserContext)
  return target;
}

size_t UserContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.UserContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserContext* source =
      ::google::protobuf::DynamicCastToGenerated<UserContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.UserContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.UserContext)
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
}

void UserContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserContext::InternalSwap(UserContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserContext::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPSendRequest::InitAsDefaultInstance() {
  ::ric::notify::_SMPPSendRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::notify::UserContext*>(
      ::ric::notify::UserContext::internal_default_instance());
}
class SMPPSendRequest::HasBitSetters {
 public:
  static const ::ric::notify::UserContext& ctx(const SMPPSendRequest* msg);
};

const ::ric::notify::UserContext&
SMPPSendRequest::HasBitSetters::ctx(const SMPPSendRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPSendRequest::kCtxFieldNumber;
const int SMPPSendRequest::kGatewayIdFieldNumber;
const int SMPPSendRequest::kPhoneFieldNumber;
const int SMPPSendRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPSendRequest::SMPPSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPSendRequest)
}
SMPPSendRequest::SMPPSendRequest(const SMPPSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::notify::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPSendRequest)
}

void SMPPSendRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

SMPPSendRequest::~SMPPSendRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPSendRequest)
  SharedDtor();
}

void SMPPSendRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void SMPPSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPSendRequest& SMPPSendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPSendRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPSendRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string gateway_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string phone = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendRequest.phone");
        object = msg->mutable_phone();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendRequest.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPSendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendRequest.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendRequest.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPSendRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gateway_id(), output);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phone(), output);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPSendRequest)
}

::google::protobuf::uint8* SMPPSendRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateway_id(), target);
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPSendRequest)
  return target;
}

size_t SMPPSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // string phone = 3;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPSendRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPSendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPSendRequest)
    MergeFrom(*source);
  }
}

void SMPPSendRequest::MergeFrom(const SMPPSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::notify::UserContext::MergeFrom(from.ctx());
  }
}

void SMPPSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPSendRequest::CopyFrom(const SMPPSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPSendRequest::IsInitialized() const {
  return true;
}

void SMPPSendRequest::Swap(SMPPSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPSendRequest::InternalSwap(SMPPSendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata SMPPSendRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPSendResponse::InitAsDefaultInstance() {
}
class SMPPSendResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPSendResponse::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPSendResponse::SMPPSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPSendResponse)
}
SMPPSendResponse::SMPPSendResponse(const SMPPSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPSendResponse)
}

void SMPPSendResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMPPSendResponse::~SMPPSendResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPSendResponse)
  SharedDtor();
}

void SMPPSendResponse::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPSendResponse& SMPPSendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPSendResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPSendResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPSendResponse.message_id");
        object = msg->mutable_message_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPSendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPSendResponse.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPSendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendResponse.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPSendResponse)
}

::google::protobuf::uint8* SMPPSendResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPSendResponse.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPSendResponse)
  return target;
}

size_t SMPPSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPSendResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPSendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPSendResponse)
    MergeFrom(*source);
  }
}

void SMPPSendResponse::MergeFrom(const SMPPSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
}

void SMPPSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPSendResponse::CopyFrom(const SMPPSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPSendResponse::IsInitialized() const {
  return true;
}

void SMPPSendResponse::Swap(SMPPSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPSendResponse::InternalSwap(SMPPSendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMPPSendResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPStatusRequest::InitAsDefaultInstance() {
}
class SMPPStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPStatusRequest::kGatewayIdFieldNumber;
const int SMPPStatusRequest::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPStatusRequest::SMPPStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPStatusRequest)
}
SMPPStatusRequest::SMPPStatusRequest(const SMPPStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPStatusRequest)
}

void SMPPStatusRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMPPStatusRequest::~SMPPStatusRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPStatusRequest)
  SharedDtor();
}

void SMPPStatusRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPStatusRequest& SMPPStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPStatusRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string message_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusRequest.message_id");
        object = msg->mutable_message_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusRequest.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPStatusRequest)
}

::google::protobuf::uint8* SMPPStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusRequest.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPStatusRequest)
  return target;
}

size_t SMPPStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPStatusRequest)
    MergeFrom(*source);
  }
}

void SMPPStatusRequest::MergeFrom(const SMPPStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
}

void SMPPStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPStatusRequest::CopyFrom(const SMPPStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPStatusRequest::IsInitialized() const {
  return true;
}

void SMPPStatusRequest::Swap(SMPPStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPStatusRequest::InternalSwap(SMPPStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMPPStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPStatusResponse_SMPPStatus::InitAsDefaultInstance() {
}
class SMPPStatusResponse_SMPPStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPStatusResponse_SMPPStatus::kMsgIdFieldNumber;
const int SMPPStatusResponse_SMPPStatus::kMsgStateFieldNumber;
const int SMPPStatusResponse_SMPPStatus::kFinalDateFieldNumber;
const int SMPPStatusResponse_SMPPStatus::kErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPStatusResponse_SMPPStatus::SMPPStatusResponse_SMPPStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPStatusResponse.SMPPStatus)
}
SMPPStatusResponse_SMPPStatus::SMPPStatusResponse_SMPPStatus(const SMPPStatusResponse_SMPPStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  msg_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_state().size() > 0) {
    msg_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_state_);
  }
  final_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.final_date().size() > 0) {
    final_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_date_);
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPStatusResponse.SMPPStatus)
}

void SMPPStatusResponse_SMPPStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_code_ = 0;
}

SMPPStatusResponse_SMPPStatus::~SMPPStatusResponse_SMPPStatus() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPStatusResponse.SMPPStatus)
  SharedDtor();
}

void SMPPStatusResponse_SMPPStatus::SharedDtor() {
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPStatusResponse_SMPPStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPStatusResponse_SMPPStatus& SMPPStatusResponse_SMPPStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPStatusResponse_SMPPStatus_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPStatusResponse_SMPPStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPStatusResponse_SMPPStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPStatusResponse_SMPPStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.SMPPStatus.msg_id");
        object = msg->mutable_msg_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string msg_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.SMPPStatus.msg_state");
        object = msg->mutable_msg_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string final_date = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.SMPPStatus.final_date");
        object = msg->mutable_final_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 err_code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_err_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPStatusResponse_SMPPStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.SMPPStatus.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_state().data(), static_cast<int>(this->msg_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.SMPPStatus.msg_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string final_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->final_date().data(), static_cast<int>(this->final_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.SMPPStatus.final_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPStatusResponse.SMPPStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPStatusResponse.SMPPStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPStatusResponse_SMPPStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_id = 1;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_id(), output);
  }

  // string msg_state = 2;
  if (this->msg_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_state().data(), static_cast<int>(this->msg_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_state(), output);
  }

  // string final_date = 3;
  if (this->final_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_date().data(), static_cast<int>(this->final_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.final_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->final_date(), output);
  }

  // int32 err_code = 4;
  if (this->err_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->err_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPStatusResponse.SMPPStatus)
}

::google::protobuf::uint8* SMPPStatusResponse_SMPPStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_id = 1;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_id(), target);
  }

  // string msg_state = 2;
  if (this->msg_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_state().data(), static_cast<int>(this->msg_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.msg_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_state(), target);
  }

  // string final_date = 3;
  if (this->final_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_date().data(), static_cast<int>(this->final_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.SMPPStatus.final_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->final_date(), target);
  }

  // int32 err_code = 4;
  if (this->err_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->err_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPStatusResponse.SMPPStatus)
  return target;
}

size_t SMPPStatusResponse_SMPPStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_id = 1;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string msg_state = 2;
  if (this->msg_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_state());
  }

  // string final_date = 3;
  if (this->final_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_date());
  }

  // int32 err_code = 4;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPStatusResponse_SMPPStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPStatusResponse_SMPPStatus* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPStatusResponse_SMPPStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPStatusResponse.SMPPStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPStatusResponse.SMPPStatus)
    MergeFrom(*source);
  }
}

void SMPPStatusResponse_SMPPStatus::MergeFrom(const SMPPStatusResponse_SMPPStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.msg_state().size() > 0) {

    msg_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_state_);
  }
  if (from.final_date().size() > 0) {

    final_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_date_);
  }
  if (from.err_code() != 0) {
    set_err_code(from.err_code());
  }
}

void SMPPStatusResponse_SMPPStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPStatusResponse_SMPPStatus::CopyFrom(const SMPPStatusResponse_SMPPStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPStatusResponse.SMPPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPStatusResponse_SMPPStatus::IsInitialized() const {
  return true;
}

void SMPPStatusResponse_SMPPStatus::Swap(SMPPStatusResponse_SMPPStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPStatusResponse_SMPPStatus::InternalSwap(SMPPStatusResponse_SMPPStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_id_.Swap(&other->msg_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_state_.Swap(&other->msg_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  final_date_.Swap(&other->final_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(err_code_, other->err_code_);
}

::google::protobuf::Metadata SMPPStatusResponse_SMPPStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPStatusResponse::InitAsDefaultInstance() {
  ::ric::notify::_SMPPStatusResponse_default_instance_._instance.get_mutable()->smpp_status_ = const_cast< ::ric::notify::SMPPStatusResponse_SMPPStatus*>(
      ::ric::notify::SMPPStatusResponse_SMPPStatus::internal_default_instance());
}
class SMPPStatusResponse::HasBitSetters {
 public:
  static const ::ric::notify::SMPPStatusResponse_SMPPStatus& smpp_status(const SMPPStatusResponse* msg);
};

const ::ric::notify::SMPPStatusResponse_SMPPStatus&
SMPPStatusResponse::HasBitSetters::smpp_status(const SMPPStatusResponse* msg) {
  return *msg->smpp_status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPStatusResponse::kStateFieldNumber;
const int SMPPStatusResponse::kDescriptionFieldNumber;
const int SMPPStatusResponse::kSmppStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPStatusResponse::SMPPStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPStatusResponse)
}
SMPPStatusResponse::SMPPStatusResponse(const SMPPStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_smpp_status()) {
    smpp_status_ = new ::ric::notify::SMPPStatusResponse_SMPPStatus(*from.smpp_status_);
  } else {
    smpp_status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPStatusResponse)
}

void SMPPStatusResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&smpp_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&smpp_status_)) + sizeof(state_));
}

SMPPStatusResponse::~SMPPStatusResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPStatusResponse)
  SharedDtor();
}

void SMPPStatusResponse::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete smpp_status_;
}

void SMPPStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPStatusResponse& SMPPStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPStatusResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && smpp_status_ != nullptr) {
    delete smpp_status_;
  }
  smpp_status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.SMPPStatusResponse.State state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::ric::notify::SMPPStatusResponse_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPStatusResponse.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::SMPPStatusResponse_SMPPStatus::_InternalParse;
        object = msg->mutable_smpp_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.SMPPStatusResponse.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ric::notify::SMPPStatusResponse_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPStatusResponse.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_smpp_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.SMPPStatusResponse.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  if (this->has_smpp_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::smpp_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPStatusResponse)
}

::google::protobuf::uint8* SMPPStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.SMPPStatusResponse.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPStatusResponse.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  if (this->has_smpp_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::smpp_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPStatusResponse)
  return target;
}

size_t SMPPStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  if (this->has_smpp_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *smpp_status_);
  }

  // .ric.notify.SMPPStatusResponse.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPStatusResponse)
    MergeFrom(*source);
  }
}

void SMPPStatusResponse::MergeFrom(const SMPPStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_smpp_status()) {
    mutable_smpp_status()->::ric::notify::SMPPStatusResponse_SMPPStatus::MergeFrom(from.smpp_status());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SMPPStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPStatusResponse::CopyFrom(const SMPPStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPStatusResponse::IsInitialized() const {
  return true;
}

void SMPPStatusResponse::Swap(SMPPStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPStatusResponse::InternalSwap(SMPPStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(smpp_status_, other->smpp_status_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata SMPPStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPGatewayInfoRequest::InitAsDefaultInstance() {
}
class SMPPGatewayInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPGatewayInfoRequest::kGatewayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPGatewayInfoRequest::SMPPGatewayInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPGatewayInfoRequest)
}
SMPPGatewayInfoRequest::SMPPGatewayInfoRequest(const SMPPGatewayInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPGatewayInfoRequest)
}

void SMPPGatewayInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMPPGatewayInfoRequest::~SMPPGatewayInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPGatewayInfoRequest)
  SharedDtor();
}

void SMPPGatewayInfoRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPGatewayInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPGatewayInfoRequest& SMPPGatewayInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPGatewayInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPGatewayInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPGatewayInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPGatewayInfoRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPGatewayInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPGatewayInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPGatewayInfoRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPGatewayInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPGatewayInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPGatewayInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPGatewayInfoRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPGatewayInfoRequest)
}

::google::protobuf::uint8* SMPPGatewayInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPGatewayInfoRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPGatewayInfoRequest)
  return target;
}

size_t SMPPGatewayInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPGatewayInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPGatewayInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPGatewayInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPGatewayInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPGatewayInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPGatewayInfoRequest)
    MergeFrom(*source);
  }
}

void SMPPGatewayInfoRequest::MergeFrom(const SMPPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
}

void SMPPGatewayInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPGatewayInfoRequest::CopyFrom(const SMPPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPGatewayInfoRequest::IsInitialized() const {
  return true;
}

void SMPPGatewayInfoRequest::Swap(SMPPGatewayInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPGatewayInfoRequest::InternalSwap(SMPPGatewayInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMPPGatewayInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPGatewayInfoResponse::InitAsDefaultInstance() {
}
class SMPPGatewayInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPGatewayInfoResponse::kOnlineFieldNumber;
const int SMPPGatewayInfoResponse::kUptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPGatewayInfoResponse::SMPPGatewayInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPGatewayInfoResponse)
}
SMPPGatewayInfoResponse::SMPPGatewayInfoResponse(const SMPPGatewayInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uptime_, &from.uptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&uptime_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPGatewayInfoResponse)
}

void SMPPGatewayInfoResponse::SharedCtor() {
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(online_));
}

SMPPGatewayInfoResponse::~SMPPGatewayInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPGatewayInfoResponse)
  SharedDtor();
}

void SMPPGatewayInfoResponse::SharedDtor() {
}

void SMPPGatewayInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPGatewayInfoResponse& SMPPGatewayInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPGatewayInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPGatewayInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPGatewayInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool online = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_online(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 uptime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_uptime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPGatewayInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPGatewayInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool online = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPGatewayInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPGatewayInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPGatewayInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool online = 1;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->online(), output);
  }

  // int64 uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uptime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPGatewayInfoResponse)
}

::google::protobuf::uint8* SMPPGatewayInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool online = 1;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->online(), target);
  }

  // int64 uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uptime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPGatewayInfoResponse)
  return target;
}

size_t SMPPGatewayInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPGatewayInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uptime());
  }

  // bool online = 1;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPGatewayInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPGatewayInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPGatewayInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPGatewayInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPGatewayInfoResponse)
    MergeFrom(*source);
  }
}

void SMPPGatewayInfoResponse::MergeFrom(const SMPPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void SMPPGatewayInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPGatewayInfoResponse::CopyFrom(const SMPPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPGatewayInfoResponse::IsInitialized() const {
  return true;
}

void SMPPGatewayInfoResponse::Swap(SMPPGatewayInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPGatewayInfoResponse::InternalSwap(SMPPGatewayInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uptime_, other->uptime_);
  swap(online_, other->online_);
}

::google::protobuf::Metadata SMPPGatewayInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPCheckGatewayRequest::InitAsDefaultInstance() {
}
class SMPPCheckGatewayRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPCheckGatewayRequest::kHostFieldNumber;
const int SMPPCheckGatewayRequest::kPortFieldNumber;
const int SMPPCheckGatewayRequest::kUsernameFieldNumber;
const int SMPPCheckGatewayRequest::kPasswordFieldNumber;
const int SMPPCheckGatewayRequest::kSystemTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPCheckGatewayRequest::SMPPCheckGatewayRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPCheckGatewayRequest)
}
SMPPCheckGatewayRequest::SMPPCheckGatewayRequest(const SMPPCheckGatewayRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  system_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_type().size() > 0) {
    system_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_type_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPCheckGatewayRequest)
}

void SMPPCheckGatewayRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMPPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

SMPPCheckGatewayRequest::~SMPPCheckGatewayRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPCheckGatewayRequest)
  SharedDtor();
}

void SMPPCheckGatewayRequest::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMPPCheckGatewayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPCheckGatewayRequest& SMPPCheckGatewayRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPCheckGatewayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPCheckGatewayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPCheckGatewayRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPCheckGatewayRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPCheckGatewayRequest.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string username = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPCheckGatewayRequest.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPCheckGatewayRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string system_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMPPCheckGatewayRequest.system_type");
        object = msg->mutable_system_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPCheckGatewayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPCheckGatewayRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPCheckGatewayRequest.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPCheckGatewayRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPCheckGatewayRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_type().data(), static_cast<int>(this->system_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMPPCheckGatewayRequest.system_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPCheckGatewayRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPCheckGatewayRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPCheckGatewayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPCheckGatewayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // string system_type = 5;
  if (this->system_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_type().data(), static_cast<int>(this->system_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.system_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->system_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPCheckGatewayRequest)
}

::google::protobuf::uint8* SMPPCheckGatewayRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPCheckGatewayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // string system_type = 5;
  if (this->system_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_type().data(), static_cast<int>(this->system_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMPPCheckGatewayRequest.system_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->system_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPCheckGatewayRequest)
  return target;
}

size_t SMPPCheckGatewayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPCheckGatewayRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string system_type = 5;
  if (this->system_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_type());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPCheckGatewayRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPCheckGatewayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPCheckGatewayRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPCheckGatewayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPCheckGatewayRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPCheckGatewayRequest)
    MergeFrom(*source);
  }
}

void SMPPCheckGatewayRequest::MergeFrom(const SMPPCheckGatewayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPCheckGatewayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.system_type().size() > 0) {

    system_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_type_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SMPPCheckGatewayRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPCheckGatewayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPCheckGatewayRequest::CopyFrom(const SMPPCheckGatewayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPCheckGatewayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPCheckGatewayRequest::IsInitialized() const {
  return true;
}

void SMPPCheckGatewayRequest::Swap(SMPPCheckGatewayRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPCheckGatewayRequest::InternalSwap(SMPPCheckGatewayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_type_.Swap(&other->system_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::google::protobuf::Metadata SMPPCheckGatewayRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMPPCheckGatewayResponse::InitAsDefaultInstance() {
}
class SMPPCheckGatewayResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMPPCheckGatewayResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMPPCheckGatewayResponse::SMPPCheckGatewayResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMPPCheckGatewayResponse)
}
SMPPCheckGatewayResponse::SMPPCheckGatewayResponse(const SMPPCheckGatewayResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMPPCheckGatewayResponse)
}

void SMPPCheckGatewayResponse::SharedCtor() {
  success_ = false;
}

SMPPCheckGatewayResponse::~SMPPCheckGatewayResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMPPCheckGatewayResponse)
  SharedDtor();
}

void SMPPCheckGatewayResponse::SharedDtor() {
}

void SMPPCheckGatewayResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMPPCheckGatewayResponse& SMPPCheckGatewayResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMPPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMPPCheckGatewayResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMPPCheckGatewayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMPPCheckGatewayResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMPPCheckGatewayResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMPPCheckGatewayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMPPCheckGatewayResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMPPCheckGatewayResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMPPCheckGatewayResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMPPCheckGatewayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMPPCheckGatewayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMPPCheckGatewayResponse)
}

::google::protobuf::uint8* SMPPCheckGatewayResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMPPCheckGatewayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMPPCheckGatewayResponse)
  return target;
}

size_t SMPPCheckGatewayResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMPPCheckGatewayResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMPPCheckGatewayResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMPPCheckGatewayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMPPCheckGatewayResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMPPCheckGatewayResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMPPCheckGatewayResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMPPCheckGatewayResponse)
    MergeFrom(*source);
  }
}

void SMPPCheckGatewayResponse::MergeFrom(const SMPPCheckGatewayResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMPPCheckGatewayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SMPPCheckGatewayResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMPPCheckGatewayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMPPCheckGatewayResponse::CopyFrom(const SMPPCheckGatewayResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMPPCheckGatewayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMPPCheckGatewayResponse::IsInitialized() const {
  return true;
}

void SMPPCheckGatewayResponse::Swap(SMPPCheckGatewayResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMPPCheckGatewayResponse::InternalSwap(SMPPCheckGatewayResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata SMPPCheckGatewayResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Attachment::InitAsDefaultInstance() {
}
class Attachment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attachment::kFilenameFieldNumber;
const int Attachment::kContentTypeFieldNumber;
const int Attachment::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attachment::Attachment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.Attachment)
}
Attachment::Attachment(const Attachment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content_type().size() > 0) {
    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.Attachment)
}

void Attachment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Attachment_ric_2dnotify_2fricnotify_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Attachment::~Attachment() {
  // @@protoc_insertion_point(destructor:ric.notify.Attachment)
  SharedDtor();
}

void Attachment::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Attachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attachment& Attachment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Attachment_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.Attachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Attachment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Attachment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.Attachment.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string content_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.Attachment.content_type");
        object = msg->mutable_content_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes content = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.Attachment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.Attachment.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content_type().data(), static_cast<int>(this->content_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.Attachment.content_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.Attachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.Attachment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.Attachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.Attachment.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // string content_type = 2;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_type().data(), static_cast<int>(this->content_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.Attachment.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content_type(), output);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.Attachment)
}

::google::protobuf::uint8* Attachment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.Attachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.Attachment.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // string content_type = 2;
  if (this->content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_type().data(), static_cast<int>(this->content_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.Attachment.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content_type(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.Attachment)
  return target;
}

size_t Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.Attachment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string content_type = 2;
  if (this->content_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_type());
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attachment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.Attachment)
  GOOGLE_DCHECK_NE(&from, this);
  const Attachment* source =
      ::google::protobuf::DynamicCastToGenerated<Attachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.Attachment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.Attachment)
    MergeFrom(*source);
  }
}

void Attachment::MergeFrom(const Attachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.Attachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.content_type().size() > 0) {

    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void Attachment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attachment::CopyFrom(const Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attachment::IsInitialized() const {
  return true;
}

void Attachment::Swap(Attachment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attachment::InternalSwap(Attachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_type_.Swap(&other->content_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Attachment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPSendRequest::InitAsDefaultInstance() {
  ::ric::notify::_SMTPSendRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::notify::UserContext*>(
      ::ric::notify::UserContext::internal_default_instance());
  ::ric::notify::_SMTPSendRequest_default_instance_._instance.get_mutable()->use_starttls_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::ric::notify::_SMTPSendRequest_default_instance_._instance.get_mutable()->use_ssl_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
class SMTPSendRequest::HasBitSetters {
 public:
  static const ::ric::notify::UserContext& ctx(const SMTPSendRequest* msg);
  static const ::google::protobuf::BoolValue& use_starttls(const SMTPSendRequest* msg);
  static const ::google::protobuf::BoolValue& use_ssl(const SMTPSendRequest* msg);
};

const ::ric::notify::UserContext&
SMTPSendRequest::HasBitSetters::ctx(const SMTPSendRequest* msg) {
  return *msg->ctx_;
}
const ::google::protobuf::BoolValue&
SMTPSendRequest::HasBitSetters::use_starttls(const SMTPSendRequest* msg) {
  return *msg->use_starttls_;
}
const ::google::protobuf::BoolValue&
SMTPSendRequest::HasBitSetters::use_ssl(const SMTPSendRequest* msg) {
  return *msg->use_ssl_;
}
void SMTPSendRequest::clear_use_starttls() {
  if (GetArenaNoVirtual() == nullptr && use_starttls_ != nullptr) {
    delete use_starttls_;
  }
  use_starttls_ = nullptr;
}
void SMTPSendRequest::clear_use_ssl() {
  if (GetArenaNoVirtual() == nullptr && use_ssl_ != nullptr) {
    delete use_ssl_;
  }
  use_ssl_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPSendRequest::kCtxFieldNumber;
const int SMTPSendRequest::kGatewayIdFieldNumber;
const int SMTPSendRequest::kToFieldNumber;
const int SMTPSendRequest::kSenderFieldNumber;
const int SMTPSendRequest::kSubjectFieldNumber;
const int SMTPSendRequest::kTextBodyFieldNumber;
const int SMTPSendRequest::kHtmlBodyFieldNumber;
const int SMTPSendRequest::kHostFieldNumber;
const int SMTPSendRequest::kPortFieldNumber;
const int SMTPSendRequest::kUsernameFieldNumber;
const int SMTPSendRequest::kPasswordFieldNumber;
const int SMTPSendRequest::kUseStarttlsFieldNumber;
const int SMTPSendRequest::kUseSslFieldNumber;
const int SMTPSendRequest::kAttachmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPSendRequest::SMTPSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPSendRequest)
}
SMTPSendRequest::SMTPSendRequest(const SMTPSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      to_(from.to_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subject().size() > 0) {
    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  text_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text_body().size() > 0) {
    text_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_body_);
  }
  html_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.html_body().size() > 0) {
    html_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_body_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::notify::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_use_starttls()) {
    use_starttls_ = new ::google::protobuf::BoolValue(*from.use_starttls_);
  } else {
    use_starttls_ = nullptr;
  }
  if (from.has_use_ssl()) {
    use_ssl_ = new ::google::protobuf::BoolValue(*from.use_ssl_);
  } else {
    use_ssl_ = nullptr;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPSendRequest)
}

void SMTPSendRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(port_));
}

SMTPSendRequest::~SMTPSendRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPSendRequest)
  SharedDtor();
}

void SMTPSendRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete use_starttls_;
  if (this != internal_default_instance()) delete use_ssl_;
}

void SMTPSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPSendRequest& SMTPSendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.Clear();
  attachments_.Clear();
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && use_starttls_ != nullptr) {
    delete use_starttls_;
  }
  use_starttls_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && use_ssl_ != nullptr) {
    delete use_ssl_;
  }
  use_ssl_ = nullptr;
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPSendRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPSendRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::notify::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string gateway_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string to = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.to");
          object = msg->add_to();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // string sender = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string subject = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.subject");
        object = msg->mutable_subject();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string text_body = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.text_body");
        object = msg->mutable_text_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string html_body = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.html_body");
        object = msg->mutable_html_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string host = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string username = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPSendRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.BoolValue use_starttls = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_use_starttls();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue use_ssl = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_use_ssl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.notify.Attachment attachments = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::notify::Attachment::_InternalParse;
          object = msg->add_attachments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 114 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPSendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.notify.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to(this->to_size() - 1).data(),
            static_cast<int>(this->to(this->to_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subject = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject().data(), static_cast<int>(this->subject().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.subject"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text_body = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_body().data(), static_cast<int>(this->text_body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.text_body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string html_body = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->html_body().data(), static_cast<int>(this->html_body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.html_body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPSendRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue use_starttls = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_use_starttls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue use_ssl = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_use_ssl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.notify.Attachment attachments = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attachments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPSendRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gateway_id(), output);
  }

  // repeated string to = 3;
  for (int i = 0, n = this->to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to(i).data(), static_cast<int>(this->to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to(i), output);
  }

  // string sender = 4;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender(), output);
  }

  // string subject = 5;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->subject(), output);
  }

  // string text_body = 6;
  if (this->text_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_body().data(), static_cast<int>(this->text_body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.text_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text_body(), output);
  }

  // string html_body = 7;
  if (this->html_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->html_body().data(), static_cast<int>(this->html_body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.html_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->html_body(), output);
  }

  // string host = 8;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->host(), output);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->port(), output);
  }

  // string username = 10;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->username(), output);
  }

  // string password = 11;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->password(), output);
  }

  // .google.protobuf.BoolValue use_starttls = 12;
  if (this->has_use_starttls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::use_starttls(this), output);
  }

  // .google.protobuf.BoolValue use_ssl = 13;
  if (this->has_use_ssl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::use_ssl(this), output);
  }

  // repeated .ric.notify.Attachment attachments = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attachments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->attachments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPSendRequest)
}

::google::protobuf::uint8* SMTPSendRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateway_id(), target);
  }

  // repeated string to = 3;
  for (int i = 0, n = this->to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to(i).data(), static_cast<int>(this->to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->to(i), target);
  }

  // string sender = 4;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender(), target);
  }

  // string subject = 5;
  if (this->subject().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subject(), target);
  }

  // string text_body = 6;
  if (this->text_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_body().data(), static_cast<int>(this->text_body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.text_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text_body(), target);
  }

  // string html_body = 7;
  if (this->html_body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->html_body().data(), static_cast<int>(this->html_body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.html_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->html_body(), target);
  }

  // string host = 8;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->host(), target);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->port(), target);
  }

  // string username = 10;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->username(), target);
  }

  // string password = 11;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPSendRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->password(), target);
  }

  // .google.protobuf.BoolValue use_starttls = 12;
  if (this->has_use_starttls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::use_starttls(this), target);
  }

  // .google.protobuf.BoolValue use_ssl = 13;
  if (this->has_use_ssl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::use_ssl(this), target);
  }

  // repeated .ric.notify.Attachment attachments = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attachments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->attachments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPSendRequest)
  return target;
}

size_t SMTPSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->to_size());
  for (int i = 0, n = this->to_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->to(i));
  }

  // repeated .ric.notify.Attachment attachments = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->attachments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attachments(static_cast<int>(i)));
    }
  }

  // string gateway_id = 2;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // string sender = 4;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string subject = 5;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subject());
  }

  // string text_body = 6;
  if (this->text_body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_body());
  }

  // string html_body = 7;
  if (this->html_body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->html_body());
  }

  // string host = 8;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string username = 10;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 11;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .ric.notify.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .google.protobuf.BoolValue use_starttls = 12;
  if (this->has_use_starttls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *use_starttls_);
  }

  // .google.protobuf.BoolValue use_ssl = 13;
  if (this->has_use_ssl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *use_ssl_);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPSendRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPSendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPSendRequest)
    MergeFrom(*source);
  }
}

void SMTPSendRequest::MergeFrom(const SMTPSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_.MergeFrom(from.to_);
  attachments_.MergeFrom(from.attachments_);
  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.subject().size() > 0) {

    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  if (from.text_body().size() > 0) {

    text_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_body_);
  }
  if (from.html_body().size() > 0) {

    html_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_body_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::notify::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_use_starttls()) {
    mutable_use_starttls()->::google::protobuf::BoolValue::MergeFrom(from.use_starttls());
  }
  if (from.has_use_ssl()) {
    mutable_use_ssl()->::google::protobuf::BoolValue::MergeFrom(from.use_ssl());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SMTPSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPSendRequest::CopyFrom(const SMTPSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPSendRequest::IsInitialized() const {
  return true;
}

void SMTPSendRequest::Swap(SMTPSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPSendRequest::InternalSwap(SMTPSendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  to_.InternalSwap(CastToBase(&other->to_));
  CastToBase(&attachments_)->InternalSwap(CastToBase(&other->attachments_));
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subject_.Swap(&other->subject_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_body_.Swap(&other->text_body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  html_body_.Swap(&other->html_body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
  swap(use_starttls_, other->use_starttls_);
  swap(use_ssl_, other->use_ssl_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata SMTPSendRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPSendResponse::InitAsDefaultInstance() {
}
class SMTPSendResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPSendResponse::SMTPSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPSendResponse)
}
SMTPSendResponse::SMTPSendResponse(const SMTPSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPSendResponse)
}

void SMTPSendResponse::SharedCtor() {
}

SMTPSendResponse::~SMTPSendResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPSendResponse)
  SharedDtor();
}

void SMTPSendResponse::SharedDtor() {
}

void SMTPSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPSendResponse& SMTPSendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPSendResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPSendResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPSendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPSendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPSendResponse)
}

::google::protobuf::uint8* SMTPSendResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPSendResponse)
  return target;
}

size_t SMTPSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPSendResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPSendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPSendResponse)
    MergeFrom(*source);
  }
}

void SMTPSendResponse::MergeFrom(const SMTPSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SMTPSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPSendResponse::CopyFrom(const SMTPSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPSendResponse::IsInitialized() const {
  return true;
}

void SMTPSendResponse::Swap(SMTPSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPSendResponse::InternalSwap(SMTPSendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SMTPSendResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPGatewayInfoRequest::InitAsDefaultInstance() {
}
class SMTPGatewayInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPGatewayInfoRequest::kGatewayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPGatewayInfoRequest::SMTPGatewayInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPGatewayInfoRequest)
}
SMTPGatewayInfoRequest::SMTPGatewayInfoRequest(const SMTPGatewayInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPGatewayInfoRequest)
}

void SMTPGatewayInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SMTPGatewayInfoRequest::~SMTPGatewayInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPGatewayInfoRequest)
  SharedDtor();
}

void SMTPGatewayInfoRequest::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMTPGatewayInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPGatewayInfoRequest& SMTPGatewayInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPGatewayInfoRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPGatewayInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPGatewayInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPGatewayInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoRequest.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPGatewayInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPGatewayInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoRequest.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPGatewayInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPGatewayInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPGatewayInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoRequest.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPGatewayInfoRequest)
}

::google::protobuf::uint8* SMTPGatewayInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPGatewayInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoRequest.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPGatewayInfoRequest)
  return target;
}

size_t SMTPGatewayInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPGatewayInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPGatewayInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPGatewayInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPGatewayInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPGatewayInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPGatewayInfoRequest)
    MergeFrom(*source);
  }
}

void SMTPGatewayInfoRequest::MergeFrom(const SMTPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPGatewayInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
}

void SMTPGatewayInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPGatewayInfoRequest::CopyFrom(const SMTPGatewayInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPGatewayInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPGatewayInfoRequest::IsInitialized() const {
  return true;
}

void SMTPGatewayInfoRequest::Swap(SMTPGatewayInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPGatewayInfoRequest::InternalSwap(SMTPGatewayInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SMTPGatewayInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPGatewayInfoResponse::InitAsDefaultInstance() {
}
class SMTPGatewayInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPGatewayInfoResponse::kGatewayIdFieldNumber;
const int SMTPGatewayInfoResponse::kSenderFieldNumber;
const int SMTPGatewayInfoResponse::kHostFieldNumber;
const int SMTPGatewayInfoResponse::kPortFieldNumber;
const int SMTPGatewayInfoResponse::kUsernameFieldNumber;
const int SMTPGatewayInfoResponse::kPasswordFieldNumber;
const int SMTPGatewayInfoResponse::kUseStarttlsFieldNumber;
const int SMTPGatewayInfoResponse::kUseSslFieldNumber;
const int SMTPGatewayInfoResponse::kSystemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPGatewayInfoResponse::SMTPGatewayInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPGatewayInfoResponse)
}
SMTPGatewayInfoResponse::SMTPGatewayInfoResponse(const SMTPGatewayInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway_id().size() > 0) {
    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&system_) -
    reinterpret_cast<char*>(&port_)) + sizeof(system_));
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPGatewayInfoResponse)
}

void SMTPGatewayInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  gateway_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_) -
      reinterpret_cast<char*>(&port_)) + sizeof(system_));
}

SMTPGatewayInfoResponse::~SMTPGatewayInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPGatewayInfoResponse)
  SharedDtor();
}

void SMTPGatewayInfoResponse::SharedDtor() {
  gateway_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMTPGatewayInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPGatewayInfoResponse& SMTPGatewayInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPGatewayInfoResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPGatewayInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_) -
      reinterpret_cast<char*>(&port_)) + sizeof(system_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPGatewayInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPGatewayInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoResponse.gateway_id");
        object = msg->mutable_gateway_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string sender = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoResponse.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string host = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoResponse.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string username = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoResponse.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPGatewayInfoResponse.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool use_starttls = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_use_starttls(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool use_ssl = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_use_ssl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool system = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_system(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPGatewayInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPGatewayInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gateway_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoResponse.gateway_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoResponse.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoResponse.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoResponse.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPGatewayInfoResponse.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_starttls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_starttls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_ssl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ssl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool system = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPGatewayInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPGatewayInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPGatewayInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.gateway_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gateway_id(), output);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // string host = 3;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->host(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // bool use_starttls = 7;
  if (this->use_starttls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_starttls(), output);
  }

  // bool use_ssl = 8;
  if (this->use_ssl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_ssl(), output);
  }

  // bool system = 9;
  if (this->system() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->system(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPGatewayInfoResponse)
}

::google::protobuf::uint8* SMTPGatewayInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPGatewayInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_id().data(), static_cast<int>(this->gateway_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.gateway_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateway_id(), target);
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // string host = 3;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPGatewayInfoResponse.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // bool use_starttls = 7;
  if (this->use_starttls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_starttls(), target);
  }

  // bool use_ssl = 8;
  if (this->use_ssl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_ssl(), target);
  }

  // bool system = 9;
  if (this->system() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->system(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPGatewayInfoResponse)
  return target;
}

size_t SMTPGatewayInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPGatewayInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gateway_id = 1;
  if (this->gateway_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway_id());
  }

  // string sender = 2;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string host = 3;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string username = 5;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 6;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool use_starttls = 7;
  if (this->use_starttls() != 0) {
    total_size += 1 + 1;
  }

  // bool use_ssl = 8;
  if (this->use_ssl() != 0) {
    total_size += 1 + 1;
  }

  // bool system = 9;
  if (this->system() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPGatewayInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPGatewayInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPGatewayInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPGatewayInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPGatewayInfoResponse)
    MergeFrom(*source);
  }
}

void SMTPGatewayInfoResponse::MergeFrom(const SMTPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPGatewayInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gateway_id().size() > 0) {

    gateway_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_id_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.use_starttls() != 0) {
    set_use_starttls(from.use_starttls());
  }
  if (from.use_ssl() != 0) {
    set_use_ssl(from.use_ssl());
  }
  if (from.system() != 0) {
    set_system(from.system());
  }
}

void SMTPGatewayInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPGatewayInfoResponse::CopyFrom(const SMTPGatewayInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPGatewayInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPGatewayInfoResponse::IsInitialized() const {
  return true;
}

void SMTPGatewayInfoResponse::Swap(SMTPGatewayInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPGatewayInfoResponse::InternalSwap(SMTPGatewayInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gateway_id_.Swap(&other->gateway_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(use_starttls_, other->use_starttls_);
  swap(use_ssl_, other->use_ssl_);
  swap(system_, other->system_);
}

::google::protobuf::Metadata SMTPGatewayInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPCheckGatewayRequest::InitAsDefaultInstance() {
}
class SMTPCheckGatewayRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPCheckGatewayRequest::kHostFieldNumber;
const int SMTPCheckGatewayRequest::kPortFieldNumber;
const int SMTPCheckGatewayRequest::kUsernameFieldNumber;
const int SMTPCheckGatewayRequest::kPasswordFieldNumber;
const int SMTPCheckGatewayRequest::kUseStarttlsFieldNumber;
const int SMTPCheckGatewayRequest::kUseSslFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPCheckGatewayRequest::SMTPCheckGatewayRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPCheckGatewayRequest)
}
SMTPCheckGatewayRequest::SMTPCheckGatewayRequest(const SMTPCheckGatewayRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_ssl_) -
    reinterpret_cast<char*>(&port_)) + sizeof(use_ssl_));
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPCheckGatewayRequest)
}

void SMTPCheckGatewayRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SMTPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_ssl_) -
      reinterpret_cast<char*>(&port_)) + sizeof(use_ssl_));
}

SMTPCheckGatewayRequest::~SMTPCheckGatewayRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPCheckGatewayRequest)
  SharedDtor();
}

void SMTPCheckGatewayRequest::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMTPCheckGatewayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPCheckGatewayRequest& SMTPCheckGatewayRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPCheckGatewayRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPCheckGatewayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPCheckGatewayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_ssl_) -
      reinterpret_cast<char*>(&port_)) + sizeof(use_ssl_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPCheckGatewayRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPCheckGatewayRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCheckGatewayRequest.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string username = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCheckGatewayRequest.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.SMTPCheckGatewayRequest.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool use_starttls = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_use_starttls(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool use_ssl = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_use_ssl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPCheckGatewayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPCheckGatewayRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCheckGatewayRequest.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCheckGatewayRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.SMTPCheckGatewayRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_starttls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_starttls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_ssl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ssl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPCheckGatewayRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPCheckGatewayRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPCheckGatewayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPCheckGatewayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCheckGatewayRequest.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCheckGatewayRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCheckGatewayRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // bool use_starttls = 5;
  if (this->use_starttls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_starttls(), output);
  }

  // bool use_ssl = 6;
  if (this->use_ssl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_ssl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPCheckGatewayRequest)
}

::google::protobuf::uint8* SMTPCheckGatewayRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPCheckGatewayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCheckGatewayRequest.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCheckGatewayRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.SMTPCheckGatewayRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // bool use_starttls = 5;
  if (this->use_starttls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_starttls(), target);
  }

  // bool use_ssl = 6;
  if (this->use_ssl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_ssl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPCheckGatewayRequest)
  return target;
}

size_t SMTPCheckGatewayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPCheckGatewayRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool use_starttls = 5;
  if (this->use_starttls() != 0) {
    total_size += 1 + 1;
  }

  // bool use_ssl = 6;
  if (this->use_ssl() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPCheckGatewayRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPCheckGatewayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPCheckGatewayRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPCheckGatewayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPCheckGatewayRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPCheckGatewayRequest)
    MergeFrom(*source);
  }
}

void SMTPCheckGatewayRequest::MergeFrom(const SMTPCheckGatewayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPCheckGatewayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.use_starttls() != 0) {
    set_use_starttls(from.use_starttls());
  }
  if (from.use_ssl() != 0) {
    set_use_ssl(from.use_ssl());
  }
}

void SMTPCheckGatewayRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPCheckGatewayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPCheckGatewayRequest::CopyFrom(const SMTPCheckGatewayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPCheckGatewayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPCheckGatewayRequest::IsInitialized() const {
  return true;
}

void SMTPCheckGatewayRequest::Swap(SMTPCheckGatewayRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPCheckGatewayRequest::InternalSwap(SMTPCheckGatewayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(use_starttls_, other->use_starttls_);
  swap(use_ssl_, other->use_ssl_);
}

::google::protobuf::Metadata SMTPCheckGatewayRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SMTPCheckGatewayResponse::InitAsDefaultInstance() {
}
class SMTPCheckGatewayResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMTPCheckGatewayResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMTPCheckGatewayResponse::SMTPCheckGatewayResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.SMTPCheckGatewayResponse)
}
SMTPCheckGatewayResponse::SMTPCheckGatewayResponse(const SMTPCheckGatewayResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ric.notify.SMTPCheckGatewayResponse)
}

void SMTPCheckGatewayResponse::SharedCtor() {
  success_ = false;
}

SMTPCheckGatewayResponse::~SMTPCheckGatewayResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.SMTPCheckGatewayResponse)
  SharedDtor();
}

void SMTPCheckGatewayResponse::SharedDtor() {
}

void SMTPCheckGatewayResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMTPCheckGatewayResponse& SMTPCheckGatewayResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SMTPCheckGatewayResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void SMTPCheckGatewayResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.SMTPCheckGatewayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SMTPCheckGatewayResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SMTPCheckGatewayResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SMTPCheckGatewayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.SMTPCheckGatewayResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.SMTPCheckGatewayResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.SMTPCheckGatewayResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SMTPCheckGatewayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.SMTPCheckGatewayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.SMTPCheckGatewayResponse)
}

::google::protobuf::uint8* SMTPCheckGatewayResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.SMTPCheckGatewayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.SMTPCheckGatewayResponse)
  return target;
}

size_t SMTPCheckGatewayResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.SMTPCheckGatewayResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMTPCheckGatewayResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.SMTPCheckGatewayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SMTPCheckGatewayResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SMTPCheckGatewayResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.SMTPCheckGatewayResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.SMTPCheckGatewayResponse)
    MergeFrom(*source);
  }
}

void SMTPCheckGatewayResponse::MergeFrom(const SMTPCheckGatewayResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.SMTPCheckGatewayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SMTPCheckGatewayResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.SMTPCheckGatewayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMTPCheckGatewayResponse::CopyFrom(const SMTPCheckGatewayResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.SMTPCheckGatewayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMTPCheckGatewayResponse::IsInitialized() const {
  return true;
}

void SMTPCheckGatewayResponse::Swap(SMTPCheckGatewayResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMTPCheckGatewayResponse::InternalSwap(SMTPCheckGatewayResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata SMTPCheckGatewayResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PushSendRequest::InitAsDefaultInstance() {
}
class PushSendRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushSendRequest::kTextFieldNumber;
const int PushSendRequest::kLevelFieldNumber;
const int PushSendRequest::kOidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushSendRequest::PushSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.PushSendRequest)
}
PushSendRequest::PushSendRequest(const PushSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.oid().size() > 0) {
    oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oid_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.notify.PushSendRequest)
}

void PushSendRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PushSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PushSendRequest::~PushSendRequest() {
  // @@protoc_insertion_point(destructor:ric.notify.PushSendRequest)
  SharedDtor();
}

void PushSendRequest::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PushSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushSendRequest& PushSendRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PushSendRequest_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void PushSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.PushSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushSendRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PushSendRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.PushSendRequest.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.PushSendRequest.level");
        object = msg->mutable_level();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string oid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.notify.PushSendRequest.oid");
        object = msg->mutable_oid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.PushSendRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.PushSendRequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.PushSendRequest.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oid().data(), static_cast<int>(this->oid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.notify.PushSendRequest.oid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.PushSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.PushSendRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.PushSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.PushSendRequest.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // string level = 2;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.PushSendRequest.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->level(), output);
  }

  // string oid = 3;
  if (this->oid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oid().data(), static_cast<int>(this->oid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.PushSendRequest.oid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->oid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.PushSendRequest)
}

::google::protobuf::uint8* PushSendRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.PushSendRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.PushSendRequest.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // string level = 2;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.PushSendRequest.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->level(), target);
  }

  // string oid = 3;
  if (this->oid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oid().data(), static_cast<int>(this->oid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.notify.PushSendRequest.oid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.PushSendRequest)
  return target;
}

size_t PushSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.PushSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string level = 2;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string oid = 3;
  if (this->oid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.PushSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PushSendRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PushSendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.PushSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.PushSendRequest)
    MergeFrom(*source);
  }
}

void PushSendRequest::MergeFrom(const PushSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.PushSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.oid().size() > 0) {

    oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oid_);
  }
}

void PushSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.PushSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSendRequest::CopyFrom(const PushSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.PushSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSendRequest::IsInitialized() const {
  return true;
}

void PushSendRequest::Swap(PushSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushSendRequest::InternalSwap(PushSendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  level_.Swap(&other->level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oid_.Swap(&other->oid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PushSendRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PushSendResponse::InitAsDefaultInstance() {
}
class PushSendResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushSendResponse::PushSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.notify.PushSendResponse)
}
PushSendResponse::PushSendResponse(const PushSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.notify.PushSendResponse)
}

void PushSendResponse::SharedCtor() {
}

PushSendResponse::~PushSendResponse() {
  // @@protoc_insertion_point(destructor:ric.notify.PushSendResponse)
  SharedDtor();
}

void PushSendResponse::SharedDtor() {
}

void PushSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushSendResponse& PushSendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PushSendResponse_ric_2dnotify_2fricnotify_2eproto.base);
  return *internal_default_instance();
}


void PushSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.notify.PushSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushSendResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PushSendResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.notify.PushSendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.notify.PushSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.notify.PushSendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.notify.PushSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.notify.PushSendResponse)
}

::google::protobuf::uint8* PushSendResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.notify.PushSendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.notify.PushSendResponse)
  return target;
}

size_t PushSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.notify.PushSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.notify.PushSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PushSendResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PushSendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.notify.PushSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.notify.PushSendResponse)
    MergeFrom(*source);
  }
}

void PushSendResponse::MergeFrom(const PushSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.notify.PushSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PushSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.notify.PushSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushSendResponse::CopyFrom(const PushSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.notify.PushSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushSendResponse::IsInitialized() const {
  return true;
}

void PushSendResponse::Swap(PushSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushSendResponse::InternalSwap(PushSendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PushSendResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dnotify_2fricnotify_2eproto);
  return ::file_level_metadata_ric_2dnotify_2fricnotify_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace notify
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::notify::UserContext* Arena::CreateMaybeMessage< ::ric::notify::UserContext >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::UserContext >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPSendRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPSendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPSendResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPSendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPSendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPStatusRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPStatusResponse_SMPPStatus* Arena::CreateMaybeMessage< ::ric::notify::SMPPStatusResponse_SMPPStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPStatusResponse_SMPPStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPStatusResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPGatewayInfoRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPGatewayInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPGatewayInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPGatewayInfoResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPGatewayInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPGatewayInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPCheckGatewayRequest* Arena::CreateMaybeMessage< ::ric::notify::SMPPCheckGatewayRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPCheckGatewayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMPPCheckGatewayResponse* Arena::CreateMaybeMessage< ::ric::notify::SMPPCheckGatewayResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMPPCheckGatewayResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::Attachment* Arena::CreateMaybeMessage< ::ric::notify::Attachment >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPSendRequest* Arena::CreateMaybeMessage< ::ric::notify::SMTPSendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPSendResponse* Arena::CreateMaybeMessage< ::ric::notify::SMTPSendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPSendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPGatewayInfoRequest* Arena::CreateMaybeMessage< ::ric::notify::SMTPGatewayInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPGatewayInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPGatewayInfoResponse* Arena::CreateMaybeMessage< ::ric::notify::SMTPGatewayInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPGatewayInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPCheckGatewayRequest* Arena::CreateMaybeMessage< ::ric::notify::SMTPCheckGatewayRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPCheckGatewayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::SMTPCheckGatewayResponse* Arena::CreateMaybeMessage< ::ric::notify::SMTPCheckGatewayResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::SMTPCheckGatewayResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::PushSendRequest* Arena::CreateMaybeMessage< ::ric::notify::PushSendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::PushSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::notify::PushSendResponse* Arena::CreateMaybeMessage< ::ric::notify::PushSendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::notify::PushSendResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
