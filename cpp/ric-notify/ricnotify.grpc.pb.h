// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-notify/ricnotify.proto
#ifndef GRPC_ric_2dnotify_2fricnotify_2eproto__INCLUDED
#define GRPC_ric_2dnotify_2fricnotify_2eproto__INCLUDED

#include "ric-notify/ricnotify.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ric {
namespace notify {

class SMPP final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.notify.SMPP";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Send(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::ric::notify::SMPPSendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPSendResponse>> AsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPSendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPSendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPSendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::ric::notify::SMPPStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPStatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPStatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPStatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPStatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::ric::notify::SMPPGatewayInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPGatewayInfoResponse>> AsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPGatewayInfoResponse>>(AsyncGatewayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPGatewayInfoResponse>> PrepareAsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPGatewayInfoResponse>>(PrepareAsyncGatewayInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::ric::notify::SMPPCheckGatewayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPCheckGatewayResponse>> AsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPCheckGatewayResponse>>(AsyncCheckGatewayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPCheckGatewayResponse>> PrepareAsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPCheckGatewayResponse>>(PrepareAsyncCheckGatewayRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Send(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GatewayInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckGateway(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPSendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPSendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPStatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPStatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPGatewayInfoResponse>* AsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPGatewayInfoResponse>* PrepareAsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPCheckGatewayResponse>* AsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMPPCheckGatewayResponse>* PrepareAsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Send(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::ric::notify::SMPPSendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPSendResponse>> AsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPSendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPSendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPSendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::ric::notify::SMPPStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPStatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPStatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPStatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPStatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::ric::notify::SMPPGatewayInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPGatewayInfoResponse>> AsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPGatewayInfoResponse>>(AsyncGatewayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPGatewayInfoResponse>> PrepareAsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPGatewayInfoResponse>>(PrepareAsyncGatewayInfoRaw(context, request, cq));
    }
    ::grpc::Status CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::ric::notify::SMPPCheckGatewayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPCheckGatewayResponse>> AsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPCheckGatewayResponse>>(AsyncCheckGatewayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPCheckGatewayResponse>> PrepareAsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPCheckGatewayResponse>>(PrepareAsyncCheckGatewayRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Send(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response, std::function<void(::grpc::Status)>) override;
      void Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPSendResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GatewayInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckGateway(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMPPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPSendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPSendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPSendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPStatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPStatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPGatewayInfoResponse>* AsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPGatewayInfoResponse>* PrepareAsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPCheckGatewayResponse>* AsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMPPCheckGatewayResponse>* PrepareAsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMPPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Send_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_GatewayInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckGateway_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response);
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response);
    virtual ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response);
    virtual ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Send() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::ric::notify::SMPPSendRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMPPSendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::ric::notify::SMPPStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMPPStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGatewayInfo(::grpc::ServerContext* context, ::ric::notify::SMPPGatewayInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMPPGatewayInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckGateway() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckGateway(::grpc::ServerContext* context, ::ric::notify::SMPPCheckGatewayRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMPPCheckGatewayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Send<WithAsyncMethod_Status<WithAsyncMethod_GatewayInfo<WithAsyncMethod_CheckGateway<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Send() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMPPSendRequest, ::ric::notify::SMPPSendResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMPPSendRequest* request,
                 ::ric::notify::SMPPSendResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Send(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMPPStatusRequest, ::ric::notify::SMPPStatusResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMPPStatusRequest* request,
                 ::ric::notify::SMPPStatusResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Status(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GatewayInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMPPGatewayInfoRequest, ::ric::notify::SMPPGatewayInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMPPGatewayInfoRequest* request,
                 ::ric::notify::SMPPGatewayInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GatewayInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckGateway() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMPPCheckGatewayRequest, ::ric::notify::SMPPCheckGatewayResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMPPCheckGatewayRequest* request,
                 ::ric::notify::SMPPCheckGatewayResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckGateway(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Send<ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_GatewayInfo<ExperimentalWithCallbackMethod_CheckGateway<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Send() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckGateway() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Send() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGatewayInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckGateway() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckGateway(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Send() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Send(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Send(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Status(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Status(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GatewayInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GatewayInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GatewayInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckGateway() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckGateway(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckGateway(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Send() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMPPSendRequest, ::ric::notify::SMPPSendResponse>(std::bind(&WithStreamedUnaryMethod_Send<BaseClass>::StreamedSend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMPPSendRequest* request, ::ric::notify::SMPPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMPPSendRequest,::ric::notify::SMPPSendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMPPStatusRequest, ::ric::notify::SMPPStatusResponse>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::ric::notify::SMPPStatusRequest* request, ::ric::notify::SMPPStatusResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMPPStatusRequest,::ric::notify::SMPPStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMPPGatewayInfoRequest, ::ric::notify::SMPPGatewayInfoResponse>(std::bind(&WithStreamedUnaryMethod_GatewayInfo<BaseClass>::StreamedGatewayInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMPPGatewayInfoRequest* request, ::ric::notify::SMPPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGatewayInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMPPGatewayInfoRequest,::ric::notify::SMPPGatewayInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckGateway() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMPPCheckGatewayRequest, ::ric::notify::SMPPCheckGatewayResponse>(std::bind(&WithStreamedUnaryMethod_CheckGateway<BaseClass>::StreamedCheckGateway, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMPPCheckGatewayRequest* request, ::ric::notify::SMPPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckGateway(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMPPCheckGatewayRequest,::ric::notify::SMPPCheckGatewayResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_GatewayInfo<WithStreamedUnaryMethod_CheckGateway<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_GatewayInfo<WithStreamedUnaryMethod_CheckGateway<Service > > > > StreamedService;
};

class SMTP final {
 public:
  static constexpr char const* service_full_name() {
    return "ric.notify.SMTP";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Send(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::ric::notify::SMTPSendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPSendResponse>> AsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPSendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPSendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPSendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    virtual ::grpc::Status GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::ric::notify::SMTPGatewayInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPGatewayInfoResponse>> AsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPGatewayInfoResponse>>(AsyncGatewayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPGatewayInfoResponse>> PrepareAsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPGatewayInfoResponse>>(PrepareAsyncGatewayInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::ric::notify::SMTPCheckGatewayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPCheckGatewayResponse>> AsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPCheckGatewayResponse>>(AsyncCheckGatewayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPCheckGatewayResponse>> PrepareAsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPCheckGatewayResponse>>(PrepareAsyncCheckGatewayRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Send(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMTPSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GatewayInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMTPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckGateway(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMTPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPSendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPSendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPGatewayInfoResponse>* AsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPGatewayInfoResponse>* PrepareAsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPCheckGatewayResponse>* AsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ric::notify::SMTPCheckGatewayResponse>* PrepareAsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Send(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::ric::notify::SMTPSendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPSendResponse>> AsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPSendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPSendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPSendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    ::grpc::Status GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::ric::notify::SMTPGatewayInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPGatewayInfoResponse>> AsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPGatewayInfoResponse>>(AsyncGatewayInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPGatewayInfoResponse>> PrepareAsyncGatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPGatewayInfoResponse>>(PrepareAsyncGatewayInfoRaw(context, request, cq));
    }
    ::grpc::Status CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::ric::notify::SMTPCheckGatewayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPCheckGatewayResponse>> AsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPCheckGatewayResponse>>(AsyncCheckGatewayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPCheckGatewayResponse>> PrepareAsyncCheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPCheckGatewayResponse>>(PrepareAsyncCheckGatewayRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Send(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response, std::function<void(::grpc::Status)>) override;
      void Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMTPSendResponse* response, std::function<void(::grpc::Status)>) override;
      void GatewayInfo(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GatewayInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMTPGatewayInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckGateway(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckGateway(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::notify::SMTPCheckGatewayResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPSendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPSendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPSendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPGatewayInfoResponse>* AsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPGatewayInfoResponse>* PrepareAsyncGatewayInfoRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPGatewayInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPCheckGatewayResponse>* AsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ric::notify::SMTPCheckGatewayResponse>* PrepareAsyncCheckGatewayRaw(::grpc::ClientContext* context, const ::ric::notify::SMTPCheckGatewayRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Send_;
    const ::grpc::internal::RpcMethod rpcmethod_GatewayInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckGateway_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response);
    virtual ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response);
    virtual ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Send() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::ric::notify::SMTPSendRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMTPSendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGatewayInfo(::grpc::ServerContext* context, ::ric::notify::SMTPGatewayInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMTPGatewayInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckGateway() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckGateway(::grpc::ServerContext* context, ::ric::notify::SMTPCheckGatewayRequest* request, ::grpc::ServerAsyncResponseWriter< ::ric::notify::SMTPCheckGatewayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Send<WithAsyncMethod_GatewayInfo<WithAsyncMethod_CheckGateway<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Send() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMTPSendRequest, ::ric::notify::SMTPSendResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMTPSendRequest* request,
                 ::ric::notify::SMTPSendResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Send(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GatewayInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMTPGatewayInfoRequest, ::ric::notify::SMTPGatewayInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMTPGatewayInfoRequest* request,
                 ::ric::notify::SMTPGatewayInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GatewayInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CheckGateway() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::ric::notify::SMTPCheckGatewayRequest, ::ric::notify::SMTPCheckGatewayResponse>(
          [this](::grpc::ServerContext* context,
                 const ::ric::notify::SMTPCheckGatewayRequest* request,
                 ::ric::notify::SMTPCheckGatewayResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckGateway(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Send<ExperimentalWithCallbackMethod_GatewayInfo<ExperimentalWithCallbackMethod_CheckGateway<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Send() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckGateway() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Send() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGatewayInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckGateway() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckGateway(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Send() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Send(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Send(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GatewayInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GatewayInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GatewayInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckGateway() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckGateway(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckGateway(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Send() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMTPSendRequest, ::ric::notify::SMTPSendResponse>(std::bind(&WithStreamedUnaryMethod_Send<BaseClass>::StreamedSend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send(::grpc::ServerContext* context, const ::ric::notify::SMTPSendRequest* request, ::ric::notify::SMTPSendResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMTPSendRequest,::ric::notify::SMTPSendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GatewayInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GatewayInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMTPGatewayInfoRequest, ::ric::notify::SMTPGatewayInfoResponse>(std::bind(&WithStreamedUnaryMethod_GatewayInfo<BaseClass>::StreamedGatewayInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GatewayInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GatewayInfo(::grpc::ServerContext* context, const ::ric::notify::SMTPGatewayInfoRequest* request, ::ric::notify::SMTPGatewayInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGatewayInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMTPGatewayInfoRequest,::ric::notify::SMTPGatewayInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckGateway : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckGateway() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ric::notify::SMTPCheckGatewayRequest, ::ric::notify::SMTPCheckGatewayResponse>(std::bind(&WithStreamedUnaryMethod_CheckGateway<BaseClass>::StreamedCheckGateway, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckGateway() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckGateway(::grpc::ServerContext* context, const ::ric::notify::SMTPCheckGatewayRequest* request, ::ric::notify::SMTPCheckGatewayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckGateway(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ric::notify::SMTPCheckGatewayRequest,::ric::notify::SMTPCheckGatewayResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_GatewayInfo<WithStreamedUnaryMethod_CheckGateway<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_GatewayInfo<WithStreamedUnaryMethod_CheckGateway<Service > > > StreamedService;
};

}  // namespace notify
}  // namespace ric


#endif  // GRPC_ric_2dnotify_2fricnotify_2eproto__INCLUDED
