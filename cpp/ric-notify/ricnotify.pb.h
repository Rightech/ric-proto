// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-notify/ricnotify.proto

#ifndef PROTOBUF_INCLUDED_ric_2dnotify_2fricnotify_2eproto
#define PROTOBUF_INCLUDED_ric_2dnotify_2fricnotify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dnotify_2fricnotify_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dnotify_2fricnotify_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dnotify_2fricnotify_2eproto();
namespace ric {
namespace notify {
class Attachment;
class AttachmentDefaultTypeInternal;
extern AttachmentDefaultTypeInternal _Attachment_default_instance_;
class SMPPCheckGatewayRequest;
class SMPPCheckGatewayRequestDefaultTypeInternal;
extern SMPPCheckGatewayRequestDefaultTypeInternal _SMPPCheckGatewayRequest_default_instance_;
class SMPPCheckGatewayResponse;
class SMPPCheckGatewayResponseDefaultTypeInternal;
extern SMPPCheckGatewayResponseDefaultTypeInternal _SMPPCheckGatewayResponse_default_instance_;
class SMPPGatewayInfoRequest;
class SMPPGatewayInfoRequestDefaultTypeInternal;
extern SMPPGatewayInfoRequestDefaultTypeInternal _SMPPGatewayInfoRequest_default_instance_;
class SMPPGatewayInfoResponse;
class SMPPGatewayInfoResponseDefaultTypeInternal;
extern SMPPGatewayInfoResponseDefaultTypeInternal _SMPPGatewayInfoResponse_default_instance_;
class SMPPSendRequest;
class SMPPSendRequestDefaultTypeInternal;
extern SMPPSendRequestDefaultTypeInternal _SMPPSendRequest_default_instance_;
class SMPPSendResponse;
class SMPPSendResponseDefaultTypeInternal;
extern SMPPSendResponseDefaultTypeInternal _SMPPSendResponse_default_instance_;
class SMPPStatusRequest;
class SMPPStatusRequestDefaultTypeInternal;
extern SMPPStatusRequestDefaultTypeInternal _SMPPStatusRequest_default_instance_;
class SMPPStatusResponse;
class SMPPStatusResponseDefaultTypeInternal;
extern SMPPStatusResponseDefaultTypeInternal _SMPPStatusResponse_default_instance_;
class SMPPStatusResponse_SMPPStatus;
class SMPPStatusResponse_SMPPStatusDefaultTypeInternal;
extern SMPPStatusResponse_SMPPStatusDefaultTypeInternal _SMPPStatusResponse_SMPPStatus_default_instance_;
class SMTPCheckGatewayRequest;
class SMTPCheckGatewayRequestDefaultTypeInternal;
extern SMTPCheckGatewayRequestDefaultTypeInternal _SMTPCheckGatewayRequest_default_instance_;
class SMTPCheckGatewayResponse;
class SMTPCheckGatewayResponseDefaultTypeInternal;
extern SMTPCheckGatewayResponseDefaultTypeInternal _SMTPCheckGatewayResponse_default_instance_;
class SMTPGatewayInfoRequest;
class SMTPGatewayInfoRequestDefaultTypeInternal;
extern SMTPGatewayInfoRequestDefaultTypeInternal _SMTPGatewayInfoRequest_default_instance_;
class SMTPGatewayInfoResponse;
class SMTPGatewayInfoResponseDefaultTypeInternal;
extern SMTPGatewayInfoResponseDefaultTypeInternal _SMTPGatewayInfoResponse_default_instance_;
class SMTPSendRequest;
class SMTPSendRequestDefaultTypeInternal;
extern SMTPSendRequestDefaultTypeInternal _SMTPSendRequest_default_instance_;
class SMTPSendResponse;
class SMTPSendResponseDefaultTypeInternal;
extern SMTPSendResponseDefaultTypeInternal _SMTPSendResponse_default_instance_;
class UserContext;
class UserContextDefaultTypeInternal;
extern UserContextDefaultTypeInternal _UserContext_default_instance_;
}  // namespace notify
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::notify::Attachment* Arena::CreateMaybeMessage<::ric::notify::Attachment>(Arena*);
template<> ::ric::notify::SMPPCheckGatewayRequest* Arena::CreateMaybeMessage<::ric::notify::SMPPCheckGatewayRequest>(Arena*);
template<> ::ric::notify::SMPPCheckGatewayResponse* Arena::CreateMaybeMessage<::ric::notify::SMPPCheckGatewayResponse>(Arena*);
template<> ::ric::notify::SMPPGatewayInfoRequest* Arena::CreateMaybeMessage<::ric::notify::SMPPGatewayInfoRequest>(Arena*);
template<> ::ric::notify::SMPPGatewayInfoResponse* Arena::CreateMaybeMessage<::ric::notify::SMPPGatewayInfoResponse>(Arena*);
template<> ::ric::notify::SMPPSendRequest* Arena::CreateMaybeMessage<::ric::notify::SMPPSendRequest>(Arena*);
template<> ::ric::notify::SMPPSendResponse* Arena::CreateMaybeMessage<::ric::notify::SMPPSendResponse>(Arena*);
template<> ::ric::notify::SMPPStatusRequest* Arena::CreateMaybeMessage<::ric::notify::SMPPStatusRequest>(Arena*);
template<> ::ric::notify::SMPPStatusResponse* Arena::CreateMaybeMessage<::ric::notify::SMPPStatusResponse>(Arena*);
template<> ::ric::notify::SMPPStatusResponse_SMPPStatus* Arena::CreateMaybeMessage<::ric::notify::SMPPStatusResponse_SMPPStatus>(Arena*);
template<> ::ric::notify::SMTPCheckGatewayRequest* Arena::CreateMaybeMessage<::ric::notify::SMTPCheckGatewayRequest>(Arena*);
template<> ::ric::notify::SMTPCheckGatewayResponse* Arena::CreateMaybeMessage<::ric::notify::SMTPCheckGatewayResponse>(Arena*);
template<> ::ric::notify::SMTPGatewayInfoRequest* Arena::CreateMaybeMessage<::ric::notify::SMTPGatewayInfoRequest>(Arena*);
template<> ::ric::notify::SMTPGatewayInfoResponse* Arena::CreateMaybeMessage<::ric::notify::SMTPGatewayInfoResponse>(Arena*);
template<> ::ric::notify::SMTPSendRequest* Arena::CreateMaybeMessage<::ric::notify::SMTPSendRequest>(Arena*);
template<> ::ric::notify::SMTPSendResponse* Arena::CreateMaybeMessage<::ric::notify::SMTPSendResponse>(Arena*);
template<> ::ric::notify::UserContext* Arena::CreateMaybeMessage<::ric::notify::UserContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace notify {

enum SMPPStatusResponse_State {
  SMPPStatusResponse_State_UNKNOWN = 0,
  SMPPStatusResponse_State_SCHEDULE = 1,
  SMPPStatusResponse_State_SEND_ERROR = 2,
  SMPPStatusResponse_State_MAX_RETRIES_EXCEEDED = 3,
  SMPPStatusResponse_State_SENT = 4,
  SMPPStatusResponse_State_ERROR = 5,
  SMPPStatusResponse_State_SMPPStatusResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SMPPStatusResponse_State_SMPPStatusResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SMPPStatusResponse_State_IsValid(int value);
const SMPPStatusResponse_State SMPPStatusResponse_State_State_MIN = SMPPStatusResponse_State_UNKNOWN;
const SMPPStatusResponse_State SMPPStatusResponse_State_State_MAX = SMPPStatusResponse_State_ERROR;
const int SMPPStatusResponse_State_State_ARRAYSIZE = SMPPStatusResponse_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* SMPPStatusResponse_State_descriptor();
inline const ::std::string& SMPPStatusResponse_State_Name(SMPPStatusResponse_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    SMPPStatusResponse_State_descriptor(), value);
}
inline bool SMPPStatusResponse_State_Parse(
    const ::std::string& name, SMPPStatusResponse_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SMPPStatusResponse_State>(
    SMPPStatusResponse_State_descriptor(), name, value);
}
// ===================================================================

class UserContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.UserContext) */ {
 public:
  UserContext();
  virtual ~UserContext();

  UserContext(const UserContext& from);

  inline UserContext& operator=(const UserContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserContext(UserContext&& from) noexcept
    : UserContext() {
    *this = ::std::move(from);
  }

  inline UserContext& operator=(UserContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserContext* internal_default_instance() {
    return reinterpret_cast<const UserContext*>(
               &_UserContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserContext* other);
  friend void swap(UserContext& a, UserContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserContext* New() const final {
    return CreateMaybeMessage<UserContext>(nullptr);
  }

  UserContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserContext& from);
  void MergeFrom(const UserContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string span_id = 3;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 3;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // @@protoc_insertion_point(class_scope:ric.notify.UserContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPSendRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPSendRequest) */ {
 public:
  SMPPSendRequest();
  virtual ~SMPPSendRequest();

  SMPPSendRequest(const SMPPSendRequest& from);

  inline SMPPSendRequest& operator=(const SMPPSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPSendRequest(SMPPSendRequest&& from) noexcept
    : SMPPSendRequest() {
    *this = ::std::move(from);
  }

  inline SMPPSendRequest& operator=(SMPPSendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPSendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPSendRequest* internal_default_instance() {
    return reinterpret_cast<const SMPPSendRequest*>(
               &_SMPPSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SMPPSendRequest* other);
  friend void swap(SMPPSendRequest& a, SMPPSendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPSendRequest* New() const final {
    return CreateMaybeMessage<SMPPSendRequest>(nullptr);
  }

  SMPPSendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPSendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPSendRequest& from);
  void MergeFrom(const SMPPSendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPSendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 2;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 2;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // string phone = 3;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ric.notify.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::notify::UserContext& ctx() const;
  ::ric::notify::UserContext* release_ctx();
  ::ric::notify::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::notify::UserContext* ctx);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPSendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ric::notify::UserContext* ctx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPSendResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPSendResponse) */ {
 public:
  SMPPSendResponse();
  virtual ~SMPPSendResponse();

  SMPPSendResponse(const SMPPSendResponse& from);

  inline SMPPSendResponse& operator=(const SMPPSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPSendResponse(SMPPSendResponse&& from) noexcept
    : SMPPSendResponse() {
    *this = ::std::move(from);
  }

  inline SMPPSendResponse& operator=(SMPPSendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPSendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPSendResponse* internal_default_instance() {
    return reinterpret_cast<const SMPPSendResponse*>(
               &_SMPPSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SMPPSendResponse* other);
  friend void swap(SMPPSendResponse& a, SMPPSendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPSendResponse* New() const final {
    return CreateMaybeMessage<SMPPSendResponse>(nullptr);
  }

  SMPPSendResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPSendResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPSendResponse& from);
  void MergeFrom(const SMPPSendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPSendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPSendResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPStatusRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPStatusRequest) */ {
 public:
  SMPPStatusRequest();
  virtual ~SMPPStatusRequest();

  SMPPStatusRequest(const SMPPStatusRequest& from);

  inline SMPPStatusRequest& operator=(const SMPPStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPStatusRequest(SMPPStatusRequest&& from) noexcept
    : SMPPStatusRequest() {
    *this = ::std::move(from);
  }

  inline SMPPStatusRequest& operator=(SMPPStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SMPPStatusRequest*>(
               &_SMPPStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SMPPStatusRequest* other);
  friend void swap(SMPPStatusRequest& a, SMPPStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPStatusRequest* New() const final {
    return CreateMaybeMessage<SMPPStatusRequest>(nullptr);
  }

  SMPPStatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPStatusRequest& from);
  void MergeFrom(const SMPPStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 1;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 1;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // string message_id = 2;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPStatusRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPStatusResponse_SMPPStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPStatusResponse.SMPPStatus) */ {
 public:
  SMPPStatusResponse_SMPPStatus();
  virtual ~SMPPStatusResponse_SMPPStatus();

  SMPPStatusResponse_SMPPStatus(const SMPPStatusResponse_SMPPStatus& from);

  inline SMPPStatusResponse_SMPPStatus& operator=(const SMPPStatusResponse_SMPPStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPStatusResponse_SMPPStatus(SMPPStatusResponse_SMPPStatus&& from) noexcept
    : SMPPStatusResponse_SMPPStatus() {
    *this = ::std::move(from);
  }

  inline SMPPStatusResponse_SMPPStatus& operator=(SMPPStatusResponse_SMPPStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPStatusResponse_SMPPStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPStatusResponse_SMPPStatus* internal_default_instance() {
    return reinterpret_cast<const SMPPStatusResponse_SMPPStatus*>(
               &_SMPPStatusResponse_SMPPStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SMPPStatusResponse_SMPPStatus* other);
  friend void swap(SMPPStatusResponse_SMPPStatus& a, SMPPStatusResponse_SMPPStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPStatusResponse_SMPPStatus* New() const final {
    return CreateMaybeMessage<SMPPStatusResponse_SMPPStatus>(nullptr);
  }

  SMPPStatusResponse_SMPPStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPStatusResponse_SMPPStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPStatusResponse_SMPPStatus& from);
  void MergeFrom(const SMPPStatusResponse_SMPPStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPStatusResponse_SMPPStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string msg_state = 2;
  void clear_msg_state();
  static const int kMsgStateFieldNumber = 2;
  const ::std::string& msg_state() const;
  void set_msg_state(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_state(::std::string&& value);
  #endif
  void set_msg_state(const char* value);
  void set_msg_state(const char* value, size_t size);
  ::std::string* mutable_msg_state();
  ::std::string* release_msg_state();
  void set_allocated_msg_state(::std::string* msg_state);

  // string final_date = 3;
  void clear_final_date();
  static const int kFinalDateFieldNumber = 3;
  const ::std::string& final_date() const;
  void set_final_date(const ::std::string& value);
  #if LANG_CXX11
  void set_final_date(::std::string&& value);
  #endif
  void set_final_date(const char* value);
  void set_final_date(const char* value, size_t size);
  ::std::string* mutable_final_date();
  ::std::string* release_final_date();
  void set_allocated_final_date(::std::string* final_date);

  // int32 err_code = 4;
  void clear_err_code();
  static const int kErrCodeFieldNumber = 4;
  ::google::protobuf::int32 err_code() const;
  void set_err_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPStatusResponse.SMPPStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr msg_state_;
  ::google::protobuf::internal::ArenaStringPtr final_date_;
  ::google::protobuf::int32 err_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPStatusResponse) */ {
 public:
  SMPPStatusResponse();
  virtual ~SMPPStatusResponse();

  SMPPStatusResponse(const SMPPStatusResponse& from);

  inline SMPPStatusResponse& operator=(const SMPPStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPStatusResponse(SMPPStatusResponse&& from) noexcept
    : SMPPStatusResponse() {
    *this = ::std::move(from);
  }

  inline SMPPStatusResponse& operator=(SMPPStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SMPPStatusResponse*>(
               &_SMPPStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SMPPStatusResponse* other);
  friend void swap(SMPPStatusResponse& a, SMPPStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPStatusResponse* New() const final {
    return CreateMaybeMessage<SMPPStatusResponse>(nullptr);
  }

  SMPPStatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPStatusResponse& from);
  void MergeFrom(const SMPPStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SMPPStatusResponse_SMPPStatus SMPPStatus;

  typedef SMPPStatusResponse_State State;
  static const State UNKNOWN =
    SMPPStatusResponse_State_UNKNOWN;
  static const State SCHEDULE =
    SMPPStatusResponse_State_SCHEDULE;
  static const State SEND_ERROR =
    SMPPStatusResponse_State_SEND_ERROR;
  static const State MAX_RETRIES_EXCEEDED =
    SMPPStatusResponse_State_MAX_RETRIES_EXCEEDED;
  static const State SENT =
    SMPPStatusResponse_State_SENT;
  static const State ERROR =
    SMPPStatusResponse_State_ERROR;
  static inline bool State_IsValid(int value) {
    return SMPPStatusResponse_State_IsValid(value);
  }
  static const State State_MIN =
    SMPPStatusResponse_State_State_MIN;
  static const State State_MAX =
    SMPPStatusResponse_State_State_MAX;
  static const int State_ARRAYSIZE =
    SMPPStatusResponse_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return SMPPStatusResponse_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return SMPPStatusResponse_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return SMPPStatusResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
  bool has_smpp_status() const;
  void clear_smpp_status();
  static const int kSmppStatusFieldNumber = 3;
  const ::ric::notify::SMPPStatusResponse_SMPPStatus& smpp_status() const;
  ::ric::notify::SMPPStatusResponse_SMPPStatus* release_smpp_status();
  ::ric::notify::SMPPStatusResponse_SMPPStatus* mutable_smpp_status();
  void set_allocated_smpp_status(::ric::notify::SMPPStatusResponse_SMPPStatus* smpp_status);

  // .ric.notify.SMPPStatusResponse.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::ric::notify::SMPPStatusResponse_State state() const;
  void set_state(::ric::notify::SMPPStatusResponse_State value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPStatusResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::ric::notify::SMPPStatusResponse_SMPPStatus* smpp_status_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPGatewayInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPGatewayInfoRequest) */ {
 public:
  SMPPGatewayInfoRequest();
  virtual ~SMPPGatewayInfoRequest();

  SMPPGatewayInfoRequest(const SMPPGatewayInfoRequest& from);

  inline SMPPGatewayInfoRequest& operator=(const SMPPGatewayInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPGatewayInfoRequest(SMPPGatewayInfoRequest&& from) noexcept
    : SMPPGatewayInfoRequest() {
    *this = ::std::move(from);
  }

  inline SMPPGatewayInfoRequest& operator=(SMPPGatewayInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPGatewayInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPGatewayInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SMPPGatewayInfoRequest*>(
               &_SMPPGatewayInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SMPPGatewayInfoRequest* other);
  friend void swap(SMPPGatewayInfoRequest& a, SMPPGatewayInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPGatewayInfoRequest* New() const final {
    return CreateMaybeMessage<SMPPGatewayInfoRequest>(nullptr);
  }

  SMPPGatewayInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPGatewayInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPGatewayInfoRequest& from);
  void MergeFrom(const SMPPGatewayInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPGatewayInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 1;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 1;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPGatewayInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPGatewayInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPGatewayInfoResponse) */ {
 public:
  SMPPGatewayInfoResponse();
  virtual ~SMPPGatewayInfoResponse();

  SMPPGatewayInfoResponse(const SMPPGatewayInfoResponse& from);

  inline SMPPGatewayInfoResponse& operator=(const SMPPGatewayInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPGatewayInfoResponse(SMPPGatewayInfoResponse&& from) noexcept
    : SMPPGatewayInfoResponse() {
    *this = ::std::move(from);
  }

  inline SMPPGatewayInfoResponse& operator=(SMPPGatewayInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPGatewayInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPGatewayInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SMPPGatewayInfoResponse*>(
               &_SMPPGatewayInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SMPPGatewayInfoResponse* other);
  friend void swap(SMPPGatewayInfoResponse& a, SMPPGatewayInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPGatewayInfoResponse* New() const final {
    return CreateMaybeMessage<SMPPGatewayInfoResponse>(nullptr);
  }

  SMPPGatewayInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPGatewayInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPGatewayInfoResponse& from);
  void MergeFrom(const SMPPGatewayInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPGatewayInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 uptime = 2;
  void clear_uptime();
  static const int kUptimeFieldNumber = 2;
  ::google::protobuf::int64 uptime() const;
  void set_uptime(::google::protobuf::int64 value);

  // bool online = 1;
  void clear_online();
  static const int kOnlineFieldNumber = 1;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPGatewayInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uptime_;
  bool online_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPCheckGatewayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPCheckGatewayRequest) */ {
 public:
  SMPPCheckGatewayRequest();
  virtual ~SMPPCheckGatewayRequest();

  SMPPCheckGatewayRequest(const SMPPCheckGatewayRequest& from);

  inline SMPPCheckGatewayRequest& operator=(const SMPPCheckGatewayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPCheckGatewayRequest(SMPPCheckGatewayRequest&& from) noexcept
    : SMPPCheckGatewayRequest() {
    *this = ::std::move(from);
  }

  inline SMPPCheckGatewayRequest& operator=(SMPPCheckGatewayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPCheckGatewayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPCheckGatewayRequest* internal_default_instance() {
    return reinterpret_cast<const SMPPCheckGatewayRequest*>(
               &_SMPPCheckGatewayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SMPPCheckGatewayRequest* other);
  friend void swap(SMPPCheckGatewayRequest& a, SMPPCheckGatewayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPCheckGatewayRequest* New() const final {
    return CreateMaybeMessage<SMPPCheckGatewayRequest>(nullptr);
  }

  SMPPCheckGatewayRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPCheckGatewayRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPCheckGatewayRequest& from);
  void MergeFrom(const SMPPCheckGatewayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPCheckGatewayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string system_type = 5;
  void clear_system_type();
  static const int kSystemTypeFieldNumber = 5;
  const ::std::string& system_type() const;
  void set_system_type(const ::std::string& value);
  #if LANG_CXX11
  void set_system_type(::std::string&& value);
  #endif
  void set_system_type(const char* value);
  void set_system_type(const char* value, size_t size);
  ::std::string* mutable_system_type();
  ::std::string* release_system_type();
  void set_allocated_system_type(::std::string* system_type);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPCheckGatewayRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr system_type_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMPPCheckGatewayResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMPPCheckGatewayResponse) */ {
 public:
  SMPPCheckGatewayResponse();
  virtual ~SMPPCheckGatewayResponse();

  SMPPCheckGatewayResponse(const SMPPCheckGatewayResponse& from);

  inline SMPPCheckGatewayResponse& operator=(const SMPPCheckGatewayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMPPCheckGatewayResponse(SMPPCheckGatewayResponse&& from) noexcept
    : SMPPCheckGatewayResponse() {
    *this = ::std::move(from);
  }

  inline SMPPCheckGatewayResponse& operator=(SMPPCheckGatewayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMPPCheckGatewayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMPPCheckGatewayResponse* internal_default_instance() {
    return reinterpret_cast<const SMPPCheckGatewayResponse*>(
               &_SMPPCheckGatewayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SMPPCheckGatewayResponse* other);
  friend void swap(SMPPCheckGatewayResponse& a, SMPPCheckGatewayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMPPCheckGatewayResponse* New() const final {
    return CreateMaybeMessage<SMPPCheckGatewayResponse>(nullptr);
  }

  SMPPCheckGatewayResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMPPCheckGatewayResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMPPCheckGatewayResponse& from);
  void MergeFrom(const SMPPCheckGatewayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMPPCheckGatewayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMPPCheckGatewayResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class Attachment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.Attachment) */ {
 public:
  Attachment();
  virtual ~Attachment();

  Attachment(const Attachment& from);

  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attachment(Attachment&& from) noexcept
    : Attachment() {
    *this = ::std::move(from);
  }

  inline Attachment& operator=(Attachment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Attachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attachment* internal_default_instance() {
    return reinterpret_cast<const Attachment*>(
               &_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Attachment* other);
  friend void swap(Attachment& a, Attachment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attachment* New() const final {
    return CreateMaybeMessage<Attachment>(nullptr);
  }

  Attachment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attachment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attachment& from);
  void MergeFrom(const Attachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attachment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string content_type = 2;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  const ::std::string& content_type() const;
  void set_content_type(const ::std::string& value);
  #if LANG_CXX11
  void set_content_type(::std::string&& value);
  #endif
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  ::std::string* mutable_content_type();
  ::std::string* release_content_type();
  void set_allocated_content_type(::std::string* content_type);

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ric.notify.Attachment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr content_type_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMTPSendRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMTPSendRequest) */ {
 public:
  SMTPSendRequest();
  virtual ~SMTPSendRequest();

  SMTPSendRequest(const SMTPSendRequest& from);

  inline SMTPSendRequest& operator=(const SMTPSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMTPSendRequest(SMTPSendRequest&& from) noexcept
    : SMTPSendRequest() {
    *this = ::std::move(from);
  }

  inline SMTPSendRequest& operator=(SMTPSendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMTPSendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMTPSendRequest* internal_default_instance() {
    return reinterpret_cast<const SMTPSendRequest*>(
               &_SMTPSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SMTPSendRequest* other);
  friend void swap(SMTPSendRequest& a, SMTPSendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMTPSendRequest* New() const final {
    return CreateMaybeMessage<SMTPSendRequest>(nullptr);
  }

  SMTPSendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMTPSendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMTPSendRequest& from);
  void MergeFrom(const SMTPSendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMTPSendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string to = 3;
  int to_size() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::std::string& to(int index) const;
  ::std::string* mutable_to(int index);
  void set_to(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_to(int index, ::std::string&& value);
  #endif
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  ::std::string* add_to();
  void add_to(const ::std::string& value);
  #if LANG_CXX11
  void add_to(::std::string&& value);
  #endif
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& to() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_to();

  // repeated .ric.notify.Attachment attachments = 14;
  int attachments_size() const;
  void clear_attachments();
  static const int kAttachmentsFieldNumber = 14;
  ::ric::notify::Attachment* mutable_attachments(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::notify::Attachment >*
      mutable_attachments();
  const ::ric::notify::Attachment& attachments(int index) const;
  ::ric::notify::Attachment* add_attachments();
  const ::google::protobuf::RepeatedPtrField< ::ric::notify::Attachment >&
      attachments() const;

  // string gateway_id = 2;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 2;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // string sender = 4;
  void clear_sender();
  static const int kSenderFieldNumber = 4;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string subject = 5;
  void clear_subject();
  static const int kSubjectFieldNumber = 5;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string text_body = 6;
  void clear_text_body();
  static const int kTextBodyFieldNumber = 6;
  const ::std::string& text_body() const;
  void set_text_body(const ::std::string& value);
  #if LANG_CXX11
  void set_text_body(::std::string&& value);
  #endif
  void set_text_body(const char* value);
  void set_text_body(const char* value, size_t size);
  ::std::string* mutable_text_body();
  ::std::string* release_text_body();
  void set_allocated_text_body(::std::string* text_body);

  // string html_body = 7;
  void clear_html_body();
  static const int kHtmlBodyFieldNumber = 7;
  const ::std::string& html_body() const;
  void set_html_body(const ::std::string& value);
  #if LANG_CXX11
  void set_html_body(::std::string&& value);
  #endif
  void set_html_body(const char* value);
  void set_html_body(const char* value, size_t size);
  ::std::string* mutable_html_body();
  ::std::string* release_html_body();
  void set_allocated_html_body(::std::string* html_body);

  // string host = 8;
  void clear_host();
  static const int kHostFieldNumber = 8;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string username = 10;
  void clear_username();
  static const int kUsernameFieldNumber = 10;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 11;
  void clear_password();
  static const int kPasswordFieldNumber = 11;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .ric.notify.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::notify::UserContext& ctx() const;
  ::ric::notify::UserContext* release_ctx();
  ::ric::notify::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::notify::UserContext* ctx);

  // .google.protobuf.BoolValue use_starttls = 12;
  bool has_use_starttls() const;
  void clear_use_starttls();
  static const int kUseStarttlsFieldNumber = 12;
  const ::google::protobuf::BoolValue& use_starttls() const;
  ::google::protobuf::BoolValue* release_use_starttls();
  ::google::protobuf::BoolValue* mutable_use_starttls();
  void set_allocated_use_starttls(::google::protobuf::BoolValue* use_starttls);

  // .google.protobuf.BoolValue use_ssl = 13;
  bool has_use_ssl() const;
  void clear_use_ssl();
  static const int kUseSslFieldNumber = 13;
  const ::google::protobuf::BoolValue& use_ssl() const;
  ::google::protobuf::BoolValue* release_use_ssl();
  ::google::protobuf::BoolValue* mutable_use_ssl();
  void set_allocated_use_ssl(::google::protobuf::BoolValue* use_ssl);

  // int32 port = 9;
  void clear_port();
  static const int kPortFieldNumber = 9;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMTPSendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> to_;
  ::google::protobuf::RepeatedPtrField< ::ric::notify::Attachment > attachments_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr text_body_;
  ::google::protobuf::internal::ArenaStringPtr html_body_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::ric::notify::UserContext* ctx_;
  ::google::protobuf::BoolValue* use_starttls_;
  ::google::protobuf::BoolValue* use_ssl_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMTPSendResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMTPSendResponse) */ {
 public:
  SMTPSendResponse();
  virtual ~SMTPSendResponse();

  SMTPSendResponse(const SMTPSendResponse& from);

  inline SMTPSendResponse& operator=(const SMTPSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMTPSendResponse(SMTPSendResponse&& from) noexcept
    : SMTPSendResponse() {
    *this = ::std::move(from);
  }

  inline SMTPSendResponse& operator=(SMTPSendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMTPSendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMTPSendResponse* internal_default_instance() {
    return reinterpret_cast<const SMTPSendResponse*>(
               &_SMTPSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SMTPSendResponse* other);
  friend void swap(SMTPSendResponse& a, SMTPSendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMTPSendResponse* New() const final {
    return CreateMaybeMessage<SMTPSendResponse>(nullptr);
  }

  SMTPSendResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMTPSendResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMTPSendResponse& from);
  void MergeFrom(const SMTPSendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMTPSendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.notify.SMTPSendResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMTPGatewayInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMTPGatewayInfoRequest) */ {
 public:
  SMTPGatewayInfoRequest();
  virtual ~SMTPGatewayInfoRequest();

  SMTPGatewayInfoRequest(const SMTPGatewayInfoRequest& from);

  inline SMTPGatewayInfoRequest& operator=(const SMTPGatewayInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMTPGatewayInfoRequest(SMTPGatewayInfoRequest&& from) noexcept
    : SMTPGatewayInfoRequest() {
    *this = ::std::move(from);
  }

  inline SMTPGatewayInfoRequest& operator=(SMTPGatewayInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMTPGatewayInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMTPGatewayInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SMTPGatewayInfoRequest*>(
               &_SMTPGatewayInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SMTPGatewayInfoRequest* other);
  friend void swap(SMTPGatewayInfoRequest& a, SMTPGatewayInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMTPGatewayInfoRequest* New() const final {
    return CreateMaybeMessage<SMTPGatewayInfoRequest>(nullptr);
  }

  SMTPGatewayInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMTPGatewayInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMTPGatewayInfoRequest& from);
  void MergeFrom(const SMTPGatewayInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMTPGatewayInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 1;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 1;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // @@protoc_insertion_point(class_scope:ric.notify.SMTPGatewayInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMTPGatewayInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMTPGatewayInfoResponse) */ {
 public:
  SMTPGatewayInfoResponse();
  virtual ~SMTPGatewayInfoResponse();

  SMTPGatewayInfoResponse(const SMTPGatewayInfoResponse& from);

  inline SMTPGatewayInfoResponse& operator=(const SMTPGatewayInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMTPGatewayInfoResponse(SMTPGatewayInfoResponse&& from) noexcept
    : SMTPGatewayInfoResponse() {
    *this = ::std::move(from);
  }

  inline SMTPGatewayInfoResponse& operator=(SMTPGatewayInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMTPGatewayInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMTPGatewayInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SMTPGatewayInfoResponse*>(
               &_SMTPGatewayInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SMTPGatewayInfoResponse* other);
  friend void swap(SMTPGatewayInfoResponse& a, SMTPGatewayInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMTPGatewayInfoResponse* New() const final {
    return CreateMaybeMessage<SMTPGatewayInfoResponse>(nullptr);
  }

  SMTPGatewayInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMTPGatewayInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMTPGatewayInfoResponse& from);
  void MergeFrom(const SMTPGatewayInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMTPGatewayInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_id = 1;
  void clear_gateway_id();
  static const int kGatewayIdFieldNumber = 1;
  const ::std::string& gateway_id() const;
  void set_gateway_id(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_id(::std::string&& value);
  #endif
  void set_gateway_id(const char* value);
  void set_gateway_id(const char* value, size_t size);
  ::std::string* mutable_gateway_id();
  ::std::string* release_gateway_id();
  void set_allocated_gateway_id(::std::string* gateway_id);

  // string sender = 2;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string host = 3;
  void clear_host();
  static const int kHostFieldNumber = 3;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string username = 5;
  void clear_username();
  static const int kUsernameFieldNumber = 5;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .google.protobuf.BoolValue use_starttls = 7;
  bool has_use_starttls() const;
  void clear_use_starttls();
  static const int kUseStarttlsFieldNumber = 7;
  const ::google::protobuf::BoolValue& use_starttls() const;
  ::google::protobuf::BoolValue* release_use_starttls();
  ::google::protobuf::BoolValue* mutable_use_starttls();
  void set_allocated_use_starttls(::google::protobuf::BoolValue* use_starttls);

  // .google.protobuf.BoolValue use_ssl = 8;
  bool has_use_ssl() const;
  void clear_use_ssl();
  static const int kUseSslFieldNumber = 8;
  const ::google::protobuf::BoolValue& use_ssl() const;
  ::google::protobuf::BoolValue* release_use_ssl();
  ::google::protobuf::BoolValue* mutable_use_ssl();
  void set_allocated_use_ssl(::google::protobuf::BoolValue* use_ssl);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // bool system = 9;
  void clear_system();
  static const int kSystemFieldNumber = 9;
  bool system() const;
  void set_system(bool value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMTPGatewayInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::BoolValue* use_starttls_;
  ::google::protobuf::BoolValue* use_ssl_;
  ::google::protobuf::int32 port_;
  bool system_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMTPCheckGatewayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMTPCheckGatewayRequest) */ {
 public:
  SMTPCheckGatewayRequest();
  virtual ~SMTPCheckGatewayRequest();

  SMTPCheckGatewayRequest(const SMTPCheckGatewayRequest& from);

  inline SMTPCheckGatewayRequest& operator=(const SMTPCheckGatewayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMTPCheckGatewayRequest(SMTPCheckGatewayRequest&& from) noexcept
    : SMTPCheckGatewayRequest() {
    *this = ::std::move(from);
  }

  inline SMTPCheckGatewayRequest& operator=(SMTPCheckGatewayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMTPCheckGatewayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMTPCheckGatewayRequest* internal_default_instance() {
    return reinterpret_cast<const SMTPCheckGatewayRequest*>(
               &_SMTPCheckGatewayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SMTPCheckGatewayRequest* other);
  friend void swap(SMTPCheckGatewayRequest& a, SMTPCheckGatewayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMTPCheckGatewayRequest* New() const final {
    return CreateMaybeMessage<SMTPCheckGatewayRequest>(nullptr);
  }

  SMTPCheckGatewayRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMTPCheckGatewayRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMTPCheckGatewayRequest& from);
  void MergeFrom(const SMTPCheckGatewayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMTPCheckGatewayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .google.protobuf.BoolValue use_starttls = 5;
  bool has_use_starttls() const;
  void clear_use_starttls();
  static const int kUseStarttlsFieldNumber = 5;
  const ::google::protobuf::BoolValue& use_starttls() const;
  ::google::protobuf::BoolValue* release_use_starttls();
  ::google::protobuf::BoolValue* mutable_use_starttls();
  void set_allocated_use_starttls(::google::protobuf::BoolValue* use_starttls);

  // .google.protobuf.BoolValue use_ssl = 6;
  bool has_use_ssl() const;
  void clear_use_ssl();
  static const int kUseSslFieldNumber = 6;
  const ::google::protobuf::BoolValue& use_ssl() const;
  ::google::protobuf::BoolValue* release_use_ssl();
  ::google::protobuf::BoolValue* mutable_use_ssl();
  void set_allocated_use_ssl(::google::protobuf::BoolValue* use_ssl);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMTPCheckGatewayRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::BoolValue* use_starttls_;
  ::google::protobuf::BoolValue* use_ssl_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// -------------------------------------------------------------------

class SMTPCheckGatewayResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.notify.SMTPCheckGatewayResponse) */ {
 public:
  SMTPCheckGatewayResponse();
  virtual ~SMTPCheckGatewayResponse();

  SMTPCheckGatewayResponse(const SMTPCheckGatewayResponse& from);

  inline SMTPCheckGatewayResponse& operator=(const SMTPCheckGatewayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMTPCheckGatewayResponse(SMTPCheckGatewayResponse&& from) noexcept
    : SMTPCheckGatewayResponse() {
    *this = ::std::move(from);
  }

  inline SMTPCheckGatewayResponse& operator=(SMTPCheckGatewayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SMTPCheckGatewayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMTPCheckGatewayResponse* internal_default_instance() {
    return reinterpret_cast<const SMTPCheckGatewayResponse*>(
               &_SMTPCheckGatewayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SMTPCheckGatewayResponse* other);
  friend void swap(SMTPCheckGatewayResponse& a, SMTPCheckGatewayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMTPCheckGatewayResponse* New() const final {
    return CreateMaybeMessage<SMTPCheckGatewayResponse>(nullptr);
  }

  SMTPCheckGatewayResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMTPCheckGatewayResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMTPCheckGatewayResponse& from);
  void MergeFrom(const SMTPCheckGatewayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMTPCheckGatewayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:ric.notify.SMTPCheckGatewayResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dnotify_2fricnotify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserContext

// string group_id = 1;
inline void UserContext::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::group_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.UserContext.group_id)
  return group_id_.GetNoArena();
}
inline void UserContext::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.UserContext.group_id)
}
#if LANG_CXX11
inline void UserContext::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.UserContext.group_id)
}
#endif
inline void UserContext::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.UserContext.group_id)
}
inline void UserContext::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.UserContext.group_id)
}
inline ::std::string* UserContext::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.UserContext.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.notify.UserContext.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.UserContext.group_id)
}

// string user_id = 2;
inline void UserContext::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::user_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.UserContext.user_id)
  return user_id_.GetNoArena();
}
inline void UserContext::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.UserContext.user_id)
}
#if LANG_CXX11
inline void UserContext::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.UserContext.user_id)
}
#endif
inline void UserContext::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.UserContext.user_id)
}
inline void UserContext::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.UserContext.user_id)
}
inline ::std::string* UserContext::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.UserContext.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_user_id() {
  // @@protoc_insertion_point(field_release:ric.notify.UserContext.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.UserContext.user_id)
}

// string span_id = 3;
inline void UserContext::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::span_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.UserContext.span_id)
  return span_id_.GetNoArena();
}
inline void UserContext::set_span_id(const ::std::string& value) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.UserContext.span_id)
}
#if LANG_CXX11
inline void UserContext::set_span_id(::std::string&& value) {
  
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.UserContext.span_id)
}
#endif
inline void UserContext::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.UserContext.span_id)
}
inline void UserContext::set_span_id(const char* value, size_t size) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.UserContext.span_id)
}
inline ::std::string* UserContext::mutable_span_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.UserContext.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_span_id() {
  // @@protoc_insertion_point(field_release:ric.notify.UserContext.span_id)
  
  return span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_span_id(::std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.UserContext.span_id)
}

// -------------------------------------------------------------------

// SMPPSendRequest

// .ric.notify.UserContext ctx = 1;
inline bool SMPPSendRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void SMPPSendRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::notify::UserContext& SMPPSendRequest::ctx() const {
  const ::ric::notify::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.notify.SMPPSendRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::notify::UserContext*>(
      &::ric::notify::_UserContext_default_instance_);
}
inline ::ric::notify::UserContext* SMPPSendRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPSendRequest.ctx)
  
  ::ric::notify::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::notify::UserContext* SMPPSendRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::notify::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPSendRequest.ctx)
  return ctx_;
}
inline void SMPPSendRequest::set_allocated_ctx(::ric::notify::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPSendRequest.ctx)
}

// string gateway_id = 2;
inline void SMPPSendRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPSendRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPSendRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SMPPSendRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPSendRequest.gateway_id)
}
#if LANG_CXX11
inline void SMPPSendRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPSendRequest.gateway_id)
}
#endif
inline void SMPPSendRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPSendRequest.gateway_id)
}
inline void SMPPSendRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPSendRequest.gateway_id)
}
inline ::std::string* SMPPSendRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPSendRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPSendRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPSendRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPSendRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPSendRequest.gateway_id)
}

// string phone = 3;
inline void SMPPSendRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPSendRequest::phone() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPSendRequest.phone)
  return phone_.GetNoArena();
}
inline void SMPPSendRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPSendRequest.phone)
}
#if LANG_CXX11
inline void SMPPSendRequest::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPSendRequest.phone)
}
#endif
inline void SMPPSendRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPSendRequest.phone)
}
inline void SMPPSendRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPSendRequest.phone)
}
inline ::std::string* SMPPSendRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPSendRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPSendRequest::release_phone() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPSendRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPSendRequest::set_allocated_phone(::std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPSendRequest.phone)
}

// string message = 4;
inline void SMPPSendRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPSendRequest::message() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPSendRequest.message)
  return message_.GetNoArena();
}
inline void SMPPSendRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPSendRequest.message)
}
#if LANG_CXX11
inline void SMPPSendRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPSendRequest.message)
}
#endif
inline void SMPPSendRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPSendRequest.message)
}
inline void SMPPSendRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPSendRequest.message)
}
inline ::std::string* SMPPSendRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPSendRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPSendRequest::release_message() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPSendRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPSendRequest::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPSendRequest.message)
}

// -------------------------------------------------------------------

// SMPPSendResponse

// string message_id = 1;
inline void SMPPSendResponse::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPSendResponse::message_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPSendResponse.message_id)
  return message_id_.GetNoArena();
}
inline void SMPPSendResponse::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPSendResponse.message_id)
}
#if LANG_CXX11
inline void SMPPSendResponse::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPSendResponse.message_id)
}
#endif
inline void SMPPSendResponse::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPSendResponse.message_id)
}
inline void SMPPSendResponse::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPSendResponse.message_id)
}
inline ::std::string* SMPPSendResponse::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPSendResponse.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPSendResponse::release_message_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPSendResponse.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPSendResponse::set_allocated_message_id(::std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPSendResponse.message_id)
}

// -------------------------------------------------------------------

// SMPPStatusRequest

// string gateway_id = 1;
inline void SMPPStatusRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPStatusRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SMPPStatusRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusRequest.gateway_id)
}
#if LANG_CXX11
inline void SMPPStatusRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPStatusRequest.gateway_id)
}
#endif
inline void SMPPStatusRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPStatusRequest.gateway_id)
}
inline void SMPPStatusRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPStatusRequest.gateway_id)
}
inline ::std::string* SMPPStatusRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPStatusRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPStatusRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusRequest.gateway_id)
}

// string message_id = 2;
inline void SMPPStatusRequest::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPStatusRequest::message_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusRequest.message_id)
  return message_id_.GetNoArena();
}
inline void SMPPStatusRequest::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusRequest.message_id)
}
#if LANG_CXX11
inline void SMPPStatusRequest::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPStatusRequest.message_id)
}
#endif
inline void SMPPStatusRequest::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPStatusRequest.message_id)
}
inline void SMPPStatusRequest::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPStatusRequest.message_id)
}
inline ::std::string* SMPPStatusRequest::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusRequest.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPStatusRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusRequest.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPStatusRequest::set_allocated_message_id(::std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusRequest.message_id)
}

// -------------------------------------------------------------------

// SMPPStatusResponse_SMPPStatus

// string msg_id = 1;
inline void SMPPStatusResponse_SMPPStatus::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPStatusResponse_SMPPStatus::msg_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
  return msg_id_.GetNoArena();
}
inline void SMPPStatusResponse_SMPPStatus::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
}
#if LANG_CXX11
inline void SMPPStatusResponse_SMPPStatus::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
}
#endif
inline void SMPPStatusResponse_SMPPStatus::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
}
inline void SMPPStatusResponse_SMPPStatus::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
}
inline ::std::string* SMPPStatusResponse_SMPPStatus::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPStatusResponse_SMPPStatus::release_msg_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPStatusResponse_SMPPStatus::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusResponse.SMPPStatus.msg_id)
}

// string msg_state = 2;
inline void SMPPStatusResponse_SMPPStatus::clear_msg_state() {
  msg_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPStatusResponse_SMPPStatus::msg_state() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
  return msg_state_.GetNoArena();
}
inline void SMPPStatusResponse_SMPPStatus::set_msg_state(const ::std::string& value) {
  
  msg_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
}
#if LANG_CXX11
inline void SMPPStatusResponse_SMPPStatus::set_msg_state(::std::string&& value) {
  
  msg_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
}
#endif
inline void SMPPStatusResponse_SMPPStatus::set_msg_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
}
inline void SMPPStatusResponse_SMPPStatus::set_msg_state(const char* value, size_t size) {
  
  msg_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
}
inline ::std::string* SMPPStatusResponse_SMPPStatus::mutable_msg_state() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
  return msg_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPStatusResponse_SMPPStatus::release_msg_state() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
  
  return msg_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPStatusResponse_SMPPStatus::set_allocated_msg_state(::std::string* msg_state) {
  if (msg_state != nullptr) {
    
  } else {
    
  }
  msg_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_state);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusResponse.SMPPStatus.msg_state)
}

// string final_date = 3;
inline void SMPPStatusResponse_SMPPStatus::clear_final_date() {
  final_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPStatusResponse_SMPPStatus::final_date() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
  return final_date_.GetNoArena();
}
inline void SMPPStatusResponse_SMPPStatus::set_final_date(const ::std::string& value) {
  
  final_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
}
#if LANG_CXX11
inline void SMPPStatusResponse_SMPPStatus::set_final_date(::std::string&& value) {
  
  final_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
}
#endif
inline void SMPPStatusResponse_SMPPStatus::set_final_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  final_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
}
inline void SMPPStatusResponse_SMPPStatus::set_final_date(const char* value, size_t size) {
  
  final_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
}
inline ::std::string* SMPPStatusResponse_SMPPStatus::mutable_final_date() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
  return final_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPStatusResponse_SMPPStatus::release_final_date() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
  
  return final_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPStatusResponse_SMPPStatus::set_allocated_final_date(::std::string* final_date) {
  if (final_date != nullptr) {
    
  } else {
    
  }
  final_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_date);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusResponse.SMPPStatus.final_date)
}

// int32 err_code = 4;
inline void SMPPStatusResponse_SMPPStatus::clear_err_code() {
  err_code_ = 0;
}
inline ::google::protobuf::int32 SMPPStatusResponse_SMPPStatus::err_code() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.SMPPStatus.err_code)
  return err_code_;
}
inline void SMPPStatusResponse_SMPPStatus::set_err_code(::google::protobuf::int32 value) {
  
  err_code_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusResponse.SMPPStatus.err_code)
}

// -------------------------------------------------------------------

// SMPPStatusResponse

// .ric.notify.SMPPStatusResponse.State state = 1;
inline void SMPPStatusResponse::clear_state() {
  state_ = 0;
}
inline ::ric::notify::SMPPStatusResponse_State SMPPStatusResponse::state() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.state)
  return static_cast< ::ric::notify::SMPPStatusResponse_State >(state_);
}
inline void SMPPStatusResponse::set_state(::ric::notify::SMPPStatusResponse_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusResponse.state)
}

// string description = 2;
inline void SMPPStatusResponse::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPStatusResponse::description() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.description)
  return description_.GetNoArena();
}
inline void SMPPStatusResponse::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPStatusResponse.description)
}
#if LANG_CXX11
inline void SMPPStatusResponse::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPStatusResponse.description)
}
#endif
inline void SMPPStatusResponse::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPStatusResponse.description)
}
inline void SMPPStatusResponse::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPStatusResponse.description)
}
inline ::std::string* SMPPStatusResponse::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusResponse.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPStatusResponse::release_description() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusResponse.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPStatusResponse::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusResponse.description)
}

// .ric.notify.SMPPStatusResponse.SMPPStatus smpp_status = 3;
inline bool SMPPStatusResponse::has_smpp_status() const {
  return this != internal_default_instance() && smpp_status_ != nullptr;
}
inline void SMPPStatusResponse::clear_smpp_status() {
  if (GetArenaNoVirtual() == nullptr && smpp_status_ != nullptr) {
    delete smpp_status_;
  }
  smpp_status_ = nullptr;
}
inline const ::ric::notify::SMPPStatusResponse_SMPPStatus& SMPPStatusResponse::smpp_status() const {
  const ::ric::notify::SMPPStatusResponse_SMPPStatus* p = smpp_status_;
  // @@protoc_insertion_point(field_get:ric.notify.SMPPStatusResponse.smpp_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::notify::SMPPStatusResponse_SMPPStatus*>(
      &::ric::notify::_SMPPStatusResponse_SMPPStatus_default_instance_);
}
inline ::ric::notify::SMPPStatusResponse_SMPPStatus* SMPPStatusResponse::release_smpp_status() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPStatusResponse.smpp_status)
  
  ::ric::notify::SMPPStatusResponse_SMPPStatus* temp = smpp_status_;
  smpp_status_ = nullptr;
  return temp;
}
inline ::ric::notify::SMPPStatusResponse_SMPPStatus* SMPPStatusResponse::mutable_smpp_status() {
  
  if (smpp_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::notify::SMPPStatusResponse_SMPPStatus>(GetArenaNoVirtual());
    smpp_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPStatusResponse.smpp_status)
  return smpp_status_;
}
inline void SMPPStatusResponse::set_allocated_smpp_status(::ric::notify::SMPPStatusResponse_SMPPStatus* smpp_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete smpp_status_;
  }
  if (smpp_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smpp_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, smpp_status, submessage_arena);
    }
    
  } else {
    
  }
  smpp_status_ = smpp_status;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPStatusResponse.smpp_status)
}

// -------------------------------------------------------------------

// SMPPGatewayInfoRequest

// string gateway_id = 1;
inline void SMPPGatewayInfoRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPGatewayInfoRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPGatewayInfoRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SMPPGatewayInfoRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPGatewayInfoRequest.gateway_id)
}
#if LANG_CXX11
inline void SMPPGatewayInfoRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPGatewayInfoRequest.gateway_id)
}
#endif
inline void SMPPGatewayInfoRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPGatewayInfoRequest.gateway_id)
}
inline void SMPPGatewayInfoRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPGatewayInfoRequest.gateway_id)
}
inline ::std::string* SMPPGatewayInfoRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPGatewayInfoRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPGatewayInfoRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPGatewayInfoRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPGatewayInfoRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPGatewayInfoRequest.gateway_id)
}

// -------------------------------------------------------------------

// SMPPGatewayInfoResponse

// bool online = 1;
inline void SMPPGatewayInfoResponse::clear_online() {
  online_ = false;
}
inline bool SMPPGatewayInfoResponse::online() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPGatewayInfoResponse.online)
  return online_;
}
inline void SMPPGatewayInfoResponse::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMPPGatewayInfoResponse.online)
}

// int64 uptime = 2;
inline void SMPPGatewayInfoResponse::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SMPPGatewayInfoResponse::uptime() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPGatewayInfoResponse.uptime)
  return uptime_;
}
inline void SMPPGatewayInfoResponse::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMPPGatewayInfoResponse.uptime)
}

// -------------------------------------------------------------------

// SMPPCheckGatewayRequest

// string host = 1;
inline void SMPPCheckGatewayRequest::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPCheckGatewayRequest::host() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPCheckGatewayRequest.host)
  return host_.GetNoArena();
}
inline void SMPPCheckGatewayRequest::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPCheckGatewayRequest.host)
}
#if LANG_CXX11
inline void SMPPCheckGatewayRequest::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPCheckGatewayRequest.host)
}
#endif
inline void SMPPCheckGatewayRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPCheckGatewayRequest.host)
}
inline void SMPPCheckGatewayRequest::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPCheckGatewayRequest.host)
}
inline ::std::string* SMPPCheckGatewayRequest::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPCheckGatewayRequest.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPCheckGatewayRequest::release_host() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPCheckGatewayRequest.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPCheckGatewayRequest::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPCheckGatewayRequest.host)
}

// int32 port = 2;
inline void SMPPCheckGatewayRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 SMPPCheckGatewayRequest::port() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPCheckGatewayRequest.port)
  return port_;
}
inline void SMPPCheckGatewayRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMPPCheckGatewayRequest.port)
}

// string username = 3;
inline void SMPPCheckGatewayRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPCheckGatewayRequest::username() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPCheckGatewayRequest.username)
  return username_.GetNoArena();
}
inline void SMPPCheckGatewayRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPCheckGatewayRequest.username)
}
#if LANG_CXX11
inline void SMPPCheckGatewayRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPCheckGatewayRequest.username)
}
#endif
inline void SMPPCheckGatewayRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPCheckGatewayRequest.username)
}
inline void SMPPCheckGatewayRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPCheckGatewayRequest.username)
}
inline ::std::string* SMPPCheckGatewayRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPCheckGatewayRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPCheckGatewayRequest::release_username() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPCheckGatewayRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPCheckGatewayRequest::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPCheckGatewayRequest.username)
}

// string password = 4;
inline void SMPPCheckGatewayRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPCheckGatewayRequest::password() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPCheckGatewayRequest.password)
  return password_.GetNoArena();
}
inline void SMPPCheckGatewayRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPCheckGatewayRequest.password)
}
#if LANG_CXX11
inline void SMPPCheckGatewayRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPCheckGatewayRequest.password)
}
#endif
inline void SMPPCheckGatewayRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPCheckGatewayRequest.password)
}
inline void SMPPCheckGatewayRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPCheckGatewayRequest.password)
}
inline ::std::string* SMPPCheckGatewayRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPCheckGatewayRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPCheckGatewayRequest::release_password() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPCheckGatewayRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPCheckGatewayRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPCheckGatewayRequest.password)
}

// string system_type = 5;
inline void SMPPCheckGatewayRequest::clear_system_type() {
  system_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMPPCheckGatewayRequest::system_type() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPCheckGatewayRequest.system_type)
  return system_type_.GetNoArena();
}
inline void SMPPCheckGatewayRequest::set_system_type(const ::std::string& value) {
  
  system_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMPPCheckGatewayRequest.system_type)
}
#if LANG_CXX11
inline void SMPPCheckGatewayRequest::set_system_type(::std::string&& value) {
  
  system_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMPPCheckGatewayRequest.system_type)
}
#endif
inline void SMPPCheckGatewayRequest::set_system_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMPPCheckGatewayRequest.system_type)
}
inline void SMPPCheckGatewayRequest::set_system_type(const char* value, size_t size) {
  
  system_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMPPCheckGatewayRequest.system_type)
}
inline ::std::string* SMPPCheckGatewayRequest::mutable_system_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMPPCheckGatewayRequest.system_type)
  return system_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMPPCheckGatewayRequest::release_system_type() {
  // @@protoc_insertion_point(field_release:ric.notify.SMPPCheckGatewayRequest.system_type)
  
  return system_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMPPCheckGatewayRequest::set_allocated_system_type(::std::string* system_type) {
  if (system_type != nullptr) {
    
  } else {
    
  }
  system_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_type);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMPPCheckGatewayRequest.system_type)
}

// -------------------------------------------------------------------

// SMPPCheckGatewayResponse

// bool success = 1;
inline void SMPPCheckGatewayResponse::clear_success() {
  success_ = false;
}
inline bool SMPPCheckGatewayResponse::success() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMPPCheckGatewayResponse.success)
  return success_;
}
inline void SMPPCheckGatewayResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMPPCheckGatewayResponse.success)
}

// -------------------------------------------------------------------

// Attachment

// string filename = 1;
inline void Attachment::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::filename() const {
  // @@protoc_insertion_point(field_get:ric.notify.Attachment.filename)
  return filename_.GetNoArena();
}
inline void Attachment::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.Attachment.filename)
}
#if LANG_CXX11
inline void Attachment::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.Attachment.filename)
}
#endif
inline void Attachment::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.Attachment.filename)
}
inline void Attachment::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.Attachment.filename)
}
inline ::std::string* Attachment::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.Attachment.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_filename() {
  // @@protoc_insertion_point(field_release:ric.notify.Attachment.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.Attachment.filename)
}

// string content_type = 2;
inline void Attachment::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::content_type() const {
  // @@protoc_insertion_point(field_get:ric.notify.Attachment.content_type)
  return content_type_.GetNoArena();
}
inline void Attachment::set_content_type(const ::std::string& value) {
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.Attachment.content_type)
}
#if LANG_CXX11
inline void Attachment::set_content_type(::std::string&& value) {
  
  content_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.Attachment.content_type)
}
#endif
inline void Attachment::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.Attachment.content_type)
}
inline void Attachment::set_content_type(const char* value, size_t size) {
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.Attachment.content_type)
}
inline ::std::string* Attachment::mutable_content_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.Attachment.content_type)
  return content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_content_type() {
  // @@protoc_insertion_point(field_release:ric.notify.Attachment.content_type)
  
  return content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_content_type(::std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.Attachment.content_type)
}

// bytes content = 3;
inline void Attachment::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::content() const {
  // @@protoc_insertion_point(field_get:ric.notify.Attachment.content)
  return content_.GetNoArena();
}
inline void Attachment::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.Attachment.content)
}
#if LANG_CXX11
inline void Attachment::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.Attachment.content)
}
#endif
inline void Attachment::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.Attachment.content)
}
inline void Attachment::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.Attachment.content)
}
inline ::std::string* Attachment::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.Attachment.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_content() {
  // @@protoc_insertion_point(field_release:ric.notify.Attachment.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.Attachment.content)
}

// -------------------------------------------------------------------

// SMTPSendRequest

// .ric.notify.UserContext ctx = 1;
inline bool SMTPSendRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void SMTPSendRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::notify::UserContext& SMTPSendRequest::ctx() const {
  const ::ric::notify::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::notify::UserContext*>(
      &::ric::notify::_UserContext_default_instance_);
}
inline ::ric::notify::UserContext* SMTPSendRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.ctx)
  
  ::ric::notify::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::notify::UserContext* SMTPSendRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::notify::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.ctx)
  return ctx_;
}
inline void SMTPSendRequest::set_allocated_ctx(::ric::notify::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.ctx)
}

// string gateway_id = 2;
inline void SMTPSendRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SMTPSendRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.gateway_id)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.gateway_id)
}
#endif
inline void SMTPSendRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.gateway_id)
}
inline void SMTPSendRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.gateway_id)
}
inline ::std::string* SMTPSendRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.gateway_id)
}

// repeated string to = 3;
inline int SMTPSendRequest::to_size() const {
  return to_.size();
}
inline void SMTPSendRequest::clear_to() {
  to_.Clear();
}
inline const ::std::string& SMTPSendRequest::to(int index) const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.to)
  return to_.Get(index);
}
inline ::std::string* SMTPSendRequest::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.to)
  return to_.Mutable(index);
}
inline void SMTPSendRequest::set_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.to)
  to_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SMTPSendRequest::set_to(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.to)
  to_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SMTPSendRequest::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.to)
}
inline void SMTPSendRequest::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.to)
}
inline ::std::string* SMTPSendRequest::add_to() {
  // @@protoc_insertion_point(field_add_mutable:ric.notify.SMTPSendRequest.to)
  return to_.Add();
}
inline void SMTPSendRequest::add_to(const ::std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.notify.SMTPSendRequest.to)
}
#if LANG_CXX11
inline void SMTPSendRequest::add_to(::std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.notify.SMTPSendRequest.to)
}
#endif
inline void SMTPSendRequest::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.notify.SMTPSendRequest.to)
}
inline void SMTPSendRequest::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.notify.SMTPSendRequest.to)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SMTPSendRequest::to() const {
  // @@protoc_insertion_point(field_list:ric.notify.SMTPSendRequest.to)
  return to_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SMTPSendRequest::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:ric.notify.SMTPSendRequest.to)
  return &to_;
}

// string sender = 4;
inline void SMTPSendRequest::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::sender() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.sender)
  return sender_.GetNoArena();
}
inline void SMTPSendRequest::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.sender)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.sender)
}
#endif
inline void SMTPSendRequest::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.sender)
}
inline void SMTPSendRequest::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.sender)
}
inline ::std::string* SMTPSendRequest::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_sender() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.sender)
}

// string subject = 5;
inline void SMTPSendRequest::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::subject() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.subject)
  return subject_.GetNoArena();
}
inline void SMTPSendRequest::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.subject)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.subject)
}
#endif
inline void SMTPSendRequest::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.subject)
}
inline void SMTPSendRequest::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.subject)
}
inline ::std::string* SMTPSendRequest::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_subject() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_subject(::std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.subject)
}

// string text_body = 6;
inline void SMTPSendRequest::clear_text_body() {
  text_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::text_body() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.text_body)
  return text_body_.GetNoArena();
}
inline void SMTPSendRequest::set_text_body(const ::std::string& value) {
  
  text_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.text_body)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_text_body(::std::string&& value) {
  
  text_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.text_body)
}
#endif
inline void SMTPSendRequest::set_text_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.text_body)
}
inline void SMTPSendRequest::set_text_body(const char* value, size_t size) {
  
  text_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.text_body)
}
inline ::std::string* SMTPSendRequest::mutable_text_body() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.text_body)
  return text_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_text_body() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.text_body)
  
  return text_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_text_body(::std::string* text_body) {
  if (text_body != nullptr) {
    
  } else {
    
  }
  text_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_body);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.text_body)
}

// string html_body = 7;
inline void SMTPSendRequest::clear_html_body() {
  html_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::html_body() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.html_body)
  return html_body_.GetNoArena();
}
inline void SMTPSendRequest::set_html_body(const ::std::string& value) {
  
  html_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.html_body)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_html_body(::std::string&& value) {
  
  html_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.html_body)
}
#endif
inline void SMTPSendRequest::set_html_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  html_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.html_body)
}
inline void SMTPSendRequest::set_html_body(const char* value, size_t size) {
  
  html_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.html_body)
}
inline ::std::string* SMTPSendRequest::mutable_html_body() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.html_body)
  return html_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_html_body() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.html_body)
  
  return html_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_html_body(::std::string* html_body) {
  if (html_body != nullptr) {
    
  } else {
    
  }
  html_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html_body);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.html_body)
}

// string host = 8;
inline void SMTPSendRequest::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::host() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.host)
  return host_.GetNoArena();
}
inline void SMTPSendRequest::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.host)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.host)
}
#endif
inline void SMTPSendRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.host)
}
inline void SMTPSendRequest::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.host)
}
inline ::std::string* SMTPSendRequest::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_host() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.host)
}

// int32 port = 9;
inline void SMTPSendRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 SMTPSendRequest::port() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.port)
  return port_;
}
inline void SMTPSendRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.port)
}

// string username = 10;
inline void SMTPSendRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::username() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.username)
  return username_.GetNoArena();
}
inline void SMTPSendRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.username)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.username)
}
#endif
inline void SMTPSendRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.username)
}
inline void SMTPSendRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.username)
}
inline ::std::string* SMTPSendRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_username() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.username)
}

// string password = 11;
inline void SMTPSendRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPSendRequest::password() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.password)
  return password_.GetNoArena();
}
inline void SMTPSendRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPSendRequest.password)
}
#if LANG_CXX11
inline void SMTPSendRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPSendRequest.password)
}
#endif
inline void SMTPSendRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPSendRequest.password)
}
inline void SMTPSendRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPSendRequest.password)
}
inline ::std::string* SMTPSendRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPSendRequest::release_password() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPSendRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.password)
}

// .google.protobuf.BoolValue use_starttls = 12;
inline bool SMTPSendRequest::has_use_starttls() const {
  return this != internal_default_instance() && use_starttls_ != nullptr;
}
inline const ::google::protobuf::BoolValue& SMTPSendRequest::use_starttls() const {
  const ::google::protobuf::BoolValue* p = use_starttls_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.use_starttls)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* SMTPSendRequest::release_use_starttls() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.use_starttls)
  
  ::google::protobuf::BoolValue* temp = use_starttls_;
  use_starttls_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* SMTPSendRequest::mutable_use_starttls() {
  
  if (use_starttls_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    use_starttls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.use_starttls)
  return use_starttls_;
}
inline void SMTPSendRequest::set_allocated_use_starttls(::google::protobuf::BoolValue* use_starttls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_starttls_);
  }
  if (use_starttls) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(use_starttls)->GetArena();
    if (message_arena != submessage_arena) {
      use_starttls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_starttls, submessage_arena);
    }
    
  } else {
    
  }
  use_starttls_ = use_starttls;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.use_starttls)
}

// .google.protobuf.BoolValue use_ssl = 13;
inline bool SMTPSendRequest::has_use_ssl() const {
  return this != internal_default_instance() && use_ssl_ != nullptr;
}
inline const ::google::protobuf::BoolValue& SMTPSendRequest::use_ssl() const {
  const ::google::protobuf::BoolValue* p = use_ssl_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.use_ssl)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* SMTPSendRequest::release_use_ssl() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPSendRequest.use_ssl)
  
  ::google::protobuf::BoolValue* temp = use_ssl_;
  use_ssl_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* SMTPSendRequest::mutable_use_ssl() {
  
  if (use_ssl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    use_ssl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.use_ssl)
  return use_ssl_;
}
inline void SMTPSendRequest::set_allocated_use_ssl(::google::protobuf::BoolValue* use_ssl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_ssl_);
  }
  if (use_ssl) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(use_ssl)->GetArena();
    if (message_arena != submessage_arena) {
      use_ssl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_ssl, submessage_arena);
    }
    
  } else {
    
  }
  use_ssl_ = use_ssl;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPSendRequest.use_ssl)
}

// repeated .ric.notify.Attachment attachments = 14;
inline int SMTPSendRequest::attachments_size() const {
  return attachments_.size();
}
inline void SMTPSendRequest::clear_attachments() {
  attachments_.Clear();
}
inline ::ric::notify::Attachment* SMTPSendRequest::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPSendRequest.attachments)
  return attachments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::notify::Attachment >*
SMTPSendRequest::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:ric.notify.SMTPSendRequest.attachments)
  return &attachments_;
}
inline const ::ric::notify::Attachment& SMTPSendRequest::attachments(int index) const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPSendRequest.attachments)
  return attachments_.Get(index);
}
inline ::ric::notify::Attachment* SMTPSendRequest::add_attachments() {
  // @@protoc_insertion_point(field_add:ric.notify.SMTPSendRequest.attachments)
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::notify::Attachment >&
SMTPSendRequest::attachments() const {
  // @@protoc_insertion_point(field_list:ric.notify.SMTPSendRequest.attachments)
  return attachments_;
}

// -------------------------------------------------------------------

// SMTPSendResponse

// -------------------------------------------------------------------

// SMTPGatewayInfoRequest

// string gateway_id = 1;
inline void SMTPGatewayInfoRequest::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPGatewayInfoRequest::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoRequest.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SMTPGatewayInfoRequest::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoRequest.gateway_id)
}
#if LANG_CXX11
inline void SMTPGatewayInfoRequest::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPGatewayInfoRequest.gateway_id)
}
#endif
inline void SMTPGatewayInfoRequest::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPGatewayInfoRequest.gateway_id)
}
inline void SMTPGatewayInfoRequest::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPGatewayInfoRequest.gateway_id)
}
inline ::std::string* SMTPGatewayInfoRequest::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoRequest.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPGatewayInfoRequest::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoRequest.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPGatewayInfoRequest::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoRequest.gateway_id)
}

// -------------------------------------------------------------------

// SMTPGatewayInfoResponse

// string gateway_id = 1;
inline void SMTPGatewayInfoResponse::clear_gateway_id() {
  gateway_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPGatewayInfoResponse::gateway_id() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.gateway_id)
  return gateway_id_.GetNoArena();
}
inline void SMTPGatewayInfoResponse::set_gateway_id(const ::std::string& value) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.gateway_id)
}
#if LANG_CXX11
inline void SMTPGatewayInfoResponse::set_gateway_id(::std::string&& value) {
  
  gateway_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPGatewayInfoResponse.gateway_id)
}
#endif
inline void SMTPGatewayInfoResponse::set_gateway_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPGatewayInfoResponse.gateway_id)
}
inline void SMTPGatewayInfoResponse::set_gateway_id(const char* value, size_t size) {
  
  gateway_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPGatewayInfoResponse.gateway_id)
}
inline ::std::string* SMTPGatewayInfoResponse::mutable_gateway_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.gateway_id)
  return gateway_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPGatewayInfoResponse::release_gateway_id() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.gateway_id)
  
  return gateway_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPGatewayInfoResponse::set_allocated_gateway_id(::std::string* gateway_id) {
  if (gateway_id != nullptr) {
    
  } else {
    
  }
  gateway_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_id);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.gateway_id)
}

// string sender = 2;
inline void SMTPGatewayInfoResponse::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPGatewayInfoResponse::sender() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.sender)
  return sender_.GetNoArena();
}
inline void SMTPGatewayInfoResponse::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.sender)
}
#if LANG_CXX11
inline void SMTPGatewayInfoResponse::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPGatewayInfoResponse.sender)
}
#endif
inline void SMTPGatewayInfoResponse::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPGatewayInfoResponse.sender)
}
inline void SMTPGatewayInfoResponse::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPGatewayInfoResponse.sender)
}
inline ::std::string* SMTPGatewayInfoResponse::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPGatewayInfoResponse::release_sender() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPGatewayInfoResponse::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.sender)
}

// string host = 3;
inline void SMTPGatewayInfoResponse::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPGatewayInfoResponse::host() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.host)
  return host_.GetNoArena();
}
inline void SMTPGatewayInfoResponse::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.host)
}
#if LANG_CXX11
inline void SMTPGatewayInfoResponse::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPGatewayInfoResponse.host)
}
#endif
inline void SMTPGatewayInfoResponse::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPGatewayInfoResponse.host)
}
inline void SMTPGatewayInfoResponse::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPGatewayInfoResponse.host)
}
inline ::std::string* SMTPGatewayInfoResponse::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPGatewayInfoResponse::release_host() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPGatewayInfoResponse::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.host)
}

// int32 port = 4;
inline void SMTPGatewayInfoResponse::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 SMTPGatewayInfoResponse::port() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.port)
  return port_;
}
inline void SMTPGatewayInfoResponse::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.port)
}

// string username = 5;
inline void SMTPGatewayInfoResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPGatewayInfoResponse::username() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.username)
  return username_.GetNoArena();
}
inline void SMTPGatewayInfoResponse::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.username)
}
#if LANG_CXX11
inline void SMTPGatewayInfoResponse::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPGatewayInfoResponse.username)
}
#endif
inline void SMTPGatewayInfoResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPGatewayInfoResponse.username)
}
inline void SMTPGatewayInfoResponse::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPGatewayInfoResponse.username)
}
inline ::std::string* SMTPGatewayInfoResponse::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPGatewayInfoResponse::release_username() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPGatewayInfoResponse::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.username)
}

// string password = 6;
inline void SMTPGatewayInfoResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPGatewayInfoResponse::password() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.password)
  return password_.GetNoArena();
}
inline void SMTPGatewayInfoResponse::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.password)
}
#if LANG_CXX11
inline void SMTPGatewayInfoResponse::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPGatewayInfoResponse.password)
}
#endif
inline void SMTPGatewayInfoResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPGatewayInfoResponse.password)
}
inline void SMTPGatewayInfoResponse::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPGatewayInfoResponse.password)
}
inline ::std::string* SMTPGatewayInfoResponse::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPGatewayInfoResponse::release_password() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPGatewayInfoResponse::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.password)
}

// .google.protobuf.BoolValue use_starttls = 7;
inline bool SMTPGatewayInfoResponse::has_use_starttls() const {
  return this != internal_default_instance() && use_starttls_ != nullptr;
}
inline const ::google::protobuf::BoolValue& SMTPGatewayInfoResponse::use_starttls() const {
  const ::google::protobuf::BoolValue* p = use_starttls_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.use_starttls)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* SMTPGatewayInfoResponse::release_use_starttls() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.use_starttls)
  
  ::google::protobuf::BoolValue* temp = use_starttls_;
  use_starttls_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* SMTPGatewayInfoResponse::mutable_use_starttls() {
  
  if (use_starttls_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    use_starttls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.use_starttls)
  return use_starttls_;
}
inline void SMTPGatewayInfoResponse::set_allocated_use_starttls(::google::protobuf::BoolValue* use_starttls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_starttls_);
  }
  if (use_starttls) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(use_starttls)->GetArena();
    if (message_arena != submessage_arena) {
      use_starttls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_starttls, submessage_arena);
    }
    
  } else {
    
  }
  use_starttls_ = use_starttls;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.use_starttls)
}

// .google.protobuf.BoolValue use_ssl = 8;
inline bool SMTPGatewayInfoResponse::has_use_ssl() const {
  return this != internal_default_instance() && use_ssl_ != nullptr;
}
inline const ::google::protobuf::BoolValue& SMTPGatewayInfoResponse::use_ssl() const {
  const ::google::protobuf::BoolValue* p = use_ssl_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.use_ssl)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* SMTPGatewayInfoResponse::release_use_ssl() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPGatewayInfoResponse.use_ssl)
  
  ::google::protobuf::BoolValue* temp = use_ssl_;
  use_ssl_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* SMTPGatewayInfoResponse::mutable_use_ssl() {
  
  if (use_ssl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    use_ssl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPGatewayInfoResponse.use_ssl)
  return use_ssl_;
}
inline void SMTPGatewayInfoResponse::set_allocated_use_ssl(::google::protobuf::BoolValue* use_ssl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_ssl_);
  }
  if (use_ssl) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(use_ssl)->GetArena();
    if (message_arena != submessage_arena) {
      use_ssl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_ssl, submessage_arena);
    }
    
  } else {
    
  }
  use_ssl_ = use_ssl;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPGatewayInfoResponse.use_ssl)
}

// bool system = 9;
inline void SMTPGatewayInfoResponse::clear_system() {
  system_ = false;
}
inline bool SMTPGatewayInfoResponse::system() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPGatewayInfoResponse.system)
  return system_;
}
inline void SMTPGatewayInfoResponse::set_system(bool value) {
  
  system_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMTPGatewayInfoResponse.system)
}

// -------------------------------------------------------------------

// SMTPCheckGatewayRequest

// string host = 1;
inline void SMTPCheckGatewayRequest::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPCheckGatewayRequest::host() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayRequest.host)
  return host_.GetNoArena();
}
inline void SMTPCheckGatewayRequest::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPCheckGatewayRequest.host)
}
#if LANG_CXX11
inline void SMTPCheckGatewayRequest::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPCheckGatewayRequest.host)
}
#endif
inline void SMTPCheckGatewayRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPCheckGatewayRequest.host)
}
inline void SMTPCheckGatewayRequest::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPCheckGatewayRequest.host)
}
inline ::std::string* SMTPCheckGatewayRequest::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPCheckGatewayRequest.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPCheckGatewayRequest::release_host() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPCheckGatewayRequest.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPCheckGatewayRequest::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPCheckGatewayRequest.host)
}

// int32 port = 2;
inline void SMTPCheckGatewayRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 SMTPCheckGatewayRequest::port() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayRequest.port)
  return port_;
}
inline void SMTPCheckGatewayRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMTPCheckGatewayRequest.port)
}

// string username = 3;
inline void SMTPCheckGatewayRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPCheckGatewayRequest::username() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayRequest.username)
  return username_.GetNoArena();
}
inline void SMTPCheckGatewayRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPCheckGatewayRequest.username)
}
#if LANG_CXX11
inline void SMTPCheckGatewayRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPCheckGatewayRequest.username)
}
#endif
inline void SMTPCheckGatewayRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPCheckGatewayRequest.username)
}
inline void SMTPCheckGatewayRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPCheckGatewayRequest.username)
}
inline ::std::string* SMTPCheckGatewayRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPCheckGatewayRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPCheckGatewayRequest::release_username() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPCheckGatewayRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPCheckGatewayRequest::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPCheckGatewayRequest.username)
}

// string password = 4;
inline void SMTPCheckGatewayRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMTPCheckGatewayRequest::password() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayRequest.password)
  return password_.GetNoArena();
}
inline void SMTPCheckGatewayRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.notify.SMTPCheckGatewayRequest.password)
}
#if LANG_CXX11
inline void SMTPCheckGatewayRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.notify.SMTPCheckGatewayRequest.password)
}
#endif
inline void SMTPCheckGatewayRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.notify.SMTPCheckGatewayRequest.password)
}
inline void SMTPCheckGatewayRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.notify.SMTPCheckGatewayRequest.password)
}
inline ::std::string* SMTPCheckGatewayRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPCheckGatewayRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMTPCheckGatewayRequest::release_password() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPCheckGatewayRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMTPCheckGatewayRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPCheckGatewayRequest.password)
}

// .google.protobuf.BoolValue use_starttls = 5;
inline bool SMTPCheckGatewayRequest::has_use_starttls() const {
  return this != internal_default_instance() && use_starttls_ != nullptr;
}
inline const ::google::protobuf::BoolValue& SMTPCheckGatewayRequest::use_starttls() const {
  const ::google::protobuf::BoolValue* p = use_starttls_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayRequest.use_starttls)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* SMTPCheckGatewayRequest::release_use_starttls() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPCheckGatewayRequest.use_starttls)
  
  ::google::protobuf::BoolValue* temp = use_starttls_;
  use_starttls_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* SMTPCheckGatewayRequest::mutable_use_starttls() {
  
  if (use_starttls_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    use_starttls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPCheckGatewayRequest.use_starttls)
  return use_starttls_;
}
inline void SMTPCheckGatewayRequest::set_allocated_use_starttls(::google::protobuf::BoolValue* use_starttls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_starttls_);
  }
  if (use_starttls) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(use_starttls)->GetArena();
    if (message_arena != submessage_arena) {
      use_starttls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_starttls, submessage_arena);
    }
    
  } else {
    
  }
  use_starttls_ = use_starttls;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPCheckGatewayRequest.use_starttls)
}

// .google.protobuf.BoolValue use_ssl = 6;
inline bool SMTPCheckGatewayRequest::has_use_ssl() const {
  return this != internal_default_instance() && use_ssl_ != nullptr;
}
inline const ::google::protobuf::BoolValue& SMTPCheckGatewayRequest::use_ssl() const {
  const ::google::protobuf::BoolValue* p = use_ssl_;
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayRequest.use_ssl)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* SMTPCheckGatewayRequest::release_use_ssl() {
  // @@protoc_insertion_point(field_release:ric.notify.SMTPCheckGatewayRequest.use_ssl)
  
  ::google::protobuf::BoolValue* temp = use_ssl_;
  use_ssl_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* SMTPCheckGatewayRequest::mutable_use_ssl() {
  
  if (use_ssl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    use_ssl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.notify.SMTPCheckGatewayRequest.use_ssl)
  return use_ssl_;
}
inline void SMTPCheckGatewayRequest::set_allocated_use_ssl(::google::protobuf::BoolValue* use_ssl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_ssl_);
  }
  if (use_ssl) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(use_ssl)->GetArena();
    if (message_arena != submessage_arena) {
      use_ssl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use_ssl, submessage_arena);
    }
    
  } else {
    
  }
  use_ssl_ = use_ssl;
  // @@protoc_insertion_point(field_set_allocated:ric.notify.SMTPCheckGatewayRequest.use_ssl)
}

// -------------------------------------------------------------------

// SMTPCheckGatewayResponse

// bool success = 1;
inline void SMTPCheckGatewayResponse::clear_success() {
  success_ = false;
}
inline bool SMTPCheckGatewayResponse::success() const {
  // @@protoc_insertion_point(field_get:ric.notify.SMTPCheckGatewayResponse.success)
  return success_;
}
inline void SMTPCheckGatewayResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ric.notify.SMTPCheckGatewayResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace notify
}  // namespace ric

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ric::notify::SMPPStatusResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ric::notify::SMPPStatusResponse_State>() {
  return ::ric::notify::SMPPStatusResponse_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dnotify_2fricnotify_2eproto
