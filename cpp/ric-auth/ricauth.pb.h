// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-auth/ricauth.proto

#ifndef PROTOBUF_INCLUDED_ric_2dauth_2fricauth_2eproto
#define PROTOBUF_INCLUDED_ric_2dauth_2fricauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dauth_2fricauth_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dauth_2fricauth_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dauth_2fricauth_2eproto();
namespace ric {
namespace auth {
class AuthObjectArgument;
class AuthObjectArgumentDefaultTypeInternal;
extern AuthObjectArgumentDefaultTypeInternal _AuthObjectArgument_default_instance_;
class AuthObjectRequest;
class AuthObjectRequestDefaultTypeInternal;
extern AuthObjectRequestDefaultTypeInternal _AuthObjectRequest_default_instance_;
class AuthObjectRequest_AuthObjectCert;
class AuthObjectRequest_AuthObjectCertDefaultTypeInternal;
extern AuthObjectRequest_AuthObjectCertDefaultTypeInternal _AuthObjectRequest_AuthObjectCert_default_instance_;
class AuthObjectResponse;
class AuthObjectResponseDefaultTypeInternal;
extern AuthObjectResponseDefaultTypeInternal _AuthObjectResponse_default_instance_;
class AuthObjectResponse_LicenseEntry_DoNotUse;
class AuthObjectResponse_LicenseEntry_DoNotUseDefaultTypeInternal;
extern AuthObjectResponse_LicenseEntry_DoNotUseDefaultTypeInternal _AuthObjectResponse_LicenseEntry_DoNotUse_default_instance_;
class AuthObjectResponse_StatsEntry_DoNotUse;
class AuthObjectResponse_StatsEntry_DoNotUseDefaultTypeInternal;
extern AuthObjectResponse_StatsEntry_DoNotUseDefaultTypeInternal _AuthObjectResponse_StatsEntry_DoNotUse_default_instance_;
class IssueCertRequest;
class IssueCertRequestDefaultTypeInternal;
extern IssueCertRequestDefaultTypeInternal _IssueCertRequest_default_instance_;
class IssueCertResponse;
class IssueCertResponseDefaultTypeInternal;
extern IssueCertResponseDefaultTypeInternal _IssueCertResponse_default_instance_;
class ModelInfoRequest;
class ModelInfoRequestDefaultTypeInternal;
extern ModelInfoRequestDefaultTypeInternal _ModelInfoRequest_default_instance_;
class ModelInfoResponse;
class ModelInfoResponseDefaultTypeInternal;
extern ModelInfoResponseDefaultTypeInternal _ModelInfoResponse_default_instance_;
class ObjectGateRequest;
class ObjectGateRequestDefaultTypeInternal;
extern ObjectGateRequestDefaultTypeInternal _ObjectGateRequest_default_instance_;
class ObjectGateResponse;
class ObjectGateResponseDefaultTypeInternal;
extern ObjectGateResponseDefaultTypeInternal _ObjectGateResponse_default_instance_;
class QueryRepeatersRequest;
class QueryRepeatersRequestDefaultTypeInternal;
extern QueryRepeatersRequestDefaultTypeInternal _QueryRepeatersRequest_default_instance_;
class RepeaterInfo;
class RepeaterInfoDefaultTypeInternal;
extern RepeaterInfoDefaultTypeInternal _RepeaterInfo_default_instance_;
class RepeaterInfo_ObjectRepeaterInfo;
class RepeaterInfo_ObjectRepeaterInfoDefaultTypeInternal;
extern RepeaterInfo_ObjectRepeaterInfoDefaultTypeInternal _RepeaterInfo_ObjectRepeaterInfo_default_instance_;
class RepeatersResponse;
class RepeatersResponseDefaultTypeInternal;
extern RepeatersResponseDefaultTypeInternal _RepeatersResponse_default_instance_;
class StatRecord;
class StatRecordDefaultTypeInternal;
extern StatRecordDefaultTypeInternal _StatRecord_default_instance_;
}  // namespace auth
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::auth::AuthObjectArgument* Arena::CreateMaybeMessage<::ric::auth::AuthObjectArgument>(Arena*);
template<> ::ric::auth::AuthObjectRequest* Arena::CreateMaybeMessage<::ric::auth::AuthObjectRequest>(Arena*);
template<> ::ric::auth::AuthObjectRequest_AuthObjectCert* Arena::CreateMaybeMessage<::ric::auth::AuthObjectRequest_AuthObjectCert>(Arena*);
template<> ::ric::auth::AuthObjectResponse* Arena::CreateMaybeMessage<::ric::auth::AuthObjectResponse>(Arena*);
template<> ::ric::auth::AuthObjectResponse_LicenseEntry_DoNotUse* Arena::CreateMaybeMessage<::ric::auth::AuthObjectResponse_LicenseEntry_DoNotUse>(Arena*);
template<> ::ric::auth::AuthObjectResponse_StatsEntry_DoNotUse* Arena::CreateMaybeMessage<::ric::auth::AuthObjectResponse_StatsEntry_DoNotUse>(Arena*);
template<> ::ric::auth::IssueCertRequest* Arena::CreateMaybeMessage<::ric::auth::IssueCertRequest>(Arena*);
template<> ::ric::auth::IssueCertResponse* Arena::CreateMaybeMessage<::ric::auth::IssueCertResponse>(Arena*);
template<> ::ric::auth::ModelInfoRequest* Arena::CreateMaybeMessage<::ric::auth::ModelInfoRequest>(Arena*);
template<> ::ric::auth::ModelInfoResponse* Arena::CreateMaybeMessage<::ric::auth::ModelInfoResponse>(Arena*);
template<> ::ric::auth::ObjectGateRequest* Arena::CreateMaybeMessage<::ric::auth::ObjectGateRequest>(Arena*);
template<> ::ric::auth::ObjectGateResponse* Arena::CreateMaybeMessage<::ric::auth::ObjectGateResponse>(Arena*);
template<> ::ric::auth::QueryRepeatersRequest* Arena::CreateMaybeMessage<::ric::auth::QueryRepeatersRequest>(Arena*);
template<> ::ric::auth::RepeaterInfo* Arena::CreateMaybeMessage<::ric::auth::RepeaterInfo>(Arena*);
template<> ::ric::auth::RepeaterInfo_ObjectRepeaterInfo* Arena::CreateMaybeMessage<::ric::auth::RepeaterInfo_ObjectRepeaterInfo>(Arena*);
template<> ::ric::auth::RepeatersResponse* Arena::CreateMaybeMessage<::ric::auth::RepeatersResponse>(Arena*);
template<> ::ric::auth::StatRecord* Arena::CreateMaybeMessage<::ric::auth::StatRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace auth {

// ===================================================================

class AuthObjectRequest_AuthObjectCert final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectRequest.AuthObjectCert) */ {
 public:
  AuthObjectRequest_AuthObjectCert();
  virtual ~AuthObjectRequest_AuthObjectCert();

  AuthObjectRequest_AuthObjectCert(const AuthObjectRequest_AuthObjectCert& from);

  inline AuthObjectRequest_AuthObjectCert& operator=(const AuthObjectRequest_AuthObjectCert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectRequest_AuthObjectCert(AuthObjectRequest_AuthObjectCert&& from) noexcept
    : AuthObjectRequest_AuthObjectCert() {
    *this = ::std::move(from);
  }

  inline AuthObjectRequest_AuthObjectCert& operator=(AuthObjectRequest_AuthObjectCert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectRequest_AuthObjectCert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectRequest_AuthObjectCert* internal_default_instance() {
    return reinterpret_cast<const AuthObjectRequest_AuthObjectCert*>(
               &_AuthObjectRequest_AuthObjectCert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuthObjectRequest_AuthObjectCert* other);
  friend void swap(AuthObjectRequest_AuthObjectCert& a, AuthObjectRequest_AuthObjectCert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectRequest_AuthObjectCert* New() const final {
    return CreateMaybeMessage<AuthObjectRequest_AuthObjectCert>(nullptr);
  }

  AuthObjectRequest_AuthObjectCert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectRequest_AuthObjectCert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectRequest_AuthObjectCert& from);
  void MergeFrom(const AuthObjectRequest_AuthObjectCert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectRequest_AuthObjectCert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cn = 1;
  void clear_cn();
  static const int kCnFieldNumber = 1;
  const ::std::string& cn() const;
  void set_cn(const ::std::string& value);
  #if LANG_CXX11
  void set_cn(::std::string&& value);
  #endif
  void set_cn(const char* value);
  void set_cn(const char* value, size_t size);
  ::std::string* mutable_cn();
  ::std::string* release_cn();
  void set_allocated_cn(::std::string* cn);

  // string fingerprint = 2;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 2;
  const ::std::string& fingerprint() const;
  void set_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_fingerprint(::std::string&& value);
  #endif
  void set_fingerprint(const char* value);
  void set_fingerprint(const char* value, size_t size);
  ::std::string* mutable_fingerprint();
  ::std::string* release_fingerprint();
  void set_allocated_fingerprint(::std::string* fingerprint);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectRequest.AuthObjectCert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cn_;
  ::google::protobuf::internal::ArenaStringPtr fingerprint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class AuthObjectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectRequest) */ {
 public:
  AuthObjectRequest();
  virtual ~AuthObjectRequest();

  AuthObjectRequest(const AuthObjectRequest& from);

  inline AuthObjectRequest& operator=(const AuthObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectRequest(AuthObjectRequest&& from) noexcept
    : AuthObjectRequest() {
    *this = ::std::move(from);
  }

  inline AuthObjectRequest& operator=(AuthObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectRequest* internal_default_instance() {
    return reinterpret_cast<const AuthObjectRequest*>(
               &_AuthObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthObjectRequest* other);
  friend void swap(AuthObjectRequest& a, AuthObjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectRequest* New() const final {
    return CreateMaybeMessage<AuthObjectRequest>(nullptr);
  }

  AuthObjectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectRequest& from);
  void MergeFrom(const AuthObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthObjectRequest_AuthObjectCert AuthObjectCert;

  // accessors -------------------------------------------------------

  // string protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // string object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  #if LANG_CXX11
  void set_object(::std::string&& value);
  #endif
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string username = 4;
  void clear_username();
  static const int kUsernameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string ipv4 = 7;
  void clear_ipv4();
  static const int kIpv4FieldNumber = 7;
  const ::std::string& ipv4() const;
  void set_ipv4(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv4(::std::string&& value);
  #endif
  void set_ipv4(const char* value);
  void set_ipv4(const char* value, size_t size);
  ::std::string* mutable_ipv4();
  ::std::string* release_ipv4();
  void set_allocated_ipv4(::std::string* ipv4);

  // string ipv6 = 8;
  void clear_ipv6();
  static const int kIpv6FieldNumber = 8;
  const ::std::string& ipv6() const;
  void set_ipv6(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv6(::std::string&& value);
  #endif
  void set_ipv6(const char* value);
  void set_ipv6(const char* value, size_t size);
  ::std::string* mutable_ipv6();
  ::std::string* release_ipv6();
  void set_allocated_ipv6(::std::string* ipv6);

  // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 6;
  const ::ric::auth::AuthObjectRequest_AuthObjectCert& cert() const;
  ::ric::auth::AuthObjectRequest_AuthObjectCert* release_cert();
  ::ric::auth::AuthObjectRequest_AuthObjectCert* mutable_cert();
  void set_allocated_cert(::ric::auth::AuthObjectRequest_AuthObjectCert* cert);

  // bool bot = 9;
  void clear_bot();
  static const int kBotFieldNumber = 9;
  bool bot() const;
  void set_bot(bool value);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr ipv4_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_;
  ::ric::auth::AuthObjectRequest_AuthObjectCert* cert_;
  bool bot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class AuthObjectResponse_LicenseEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AuthObjectResponse_LicenseEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<AuthObjectResponse_LicenseEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  AuthObjectResponse_LicenseEntry_DoNotUse();
  AuthObjectResponse_LicenseEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AuthObjectResponse_LicenseEntry_DoNotUse& other);
  static const AuthObjectResponse_LicenseEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthObjectResponse_LicenseEntry_DoNotUse*>(&_AuthObjectResponse_LicenseEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AuthObjectResponse_StatsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AuthObjectResponse_StatsEntry_DoNotUse, 
    ::std::string, ::ric::auth::StatRecord,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<AuthObjectResponse_StatsEntry_DoNotUse, 
    ::std::string, ::ric::auth::StatRecord,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AuthObjectResponse_StatsEntry_DoNotUse();
  AuthObjectResponse_StatsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AuthObjectResponse_StatsEntry_DoNotUse& other);
  static const AuthObjectResponse_StatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthObjectResponse_StatsEntry_DoNotUse*>(&_AuthObjectResponse_StatsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AuthObjectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectResponse) */ {
 public:
  AuthObjectResponse();
  virtual ~AuthObjectResponse();

  AuthObjectResponse(const AuthObjectResponse& from);

  inline AuthObjectResponse& operator=(const AuthObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectResponse(AuthObjectResponse&& from) noexcept
    : AuthObjectResponse() {
    *this = ::std::move(from);
  }

  inline AuthObjectResponse& operator=(AuthObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectResponse* internal_default_instance() {
    return reinterpret_cast<const AuthObjectResponse*>(
               &_AuthObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AuthObjectResponse* other);
  friend void swap(AuthObjectResponse& a, AuthObjectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectResponse* New() const final {
    return CreateMaybeMessage<AuthObjectResponse>(nullptr);
  }

  AuthObjectResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectResponse& from);
  void MergeFrom(const AuthObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .ric.auth.AuthObjectArgument arguments = 6;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 6;
  ::ric::auth::AuthObjectArgument* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >*
      mutable_arguments();
  const ::ric::auth::AuthObjectArgument& arguments(int index) const;
  ::ric::auth::AuthObjectArgument* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >&
      arguments() const;

  // repeated string acl = 10;
  int acl_size() const;
  void clear_acl();
  static const int kAclFieldNumber = 10;
  const ::std::string& acl(int index) const;
  ::std::string* mutable_acl(int index);
  void set_acl(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_acl(int index, ::std::string&& value);
  #endif
  void set_acl(int index, const char* value);
  void set_acl(int index, const char* value, size_t size);
  ::std::string* add_acl();
  void add_acl(const ::std::string& value);
  #if LANG_CXX11
  void add_acl(::std::string&& value);
  #endif
  void add_acl(const char* value);
  void add_acl(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& acl() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_acl();

  // map<string, int64> license = 12;
  int license_size() const;
  void clear_license();
  static const int kLicenseFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
      license() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
      mutable_license();

  // map<string, .ric.auth.StatRecord> stats = 13;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 13;
  const ::google::protobuf::Map< ::std::string, ::ric::auth::StatRecord >&
      stats() const;
  ::google::protobuf::Map< ::std::string, ::ric::auth::StatRecord >*
      mutable_stats();

  // string session = 1;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  const ::std::string& session() const;
  void set_session(const ::std::string& value);
  #if LANG_CXX11
  void set_session(::std::string&& value);
  #endif
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  ::std::string* mutable_session();
  ::std::string* release_session();
  void set_allocated_session(::std::string* session);

  // string model_id = 2;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  const ::std::string& model_id() const;
  void set_model_id(const ::std::string& value);
  #if LANG_CXX11
  void set_model_id(::std::string&& value);
  #endif
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  ::std::string* mutable_model_id();
  ::std::string* release_model_id();
  void set_allocated_model_id(::std::string* model_id);

  // string object_id = 3;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string group_id = 4;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string group_key = 5;
  void clear_group_key();
  static const int kGroupKeyFieldNumber = 5;
  const ::std::string& group_key() const;
  void set_group_key(const ::std::string& value);
  #if LANG_CXX11
  void set_group_key(::std::string&& value);
  #endif
  void set_group_key(const char* value);
  void set_group_key(const char* value, size_t size);
  ::std::string* mutable_group_key();
  ::std::string* release_group_key();
  void set_allocated_group_key(::std::string* group_key);

  // string config = 7;
  void clear_config();
  static const int kConfigFieldNumber = 7;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // string license_id = 11;
  void clear_license_id();
  static const int kLicenseIdFieldNumber = 11;
  const ::std::string& license_id() const;
  void set_license_id(const ::std::string& value);
  #if LANG_CXX11
  void set_license_id(::std::string&& value);
  #endif
  void set_license_id(const char* value);
  void set_license_id(const char* value, size_t size);
  ::std::string* mutable_license_id();
  ::std::string* release_license_id();
  void set_allocated_license_id(::std::string* license_id);

  // string org_id = 15;
  void clear_org_id();
  static const int kOrgIdFieldNumber = 15;
  const ::std::string& org_id() const;
  void set_org_id(const ::std::string& value);
  #if LANG_CXX11
  void set_org_id(::std::string&& value);
  #endif
  void set_org_id(const char* value);
  void set_org_id(const char* value, size_t size);
  ::std::string* mutable_org_id();
  ::std::string* release_org_id();
  void set_allocated_org_id(::std::string* org_id);

  // int64 issued_at = 8;
  void clear_issued_at();
  static const int kIssuedAtFieldNumber = 8;
  ::google::protobuf::int64 issued_at() const;
  void set_issued_at(::google::protobuf::int64 value);

  // int64 expires_at = 9;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 9;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // bool full_packet_mode = 14;
  void clear_full_packet_mode();
  static const int kFullPacketModeFieldNumber = 14;
  bool full_packet_mode() const;
  void set_full_packet_mode(bool value);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument > arguments_;
  ::google::protobuf::RepeatedPtrField<::std::string> acl_;
  ::google::protobuf::internal::MapField<
      AuthObjectResponse_LicenseEntry_DoNotUse,
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > license_;
  ::google::protobuf::internal::MapField<
      AuthObjectResponse_StatsEntry_DoNotUse,
      ::std::string, ::ric::auth::StatRecord,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > stats_;
  ::google::protobuf::internal::ArenaStringPtr session_;
  ::google::protobuf::internal::ArenaStringPtr model_id_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr group_key_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::internal::ArenaStringPtr license_id_;
  ::google::protobuf::internal::ArenaStringPtr org_id_;
  ::google::protobuf::int64 issued_at_;
  ::google::protobuf::int64 expires_at_;
  bool full_packet_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class AuthObjectArgument final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectArgument) */ {
 public:
  AuthObjectArgument();
  virtual ~AuthObjectArgument();

  AuthObjectArgument(const AuthObjectArgument& from);

  inline AuthObjectArgument& operator=(const AuthObjectArgument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectArgument(AuthObjectArgument&& from) noexcept
    : AuthObjectArgument() {
    *this = ::std::move(from);
  }

  inline AuthObjectArgument& operator=(AuthObjectArgument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectArgument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectArgument* internal_default_instance() {
    return reinterpret_cast<const AuthObjectArgument*>(
               &_AuthObjectArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AuthObjectArgument* other);
  friend void swap(AuthObjectArgument& a, AuthObjectArgument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectArgument* New() const final {
    return CreateMaybeMessage<AuthObjectArgument>(nullptr);
  }

  AuthObjectArgument* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectArgument>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectArgument& from);
  void MergeFrom(const AuthObjectArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectArgument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  #if LANG_CXX11
  void set_data_type(::std::string&& value);
  #endif
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // string reference = 3;
  void clear_reference();
  static const int kReferenceFieldNumber = 3;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // string parser = 4;
  void clear_parser();
  static const int kParserFieldNumber = 4;
  const ::std::string& parser() const;
  void set_parser(const ::std::string& value);
  #if LANG_CXX11
  void set_parser(::std::string&& value);
  #endif
  void set_parser(const char* value);
  void set_parser(const char* value, size_t size);
  ::std::string* mutable_parser();
  ::std::string* release_parser();
  void set_allocated_parser(::std::string* parser);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectArgument)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::internal::ArenaStringPtr parser_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class StatRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.StatRecord) */ {
 public:
  StatRecord();
  virtual ~StatRecord();

  StatRecord(const StatRecord& from);

  inline StatRecord& operator=(const StatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatRecord(StatRecord&& from) noexcept
    : StatRecord() {
    *this = ::std::move(from);
  }

  inline StatRecord& operator=(StatRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StatRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatRecord* internal_default_instance() {
    return reinterpret_cast<const StatRecord*>(
               &_StatRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StatRecord* other);
  friend void swap(StatRecord& a, StatRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatRecord* New() const final {
    return CreateMaybeMessage<StatRecord>(nullptr);
  }

  StatRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatRecord& from);
  void MergeFrom(const StatRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // int64 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int64 left() const;
  void set_left(::google::protobuf::int64 value);

  // int64 from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  ::google::protobuf::int64 from() const;
  void set_from(::google::protobuf::int64 value);

  // int64 to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  ::google::protobuf::int64 to() const;
  void set_to(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.auth.StatRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 left_;
  ::google::protobuf::int64 from_;
  ::google::protobuf::int64 to_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class IssueCertRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.IssueCertRequest) */ {
 public:
  IssueCertRequest();
  virtual ~IssueCertRequest();

  IssueCertRequest(const IssueCertRequest& from);

  inline IssueCertRequest& operator=(const IssueCertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IssueCertRequest(IssueCertRequest&& from) noexcept
    : IssueCertRequest() {
    *this = ::std::move(from);
  }

  inline IssueCertRequest& operator=(IssueCertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IssueCertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueCertRequest* internal_default_instance() {
    return reinterpret_cast<const IssueCertRequest*>(
               &_IssueCertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IssueCertRequest* other);
  friend void swap(IssueCertRequest& a, IssueCertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssueCertRequest* New() const final {
    return CreateMaybeMessage<IssueCertRequest>(nullptr);
  }

  IssueCertRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IssueCertRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IssueCertRequest& from);
  void MergeFrom(const IssueCertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssueCertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string ttl = 2;
  void clear_ttl();
  static const int kTtlFieldNumber = 2;
  const ::std::string& ttl() const;
  void set_ttl(const ::std::string& value);
  #if LANG_CXX11
  void set_ttl(::std::string&& value);
  #endif
  void set_ttl(const char* value);
  void set_ttl(const char* value, size_t size);
  ::std::string* mutable_ttl();
  ::std::string* release_ttl();
  void set_allocated_ttl(::std::string* ttl);

  // @@protoc_insertion_point(class_scope:ric.auth.IssueCertRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr ttl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class IssueCertResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.IssueCertResponse) */ {
 public:
  IssueCertResponse();
  virtual ~IssueCertResponse();

  IssueCertResponse(const IssueCertResponse& from);

  inline IssueCertResponse& operator=(const IssueCertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IssueCertResponse(IssueCertResponse&& from) noexcept
    : IssueCertResponse() {
    *this = ::std::move(from);
  }

  inline IssueCertResponse& operator=(IssueCertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IssueCertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueCertResponse* internal_default_instance() {
    return reinterpret_cast<const IssueCertResponse*>(
               &_IssueCertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(IssueCertResponse* other);
  friend void swap(IssueCertResponse& a, IssueCertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssueCertResponse* New() const final {
    return CreateMaybeMessage<IssueCertResponse>(nullptr);
  }

  IssueCertResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IssueCertResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IssueCertResponse& from);
  void MergeFrom(const IssueCertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssueCertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string certificate = 1;
  void clear_certificate();
  static const int kCertificateFieldNumber = 1;
  const ::std::string& certificate() const;
  void set_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_certificate(::std::string&& value);
  #endif
  void set_certificate(const char* value);
  void set_certificate(const char* value, size_t size);
  ::std::string* mutable_certificate();
  ::std::string* release_certificate();
  void set_allocated_certificate(::std::string* certificate);

  // string private_key = 2;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 2;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // string serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  const ::std::string& serial() const;
  void set_serial(const ::std::string& value);
  #if LANG_CXX11
  void set_serial(::std::string&& value);
  #endif
  void set_serial(const char* value);
  void set_serial(const char* value, size_t size);
  ::std::string* mutable_serial();
  ::std::string* release_serial();
  void set_allocated_serial(::std::string* serial);

  // int64 issued_at = 4;
  void clear_issued_at();
  static const int kIssuedAtFieldNumber = 4;
  ::google::protobuf::int64 issued_at() const;
  void set_issued_at(::google::protobuf::int64 value);

  // int64 expires_at = 5;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 5;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.auth.IssueCertResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr certificate_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr serial_;
  ::google::protobuf::int64 issued_at_;
  ::google::protobuf::int64 expires_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class ModelInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.ModelInfoRequest) */ {
 public:
  ModelInfoRequest();
  virtual ~ModelInfoRequest();

  ModelInfoRequest(const ModelInfoRequest& from);

  inline ModelInfoRequest& operator=(const ModelInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelInfoRequest(ModelInfoRequest&& from) noexcept
    : ModelInfoRequest() {
    *this = ::std::move(from);
  }

  inline ModelInfoRequest& operator=(ModelInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ModelInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ModelInfoRequest*>(
               &_ModelInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ModelInfoRequest* other);
  friend void swap(ModelInfoRequest& a, ModelInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelInfoRequest* New() const final {
    return CreateMaybeMessage<ModelInfoRequest>(nullptr);
  }

  ModelInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelInfoRequest& from);
  void MergeFrom(const ModelInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model_id = 1;
  void clear_model_id();
  static const int kModelIdFieldNumber = 1;
  const ::std::string& model_id() const;
  void set_model_id(const ::std::string& value);
  #if LANG_CXX11
  void set_model_id(::std::string&& value);
  #endif
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  ::std::string* mutable_model_id();
  ::std::string* release_model_id();
  void set_allocated_model_id(::std::string* model_id);

  // @@protoc_insertion_point(class_scope:ric.auth.ModelInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr model_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class ModelInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.ModelInfoResponse) */ {
 public:
  ModelInfoResponse();
  virtual ~ModelInfoResponse();

  ModelInfoResponse(const ModelInfoResponse& from);

  inline ModelInfoResponse& operator=(const ModelInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelInfoResponse(ModelInfoResponse&& from) noexcept
    : ModelInfoResponse() {
    *this = ::std::move(from);
  }

  inline ModelInfoResponse& operator=(ModelInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ModelInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ModelInfoResponse*>(
               &_ModelInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ModelInfoResponse* other);
  friend void swap(ModelInfoResponse& a, ModelInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelInfoResponse* New() const final {
    return CreateMaybeMessage<ModelInfoResponse>(nullptr);
  }

  ModelInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelInfoResponse& from);
  void MergeFrom(const ModelInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.auth.AuthObjectArgument arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  ::ric::auth::AuthObjectArgument* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >*
      mutable_arguments();
  const ::ric::auth::AuthObjectArgument& arguments(int index) const;
  ::ric::auth::AuthObjectArgument* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >&
      arguments() const;

  // string model_id = 1;
  void clear_model_id();
  static const int kModelIdFieldNumber = 1;
  const ::std::string& model_id() const;
  void set_model_id(const ::std::string& value);
  #if LANG_CXX11
  void set_model_id(::std::string&& value);
  #endif
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  ::std::string* mutable_model_id();
  ::std::string* release_model_id();
  void set_allocated_model_id(::std::string* model_id);

  // @@protoc_insertion_point(class_scope:ric.auth.ModelInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument > arguments_;
  ::google::protobuf::internal::ArenaStringPtr model_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class ObjectGateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.ObjectGateRequest) */ {
 public:
  ObjectGateRequest();
  virtual ~ObjectGateRequest();

  ObjectGateRequest(const ObjectGateRequest& from);

  inline ObjectGateRequest& operator=(const ObjectGateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectGateRequest(ObjectGateRequest&& from) noexcept
    : ObjectGateRequest() {
    *this = ::std::move(from);
  }

  inline ObjectGateRequest& operator=(ObjectGateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObjectGateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectGateRequest* internal_default_instance() {
    return reinterpret_cast<const ObjectGateRequest*>(
               &_ObjectGateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ObjectGateRequest* other);
  friend void swap(ObjectGateRequest& a, ObjectGateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectGateRequest* New() const final {
    return CreateMaybeMessage<ObjectGateRequest>(nullptr);
  }

  ObjectGateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectGateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectGateRequest& from);
  void MergeFrom(const ObjectGateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectGateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.auth.ObjectGateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class ObjectGateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.ObjectGateResponse) */ {
 public:
  ObjectGateResponse();
  virtual ~ObjectGateResponse();

  ObjectGateResponse(const ObjectGateResponse& from);

  inline ObjectGateResponse& operator=(const ObjectGateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectGateResponse(ObjectGateResponse&& from) noexcept
    : ObjectGateResponse() {
    *this = ::std::move(from);
  }

  inline ObjectGateResponse& operator=(ObjectGateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObjectGateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectGateResponse* internal_default_instance() {
    return reinterpret_cast<const ObjectGateResponse*>(
               &_ObjectGateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ObjectGateResponse* other);
  friend void swap(ObjectGateResponse& a, ObjectGateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectGateResponse* New() const final {
    return CreateMaybeMessage<ObjectGateResponse>(nullptr);
  }

  ObjectGateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectGateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectGateResponse& from);
  void MergeFrom(const ObjectGateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectGateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.auth.ObjectGateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class QueryRepeatersRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.QueryRepeatersRequest) */ {
 public:
  QueryRepeatersRequest();
  virtual ~QueryRepeatersRequest();

  QueryRepeatersRequest(const QueryRepeatersRequest& from);

  inline QueryRepeatersRequest& operator=(const QueryRepeatersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRepeatersRequest(QueryRepeatersRequest&& from) noexcept
    : QueryRepeatersRequest() {
    *this = ::std::move(from);
  }

  inline QueryRepeatersRequest& operator=(QueryRepeatersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QueryRepeatersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRepeatersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRepeatersRequest*>(
               &_QueryRepeatersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(QueryRepeatersRequest* other);
  friend void swap(QueryRepeatersRequest& a, QueryRepeatersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRepeatersRequest* New() const final {
    return CreateMaybeMessage<QueryRepeatersRequest>(nullptr);
  }

  QueryRepeatersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRepeatersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRepeatersRequest& from);
  void MergeFrom(const QueryRepeatersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRepeatersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string protocols = 2;
  int protocols_size() const;
  void clear_protocols();
  static const int kProtocolsFieldNumber = 2;
  const ::std::string& protocols(int index) const;
  ::std::string* mutable_protocols(int index);
  void set_protocols(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_protocols(int index, ::std::string&& value);
  #endif
  void set_protocols(int index, const char* value);
  void set_protocols(int index, const char* value, size_t size);
  ::std::string* add_protocols();
  void add_protocols(const ::std::string& value);
  #if LANG_CXX11
  void add_protocols(::std::string&& value);
  #endif
  void add_protocols(const char* value);
  void add_protocols(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& protocols() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_protocols();

  // repeated string repeater_ids = 3;
  int repeater_ids_size() const;
  void clear_repeater_ids();
  static const int kRepeaterIdsFieldNumber = 3;
  const ::std::string& repeater_ids(int index) const;
  ::std::string* mutable_repeater_ids(int index);
  void set_repeater_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_repeater_ids(int index, ::std::string&& value);
  #endif
  void set_repeater_ids(int index, const char* value);
  void set_repeater_ids(int index, const char* value, size_t size);
  ::std::string* add_repeater_ids();
  void add_repeater_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_repeater_ids(::std::string&& value);
  #endif
  void add_repeater_ids(const char* value);
  void add_repeater_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& repeater_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_repeater_ids();

  // repeated string object_ids = 4;
  int object_ids_size() const;
  void clear_object_ids();
  static const int kObjectIdsFieldNumber = 4;
  const ::std::string& object_ids(int index) const;
  ::std::string* mutable_object_ids(int index);
  void set_object_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_object_ids(int index, ::std::string&& value);
  #endif
  void set_object_ids(int index, const char* value);
  void set_object_ids(int index, const char* value, size_t size);
  ::std::string* add_object_ids();
  void add_object_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_object_ids(::std::string&& value);
  #endif
  void add_object_ids(const char* value);
  void add_object_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& object_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_object_ids();

  // bool with_objects = 1;
  void clear_with_objects();
  static const int kWithObjectsFieldNumber = 1;
  bool with_objects() const;
  void set_with_objects(bool value);

  // @@protoc_insertion_point(class_scope:ric.auth.QueryRepeatersRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> protocols_;
  ::google::protobuf::RepeatedPtrField<::std::string> repeater_ids_;
  ::google::protobuf::RepeatedPtrField<::std::string> object_ids_;
  bool with_objects_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class RepeaterInfo_ObjectRepeaterInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.RepeaterInfo.ObjectRepeaterInfo) */ {
 public:
  RepeaterInfo_ObjectRepeaterInfo();
  virtual ~RepeaterInfo_ObjectRepeaterInfo();

  RepeaterInfo_ObjectRepeaterInfo(const RepeaterInfo_ObjectRepeaterInfo& from);

  inline RepeaterInfo_ObjectRepeaterInfo& operator=(const RepeaterInfo_ObjectRepeaterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepeaterInfo_ObjectRepeaterInfo(RepeaterInfo_ObjectRepeaterInfo&& from) noexcept
    : RepeaterInfo_ObjectRepeaterInfo() {
    *this = ::std::move(from);
  }

  inline RepeaterInfo_ObjectRepeaterInfo& operator=(RepeaterInfo_ObjectRepeaterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RepeaterInfo_ObjectRepeaterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeaterInfo_ObjectRepeaterInfo* internal_default_instance() {
    return reinterpret_cast<const RepeaterInfo_ObjectRepeaterInfo*>(
               &_RepeaterInfo_ObjectRepeaterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RepeaterInfo_ObjectRepeaterInfo* other);
  friend void swap(RepeaterInfo_ObjectRepeaterInfo& a, RepeaterInfo_ObjectRepeaterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepeaterInfo_ObjectRepeaterInfo* New() const final {
    return CreateMaybeMessage<RepeaterInfo_ObjectRepeaterInfo>(nullptr);
  }

  RepeaterInfo_ObjectRepeaterInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepeaterInfo_ObjectRepeaterInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepeaterInfo_ObjectRepeaterInfo& from);
  void MergeFrom(const RepeaterInfo_ObjectRepeaterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeaterInfo_ObjectRepeaterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string repeater_config = 2;
  void clear_repeater_config();
  static const int kRepeaterConfigFieldNumber = 2;
  const ::std::string& repeater_config() const;
  void set_repeater_config(const ::std::string& value);
  #if LANG_CXX11
  void set_repeater_config(::std::string&& value);
  #endif
  void set_repeater_config(const char* value);
  void set_repeater_config(const char* value, size_t size);
  ::std::string* mutable_repeater_config();
  ::std::string* release_repeater_config();
  void set_allocated_repeater_config(::std::string* repeater_config);

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:ric.auth.RepeaterInfo.ObjectRepeaterInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr repeater_config_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class RepeaterInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.RepeaterInfo) */ {
 public:
  RepeaterInfo();
  virtual ~RepeaterInfo();

  RepeaterInfo(const RepeaterInfo& from);

  inline RepeaterInfo& operator=(const RepeaterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepeaterInfo(RepeaterInfo&& from) noexcept
    : RepeaterInfo() {
    *this = ::std::move(from);
  }

  inline RepeaterInfo& operator=(RepeaterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RepeaterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeaterInfo* internal_default_instance() {
    return reinterpret_cast<const RepeaterInfo*>(
               &_RepeaterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RepeaterInfo* other);
  friend void swap(RepeaterInfo& a, RepeaterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepeaterInfo* New() const final {
    return CreateMaybeMessage<RepeaterInfo>(nullptr);
  }

  RepeaterInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepeaterInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepeaterInfo& from);
  void MergeFrom(const RepeaterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeaterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RepeaterInfo_ObjectRepeaterInfo ObjectRepeaterInfo;

  // accessors -------------------------------------------------------

  // repeated .ric.auth.RepeaterInfo.ObjectRepeaterInfo objects = 10;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 10;
  ::ric::auth::RepeaterInfo_ObjectRepeaterInfo* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo_ObjectRepeaterInfo >*
      mutable_objects();
  const ::ric::auth::RepeaterInfo_ObjectRepeaterInfo& objects(int index) const;
  ::ric::auth::RepeaterInfo_ObjectRepeaterInfo* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo_ObjectRepeaterInfo >&
      objects() const;

  // string repeater_id = 1;
  void clear_repeater_id();
  static const int kRepeaterIdFieldNumber = 1;
  const ::std::string& repeater_id() const;
  void set_repeater_id(const ::std::string& value);
  #if LANG_CXX11
  void set_repeater_id(::std::string&& value);
  #endif
  void set_repeater_id(const char* value);
  void set_repeater_id(const char* value, size_t size);
  ::std::string* mutable_repeater_id();
  ::std::string* release_repeater_id();
  void set_allocated_repeater_id(::std::string* repeater_id);

  // string protocol = 2;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string host = 4;
  void clear_host();
  static const int kHostFieldNumber = 4;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string config = 6;
  void clear_config();
  static const int kConfigFieldNumber = 6;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.auth.RepeaterInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo_ObjectRepeaterInfo > objects_;
  ::google::protobuf::internal::ArenaStringPtr repeater_id_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class RepeatersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.RepeatersResponse) */ {
 public:
  RepeatersResponse();
  virtual ~RepeatersResponse();

  RepeatersResponse(const RepeatersResponse& from);

  inline RepeatersResponse& operator=(const RepeatersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepeatersResponse(RepeatersResponse&& from) noexcept
    : RepeatersResponse() {
    *this = ::std::move(from);
  }

  inline RepeatersResponse& operator=(RepeatersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RepeatersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatersResponse* internal_default_instance() {
    return reinterpret_cast<const RepeatersResponse*>(
               &_RepeatersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RepeatersResponse* other);
  friend void swap(RepeatersResponse& a, RepeatersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepeatersResponse* New() const final {
    return CreateMaybeMessage<RepeatersResponse>(nullptr);
  }

  RepeatersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepeatersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepeatersResponse& from);
  void MergeFrom(const RepeatersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.auth.RepeaterInfo repeaters = 1;
  int repeaters_size() const;
  void clear_repeaters();
  static const int kRepeatersFieldNumber = 1;
  ::ric::auth::RepeaterInfo* mutable_repeaters(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo >*
      mutable_repeaters();
  const ::ric::auth::RepeaterInfo& repeaters(int index) const;
  ::ric::auth::RepeaterInfo* add_repeaters();
  const ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo >&
      repeaters() const;

  // @@protoc_insertion_point(class_scope:ric.auth.RepeatersResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo > repeaters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthObjectRequest_AuthObjectCert

// string cn = 1;
inline void AuthObjectRequest_AuthObjectCert::clear_cn() {
  cn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest_AuthObjectCert::cn() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
  return cn_.GetNoArena();
}
inline void AuthObjectRequest_AuthObjectCert::set_cn(const ::std::string& value) {
  
  cn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
#if LANG_CXX11
inline void AuthObjectRequest_AuthObjectCert::set_cn(::std::string&& value) {
  
  cn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
#endif
inline void AuthObjectRequest_AuthObjectCert::set_cn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
inline void AuthObjectRequest_AuthObjectCert::set_cn(const char* value, size_t size) {
  
  cn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::mutable_cn() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
  return cn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::release_cn() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
  
  return cn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest_AuthObjectCert::set_allocated_cn(::std::string* cn) {
  if (cn != nullptr) {
    
  } else {
    
  }
  cn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cn);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}

// string fingerprint = 2;
inline void AuthObjectRequest_AuthObjectCert::clear_fingerprint() {
  fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest_AuthObjectCert::fingerprint() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
  return fingerprint_.GetNoArena();
}
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(const ::std::string& value) {
  
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
#if LANG_CXX11
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(::std::string&& value) {
  
  fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
#endif
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(const char* value, size_t size) {
  
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::mutable_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
  return fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::release_fingerprint() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
  
  return fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest_AuthObjectCert::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}

// -------------------------------------------------------------------

// AuthObjectRequest

// string protocol = 1;
inline void AuthObjectRequest::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::protocol() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.protocol)
  return protocol_.GetNoArena();
}
inline void AuthObjectRequest::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.protocol)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.protocol)
}
#endif
inline void AuthObjectRequest::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.protocol)
}
inline void AuthObjectRequest::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.protocol)
}
inline ::std::string* AuthObjectRequest::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_protocol() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_protocol(::std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.protocol)
}

// string object = 2;
inline void AuthObjectRequest::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.object)
  return object_.GetNoArena();
}
inline void AuthObjectRequest::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.object)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_object(::std::string&& value) {
  
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.object)
}
#endif
inline void AuthObjectRequest::set_object(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.object)
}
inline void AuthObjectRequest::set_object(const char* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.object)
}
inline ::std::string* AuthObjectRequest::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_object(::std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.object)
}

// string client_id = 3;
inline void AuthObjectRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.client_id)
  return client_id_.GetNoArena();
}
inline void AuthObjectRequest::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.client_id)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.client_id)
}
#endif
inline void AuthObjectRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.client_id)
}
inline void AuthObjectRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.client_id)
}
inline ::std::string* AuthObjectRequest::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.client_id)
}

// string username = 4;
inline void AuthObjectRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::username() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.username)
  return username_.GetNoArena();
}
inline void AuthObjectRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.username)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.username)
}
#endif
inline void AuthObjectRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.username)
}
inline void AuthObjectRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.username)
}
inline ::std::string* AuthObjectRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_username() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.username)
}

// string password = 5;
inline void AuthObjectRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::password() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.password)
  return password_.GetNoArena();
}
inline void AuthObjectRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.password)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.password)
}
#endif
inline void AuthObjectRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.password)
}
inline void AuthObjectRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.password)
}
inline ::std::string* AuthObjectRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_password() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.password)
}

// .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
inline bool AuthObjectRequest::has_cert() const {
  return this != internal_default_instance() && cert_ != nullptr;
}
inline void AuthObjectRequest::clear_cert() {
  if (GetArenaNoVirtual() == nullptr && cert_ != nullptr) {
    delete cert_;
  }
  cert_ = nullptr;
}
inline const ::ric::auth::AuthObjectRequest_AuthObjectCert& AuthObjectRequest::cert() const {
  const ::ric::auth::AuthObjectRequest_AuthObjectCert* p = cert_;
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.cert)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::auth::AuthObjectRequest_AuthObjectCert*>(
      &::ric::auth::_AuthObjectRequest_AuthObjectCert_default_instance_);
}
inline ::ric::auth::AuthObjectRequest_AuthObjectCert* AuthObjectRequest::release_cert() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.cert)
  
  ::ric::auth::AuthObjectRequest_AuthObjectCert* temp = cert_;
  cert_ = nullptr;
  return temp;
}
inline ::ric::auth::AuthObjectRequest_AuthObjectCert* AuthObjectRequest::mutable_cert() {
  
  if (cert_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::auth::AuthObjectRequest_AuthObjectCert>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.cert)
  return cert_;
}
inline void AuthObjectRequest::set_allocated_cert(::ric::auth::AuthObjectRequest_AuthObjectCert* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cert_;
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    
  } else {
    
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.cert)
}

// string ipv4 = 7;
inline void AuthObjectRequest::clear_ipv4() {
  ipv4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::ipv4() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.ipv4)
  return ipv4_.GetNoArena();
}
inline void AuthObjectRequest::set_ipv4(const ::std::string& value) {
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.ipv4)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_ipv4(::std::string&& value) {
  
  ipv4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.ipv4)
}
#endif
inline void AuthObjectRequest::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.ipv4)
}
inline void AuthObjectRequest::set_ipv4(const char* value, size_t size) {
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.ipv4)
}
inline ::std::string* AuthObjectRequest::mutable_ipv4() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.ipv4)
  return ipv4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_ipv4() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.ipv4)
  
  return ipv4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_ipv4(::std::string* ipv4) {
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  ipv4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.ipv4)
}

// string ipv6 = 8;
inline void AuthObjectRequest::clear_ipv6() {
  ipv6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::ipv6() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.ipv6)
  return ipv6_.GetNoArena();
}
inline void AuthObjectRequest::set_ipv6(const ::std::string& value) {
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.ipv6)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_ipv6(::std::string&& value) {
  
  ipv6_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.ipv6)
}
#endif
inline void AuthObjectRequest::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.ipv6)
}
inline void AuthObjectRequest::set_ipv6(const char* value, size_t size) {
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.ipv6)
}
inline ::std::string* AuthObjectRequest::mutable_ipv6() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.ipv6)
  return ipv6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_ipv6() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.ipv6)
  
  return ipv6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_ipv6(::std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.ipv6)
}

// bool bot = 9;
inline void AuthObjectRequest::clear_bot() {
  bot_ = false;
}
inline bool AuthObjectRequest::bot() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.bot)
  return bot_;
}
inline void AuthObjectRequest::set_bot(bool value) {
  
  bot_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.bot)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuthObjectResponse

// string session = 1;
inline void AuthObjectResponse::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::session() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.session)
  return session_.GetNoArena();
}
inline void AuthObjectResponse::set_session(const ::std::string& value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.session)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_session(::std::string&& value) {
  
  session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.session)
}
#endif
inline void AuthObjectResponse::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.session)
}
inline void AuthObjectResponse::set_session(const char* value, size_t size) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.session)
}
inline ::std::string* AuthObjectResponse::mutable_session() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_session() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.session)
  
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_session(::std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.session)
}

// string model_id = 2;
inline void AuthObjectResponse::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::model_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.model_id)
  return model_id_.GetNoArena();
}
inline void AuthObjectResponse::set_model_id(const ::std::string& value) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.model_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_model_id(::std::string&& value) {
  
  model_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.model_id)
}
#endif
inline void AuthObjectResponse::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.model_id)
}
inline void AuthObjectResponse::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.model_id)
}
inline ::std::string* AuthObjectResponse::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.model_id)
  return model_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_model_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.model_id)
  
  return model_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_model_id(::std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.model_id)
}

// string object_id = 3;
inline void AuthObjectResponse::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::object_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.object_id)
  return object_id_.GetNoArena();
}
inline void AuthObjectResponse::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.object_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.object_id)
}
#endif
inline void AuthObjectResponse::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.object_id)
}
inline void AuthObjectResponse::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.object_id)
}
inline ::std::string* AuthObjectResponse::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.object_id)
}

// string group_id = 4;
inline void AuthObjectResponse::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::group_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.group_id)
  return group_id_.GetNoArena();
}
inline void AuthObjectResponse::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.group_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.group_id)
}
#endif
inline void AuthObjectResponse::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.group_id)
}
inline void AuthObjectResponse::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.group_id)
}
inline ::std::string* AuthObjectResponse::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.group_id)
}

// string group_key = 5;
inline void AuthObjectResponse::clear_group_key() {
  group_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::group_key() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.group_key)
  return group_key_.GetNoArena();
}
inline void AuthObjectResponse::set_group_key(const ::std::string& value) {
  
  group_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.group_key)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_group_key(::std::string&& value) {
  
  group_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.group_key)
}
#endif
inline void AuthObjectResponse::set_group_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.group_key)
}
inline void AuthObjectResponse::set_group_key(const char* value, size_t size) {
  
  group_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.group_key)
}
inline ::std::string* AuthObjectResponse::mutable_group_key() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.group_key)
  return group_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_group_key() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.group_key)
  
  return group_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_group_key(::std::string* group_key) {
  if (group_key != nullptr) {
    
  } else {
    
  }
  group_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_key);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.group_key)
}

// repeated .ric.auth.AuthObjectArgument arguments = 6;
inline int AuthObjectResponse::arguments_size() const {
  return arguments_.size();
}
inline void AuthObjectResponse::clear_arguments() {
  arguments_.Clear();
}
inline ::ric::auth::AuthObjectArgument* AuthObjectResponse::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >*
AuthObjectResponse::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.AuthObjectResponse.arguments)
  return &arguments_;
}
inline const ::ric::auth::AuthObjectArgument& AuthObjectResponse::arguments(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.arguments)
  return arguments_.Get(index);
}
inline ::ric::auth::AuthObjectArgument* AuthObjectResponse::add_arguments() {
  // @@protoc_insertion_point(field_add:ric.auth.AuthObjectResponse.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >&
AuthObjectResponse::arguments() const {
  // @@protoc_insertion_point(field_list:ric.auth.AuthObjectResponse.arguments)
  return arguments_;
}

// string config = 7;
inline void AuthObjectResponse::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::config() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.config)
  return config_.GetNoArena();
}
inline void AuthObjectResponse::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.config)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.config)
}
#endif
inline void AuthObjectResponse::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.config)
}
inline void AuthObjectResponse::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.config)
}
inline ::std::string* AuthObjectResponse::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_config() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_config(::std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.config)
}

// int64 issued_at = 8;
inline void AuthObjectResponse::clear_issued_at() {
  issued_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AuthObjectResponse::issued_at() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.issued_at)
  return issued_at_;
}
inline void AuthObjectResponse::set_issued_at(::google::protobuf::int64 value) {
  
  issued_at_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.issued_at)
}

// int64 expires_at = 9;
inline void AuthObjectResponse::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AuthObjectResponse::expires_at() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.expires_at)
  return expires_at_;
}
inline void AuthObjectResponse::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.expires_at)
}

// repeated string acl = 10;
inline int AuthObjectResponse::acl_size() const {
  return acl_.size();
}
inline void AuthObjectResponse::clear_acl() {
  acl_.Clear();
}
inline const ::std::string& AuthObjectResponse::acl(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.acl)
  return acl_.Get(index);
}
inline ::std::string* AuthObjectResponse::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.acl)
  return acl_.Mutable(index);
}
inline void AuthObjectResponse::set_acl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.acl)
  acl_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AuthObjectResponse::set_acl(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.acl)
  acl_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AuthObjectResponse::set_acl(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.acl)
}
inline void AuthObjectResponse::set_acl(int index, const char* value, size_t size) {
  acl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.acl)
}
inline ::std::string* AuthObjectResponse::add_acl() {
  // @@protoc_insertion_point(field_add_mutable:ric.auth.AuthObjectResponse.acl)
  return acl_.Add();
}
inline void AuthObjectResponse::add_acl(const ::std::string& value) {
  acl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.auth.AuthObjectResponse.acl)
}
#if LANG_CXX11
inline void AuthObjectResponse::add_acl(::std::string&& value) {
  acl_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.auth.AuthObjectResponse.acl)
}
#endif
inline void AuthObjectResponse::add_acl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.auth.AuthObjectResponse.acl)
}
inline void AuthObjectResponse::add_acl(const char* value, size_t size) {
  acl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.auth.AuthObjectResponse.acl)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AuthObjectResponse::acl() const {
  // @@protoc_insertion_point(field_list:ric.auth.AuthObjectResponse.acl)
  return acl_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AuthObjectResponse::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.AuthObjectResponse.acl)
  return &acl_;
}

// string license_id = 11;
inline void AuthObjectResponse::clear_license_id() {
  license_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::license_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.license_id)
  return license_id_.GetNoArena();
}
inline void AuthObjectResponse::set_license_id(const ::std::string& value) {
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.license_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_license_id(::std::string&& value) {
  
  license_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.license_id)
}
#endif
inline void AuthObjectResponse::set_license_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.license_id)
}
inline void AuthObjectResponse::set_license_id(const char* value, size_t size) {
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.license_id)
}
inline ::std::string* AuthObjectResponse::mutable_license_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.license_id)
  return license_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_license_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.license_id)
  
  return license_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_license_id(::std::string* license_id) {
  if (license_id != nullptr) {
    
  } else {
    
  }
  license_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.license_id)
}

// map<string, int64> license = 12;
inline int AuthObjectResponse::license_size() const {
  return license_.size();
}
inline void AuthObjectResponse::clear_license() {
  license_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
AuthObjectResponse::license() const {
  // @@protoc_insertion_point(field_map:ric.auth.AuthObjectResponse.license)
  return license_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
AuthObjectResponse::mutable_license() {
  // @@protoc_insertion_point(field_mutable_map:ric.auth.AuthObjectResponse.license)
  return license_.MutableMap();
}

// map<string, .ric.auth.StatRecord> stats = 13;
inline int AuthObjectResponse::stats_size() const {
  return stats_.size();
}
inline void AuthObjectResponse::clear_stats() {
  stats_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ric::auth::StatRecord >&
AuthObjectResponse::stats() const {
  // @@protoc_insertion_point(field_map:ric.auth.AuthObjectResponse.stats)
  return stats_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ric::auth::StatRecord >*
AuthObjectResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_map:ric.auth.AuthObjectResponse.stats)
  return stats_.MutableMap();
}

// bool full_packet_mode = 14;
inline void AuthObjectResponse::clear_full_packet_mode() {
  full_packet_mode_ = false;
}
inline bool AuthObjectResponse::full_packet_mode() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.full_packet_mode)
  return full_packet_mode_;
}
inline void AuthObjectResponse::set_full_packet_mode(bool value) {
  
  full_packet_mode_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.full_packet_mode)
}

// string org_id = 15;
inline void AuthObjectResponse::clear_org_id() {
  org_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::org_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.org_id)
  return org_id_.GetNoArena();
}
inline void AuthObjectResponse::set_org_id(const ::std::string& value) {
  
  org_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.org_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_org_id(::std::string&& value) {
  
  org_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.org_id)
}
#endif
inline void AuthObjectResponse::set_org_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  org_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.org_id)
}
inline void AuthObjectResponse::set_org_id(const char* value, size_t size) {
  
  org_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.org_id)
}
inline ::std::string* AuthObjectResponse::mutable_org_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.org_id)
  return org_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_org_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.org_id)
  
  return org_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_org_id(::std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), org_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.org_id)
}

// -------------------------------------------------------------------

// AuthObjectArgument

// string id = 1;
inline void AuthObjectArgument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.id)
  return id_.GetNoArena();
}
inline void AuthObjectArgument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.id)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.id)
}
#endif
inline void AuthObjectArgument::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.id)
}
inline void AuthObjectArgument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.id)
}
inline ::std::string* AuthObjectArgument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.id)
}

// string data_type = 2;
inline void AuthObjectArgument::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::data_type() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.data_type)
  return data_type_.GetNoArena();
}
inline void AuthObjectArgument::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.data_type)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.data_type)
}
#endif
inline void AuthObjectArgument::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.data_type)
}
inline void AuthObjectArgument::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.data_type)
}
inline ::std::string* AuthObjectArgument::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_data_type() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_data_type(::std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.data_type)
}

// string reference = 3;
inline void AuthObjectArgument::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::reference() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.reference)
  return reference_.GetNoArena();
}
inline void AuthObjectArgument::set_reference(const ::std::string& value) {
  
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.reference)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_reference(::std::string&& value) {
  
  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.reference)
}
#endif
inline void AuthObjectArgument::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.reference)
}
inline void AuthObjectArgument::set_reference(const char* value, size_t size) {
  
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.reference)
}
inline ::std::string* AuthObjectArgument::mutable_reference() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_reference() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.reference)
  
  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.reference)
}

// string parser = 4;
inline void AuthObjectArgument::clear_parser() {
  parser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::parser() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.parser)
  return parser_.GetNoArena();
}
inline void AuthObjectArgument::set_parser(const ::std::string& value) {
  
  parser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.parser)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_parser(::std::string&& value) {
  
  parser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.parser)
}
#endif
inline void AuthObjectArgument::set_parser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.parser)
}
inline void AuthObjectArgument::set_parser(const char* value, size_t size) {
  
  parser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.parser)
}
inline ::std::string* AuthObjectArgument::mutable_parser() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.parser)
  return parser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_parser() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.parser)
  
  return parser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_parser(::std::string* parser) {
  if (parser != nullptr) {
    
  } else {
    
  }
  parser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parser);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.parser)
}

// -------------------------------------------------------------------

// StatRecord

// int64 value = 1;
inline void StatRecord::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StatRecord::value() const {
  // @@protoc_insertion_point(field_get:ric.auth.StatRecord.value)
  return value_;
}
inline void StatRecord::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.StatRecord.value)
}

// int64 left = 2;
inline void StatRecord::clear_left() {
  left_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StatRecord::left() const {
  // @@protoc_insertion_point(field_get:ric.auth.StatRecord.left)
  return left_;
}
inline void StatRecord::set_left(::google::protobuf::int64 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.StatRecord.left)
}

// int64 from = 3;
inline void StatRecord::clear_from() {
  from_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StatRecord::from() const {
  // @@protoc_insertion_point(field_get:ric.auth.StatRecord.from)
  return from_;
}
inline void StatRecord::set_from(::google::protobuf::int64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.StatRecord.from)
}

// int64 to = 4;
inline void StatRecord::clear_to() {
  to_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StatRecord::to() const {
  // @@protoc_insertion_point(field_get:ric.auth.StatRecord.to)
  return to_;
}
inline void StatRecord::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.StatRecord.to)
}

// -------------------------------------------------------------------

// IssueCertRequest

// string object_id = 1;
inline void IssueCertRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueCertRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertRequest.object_id)
  return object_id_.GetNoArena();
}
inline void IssueCertRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertRequest.object_id)
}
#if LANG_CXX11
inline void IssueCertRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.IssueCertRequest.object_id)
}
#endif
inline void IssueCertRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.IssueCertRequest.object_id)
}
inline void IssueCertRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.IssueCertRequest.object_id)
}
inline ::std::string* IssueCertRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.IssueCertRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueCertRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.auth.IssueCertRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueCertRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.IssueCertRequest.object_id)
}

// string ttl = 2;
inline void IssueCertRequest::clear_ttl() {
  ttl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueCertRequest::ttl() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertRequest.ttl)
  return ttl_.GetNoArena();
}
inline void IssueCertRequest::set_ttl(const ::std::string& value) {
  
  ttl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertRequest.ttl)
}
#if LANG_CXX11
inline void IssueCertRequest::set_ttl(::std::string&& value) {
  
  ttl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.IssueCertRequest.ttl)
}
#endif
inline void IssueCertRequest::set_ttl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ttl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.IssueCertRequest.ttl)
}
inline void IssueCertRequest::set_ttl(const char* value, size_t size) {
  
  ttl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.IssueCertRequest.ttl)
}
inline ::std::string* IssueCertRequest::mutable_ttl() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.IssueCertRequest.ttl)
  return ttl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueCertRequest::release_ttl() {
  // @@protoc_insertion_point(field_release:ric.auth.IssueCertRequest.ttl)
  
  return ttl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueCertRequest::set_allocated_ttl(::std::string* ttl) {
  if (ttl != nullptr) {
    
  } else {
    
  }
  ttl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ttl);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.IssueCertRequest.ttl)
}

// -------------------------------------------------------------------

// IssueCertResponse

// string certificate = 1;
inline void IssueCertResponse::clear_certificate() {
  certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueCertResponse::certificate() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertResponse.certificate)
  return certificate_.GetNoArena();
}
inline void IssueCertResponse::set_certificate(const ::std::string& value) {
  
  certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertResponse.certificate)
}
#if LANG_CXX11
inline void IssueCertResponse::set_certificate(::std::string&& value) {
  
  certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.IssueCertResponse.certificate)
}
#endif
inline void IssueCertResponse::set_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.IssueCertResponse.certificate)
}
inline void IssueCertResponse::set_certificate(const char* value, size_t size) {
  
  certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.IssueCertResponse.certificate)
}
inline ::std::string* IssueCertResponse::mutable_certificate() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.IssueCertResponse.certificate)
  return certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueCertResponse::release_certificate() {
  // @@protoc_insertion_point(field_release:ric.auth.IssueCertResponse.certificate)
  
  return certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueCertResponse::set_allocated_certificate(::std::string* certificate) {
  if (certificate != nullptr) {
    
  } else {
    
  }
  certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificate);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.IssueCertResponse.certificate)
}

// string private_key = 2;
inline void IssueCertResponse::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueCertResponse::private_key() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertResponse.private_key)
  return private_key_.GetNoArena();
}
inline void IssueCertResponse::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertResponse.private_key)
}
#if LANG_CXX11
inline void IssueCertResponse::set_private_key(::std::string&& value) {
  
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.IssueCertResponse.private_key)
}
#endif
inline void IssueCertResponse::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.IssueCertResponse.private_key)
}
inline void IssueCertResponse::set_private_key(const char* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.IssueCertResponse.private_key)
}
inline ::std::string* IssueCertResponse::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.IssueCertResponse.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueCertResponse::release_private_key() {
  // @@protoc_insertion_point(field_release:ric.auth.IssueCertResponse.private_key)
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueCertResponse::set_allocated_private_key(::std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.IssueCertResponse.private_key)
}

// string serial = 3;
inline void IssueCertResponse::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueCertResponse::serial() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertResponse.serial)
  return serial_.GetNoArena();
}
inline void IssueCertResponse::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertResponse.serial)
}
#if LANG_CXX11
inline void IssueCertResponse::set_serial(::std::string&& value) {
  
  serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.IssueCertResponse.serial)
}
#endif
inline void IssueCertResponse::set_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.IssueCertResponse.serial)
}
inline void IssueCertResponse::set_serial(const char* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.IssueCertResponse.serial)
}
inline ::std::string* IssueCertResponse::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.IssueCertResponse.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueCertResponse::release_serial() {
  // @@protoc_insertion_point(field_release:ric.auth.IssueCertResponse.serial)
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueCertResponse::set_allocated_serial(::std::string* serial) {
  if (serial != nullptr) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.IssueCertResponse.serial)
}

// int64 issued_at = 4;
inline void IssueCertResponse::clear_issued_at() {
  issued_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IssueCertResponse::issued_at() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertResponse.issued_at)
  return issued_at_;
}
inline void IssueCertResponse::set_issued_at(::google::protobuf::int64 value) {
  
  issued_at_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertResponse.issued_at)
}

// int64 expires_at = 5;
inline void IssueCertResponse::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IssueCertResponse::expires_at() const {
  // @@protoc_insertion_point(field_get:ric.auth.IssueCertResponse.expires_at)
  return expires_at_;
}
inline void IssueCertResponse::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.IssueCertResponse.expires_at)
}

// -------------------------------------------------------------------

// ModelInfoRequest

// string model_id = 1;
inline void ModelInfoRequest::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelInfoRequest::model_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.ModelInfoRequest.model_id)
  return model_id_.GetNoArena();
}
inline void ModelInfoRequest::set_model_id(const ::std::string& value) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.ModelInfoRequest.model_id)
}
#if LANG_CXX11
inline void ModelInfoRequest::set_model_id(::std::string&& value) {
  
  model_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.ModelInfoRequest.model_id)
}
#endif
inline void ModelInfoRequest::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.ModelInfoRequest.model_id)
}
inline void ModelInfoRequest::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.ModelInfoRequest.model_id)
}
inline ::std::string* ModelInfoRequest::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.ModelInfoRequest.model_id)
  return model_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelInfoRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:ric.auth.ModelInfoRequest.model_id)
  
  return model_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelInfoRequest::set_allocated_model_id(::std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.ModelInfoRequest.model_id)
}

// -------------------------------------------------------------------

// ModelInfoResponse

// string model_id = 1;
inline void ModelInfoResponse::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelInfoResponse::model_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.ModelInfoResponse.model_id)
  return model_id_.GetNoArena();
}
inline void ModelInfoResponse::set_model_id(const ::std::string& value) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.ModelInfoResponse.model_id)
}
#if LANG_CXX11
inline void ModelInfoResponse::set_model_id(::std::string&& value) {
  
  model_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.ModelInfoResponse.model_id)
}
#endif
inline void ModelInfoResponse::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.ModelInfoResponse.model_id)
}
inline void ModelInfoResponse::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.ModelInfoResponse.model_id)
}
inline ::std::string* ModelInfoResponse::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.ModelInfoResponse.model_id)
  return model_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelInfoResponse::release_model_id() {
  // @@protoc_insertion_point(field_release:ric.auth.ModelInfoResponse.model_id)
  
  return model_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelInfoResponse::set_allocated_model_id(::std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.ModelInfoResponse.model_id)
}

// repeated .ric.auth.AuthObjectArgument arguments = 2;
inline int ModelInfoResponse::arguments_size() const {
  return arguments_.size();
}
inline void ModelInfoResponse::clear_arguments() {
  arguments_.Clear();
}
inline ::ric::auth::AuthObjectArgument* ModelInfoResponse::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.ModelInfoResponse.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >*
ModelInfoResponse::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.ModelInfoResponse.arguments)
  return &arguments_;
}
inline const ::ric::auth::AuthObjectArgument& ModelInfoResponse::arguments(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.ModelInfoResponse.arguments)
  return arguments_.Get(index);
}
inline ::ric::auth::AuthObjectArgument* ModelInfoResponse::add_arguments() {
  // @@protoc_insertion_point(field_add:ric.auth.ModelInfoResponse.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >&
ModelInfoResponse::arguments() const {
  // @@protoc_insertion_point(field_list:ric.auth.ModelInfoResponse.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// ObjectGateRequest

// string object_id = 1;
inline void ObjectGateRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectGateRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.ObjectGateRequest.object_id)
  return object_id_.GetNoArena();
}
inline void ObjectGateRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.ObjectGateRequest.object_id)
}
#if LANG_CXX11
inline void ObjectGateRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.ObjectGateRequest.object_id)
}
#endif
inline void ObjectGateRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.ObjectGateRequest.object_id)
}
inline void ObjectGateRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.ObjectGateRequest.object_id)
}
inline ::std::string* ObjectGateRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.ObjectGateRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectGateRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.auth.ObjectGateRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectGateRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.ObjectGateRequest.object_id)
}

// -------------------------------------------------------------------

// ObjectGateResponse

// -------------------------------------------------------------------

// QueryRepeatersRequest

// bool with_objects = 1;
inline void QueryRepeatersRequest::clear_with_objects() {
  with_objects_ = false;
}
inline bool QueryRepeatersRequest::with_objects() const {
  // @@protoc_insertion_point(field_get:ric.auth.QueryRepeatersRequest.with_objects)
  return with_objects_;
}
inline void QueryRepeatersRequest::set_with_objects(bool value) {
  
  with_objects_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.with_objects)
}

// repeated string protocols = 2;
inline int QueryRepeatersRequest::protocols_size() const {
  return protocols_.size();
}
inline void QueryRepeatersRequest::clear_protocols() {
  protocols_.Clear();
}
inline const ::std::string& QueryRepeatersRequest::protocols(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.QueryRepeatersRequest.protocols)
  return protocols_.Get(index);
}
inline ::std::string* QueryRepeatersRequest::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.QueryRepeatersRequest.protocols)
  return protocols_.Mutable(index);
}
inline void QueryRepeatersRequest::set_protocols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.protocols)
  protocols_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryRepeatersRequest::set_protocols(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.protocols)
  protocols_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryRepeatersRequest::set_protocols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.auth.QueryRepeatersRequest.protocols)
}
inline void QueryRepeatersRequest::set_protocols(int index, const char* value, size_t size) {
  protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.auth.QueryRepeatersRequest.protocols)
}
inline ::std::string* QueryRepeatersRequest::add_protocols() {
  // @@protoc_insertion_point(field_add_mutable:ric.auth.QueryRepeatersRequest.protocols)
  return protocols_.Add();
}
inline void QueryRepeatersRequest::add_protocols(const ::std::string& value) {
  protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.auth.QueryRepeatersRequest.protocols)
}
#if LANG_CXX11
inline void QueryRepeatersRequest::add_protocols(::std::string&& value) {
  protocols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.auth.QueryRepeatersRequest.protocols)
}
#endif
inline void QueryRepeatersRequest::add_protocols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.auth.QueryRepeatersRequest.protocols)
}
inline void QueryRepeatersRequest::add_protocols(const char* value, size_t size) {
  protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.auth.QueryRepeatersRequest.protocols)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
QueryRepeatersRequest::protocols() const {
  // @@protoc_insertion_point(field_list:ric.auth.QueryRepeatersRequest.protocols)
  return protocols_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
QueryRepeatersRequest::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.QueryRepeatersRequest.protocols)
  return &protocols_;
}

// repeated string repeater_ids = 3;
inline int QueryRepeatersRequest::repeater_ids_size() const {
  return repeater_ids_.size();
}
inline void QueryRepeatersRequest::clear_repeater_ids() {
  repeater_ids_.Clear();
}
inline const ::std::string& QueryRepeatersRequest::repeater_ids(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.QueryRepeatersRequest.repeater_ids)
  return repeater_ids_.Get(index);
}
inline ::std::string* QueryRepeatersRequest::mutable_repeater_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.QueryRepeatersRequest.repeater_ids)
  return repeater_ids_.Mutable(index);
}
inline void QueryRepeatersRequest::set_repeater_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.repeater_ids)
  repeater_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryRepeatersRequest::set_repeater_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.repeater_ids)
  repeater_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryRepeatersRequest::set_repeater_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeater_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.auth.QueryRepeatersRequest.repeater_ids)
}
inline void QueryRepeatersRequest::set_repeater_ids(int index, const char* value, size_t size) {
  repeater_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.auth.QueryRepeatersRequest.repeater_ids)
}
inline ::std::string* QueryRepeatersRequest::add_repeater_ids() {
  // @@protoc_insertion_point(field_add_mutable:ric.auth.QueryRepeatersRequest.repeater_ids)
  return repeater_ids_.Add();
}
inline void QueryRepeatersRequest::add_repeater_ids(const ::std::string& value) {
  repeater_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.auth.QueryRepeatersRequest.repeater_ids)
}
#if LANG_CXX11
inline void QueryRepeatersRequest::add_repeater_ids(::std::string&& value) {
  repeater_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.auth.QueryRepeatersRequest.repeater_ids)
}
#endif
inline void QueryRepeatersRequest::add_repeater_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeater_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.auth.QueryRepeatersRequest.repeater_ids)
}
inline void QueryRepeatersRequest::add_repeater_ids(const char* value, size_t size) {
  repeater_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.auth.QueryRepeatersRequest.repeater_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
QueryRepeatersRequest::repeater_ids() const {
  // @@protoc_insertion_point(field_list:ric.auth.QueryRepeatersRequest.repeater_ids)
  return repeater_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
QueryRepeatersRequest::mutable_repeater_ids() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.QueryRepeatersRequest.repeater_ids)
  return &repeater_ids_;
}

// repeated string object_ids = 4;
inline int QueryRepeatersRequest::object_ids_size() const {
  return object_ids_.size();
}
inline void QueryRepeatersRequest::clear_object_ids() {
  object_ids_.Clear();
}
inline const ::std::string& QueryRepeatersRequest::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.QueryRepeatersRequest.object_ids)
  return object_ids_.Get(index);
}
inline ::std::string* QueryRepeatersRequest::mutable_object_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.QueryRepeatersRequest.object_ids)
  return object_ids_.Mutable(index);
}
inline void QueryRepeatersRequest::set_object_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.object_ids)
  object_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryRepeatersRequest::set_object_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.auth.QueryRepeatersRequest.object_ids)
  object_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryRepeatersRequest::set_object_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  object_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.auth.QueryRepeatersRequest.object_ids)
}
inline void QueryRepeatersRequest::set_object_ids(int index, const char* value, size_t size) {
  object_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.auth.QueryRepeatersRequest.object_ids)
}
inline ::std::string* QueryRepeatersRequest::add_object_ids() {
  // @@protoc_insertion_point(field_add_mutable:ric.auth.QueryRepeatersRequest.object_ids)
  return object_ids_.Add();
}
inline void QueryRepeatersRequest::add_object_ids(const ::std::string& value) {
  object_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.auth.QueryRepeatersRequest.object_ids)
}
#if LANG_CXX11
inline void QueryRepeatersRequest::add_object_ids(::std::string&& value) {
  object_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.auth.QueryRepeatersRequest.object_ids)
}
#endif
inline void QueryRepeatersRequest::add_object_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  object_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.auth.QueryRepeatersRequest.object_ids)
}
inline void QueryRepeatersRequest::add_object_ids(const char* value, size_t size) {
  object_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.auth.QueryRepeatersRequest.object_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
QueryRepeatersRequest::object_ids() const {
  // @@protoc_insertion_point(field_list:ric.auth.QueryRepeatersRequest.object_ids)
  return object_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
QueryRepeatersRequest::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.QueryRepeatersRequest.object_ids)
  return &object_ids_;
}

// -------------------------------------------------------------------

// RepeaterInfo_ObjectRepeaterInfo

// string object_id = 1;
inline void RepeaterInfo_ObjectRepeaterInfo::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo_ObjectRepeaterInfo::object_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
  return object_id_.GetNoArena();
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
}
#if LANG_CXX11
inline void RepeaterInfo_ObjectRepeaterInfo::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
}
#endif
inline void RepeaterInfo_ObjectRepeaterInfo::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
}
inline ::std::string* RepeaterInfo_ObjectRepeaterInfo::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo_ObjectRepeaterInfo::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.ObjectRepeaterInfo.object_id)
}

// string repeater_config = 2;
inline void RepeaterInfo_ObjectRepeaterInfo::clear_repeater_config() {
  repeater_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo_ObjectRepeaterInfo::repeater_config() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
  return repeater_config_.GetNoArena();
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_repeater_config(const ::std::string& value) {
  
  repeater_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
}
#if LANG_CXX11
inline void RepeaterInfo_ObjectRepeaterInfo::set_repeater_config(::std::string&& value) {
  
  repeater_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
}
#endif
inline void RepeaterInfo_ObjectRepeaterInfo::set_repeater_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repeater_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_repeater_config(const char* value, size_t size) {
  
  repeater_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
}
inline ::std::string* RepeaterInfo_ObjectRepeaterInfo::mutable_repeater_config() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
  return repeater_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo_ObjectRepeaterInfo::release_repeater_config() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
  
  return repeater_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_allocated_repeater_config(::std::string* repeater_config) {
  if (repeater_config != nullptr) {
    
  } else {
    
  }
  repeater_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repeater_config);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.ObjectRepeaterInfo.repeater_config)
}

// string status = 3;
inline void RepeaterInfo_ObjectRepeaterInfo::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo_ObjectRepeaterInfo::status() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
  return status_.GetNoArena();
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
}
#if LANG_CXX11
inline void RepeaterInfo_ObjectRepeaterInfo::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
}
#endif
inline void RepeaterInfo_ObjectRepeaterInfo::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
}
inline ::std::string* RepeaterInfo_ObjectRepeaterInfo::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo_ObjectRepeaterInfo::release_status() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo_ObjectRepeaterInfo::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.ObjectRepeaterInfo.status)
}

// -------------------------------------------------------------------

// RepeaterInfo

// string repeater_id = 1;
inline void RepeaterInfo::clear_repeater_id() {
  repeater_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo::repeater_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.repeater_id)
  return repeater_id_.GetNoArena();
}
inline void RepeaterInfo::set_repeater_id(const ::std::string& value) {
  
  repeater_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.repeater_id)
}
#if LANG_CXX11
inline void RepeaterInfo::set_repeater_id(::std::string&& value) {
  
  repeater_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.repeater_id)
}
#endif
inline void RepeaterInfo::set_repeater_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repeater_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.repeater_id)
}
inline void RepeaterInfo::set_repeater_id(const char* value, size_t size) {
  
  repeater_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.repeater_id)
}
inline ::std::string* RepeaterInfo::mutable_repeater_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.repeater_id)
  return repeater_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo::release_repeater_id() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.repeater_id)
  
  return repeater_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo::set_allocated_repeater_id(::std::string* repeater_id) {
  if (repeater_id != nullptr) {
    
  } else {
    
  }
  repeater_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repeater_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.repeater_id)
}

// string protocol = 2;
inline void RepeaterInfo::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo::protocol() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.protocol)
  return protocol_.GetNoArena();
}
inline void RepeaterInfo::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.protocol)
}
#if LANG_CXX11
inline void RepeaterInfo::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.protocol)
}
#endif
inline void RepeaterInfo::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.protocol)
}
inline void RepeaterInfo::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.protocol)
}
inline ::std::string* RepeaterInfo::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo::release_protocol() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo::set_allocated_protocol(::std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.protocol)
}

// string name = 3;
inline void RepeaterInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo::name() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.name)
  return name_.GetNoArena();
}
inline void RepeaterInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.name)
}
#if LANG_CXX11
inline void RepeaterInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.name)
}
#endif
inline void RepeaterInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.name)
}
inline void RepeaterInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.name)
}
inline ::std::string* RepeaterInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo::release_name() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.name)
}

// string host = 4;
inline void RepeaterInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo::host() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.host)
  return host_.GetNoArena();
}
inline void RepeaterInfo::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.host)
}
#if LANG_CXX11
inline void RepeaterInfo::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.host)
}
#endif
inline void RepeaterInfo::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.host)
}
inline void RepeaterInfo::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.host)
}
inline ::std::string* RepeaterInfo::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo::release_host() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.host)
}

// int32 port = 5;
inline void RepeaterInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 RepeaterInfo::port() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.port)
  return port_;
}
inline void RepeaterInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.port)
}

// string config = 6;
inline void RepeaterInfo::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepeaterInfo::config() const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.config)
  return config_.GetNoArena();
}
inline void RepeaterInfo::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.RepeaterInfo.config)
}
#if LANG_CXX11
inline void RepeaterInfo::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.RepeaterInfo.config)
}
#endif
inline void RepeaterInfo::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.RepeaterInfo.config)
}
inline void RepeaterInfo::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.RepeaterInfo.config)
}
inline ::std::string* RepeaterInfo::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepeaterInfo::release_config() {
  // @@protoc_insertion_point(field_release:ric.auth.RepeaterInfo.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepeaterInfo::set_allocated_config(::std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.RepeaterInfo.config)
}

// repeated .ric.auth.RepeaterInfo.ObjectRepeaterInfo objects = 10;
inline int RepeaterInfo::objects_size() const {
  return objects_.size();
}
inline void RepeaterInfo::clear_objects() {
  objects_.Clear();
}
inline ::ric::auth::RepeaterInfo_ObjectRepeaterInfo* RepeaterInfo::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeaterInfo.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo_ObjectRepeaterInfo >*
RepeaterInfo::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.RepeaterInfo.objects)
  return &objects_;
}
inline const ::ric::auth::RepeaterInfo_ObjectRepeaterInfo& RepeaterInfo::objects(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeaterInfo.objects)
  return objects_.Get(index);
}
inline ::ric::auth::RepeaterInfo_ObjectRepeaterInfo* RepeaterInfo::add_objects() {
  // @@protoc_insertion_point(field_add:ric.auth.RepeaterInfo.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo_ObjectRepeaterInfo >&
RepeaterInfo::objects() const {
  // @@protoc_insertion_point(field_list:ric.auth.RepeaterInfo.objects)
  return objects_;
}

// -------------------------------------------------------------------

// RepeatersResponse

// repeated .ric.auth.RepeaterInfo repeaters = 1;
inline int RepeatersResponse::repeaters_size() const {
  return repeaters_.size();
}
inline void RepeatersResponse::clear_repeaters() {
  repeaters_.Clear();
}
inline ::ric::auth::RepeaterInfo* RepeatersResponse::mutable_repeaters(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.RepeatersResponse.repeaters)
  return repeaters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo >*
RepeatersResponse::mutable_repeaters() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.RepeatersResponse.repeaters)
  return &repeaters_;
}
inline const ::ric::auth::RepeaterInfo& RepeatersResponse::repeaters(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.RepeatersResponse.repeaters)
  return repeaters_.Get(index);
}
inline ::ric::auth::RepeaterInfo* RepeatersResponse::add_repeaters() {
  // @@protoc_insertion_point(field_add:ric.auth.RepeatersResponse.repeaters)
  return repeaters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::auth::RepeaterInfo >&
RepeatersResponse::repeaters() const {
  // @@protoc_insertion_point(field_list:ric.auth.RepeatersResponse.repeaters)
  return repeaters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dauth_2fricauth_2eproto
