// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-auth/ricauth.proto

#ifndef PROTOBUF_INCLUDED_ric_2dauth_2fricauth_2eproto
#define PROTOBUF_INCLUDED_ric_2dauth_2fricauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dauth_2fricauth_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dauth_2fricauth_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dauth_2fricauth_2eproto();
namespace ric {
namespace auth {
class AuthObjectArgument;
class AuthObjectArgumentDefaultTypeInternal;
extern AuthObjectArgumentDefaultTypeInternal _AuthObjectArgument_default_instance_;
class AuthObjectRequest;
class AuthObjectRequestDefaultTypeInternal;
extern AuthObjectRequestDefaultTypeInternal _AuthObjectRequest_default_instance_;
class AuthObjectRequest_AuthObjectCert;
class AuthObjectRequest_AuthObjectCertDefaultTypeInternal;
extern AuthObjectRequest_AuthObjectCertDefaultTypeInternal _AuthObjectRequest_AuthObjectCert_default_instance_;
class AuthObjectResponse;
class AuthObjectResponseDefaultTypeInternal;
extern AuthObjectResponseDefaultTypeInternal _AuthObjectResponse_default_instance_;
class SendOfflineRequest;
class SendOfflineRequestDefaultTypeInternal;
extern SendOfflineRequestDefaultTypeInternal _SendOfflineRequest_default_instance_;
class SendOfflineResponse;
class SendOfflineResponseDefaultTypeInternal;
extern SendOfflineResponseDefaultTypeInternal _SendOfflineResponse_default_instance_;
}  // namespace auth
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::auth::AuthObjectArgument* Arena::CreateMaybeMessage<::ric::auth::AuthObjectArgument>(Arena*);
template<> ::ric::auth::AuthObjectRequest* Arena::CreateMaybeMessage<::ric::auth::AuthObjectRequest>(Arena*);
template<> ::ric::auth::AuthObjectRequest_AuthObjectCert* Arena::CreateMaybeMessage<::ric::auth::AuthObjectRequest_AuthObjectCert>(Arena*);
template<> ::ric::auth::AuthObjectResponse* Arena::CreateMaybeMessage<::ric::auth::AuthObjectResponse>(Arena*);
template<> ::ric::auth::SendOfflineRequest* Arena::CreateMaybeMessage<::ric::auth::SendOfflineRequest>(Arena*);
template<> ::ric::auth::SendOfflineResponse* Arena::CreateMaybeMessage<::ric::auth::SendOfflineResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace auth {

// ===================================================================

class AuthObjectRequest_AuthObjectCert final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectRequest.AuthObjectCert) */ {
 public:
  AuthObjectRequest_AuthObjectCert();
  virtual ~AuthObjectRequest_AuthObjectCert();

  AuthObjectRequest_AuthObjectCert(const AuthObjectRequest_AuthObjectCert& from);

  inline AuthObjectRequest_AuthObjectCert& operator=(const AuthObjectRequest_AuthObjectCert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectRequest_AuthObjectCert(AuthObjectRequest_AuthObjectCert&& from) noexcept
    : AuthObjectRequest_AuthObjectCert() {
    *this = ::std::move(from);
  }

  inline AuthObjectRequest_AuthObjectCert& operator=(AuthObjectRequest_AuthObjectCert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectRequest_AuthObjectCert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectRequest_AuthObjectCert* internal_default_instance() {
    return reinterpret_cast<const AuthObjectRequest_AuthObjectCert*>(
               &_AuthObjectRequest_AuthObjectCert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuthObjectRequest_AuthObjectCert* other);
  friend void swap(AuthObjectRequest_AuthObjectCert& a, AuthObjectRequest_AuthObjectCert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectRequest_AuthObjectCert* New() const final {
    return CreateMaybeMessage<AuthObjectRequest_AuthObjectCert>(nullptr);
  }

  AuthObjectRequest_AuthObjectCert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectRequest_AuthObjectCert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectRequest_AuthObjectCert& from);
  void MergeFrom(const AuthObjectRequest_AuthObjectCert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectRequest_AuthObjectCert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cn = 1;
  void clear_cn();
  static const int kCnFieldNumber = 1;
  const ::std::string& cn() const;
  void set_cn(const ::std::string& value);
  #if LANG_CXX11
  void set_cn(::std::string&& value);
  #endif
  void set_cn(const char* value);
  void set_cn(const char* value, size_t size);
  ::std::string* mutable_cn();
  ::std::string* release_cn();
  void set_allocated_cn(::std::string* cn);

  // string fingerprint = 2;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 2;
  const ::std::string& fingerprint() const;
  void set_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_fingerprint(::std::string&& value);
  #endif
  void set_fingerprint(const char* value);
  void set_fingerprint(const char* value, size_t size);
  ::std::string* mutable_fingerprint();
  ::std::string* release_fingerprint();
  void set_allocated_fingerprint(::std::string* fingerprint);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectRequest.AuthObjectCert)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cn_;
  ::google::protobuf::internal::ArenaStringPtr fingerprint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class AuthObjectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectRequest) */ {
 public:
  AuthObjectRequest();
  virtual ~AuthObjectRequest();

  AuthObjectRequest(const AuthObjectRequest& from);

  inline AuthObjectRequest& operator=(const AuthObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectRequest(AuthObjectRequest&& from) noexcept
    : AuthObjectRequest() {
    *this = ::std::move(from);
  }

  inline AuthObjectRequest& operator=(AuthObjectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectRequest* internal_default_instance() {
    return reinterpret_cast<const AuthObjectRequest*>(
               &_AuthObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthObjectRequest* other);
  friend void swap(AuthObjectRequest& a, AuthObjectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectRequest* New() const final {
    return CreateMaybeMessage<AuthObjectRequest>(nullptr);
  }

  AuthObjectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectRequest& from);
  void MergeFrom(const AuthObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthObjectRequest_AuthObjectCert AuthObjectCert;

  // accessors -------------------------------------------------------

  // string protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // string object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  #if LANG_CXX11
  void set_object(::std::string&& value);
  #endif
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string username = 4;
  void clear_username();
  static const int kUsernameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string ipv4 = 7;
  void clear_ipv4();
  static const int kIpv4FieldNumber = 7;
  const ::std::string& ipv4() const;
  void set_ipv4(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv4(::std::string&& value);
  #endif
  void set_ipv4(const char* value);
  void set_ipv4(const char* value, size_t size);
  ::std::string* mutable_ipv4();
  ::std::string* release_ipv4();
  void set_allocated_ipv4(::std::string* ipv4);

  // string ipv6 = 8;
  void clear_ipv6();
  static const int kIpv6FieldNumber = 8;
  const ::std::string& ipv6() const;
  void set_ipv6(const ::std::string& value);
  #if LANG_CXX11
  void set_ipv6(::std::string&& value);
  #endif
  void set_ipv6(const char* value);
  void set_ipv6(const char* value, size_t size);
  ::std::string* mutable_ipv6();
  ::std::string* release_ipv6();
  void set_allocated_ipv6(::std::string* ipv6);

  // .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 6;
  const ::ric::auth::AuthObjectRequest_AuthObjectCert& cert() const;
  ::ric::auth::AuthObjectRequest_AuthObjectCert* release_cert();
  ::ric::auth::AuthObjectRequest_AuthObjectCert* mutable_cert();
  void set_allocated_cert(::ric::auth::AuthObjectRequest_AuthObjectCert* cert);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr ipv4_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_;
  ::ric::auth::AuthObjectRequest_AuthObjectCert* cert_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class AuthObjectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectResponse) */ {
 public:
  AuthObjectResponse();
  virtual ~AuthObjectResponse();

  AuthObjectResponse(const AuthObjectResponse& from);

  inline AuthObjectResponse& operator=(const AuthObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectResponse(AuthObjectResponse&& from) noexcept
    : AuthObjectResponse() {
    *this = ::std::move(from);
  }

  inline AuthObjectResponse& operator=(AuthObjectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectResponse* internal_default_instance() {
    return reinterpret_cast<const AuthObjectResponse*>(
               &_AuthObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AuthObjectResponse* other);
  friend void swap(AuthObjectResponse& a, AuthObjectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectResponse* New() const final {
    return CreateMaybeMessage<AuthObjectResponse>(nullptr);
  }

  AuthObjectResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectResponse& from);
  void MergeFrom(const AuthObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.auth.AuthObjectArgument arguments = 6;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 6;
  ::ric::auth::AuthObjectArgument* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >*
      mutable_arguments();
  const ::ric::auth::AuthObjectArgument& arguments(int index) const;
  ::ric::auth::AuthObjectArgument* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >&
      arguments() const;

  // string session = 1;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  const ::std::string& session() const;
  void set_session(const ::std::string& value);
  #if LANG_CXX11
  void set_session(::std::string&& value);
  #endif
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  ::std::string* mutable_session();
  ::std::string* release_session();
  void set_allocated_session(::std::string* session);

  // string model_id = 2;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  const ::std::string& model_id() const;
  void set_model_id(const ::std::string& value);
  #if LANG_CXX11
  void set_model_id(::std::string&& value);
  #endif
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  ::std::string* mutable_model_id();
  ::std::string* release_model_id();
  void set_allocated_model_id(::std::string* model_id);

  // string object_id = 3;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string group_id = 4;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string group_key = 5;
  void clear_group_key();
  static const int kGroupKeyFieldNumber = 5;
  const ::std::string& group_key() const;
  void set_group_key(const ::std::string& value);
  #if LANG_CXX11
  void set_group_key(::std::string&& value);
  #endif
  void set_group_key(const char* value);
  void set_group_key(const char* value, size_t size);
  ::std::string* mutable_group_key();
  ::std::string* release_group_key();
  void set_allocated_group_key(::std::string* group_key);

  // string config = 7;
  void clear_config();
  static const int kConfigFieldNumber = 7;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // int64 issued_at = 8;
  void clear_issued_at();
  static const int kIssuedAtFieldNumber = 8;
  ::google::protobuf::int64 issued_at() const;
  void set_issued_at(::google::protobuf::int64 value);

  // int64 expires_at = 9;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 9;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument > arguments_;
  ::google::protobuf::internal::ArenaStringPtr session_;
  ::google::protobuf::internal::ArenaStringPtr model_id_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr group_key_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::int64 issued_at_;
  ::google::protobuf::int64 expires_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class AuthObjectArgument final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.AuthObjectArgument) */ {
 public:
  AuthObjectArgument();
  virtual ~AuthObjectArgument();

  AuthObjectArgument(const AuthObjectArgument& from);

  inline AuthObjectArgument& operator=(const AuthObjectArgument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthObjectArgument(AuthObjectArgument&& from) noexcept
    : AuthObjectArgument() {
    *this = ::std::move(from);
  }

  inline AuthObjectArgument& operator=(AuthObjectArgument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthObjectArgument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthObjectArgument* internal_default_instance() {
    return reinterpret_cast<const AuthObjectArgument*>(
               &_AuthObjectArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AuthObjectArgument* other);
  friend void swap(AuthObjectArgument& a, AuthObjectArgument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthObjectArgument* New() const final {
    return CreateMaybeMessage<AuthObjectArgument>(nullptr);
  }

  AuthObjectArgument* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthObjectArgument>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthObjectArgument& from);
  void MergeFrom(const AuthObjectArgument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthObjectArgument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  #if LANG_CXX11
  void set_data_type(::std::string&& value);
  #endif
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // string reference = 3;
  void clear_reference();
  static const int kReferenceFieldNumber = 3;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // string parser = 4;
  void clear_parser();
  static const int kParserFieldNumber = 4;
  const ::std::string& parser() const;
  void set_parser(const ::std::string& value);
  #if LANG_CXX11
  void set_parser(::std::string&& value);
  #endif
  void set_parser(const char* value);
  void set_parser(const char* value, size_t size);
  ::std::string* mutable_parser();
  ::std::string* release_parser();
  void set_allocated_parser(::std::string* parser);

  // @@protoc_insertion_point(class_scope:ric.auth.AuthObjectArgument)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::internal::ArenaStringPtr parser_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class SendOfflineRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.SendOfflineRequest) */ {
 public:
  SendOfflineRequest();
  virtual ~SendOfflineRequest();

  SendOfflineRequest(const SendOfflineRequest& from);

  inline SendOfflineRequest& operator=(const SendOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendOfflineRequest(SendOfflineRequest&& from) noexcept
    : SendOfflineRequest() {
    *this = ::std::move(from);
  }

  inline SendOfflineRequest& operator=(SendOfflineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendOfflineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const SendOfflineRequest*>(
               &_SendOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SendOfflineRequest* other);
  friend void swap(SendOfflineRequest& a, SendOfflineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendOfflineRequest* New() const final {
    return CreateMaybeMessage<SendOfflineRequest>(nullptr);
  }

  SendOfflineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendOfflineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendOfflineRequest& from);
  void MergeFrom(const SendOfflineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOfflineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.auth.SendOfflineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// -------------------------------------------------------------------

class SendOfflineResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.auth.SendOfflineResponse) */ {
 public:
  SendOfflineResponse();
  virtual ~SendOfflineResponse();

  SendOfflineResponse(const SendOfflineResponse& from);

  inline SendOfflineResponse& operator=(const SendOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendOfflineResponse(SendOfflineResponse&& from) noexcept
    : SendOfflineResponse() {
    *this = ::std::move(from);
  }

  inline SendOfflineResponse& operator=(SendOfflineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendOfflineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const SendOfflineResponse*>(
               &_SendOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SendOfflineResponse* other);
  friend void swap(SendOfflineResponse& a, SendOfflineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendOfflineResponse* New() const final {
    return CreateMaybeMessage<SendOfflineResponse>(nullptr);
  }

  SendOfflineResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendOfflineResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendOfflineResponse& from);
  void MergeFrom(const SendOfflineResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOfflineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.auth.SendOfflineResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dauth_2fricauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthObjectRequest_AuthObjectCert

// string cn = 1;
inline void AuthObjectRequest_AuthObjectCert::clear_cn() {
  cn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest_AuthObjectCert::cn() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
  return cn_.GetNoArena();
}
inline void AuthObjectRequest_AuthObjectCert::set_cn(const ::std::string& value) {
  
  cn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
#if LANG_CXX11
inline void AuthObjectRequest_AuthObjectCert::set_cn(::std::string&& value) {
  
  cn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
#endif
inline void AuthObjectRequest_AuthObjectCert::set_cn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
inline void AuthObjectRequest_AuthObjectCert::set_cn(const char* value, size_t size) {
  
  cn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::mutable_cn() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
  return cn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::release_cn() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
  
  return cn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest_AuthObjectCert::set_allocated_cn(::std::string* cn) {
  if (cn != nullptr) {
    
  } else {
    
  }
  cn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cn);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.AuthObjectCert.cn)
}

// string fingerprint = 2;
inline void AuthObjectRequest_AuthObjectCert::clear_fingerprint() {
  fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest_AuthObjectCert::fingerprint() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
  return fingerprint_.GetNoArena();
}
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(const ::std::string& value) {
  
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
#if LANG_CXX11
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(::std::string&& value) {
  
  fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
#endif
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
inline void AuthObjectRequest_AuthObjectCert::set_fingerprint(const char* value, size_t size) {
  
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::mutable_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
  return fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest_AuthObjectCert::release_fingerprint() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
  
  return fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest_AuthObjectCert::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.AuthObjectCert.fingerprint)
}

// -------------------------------------------------------------------

// AuthObjectRequest

// string protocol = 1;
inline void AuthObjectRequest::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::protocol() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.protocol)
  return protocol_.GetNoArena();
}
inline void AuthObjectRequest::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.protocol)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.protocol)
}
#endif
inline void AuthObjectRequest::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.protocol)
}
inline void AuthObjectRequest::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.protocol)
}
inline ::std::string* AuthObjectRequest::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_protocol() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_protocol(::std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.protocol)
}

// string object = 2;
inline void AuthObjectRequest::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::object() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.object)
  return object_.GetNoArena();
}
inline void AuthObjectRequest::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.object)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_object(::std::string&& value) {
  
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.object)
}
#endif
inline void AuthObjectRequest::set_object(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.object)
}
inline void AuthObjectRequest::set_object(const char* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.object)
}
inline ::std::string* AuthObjectRequest::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_object() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_object(::std::string* object) {
  if (object != nullptr) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.object)
}

// string client_id = 3;
inline void AuthObjectRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.client_id)
  return client_id_.GetNoArena();
}
inline void AuthObjectRequest::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.client_id)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.client_id)
}
#endif
inline void AuthObjectRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.client_id)
}
inline void AuthObjectRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.client_id)
}
inline ::std::string* AuthObjectRequest::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.client_id)
}

// string username = 4;
inline void AuthObjectRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::username() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.username)
  return username_.GetNoArena();
}
inline void AuthObjectRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.username)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.username)
}
#endif
inline void AuthObjectRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.username)
}
inline void AuthObjectRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.username)
}
inline ::std::string* AuthObjectRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_username() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.username)
}

// string password = 5;
inline void AuthObjectRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::password() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.password)
  return password_.GetNoArena();
}
inline void AuthObjectRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.password)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.password)
}
#endif
inline void AuthObjectRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.password)
}
inline void AuthObjectRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.password)
}
inline ::std::string* AuthObjectRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_password() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.password)
}

// .ric.auth.AuthObjectRequest.AuthObjectCert cert = 6;
inline bool AuthObjectRequest::has_cert() const {
  return this != internal_default_instance() && cert_ != nullptr;
}
inline void AuthObjectRequest::clear_cert() {
  if (GetArenaNoVirtual() == nullptr && cert_ != nullptr) {
    delete cert_;
  }
  cert_ = nullptr;
}
inline const ::ric::auth::AuthObjectRequest_AuthObjectCert& AuthObjectRequest::cert() const {
  const ::ric::auth::AuthObjectRequest_AuthObjectCert* p = cert_;
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.cert)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::auth::AuthObjectRequest_AuthObjectCert*>(
      &::ric::auth::_AuthObjectRequest_AuthObjectCert_default_instance_);
}
inline ::ric::auth::AuthObjectRequest_AuthObjectCert* AuthObjectRequest::release_cert() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.cert)
  
  ::ric::auth::AuthObjectRequest_AuthObjectCert* temp = cert_;
  cert_ = nullptr;
  return temp;
}
inline ::ric::auth::AuthObjectRequest_AuthObjectCert* AuthObjectRequest::mutable_cert() {
  
  if (cert_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::auth::AuthObjectRequest_AuthObjectCert>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.cert)
  return cert_;
}
inline void AuthObjectRequest::set_allocated_cert(::ric::auth::AuthObjectRequest_AuthObjectCert* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cert_;
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    
  } else {
    
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.cert)
}

// string ipv4 = 7;
inline void AuthObjectRequest::clear_ipv4() {
  ipv4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::ipv4() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.ipv4)
  return ipv4_.GetNoArena();
}
inline void AuthObjectRequest::set_ipv4(const ::std::string& value) {
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.ipv4)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_ipv4(::std::string&& value) {
  
  ipv4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.ipv4)
}
#endif
inline void AuthObjectRequest::set_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.ipv4)
}
inline void AuthObjectRequest::set_ipv4(const char* value, size_t size) {
  
  ipv4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.ipv4)
}
inline ::std::string* AuthObjectRequest::mutable_ipv4() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.ipv4)
  return ipv4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_ipv4() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.ipv4)
  
  return ipv4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_ipv4(::std::string* ipv4) {
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  ipv4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.ipv4)
}

// string ipv6 = 8;
inline void AuthObjectRequest::clear_ipv6() {
  ipv6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectRequest::ipv6() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectRequest.ipv6)
  return ipv6_.GetNoArena();
}
inline void AuthObjectRequest::set_ipv6(const ::std::string& value) {
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectRequest.ipv6)
}
#if LANG_CXX11
inline void AuthObjectRequest::set_ipv6(::std::string&& value) {
  
  ipv6_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectRequest.ipv6)
}
#endif
inline void AuthObjectRequest::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectRequest.ipv6)
}
inline void AuthObjectRequest::set_ipv6(const char* value, size_t size) {
  
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectRequest.ipv6)
}
inline ::std::string* AuthObjectRequest::mutable_ipv6() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectRequest.ipv6)
  return ipv6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectRequest::release_ipv6() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectRequest.ipv6)
  
  return ipv6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectRequest::set_allocated_ipv6(::std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectRequest.ipv6)
}

// -------------------------------------------------------------------

// AuthObjectResponse

// string session = 1;
inline void AuthObjectResponse::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::session() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.session)
  return session_.GetNoArena();
}
inline void AuthObjectResponse::set_session(const ::std::string& value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.session)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_session(::std::string&& value) {
  
  session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.session)
}
#endif
inline void AuthObjectResponse::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.session)
}
inline void AuthObjectResponse::set_session(const char* value, size_t size) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.session)
}
inline ::std::string* AuthObjectResponse::mutable_session() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_session() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.session)
  
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_session(::std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.session)
}

// string model_id = 2;
inline void AuthObjectResponse::clear_model_id() {
  model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::model_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.model_id)
  return model_id_.GetNoArena();
}
inline void AuthObjectResponse::set_model_id(const ::std::string& value) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.model_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_model_id(::std::string&& value) {
  
  model_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.model_id)
}
#endif
inline void AuthObjectResponse::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.model_id)
}
inline void AuthObjectResponse::set_model_id(const char* value, size_t size) {
  
  model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.model_id)
}
inline ::std::string* AuthObjectResponse::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.model_id)
  return model_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_model_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.model_id)
  
  return model_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_model_id(::std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.model_id)
}

// string object_id = 3;
inline void AuthObjectResponse::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::object_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.object_id)
  return object_id_.GetNoArena();
}
inline void AuthObjectResponse::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.object_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.object_id)
}
#endif
inline void AuthObjectResponse::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.object_id)
}
inline void AuthObjectResponse::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.object_id)
}
inline ::std::string* AuthObjectResponse::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.object_id)
}

// string group_id = 4;
inline void AuthObjectResponse::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::group_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.group_id)
  return group_id_.GetNoArena();
}
inline void AuthObjectResponse::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.group_id)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.group_id)
}
#endif
inline void AuthObjectResponse::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.group_id)
}
inline void AuthObjectResponse::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.group_id)
}
inline ::std::string* AuthObjectResponse::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.group_id)
}

// string group_key = 5;
inline void AuthObjectResponse::clear_group_key() {
  group_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::group_key() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.group_key)
  return group_key_.GetNoArena();
}
inline void AuthObjectResponse::set_group_key(const ::std::string& value) {
  
  group_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.group_key)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_group_key(::std::string&& value) {
  
  group_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.group_key)
}
#endif
inline void AuthObjectResponse::set_group_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.group_key)
}
inline void AuthObjectResponse::set_group_key(const char* value, size_t size) {
  
  group_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.group_key)
}
inline ::std::string* AuthObjectResponse::mutable_group_key() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.group_key)
  return group_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_group_key() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.group_key)
  
  return group_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_group_key(::std::string* group_key) {
  if (group_key != nullptr) {
    
  } else {
    
  }
  group_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_key);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.group_key)
}

// repeated .ric.auth.AuthObjectArgument arguments = 6;
inline int AuthObjectResponse::arguments_size() const {
  return arguments_.size();
}
inline void AuthObjectResponse::clear_arguments() {
  arguments_.Clear();
}
inline ::ric::auth::AuthObjectArgument* AuthObjectResponse::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >*
AuthObjectResponse::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:ric.auth.AuthObjectResponse.arguments)
  return &arguments_;
}
inline const ::ric::auth::AuthObjectArgument& AuthObjectResponse::arguments(int index) const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.arguments)
  return arguments_.Get(index);
}
inline ::ric::auth::AuthObjectArgument* AuthObjectResponse::add_arguments() {
  // @@protoc_insertion_point(field_add:ric.auth.AuthObjectResponse.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::auth::AuthObjectArgument >&
AuthObjectResponse::arguments() const {
  // @@protoc_insertion_point(field_list:ric.auth.AuthObjectResponse.arguments)
  return arguments_;
}

// string config = 7;
inline void AuthObjectResponse::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectResponse::config() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.config)
  return config_.GetNoArena();
}
inline void AuthObjectResponse::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.config)
}
#if LANG_CXX11
inline void AuthObjectResponse::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectResponse.config)
}
#endif
inline void AuthObjectResponse::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectResponse.config)
}
inline void AuthObjectResponse::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectResponse.config)
}
inline ::std::string* AuthObjectResponse::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectResponse.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectResponse::release_config() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectResponse.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectResponse::set_allocated_config(::std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectResponse.config)
}

// int64 issued_at = 8;
inline void AuthObjectResponse::clear_issued_at() {
  issued_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AuthObjectResponse::issued_at() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.issued_at)
  return issued_at_;
}
inline void AuthObjectResponse::set_issued_at(::google::protobuf::int64 value) {
  
  issued_at_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.issued_at)
}

// int64 expires_at = 9;
inline void AuthObjectResponse::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AuthObjectResponse::expires_at() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectResponse.expires_at)
  return expires_at_;
}
inline void AuthObjectResponse::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectResponse.expires_at)
}

// -------------------------------------------------------------------

// AuthObjectArgument

// string id = 1;
inline void AuthObjectArgument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::id() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.id)
  return id_.GetNoArena();
}
inline void AuthObjectArgument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.id)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.id)
}
#endif
inline void AuthObjectArgument::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.id)
}
inline void AuthObjectArgument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.id)
}
inline ::std::string* AuthObjectArgument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_id() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.id)
}

// string data_type = 2;
inline void AuthObjectArgument::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::data_type() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.data_type)
  return data_type_.GetNoArena();
}
inline void AuthObjectArgument::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.data_type)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.data_type)
}
#endif
inline void AuthObjectArgument::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.data_type)
}
inline void AuthObjectArgument::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.data_type)
}
inline ::std::string* AuthObjectArgument::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_data_type() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_data_type(::std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.data_type)
}

// string reference = 3;
inline void AuthObjectArgument::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::reference() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.reference)
  return reference_.GetNoArena();
}
inline void AuthObjectArgument::set_reference(const ::std::string& value) {
  
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.reference)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_reference(::std::string&& value) {
  
  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.reference)
}
#endif
inline void AuthObjectArgument::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.reference)
}
inline void AuthObjectArgument::set_reference(const char* value, size_t size) {
  
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.reference)
}
inline ::std::string* AuthObjectArgument::mutable_reference() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_reference() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.reference)
  
  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.reference)
}

// string parser = 4;
inline void AuthObjectArgument::clear_parser() {
  parser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthObjectArgument::parser() const {
  // @@protoc_insertion_point(field_get:ric.auth.AuthObjectArgument.parser)
  return parser_.GetNoArena();
}
inline void AuthObjectArgument::set_parser(const ::std::string& value) {
  
  parser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.AuthObjectArgument.parser)
}
#if LANG_CXX11
inline void AuthObjectArgument::set_parser(::std::string&& value) {
  
  parser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.AuthObjectArgument.parser)
}
#endif
inline void AuthObjectArgument::set_parser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.AuthObjectArgument.parser)
}
inline void AuthObjectArgument::set_parser(const char* value, size_t size) {
  
  parser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.AuthObjectArgument.parser)
}
inline ::std::string* AuthObjectArgument::mutable_parser() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.AuthObjectArgument.parser)
  return parser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthObjectArgument::release_parser() {
  // @@protoc_insertion_point(field_release:ric.auth.AuthObjectArgument.parser)
  
  return parser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthObjectArgument::set_allocated_parser(::std::string* parser) {
  if (parser != nullptr) {
    
  } else {
    
  }
  parser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parser);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.AuthObjectArgument.parser)
}

// -------------------------------------------------------------------

// SendOfflineRequest

// string object_id = 1;
inline void SendOfflineRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendOfflineRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.auth.SendOfflineRequest.object_id)
  return object_id_.GetNoArena();
}
inline void SendOfflineRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.auth.SendOfflineRequest.object_id)
}
#if LANG_CXX11
inline void SendOfflineRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.auth.SendOfflineRequest.object_id)
}
#endif
inline void SendOfflineRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.auth.SendOfflineRequest.object_id)
}
inline void SendOfflineRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.auth.SendOfflineRequest.object_id)
}
inline ::std::string* SendOfflineRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.auth.SendOfflineRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendOfflineRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.auth.SendOfflineRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendOfflineRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.auth.SendOfflineRequest.object_id)
}

// -------------------------------------------------------------------

// SendOfflineResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dauth_2fricauth_2eproto
