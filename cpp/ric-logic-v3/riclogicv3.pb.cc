// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-logic-v3/riclogicv3.proto

#include "ric-logic-v3/riclogicv3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AutomatonInfo_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RunAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StartAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ric_2dlogic_2dv3_2friclogicv3_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto;
namespace ric {
namespace logic {
namespace v3 {
class UserContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserContext> _instance;
} _UserContext_default_instance_;
class StatsCounterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatsCounter> _instance;
} _StatsCounter_default_instance_;
class AutomatonStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutomatonStats> _instance;
} _AutomatonStats_default_instance_;
class AutomatonVarValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutomatonVarValue> _instance;
  ::google::protobuf::internal::ArenaStringPtr string_val_;
  double double_val_;
  bool bool_val_;
} _AutomatonVarValue_default_instance_;
class AutomatonInfo_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutomatonInfo_VarsEntry_DoNotUse> _instance;
} _AutomatonInfo_VarsEntry_DoNotUse_default_instance_;
class AutomatonInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutomatonInfo> _instance;
} _AutomatonInfo_default_instance_;
class AutomatonEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutomatonEvent> _instance;
} _AutomatonEvent_default_instance_;
class ActionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionResult> _instance;
} _ActionResult_default_instance_;
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> _instance;
} _LogEntry_default_instance_;
class WaitConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaitCondition> _instance;
} _WaitCondition_default_instance_;
class GetInstanceInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInstanceInfoRequest> _instance;
} _GetInstanceInfoRequest_default_instance_;
class GetInstanceInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInstanceInfoResponse> _instance;
} _GetInstanceInfoResponse_default_instance_;
class StartAutomatonRequest_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAutomatonRequest_VarsEntry_DoNotUse> _instance;
} _StartAutomatonRequest_VarsEntry_DoNotUse_default_instance_;
class StartAutomatonRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAutomatonRequest> _instance;
} _StartAutomatonRequest_default_instance_;
class StartAutomatonMultiRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAutomatonMultiRequest> _instance;
} _StartAutomatonMultiRequest_default_instance_;
class StartAutomatonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAutomatonResponse> _instance;
} _StartAutomatonResponse_default_instance_;
class StopAutomatonRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopAutomatonRequest> _instance;
} _StopAutomatonRequest_default_instance_;
class RunAutomatonRequest_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunAutomatonRequest_VarsEntry_DoNotUse> _instance;
} _RunAutomatonRequest_VarsEntry_DoNotUse_default_instance_;
class RunAutomatonRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunAutomatonRequest> _instance;
} _RunAutomatonRequest_default_instance_;
class StopAutomatonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopAutomatonResponse> _instance;
} _StopAutomatonResponse_default_instance_;
class GetAutomatonsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAutomatonsRequest> _instance;
} _GetAutomatonsRequest_default_instance_;
class GetAutomatonsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAutomatonsResponse> _instance;
} _GetAutomatonsResponse_default_instance_;
class EmitEventRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmitEventRequest> _instance;
} _EmitEventRequest_default_instance_;
class EmitEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmitEventResponse> _instance;
} _EmitEventResponse_default_instance_;
class WaitEventRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaitEventRequest> _instance;
} _WaitEventRequest_default_instance_;
class WaitEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaitEventResponse> _instance;
} _WaitEventResponse_default_instance_;
class GetRuntimeInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRuntimeInfoRequest> _instance;
} _GetRuntimeInfoRequest_default_instance_;
class UpdateAutomatonVarsRequest_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAutomatonVarsRequest_VarsEntry_DoNotUse> _instance;
} _UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_default_instance_;
class UpdateAutomatonVarsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAutomatonVarsRequest> _instance;
} _UpdateAutomatonVarsRequest_default_instance_;
class UpdateAutomatonVarsResponse_VarsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAutomatonVarsResponse_VarsEntry_DoNotUse> _instance;
} _UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_default_instance_;
class UpdateAutomatonVarsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAutomatonVarsResponse> _instance;
} _UpdateAutomatonVarsResponse_default_instance_;
}  // namespace v3
}  // namespace logic
}  // namespace ric
static void InitDefaultsUserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_UserContext_default_instance_;
    new (ptr) ::ric::logic::v3::UserContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::UserContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsStatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StatsCounter_default_instance_;
    new (ptr) ::ric::logic::v3::StatsCounter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::StatsCounter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsAutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_AutomatonStats_default_instance_;
    new (ptr) ::ric::logic::v3::AutomatonStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::AutomatonStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_StatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsAutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_AutomatonVarValue_default_instance_;
    new (ptr) ::ric::logic::v3::AutomatonVarValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::AutomatonVarValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsAutomatonInfo_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_AutomatonInfo_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse();
  }
  ::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AutomatonInfo_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAutomatonInfo_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsAutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_AutomatonInfo_default_instance_;
    new (ptr) ::ric::logic::v3::AutomatonInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::AutomatonInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_LogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_AutomatonInfo_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsAutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_AutomatonEvent_default_instance_;
    new (ptr) ::ric::logic::v3::AutomatonEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::AutomatonEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_ActionResult_default_instance_;
    new (ptr) ::ric::logic::v3::ActionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::ActionResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsLogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_LogEntry_default_instance_;
    new (ptr) ::ric::logic::v3::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::LogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_ActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsWaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_WaitCondition_default_instance_;
    new (ptr) ::ric::logic::v3::WaitCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::WaitCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsGetInstanceInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_GetInstanceInfoRequest_default_instance_;
    new (ptr) ::ric::logic::v3::GetInstanceInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::GetInstanceInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInstanceInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInstanceInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsGetInstanceInfoResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_GetInstanceInfoResponse_default_instance_;
    new (ptr) ::ric::logic::v3::GetInstanceInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::GetInstanceInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInstanceInfoResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInstanceInfoResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsStartAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StartAutomatonRequest_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse();
  }
  ::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsStartAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StartAutomatonRequest_default_instance_;
    new (ptr) ::ric::logic::v3::StartAutomatonRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::StartAutomatonRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StartAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStartAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_StartAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsStartAutomatonMultiRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StartAutomatonMultiRequest_default_instance_;
    new (ptr) ::ric::logic::v3::StartAutomatonMultiRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::StartAutomatonMultiRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartAutomatonMultiRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartAutomatonMultiRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsStartAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StartAutomatonResponse_default_instance_;
    new (ptr) ::ric::logic::v3::StartAutomatonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::StartAutomatonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsStopAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StopAutomatonRequest_default_instance_;
    new (ptr) ::ric::logic::v3::StopAutomatonRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::StopAutomatonRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsRunAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_RunAutomatonRequest_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse();
  }
  ::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RunAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRunAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsRunAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_RunAutomatonRequest_default_instance_;
    new (ptr) ::ric::logic::v3::RunAutomatonRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::RunAutomatonRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RunAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRunAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_RunAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsStopAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_StopAutomatonResponse_default_instance_;
    new (ptr) ::ric::logic::v3::StopAutomatonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::StopAutomatonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsGetAutomatonsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_GetAutomatonsRequest_default_instance_;
    new (ptr) ::ric::logic::v3::GetAutomatonsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::GetAutomatonsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetAutomatonsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetAutomatonsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsGetAutomatonsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_GetAutomatonsResponse_default_instance_;
    new (ptr) ::ric::logic::v3::GetAutomatonsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::GetAutomatonsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetAutomatonsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetAutomatonsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsEmitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_EmitEventRequest_default_instance_;
    new (ptr) ::ric::logic::v3::EmitEventRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::EmitEventRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EmitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEmitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsEmitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_EmitEventResponse_default_instance_;
    new (ptr) ::ric::logic::v3::EmitEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::EmitEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsWaitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_WaitEventRequest_default_instance_;
    new (ptr) ::ric::logic::v3::WaitEventRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::WaitEventRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WaitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWaitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsWaitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_WaitEventResponse_default_instance_;
    new (ptr) ::ric::logic::v3::WaitEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::WaitEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WaitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWaitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsGetRuntimeInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_GetRuntimeInfoRequest_default_instance_;
    new (ptr) ::ric::logic::v3::GetRuntimeInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::GetRuntimeInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetRuntimeInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetRuntimeInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {}};

static void InitDefaultsUpdateAutomatonVarsRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse();
  }
  ::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateAutomatonVarsRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsUpdateAutomatonVarsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_UpdateAutomatonVarsRequest_default_instance_;
    new (ptr) ::ric::logic::v3::UpdateAutomatonVarsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::UpdateAutomatonVarsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateAutomatonVarsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateAutomatonVarsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,
      &scc_info_UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsUpdateAutomatonVarsResponse_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_default_instance_;
    new (ptr) ::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse();
  }
  ::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateAutomatonVarsResponse_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

static void InitDefaultsUpdateAutomatonVarsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ric::logic::v3::_UpdateAutomatonVarsResponse_default_instance_;
    new (ptr) ::ric::logic::v3::UpdateAutomatonVarsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ric::logic::v3::UpdateAutomatonVarsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateAutomatonVarsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateAutomatonVarsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto}, {
      &scc_info_UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base,}};

void InitDefaults_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutomatonInfo_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInstanceInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInstanceInfoResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartAutomatonMultiRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunAutomatonRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAutomatonsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAutomatonsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRuntimeInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAutomatonVarsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAutomatonVarsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[31];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ric_2dlogic_2dv3_2friclogicv3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UserContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UserContext, group_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UserContext, user_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UserContext, span_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StatsCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StatsCounter, count_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StatsCounter, mean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, started_at_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, stopped_at_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, transitioned_at_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, transitions_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, actions_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, packets_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, events_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonStats, halted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonVarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonVarValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ric::logic::v3::AutomatonVarValueDefaultTypeInternal, string_val_),
  offsetof(::ric::logic::v3::AutomatonVarValueDefaultTypeInternal, double_val_),
  offsetof(::ric::logic::v3::AutomatonVarValueDefaultTypeInternal, bool_val_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonVarValue, type_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, hash_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, revision_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, status_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, state_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, prev_state_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, prev_event_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, stats_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, logs_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonInfo, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonEvent, type_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::AutomatonEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::ActionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::ActionResult, status_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::ActionResult, payload_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::ActionResult, ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, ts_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, hash_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, revision_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, instance_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, category_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, message_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, event_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, state_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, prev_state_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::LogEntry, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitCondition, timeout_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitCondition, event_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitCondition, state_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitCondition, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, hostname_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, started_at_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, objects_total_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, containers_total_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, containers_running_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetInstanceInfoResponse, object_ids_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonRequest, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonMultiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonMultiRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonMultiRequest, object_ids_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonMultiRequest, automaton_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StartAutomatonResponse, automaton_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StopAutomatonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StopAutomatonRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StopAutomatonRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StopAutomatonRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, wait_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, on_running_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::RunAutomatonRequest, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StopAutomatonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::StopAutomatonResponse, automaton_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsRequest, object_ids_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsRequest, automaton_ids_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsRequest, with_logs_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsRequest, watch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetAutomatonsResponse, automatons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventRequest, event_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::EmitEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitEventRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitEventRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitEventRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitEventRequest, wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::WaitEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetRuntimeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetRuntimeInfoRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::GetRuntimeInfoRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest, ctx_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest, object_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest, automaton_id_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsRequest, vars_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ric::logic::v3::UpdateAutomatonVarsResponse, vars_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ric::logic::v3::UserContext)},
  { 8, -1, sizeof(::ric::logic::v3::StatsCounter)},
  { 15, -1, sizeof(::ric::logic::v3::AutomatonStats)},
  { 28, -1, sizeof(::ric::logic::v3::AutomatonVarValue)},
  { 37, 44, sizeof(::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse)},
  { 46, -1, sizeof(::ric::logic::v3::AutomatonInfo)},
  { 62, -1, sizeof(::ric::logic::v3::AutomatonEvent)},
  { 69, -1, sizeof(::ric::logic::v3::ActionResult)},
  { 77, -1, sizeof(::ric::logic::v3::LogEntry)},
  { 96, -1, sizeof(::ric::logic::v3::WaitCondition)},
  { 105, -1, sizeof(::ric::logic::v3::GetInstanceInfoRequest)},
  { 110, -1, sizeof(::ric::logic::v3::GetInstanceInfoResponse)},
  { 122, 129, sizeof(::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse)},
  { 131, -1, sizeof(::ric::logic::v3::StartAutomatonRequest)},
  { 140, -1, sizeof(::ric::logic::v3::StartAutomatonMultiRequest)},
  { 148, -1, sizeof(::ric::logic::v3::StartAutomatonResponse)},
  { 154, -1, sizeof(::ric::logic::v3::StopAutomatonRequest)},
  { 162, 169, sizeof(::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse)},
  { 171, -1, sizeof(::ric::logic::v3::RunAutomatonRequest)},
  { 182, -1, sizeof(::ric::logic::v3::StopAutomatonResponse)},
  { 188, -1, sizeof(::ric::logic::v3::GetAutomatonsRequest)},
  { 197, -1, sizeof(::ric::logic::v3::GetAutomatonsResponse)},
  { 203, -1, sizeof(::ric::logic::v3::EmitEventRequest)},
  { 213, -1, sizeof(::ric::logic::v3::EmitEventResponse)},
  { 218, -1, sizeof(::ric::logic::v3::WaitEventRequest)},
  { 227, -1, sizeof(::ric::logic::v3::WaitEventResponse)},
  { 232, -1, sizeof(::ric::logic::v3::GetRuntimeInfoRequest)},
  { 239, 246, sizeof(::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse)},
  { 248, -1, sizeof(::ric::logic::v3::UpdateAutomatonVarsRequest)},
  { 257, 264, sizeof(::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse)},
  { 266, -1, sizeof(::ric::logic::v3::UpdateAutomatonVarsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_UserContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StatsCounter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_AutomatonStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_AutomatonVarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_AutomatonInfo_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_AutomatonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_AutomatonEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_ActionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_WaitCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_GetInstanceInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_GetInstanceInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StartAutomatonRequest_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StartAutomatonRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StartAutomatonMultiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StartAutomatonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StopAutomatonRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_RunAutomatonRequest_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_RunAutomatonRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_StopAutomatonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_GetAutomatonsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_GetAutomatonsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_EmitEventRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_EmitEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_WaitEventRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_WaitEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_GetRuntimeInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_UpdateAutomatonVarsRequest_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_UpdateAutomatonVarsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_UpdateAutomatonVarsResponse_VarsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ric::logic::v3::_UpdateAutomatonVarsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto = {
  {}, AddDescriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto, "ric-logic-v3/riclogicv3.proto", schemas,
  file_default_instances, TableStruct_ric_2dlogic_2dv3_2friclogicv3_2eproto::offsets,
  file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto, 31, file_level_enum_descriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto, file_level_service_descriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto,
};

const char descriptor_table_protodef_ric_2dlogic_2dv3_2friclogicv3_2eproto[] =
  "\n\035ric-logic-v3/riclogicv3.proto\022\014ric.log"
  "ic.v3\"A\n\013UserContext\022\020\n\010group_id\030\001 \001(\t\022\017"
  "\n\007user_id\030\002 \001(\t\022\017\n\007span_id\030\003 \001(\t\"+\n\014Stat"
  "sCounter\022\r\n\005count\030\001 \001(\003\022\014\n\004mean\030\002 \001(\002\"\230\002"
  "\n\016AutomatonStats\022\022\n\nstarted_at\030\001 \001(\003\022\022\n\n"
  "stopped_at\030\002 \001(\003\022\027\n\017transitioned_at\030\003 \001("
  "\003\022/\n\013transitions\030\004 \001(\0132\032.ric.logic.v3.St"
  "atsCounter\022+\n\007actions\030\005 \001(\0132\032.ric.logic."
  "v3.StatsCounter\022+\n\007packets\030\006 \001(\0132\032.ric.l"
  "ogic.v3.StatsCounter\022*\n\006events\030\007 \001(\0132\032.r"
  "ic.logic.v3.StatsCounter\022\016\n\006halted\030\010 \001(\t"
  "\"[\n\021AutomatonVarValue\022\024\n\nstring_val\030\001 \001("
  "\tH\000\022\024\n\ndouble_val\030\002 \001(\001H\000\022\022\n\010bool_val\030\003 "
  "\001(\010H\000B\006\n\004type\"\370\002\n\rAutomatonInfo\022\021\n\tobjec"
  "t_id\030\001 \001(\t\022\024\n\014automaton_id\030\002 \001(\t\022\017\n\007hash"
  "_id\030\003 \001(\t\022\020\n\010revision\030\004 \001(\t\022\016\n\006status\030\005 "
  "\001(\t\022\r\n\005state\030\006 \001(\t\022\022\n\nprev_state\030\007 \001(\t\022\022"
  "\n\nprev_event\030\010 \001(\t\022+\n\005stats\030\t \001(\0132\034.ric."
  "logic.v3.AutomatonStats\022$\n\004logs\030\n \003(\0132\026."
  "ric.logic.v3.LogEntry\0223\n\004vars\030\013 \003(\0132%.ri"
  "c.logic.v3.AutomatonInfo.VarsEntry\032L\n\tVa"
  "rsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.ri"
  "c.logic.v3.AutomatonVarValue:\0028\001\"/\n\016Auto"
  "matonEvent\022\014\n\004type\030\001 \001(\t\022\017\n\007payload\030\002 \001("
  "\t\";\n\014ActionResult\022\016\n\006status\030\001 \001(\t\022\017\n\007pay"
  "load\030\002 \001(\t\022\n\n\002ms\030\003 \001(\005\"\307\002\n\010LogEntry\022\n\n\002i"
  "d\030\001 \001(\t\022\n\n\002ts\030\002 \001(\003\022\021\n\tobject_id\030\003 \001(\t\022\024"
  "\n\014automaton_id\030\004 \001(\t\022\017\n\007hash_id\030\005 \001(\t\022\020\n"
  "\010revision\030\006 \001(\t\022\020\n\010instance\030\007 \001(\t\022\020\n\010cat"
  "egory\030\010 \001(\t\022\017\n\007message\030\t \001(\t\022+\n\005event\030\n "
  "\001(\0132\034.ric.logic.v3.AutomatonEvent\022\r\n\005sta"
  "te\030\013 \001(\t\022\022\n\nprev_state\030\014 \001(\t\022&\n\003ctx\030\r \001("
  "\0132\031.ric.logic.v3.UserContext\022*\n\006result\030\016"
  " \001(\0132\032.ric.logic.v3.ActionResult\"N\n\rWait"
  "Condition\022\017\n\007timeout\030\001 \001(\t\022\r\n\005event\030\002 \001("
  "\t\022\r\n\005state\030\003 \001(\t\022\016\n\006status\030\004 \001(\t\"\030\n\026GetI"
  "nstanceInfoRequest\"\260\001\n\027GetInstanceInfoRe"
  "sponse\022\020\n\010hostname\030\001 \001(\t\022\016\n\006status\030\002 \001(\t"
  "\022\022\n\nstarted_at\030\003 \001(\003\022\025\n\robjects_total\030\004 "
  "\001(\003\022\030\n\020containers_total\030\005 \001(\003\022\032\n\022contain"
  "ers_running\030\006 \001(\003\022\022\n\nobject_ids\030\007 \003(\t\"\363\001"
  "\n\025StartAutomatonRequest\022&\n\003ctx\030\001 \001(\0132\031.r"
  "ic.logic.v3.UserContext\022\021\n\tobject_id\030\002 \001"
  "(\t\022\024\n\014automaton_id\030\003 \001(\t\022;\n\004vars\030\004 \003(\0132-"
  ".ric.logic.v3.StartAutomatonRequest.Vars"
  "Entry\032L\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value"
  "\030\002 \001(\0132\037.ric.logic.v3.AutomatonVarValue:"
  "\0028\001\"n\n\032StartAutomatonMultiRequest\022&\n\003ctx"
  "\030\001 \001(\0132\031.ric.logic.v3.UserContext\022\022\n\nobj"
  "ect_ids\030\002 \003(\t\022\024\n\014automaton_id\030\003 \001(\t\"H\n\026S"
  "tartAutomatonResponse\022.\n\tautomaton\030\001 \001(\013"
  "2\033.ric.logic.v3.AutomatonInfo\"g\n\024StopAut"
  "omatonRequest\022&\n\003ctx\030\001 \001(\0132\031.ric.logic.v"
  "3.UserContext\022\021\n\tobject_id\030\002 \001(\t\022\024\n\014auto"
  "maton_id\030\003 \001(\t\"\256\002\n\023RunAutomatonRequest\022&"
  "\n\003ctx\030\001 \001(\0132\031.ric.logic.v3.UserContext\022\021"
  "\n\tobject_id\030\002 \001(\t\022\024\n\014automaton_id\030\003 \001(\t\022"
  ")\n\004wait\030\004 \001(\0132\033.ric.logic.v3.WaitConditi"
  "on\022\022\n\non_running\030\006 \001(\t\0229\n\004vars\030\007 \003(\0132+.r"
  "ic.logic.v3.RunAutomatonRequest.VarsEntr"
  "y\032L\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001"
  "(\0132\037.ric.logic.v3.AutomatonVarValue:\0028\001\""
  "G\n\025StopAutomatonResponse\022.\n\tautomaton\030\001 "
  "\001(\0132\033.ric.logic.v3.AutomatonInfo\"c\n\024GetA"
  "utomatonsRequest\022\022\n\nobject_ids\030\001 \003(\t\022\025\n\r"
  "automaton_ids\030\002 \003(\t\022\021\n\twith_logs\030\003 \001(\010\022\r"
  "\n\005watch\030\004 \001(\010\"H\n\025GetAutomatonsResponse\022/"
  "\n\nautomatons\030\001 \003(\0132\033.ric.logic.v3.Automa"
  "tonInfo\"\203\001\n\020EmitEventRequest\022&\n\003ctx\030\001 \001("
  "\0132\031.ric.logic.v3.UserContext\022\021\n\tobject_i"
  "d\030\002 \001(\t\022\024\n\014automaton_id\030\003 \001(\t\022\r\n\005event\030\004"
  " \001(\t\022\017\n\007payload\030\005 \001(\t\"\023\n\021EmitEventRespon"
  "se\"\216\001\n\020WaitEventRequest\022&\n\003ctx\030\001 \001(\0132\031.r"
  "ic.logic.v3.UserContext\022\021\n\tobject_id\030\002 \001"
  "(\t\022\024\n\014automaton_id\030\003 \001(\t\022)\n\004wait\030\004 \001(\0132\033"
  ".ric.logic.v3.WaitCondition\"\023\n\021WaitEvent"
  "Response\"@\n\025GetRuntimeInfoRequest\022\021\n\tobj"
  "ect_id\030\001 \001(\t\022\024\n\014automaton_id\030\002 \001(\t\"\375\001\n\032U"
  "pdateAutomatonVarsRequest\022&\n\003ctx\030\001 \001(\0132\031"
  ".ric.logic.v3.UserContext\022\021\n\tobject_id\030\002"
  " \001(\t\022\024\n\014automaton_id\030\003 \001(\t\022@\n\004vars\030\004 \003(\013"
  "22.ric.logic.v3.UpdateAutomatonVarsReque"
  "st.VarsEntry\032L\n\tVarsEntry\022\013\n\003key\030\001 \001(\t\022."
  "\n\005value\030\002 \001(\0132\037.ric.logic.v3.AutomatonVa"
  "rValue:\0028\001\"\256\001\n\033UpdateAutomatonVarsRespon"
  "se\022A\n\004vars\030\001 \003(\01323.ric.logic.v3.UpdateAu"
  "tomatonVarsResponse.VarsEntry\032L\n\tVarsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.ric.log"
  "ic.v3.AutomatonVarValue:\0028\0012\270\006\n\nRicLogic"
  "V3\022^\n\017GetInstanceInfo\022$.ric.logic.v3.Get"
  "InstanceInfoRequest\032%.ric.logic.v3.GetIn"
  "stanceInfoResponse\022R\n\rGetAutomatons\022\".ri"
  "c.logic.v3.GetAutomatonsRequest\032\033.ric.lo"
  "gic.v3.AutomatonInfo0\001\022[\n\016StartAutomaton"
  "\022#.ric.logic.v3.StartAutomatonRequest\032$."
  "ric.logic.v3.StartAutomatonResponse\022e\n\023S"
  "tartAutomatonMulti\022(.ric.logic.v3.StartA"
  "utomatonMultiRequest\032$.ric.logic.v3.Star"
  "tAutomatonResponse\022X\n\rStopAutomaton\022\".ri"
  "c.logic.v3.StopAutomatonRequest\032#.ric.lo"
  "gic.v3.StopAutomatonResponse\022P\n\014RunAutom"
  "aton\022!.ric.logic.v3.RunAutomatonRequest\032"
  "\033.ric.logic.v3.AutomatonInfo0\001\022L\n\tEmitEv"
  "ent\022\036.ric.logic.v3.EmitEventRequest\032\037.ri"
  "c.logic.v3.EmitEventResponse\022L\n\tWaitEven"
  "t\022\036.ric.logic.v3.WaitEventRequest\032\037.ric."
  "logic.v3.WaitEventResponse\022j\n\023UpdateAuto"
  "matonVars\022(.ric.logic.v3.UpdateAutomaton"
  "VarsRequest\032).ric.logic.v3.UpdateAutomat"
  "onVarsResponseB\033Z\031./ric-logic-v3;riclogi"
  "cv3b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ric_2dlogic_2dv3_2friclogicv3_2eproto = {
  false, InitDefaults_ric_2dlogic_2dv3_2friclogicv3_2eproto, 
  descriptor_table_protodef_ric_2dlogic_2dv3_2friclogicv3_2eproto,
  "ric-logic-v3/riclogicv3.proto", &assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto, 4411,
};

void AddDescriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ric_2dlogic_2dv3_2friclogicv3_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ric_2dlogic_2dv3_2friclogicv3_2eproto = []() { AddDescriptors_ric_2dlogic_2dv3_2friclogicv3_2eproto(); return true; }();
namespace ric {
namespace logic {
namespace v3 {

// ===================================================================

void UserContext::InitAsDefaultInstance() {
}
class UserContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserContext::kGroupIdFieldNumber;
const int UserContext::kUserIdFieldNumber;
const int UserContext::kSpanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserContext::UserContext()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.UserContext)
}
UserContext::UserContext(const UserContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.UserContext)
}

void UserContext::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserContext::~UserContext() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.UserContext)
  SharedDtor();
}

void UserContext::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserContext& UserContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserContext_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void UserContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserContext::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserContext*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.UserContext.group_id");
        object = msg->mutable_group_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.UserContext.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string span_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.UserContext.span_id");
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.UserContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UserContext.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UserContext.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->span_id().data(), static_cast<int>(this->span_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UserContext.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.UserContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.UserContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UserContext.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UserContext.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UserContext.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->span_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.UserContext)
}

::google::protobuf::uint8* UserContext::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.UserContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UserContext.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UserContext.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UserContext.span_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->span_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.UserContext)
  return target;
}

size_t UserContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.UserContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string span_id = 3;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserContext* source =
      ::google::protobuf::DynamicCastToGenerated<UserContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.UserContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.UserContext)
    MergeFrom(*source);
  }
}

void UserContext::MergeFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.UserContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.span_id().size() > 0) {

    span_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id_);
  }
}

void UserContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserContext::CopyFrom(const UserContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.UserContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserContext::IsInitialized() const {
  return true;
}

void UserContext::Swap(UserContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserContext::InternalSwap(UserContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserContext::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StatsCounter::InitAsDefaultInstance() {
}
class StatsCounter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatsCounter::kCountFieldNumber;
const int StatsCounter::kMeanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatsCounter::StatsCounter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.StatsCounter)
}
StatsCounter::StatsCounter(const StatsCounter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_) -
    reinterpret_cast<char*>(&count_)) + sizeof(mean_));
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.StatsCounter)
}

void StatsCounter::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_) -
      reinterpret_cast<char*>(&count_)) + sizeof(mean_));
}

StatsCounter::~StatsCounter() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.StatsCounter)
  SharedDtor();
}

void StatsCounter::SharedDtor() {
}

void StatsCounter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsCounter& StatsCounter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatsCounter_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void StatsCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.StatsCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_) -
      reinterpret_cast<char*>(&count_)) + sizeof(mean_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatsCounter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatsCounter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float mean = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_mean(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatsCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.StatsCounter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.StatsCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.StatsCounter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatsCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.StatsCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // float mean = 2;
  if (this->mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.StatsCounter)
}

::google::protobuf::uint8* StatsCounter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.StatsCounter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // float mean = 2;
  if (this->mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.StatsCounter)
  return target;
}

size_t StatsCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.StatsCounter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // float mean = 2;
  if (this->mean() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsCounter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.StatsCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsCounter* source =
      ::google::protobuf::DynamicCastToGenerated<StatsCounter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.StatsCounter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.StatsCounter)
    MergeFrom(*source);
  }
}

void StatsCounter::MergeFrom(const StatsCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.StatsCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.mean() != 0) {
    set_mean(from.mean());
  }
}

void StatsCounter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.StatsCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsCounter::CopyFrom(const StatsCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.StatsCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsCounter::IsInitialized() const {
  return true;
}

void StatsCounter::Swap(StatsCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatsCounter::InternalSwap(StatsCounter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
  swap(mean_, other->mean_);
}

::google::protobuf::Metadata StatsCounter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AutomatonStats::InitAsDefaultInstance() {
  ::ric::logic::v3::_AutomatonStats_default_instance_._instance.get_mutable()->transitions_ = const_cast< ::ric::logic::v3::StatsCounter*>(
      ::ric::logic::v3::StatsCounter::internal_default_instance());
  ::ric::logic::v3::_AutomatonStats_default_instance_._instance.get_mutable()->actions_ = const_cast< ::ric::logic::v3::StatsCounter*>(
      ::ric::logic::v3::StatsCounter::internal_default_instance());
  ::ric::logic::v3::_AutomatonStats_default_instance_._instance.get_mutable()->packets_ = const_cast< ::ric::logic::v3::StatsCounter*>(
      ::ric::logic::v3::StatsCounter::internal_default_instance());
  ::ric::logic::v3::_AutomatonStats_default_instance_._instance.get_mutable()->events_ = const_cast< ::ric::logic::v3::StatsCounter*>(
      ::ric::logic::v3::StatsCounter::internal_default_instance());
}
class AutomatonStats::HasBitSetters {
 public:
  static const ::ric::logic::v3::StatsCounter& transitions(const AutomatonStats* msg);
  static const ::ric::logic::v3::StatsCounter& actions(const AutomatonStats* msg);
  static const ::ric::logic::v3::StatsCounter& packets(const AutomatonStats* msg);
  static const ::ric::logic::v3::StatsCounter& events(const AutomatonStats* msg);
};

const ::ric::logic::v3::StatsCounter&
AutomatonStats::HasBitSetters::transitions(const AutomatonStats* msg) {
  return *msg->transitions_;
}
const ::ric::logic::v3::StatsCounter&
AutomatonStats::HasBitSetters::actions(const AutomatonStats* msg) {
  return *msg->actions_;
}
const ::ric::logic::v3::StatsCounter&
AutomatonStats::HasBitSetters::packets(const AutomatonStats* msg) {
  return *msg->packets_;
}
const ::ric::logic::v3::StatsCounter&
AutomatonStats::HasBitSetters::events(const AutomatonStats* msg) {
  return *msg->events_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutomatonStats::kStartedAtFieldNumber;
const int AutomatonStats::kStoppedAtFieldNumber;
const int AutomatonStats::kTransitionedAtFieldNumber;
const int AutomatonStats::kTransitionsFieldNumber;
const int AutomatonStats::kActionsFieldNumber;
const int AutomatonStats::kPacketsFieldNumber;
const int AutomatonStats::kEventsFieldNumber;
const int AutomatonStats::kHaltedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutomatonStats::AutomatonStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.AutomatonStats)
}
AutomatonStats::AutomatonStats(const AutomatonStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  halted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.halted().size() > 0) {
    halted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.halted_);
  }
  if (from.has_transitions()) {
    transitions_ = new ::ric::logic::v3::StatsCounter(*from.transitions_);
  } else {
    transitions_ = nullptr;
  }
  if (from.has_actions()) {
    actions_ = new ::ric::logic::v3::StatsCounter(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  if (from.has_packets()) {
    packets_ = new ::ric::logic::v3::StatsCounter(*from.packets_);
  } else {
    packets_ = nullptr;
  }
  if (from.has_events()) {
    events_ = new ::ric::logic::v3::StatsCounter(*from.events_);
  } else {
    events_ = nullptr;
  }
  ::memcpy(&started_at_, &from.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&transitioned_at_) -
    reinterpret_cast<char*>(&started_at_)) + sizeof(transitioned_at_));
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.AutomatonStats)
}

void AutomatonStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  halted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transitions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transitioned_at_) -
      reinterpret_cast<char*>(&transitions_)) + sizeof(transitioned_at_));
}

AutomatonStats::~AutomatonStats() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.AutomatonStats)
  SharedDtor();
}

void AutomatonStats::SharedDtor() {
  halted_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transitions_;
  if (this != internal_default_instance()) delete actions_;
  if (this != internal_default_instance()) delete packets_;
  if (this != internal_default_instance()) delete events_;
}

void AutomatonStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutomatonStats& AutomatonStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AutomatonStats_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void AutomatonStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.AutomatonStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  halted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && transitions_ != nullptr) {
    delete transitions_;
  }
  transitions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && packets_ != nullptr) {
    delete packets_;
  }
  packets_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
  ::memset(&started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transitioned_at_) -
      reinterpret_cast<char*>(&started_at_)) + sizeof(transitioned_at_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutomatonStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AutomatonStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 started_at = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_started_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 stopped_at = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stopped_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 transitioned_at = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_transitioned_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ric.logic.v3.StatsCounter transitions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::StatsCounter::_InternalParse;
        object = msg->mutable_transitions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.logic.v3.StatsCounter actions = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::StatsCounter::_InternalParse;
        object = msg->mutable_actions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.logic.v3.StatsCounter packets = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::StatsCounter::_InternalParse;
        object = msg->mutable_packets();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.logic.v3.StatsCounter events = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::StatsCounter::_InternalParse;
        object = msg->mutable_events();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string halted = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonStats.halted");
        object = msg->mutable_halted();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutomatonStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.AutomatonStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 started_at = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &started_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 stopped_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stopped_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 transitioned_at = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transitioned_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.StatsCounter transitions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.StatsCounter actions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.StatsCounter packets = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.StatsCounter events = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string halted = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_halted()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->halted().data(), static_cast<int>(this->halted().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonStats.halted"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.AutomatonStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.AutomatonStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutomatonStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.AutomatonStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 started_at = 1;
  if (this->started_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->started_at(), output);
  }

  // int64 stopped_at = 2;
  if (this->stopped_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stopped_at(), output);
  }

  // int64 transitioned_at = 3;
  if (this->transitioned_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transitioned_at(), output);
  }

  // .ric.logic.v3.StatsCounter transitions = 4;
  if (this->has_transitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::transitions(this), output);
  }

  // .ric.logic.v3.StatsCounter actions = 5;
  if (this->has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::actions(this), output);
  }

  // .ric.logic.v3.StatsCounter packets = 6;
  if (this->has_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::packets(this), output);
  }

  // .ric.logic.v3.StatsCounter events = 7;
  if (this->has_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::events(this), output);
  }

  // string halted = 8;
  if (this->halted().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->halted().data(), static_cast<int>(this->halted().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonStats.halted");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->halted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.AutomatonStats)
}

::google::protobuf::uint8* AutomatonStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.AutomatonStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 started_at = 1;
  if (this->started_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->started_at(), target);
  }

  // int64 stopped_at = 2;
  if (this->stopped_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stopped_at(), target);
  }

  // int64 transitioned_at = 3;
  if (this->transitioned_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->transitioned_at(), target);
  }

  // .ric.logic.v3.StatsCounter transitions = 4;
  if (this->has_transitions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::transitions(this), target);
  }

  // .ric.logic.v3.StatsCounter actions = 5;
  if (this->has_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::actions(this), target);
  }

  // .ric.logic.v3.StatsCounter packets = 6;
  if (this->has_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::packets(this), target);
  }

  // .ric.logic.v3.StatsCounter events = 7;
  if (this->has_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::events(this), target);
  }

  // string halted = 8;
  if (this->halted().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->halted().data(), static_cast<int>(this->halted().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonStats.halted");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->halted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.AutomatonStats)
  return target;
}

size_t AutomatonStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.AutomatonStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string halted = 8;
  if (this->halted().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->halted());
  }

  // .ric.logic.v3.StatsCounter transitions = 4;
  if (this->has_transitions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transitions_);
  }

  // .ric.logic.v3.StatsCounter actions = 5;
  if (this->has_actions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  // .ric.logic.v3.StatsCounter packets = 6;
  if (this->has_packets()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *packets_);
  }

  // .ric.logic.v3.StatsCounter events = 7;
  if (this->has_events()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *events_);
  }

  // int64 started_at = 1;
  if (this->started_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->started_at());
  }

  // int64 stopped_at = 2;
  if (this->stopped_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->stopped_at());
  }

  // int64 transitioned_at = 3;
  if (this->transitioned_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transitioned_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutomatonStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.AutomatonStats)
  GOOGLE_DCHECK_NE(&from, this);
  const AutomatonStats* source =
      ::google::protobuf::DynamicCastToGenerated<AutomatonStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.AutomatonStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.AutomatonStats)
    MergeFrom(*source);
  }
}

void AutomatonStats::MergeFrom(const AutomatonStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.AutomatonStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.halted().size() > 0) {

    halted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.halted_);
  }
  if (from.has_transitions()) {
    mutable_transitions()->::ric::logic::v3::StatsCounter::MergeFrom(from.transitions());
  }
  if (from.has_actions()) {
    mutable_actions()->::ric::logic::v3::StatsCounter::MergeFrom(from.actions());
  }
  if (from.has_packets()) {
    mutable_packets()->::ric::logic::v3::StatsCounter::MergeFrom(from.packets());
  }
  if (from.has_events()) {
    mutable_events()->::ric::logic::v3::StatsCounter::MergeFrom(from.events());
  }
  if (from.started_at() != 0) {
    set_started_at(from.started_at());
  }
  if (from.stopped_at() != 0) {
    set_stopped_at(from.stopped_at());
  }
  if (from.transitioned_at() != 0) {
    set_transitioned_at(from.transitioned_at());
  }
}

void AutomatonStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.AutomatonStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatonStats::CopyFrom(const AutomatonStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.AutomatonStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatonStats::IsInitialized() const {
  return true;
}

void AutomatonStats::Swap(AutomatonStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutomatonStats::InternalSwap(AutomatonStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  halted_.Swap(&other->halted_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transitions_, other->transitions_);
  swap(actions_, other->actions_);
  swap(packets_, other->packets_);
  swap(events_, other->events_);
  swap(started_at_, other->started_at_);
  swap(stopped_at_, other->stopped_at_);
  swap(transitioned_at_, other->transitioned_at_);
}

::google::protobuf::Metadata AutomatonStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AutomatonVarValue::InitAsDefaultInstance() {
  ::ric::logic::v3::_AutomatonVarValue_default_instance_.string_val_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::ric::logic::v3::_AutomatonVarValue_default_instance_.double_val_ = 0;
  ::ric::logic::v3::_AutomatonVarValue_default_instance_.bool_val_ = false;
}
class AutomatonVarValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutomatonVarValue::kStringValFieldNumber;
const int AutomatonVarValue::kDoubleValFieldNumber;
const int AutomatonVarValue::kBoolValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutomatonVarValue::AutomatonVarValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.AutomatonVarValue)
}
AutomatonVarValue::AutomatonVarValue(const AutomatonVarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStringVal: {
      set_string_val(from.string_val());
      break;
    }
    case kDoubleVal: {
      set_double_val(from.double_val());
      break;
    }
    case kBoolVal: {
      set_bool_val(from.bool_val());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.AutomatonVarValue)
}

void AutomatonVarValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  clear_has_type();
}

AutomatonVarValue::~AutomatonVarValue() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.AutomatonVarValue)
  SharedDtor();
}

void AutomatonVarValue::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void AutomatonVarValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutomatonVarValue& AutomatonVarValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AutomatonVarValue_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void AutomatonVarValue::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ric.logic.v3.AutomatonVarValue)
  switch (type_case()) {
    case kStringVal: {
      type_.string_val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDoubleVal: {
      // No need to clear
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void AutomatonVarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.AutomatonVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutomatonVarValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AutomatonVarValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string string_val = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonVarValue.string_val");
        object = msg->mutable_string_val();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double double_val = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_double_val(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool bool_val = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bool_val(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutomatonVarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.AutomatonVarValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string string_val = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_val()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_val().data(), static_cast<int>(this->string_val().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonVarValue.string_val"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.double_val_)));
          set_has_double_val();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.bool_val_)));
          set_has_bool_val();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.AutomatonVarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.AutomatonVarValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutomatonVarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.AutomatonVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_val = 1;
  if (has_string_val()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_val().data(), static_cast<int>(this->string_val().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonVarValue.string_val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_val(), output);
  }

  // double double_val = 2;
  if (has_double_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_val(), output);
  }

  // bool bool_val = 3;
  if (has_bool_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.AutomatonVarValue)
}

::google::protobuf::uint8* AutomatonVarValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.AutomatonVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_val = 1;
  if (has_string_val()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_val().data(), static_cast<int>(this->string_val().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonVarValue.string_val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_val(), target);
  }

  // double double_val = 2;
  if (has_double_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->double_val(), target);
  }

  // bool bool_val = 3;
  if (has_bool_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.AutomatonVarValue)
  return target;
}

size_t AutomatonVarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.AutomatonVarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // string string_val = 1;
    case kStringVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_val());
      break;
    }
    // double double_val = 2;
    case kDoubleVal: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_val = 3;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutomatonVarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.AutomatonVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AutomatonVarValue* source =
      ::google::protobuf::DynamicCastToGenerated<AutomatonVarValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.AutomatonVarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.AutomatonVarValue)
    MergeFrom(*source);
  }
}

void AutomatonVarValue::MergeFrom(const AutomatonVarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.AutomatonVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStringVal: {
      set_string_val(from.string_val());
      break;
    }
    case kDoubleVal: {
      set_double_val(from.double_val());
      break;
    }
    case kBoolVal: {
      set_bool_val(from.bool_val());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void AutomatonVarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.AutomatonVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatonVarValue::CopyFrom(const AutomatonVarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.AutomatonVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatonVarValue::IsInitialized() const {
  return true;
}

void AutomatonVarValue::Swap(AutomatonVarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutomatonVarValue::InternalSwap(AutomatonVarValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AutomatonVarValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

AutomatonInfo_VarsEntry_DoNotUse::AutomatonInfo_VarsEntry_DoNotUse() {}
AutomatonInfo_VarsEntry_DoNotUse::AutomatonInfo_VarsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void AutomatonInfo_VarsEntry_DoNotUse::MergeFrom(const AutomatonInfo_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata AutomatonInfo_VarsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[4];
}
void AutomatonInfo_VarsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutomatonInfo_VarsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      AutomatonInfo_VarsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.logic.v3.AutomatonInfo.VarsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void AutomatonInfo::InitAsDefaultInstance() {
  ::ric::logic::v3::_AutomatonInfo_default_instance_._instance.get_mutable()->stats_ = const_cast< ::ric::logic::v3::AutomatonStats*>(
      ::ric::logic::v3::AutomatonStats::internal_default_instance());
}
class AutomatonInfo::HasBitSetters {
 public:
  static const ::ric::logic::v3::AutomatonStats& stats(const AutomatonInfo* msg);
};

const ::ric::logic::v3::AutomatonStats&
AutomatonInfo::HasBitSetters::stats(const AutomatonInfo* msg) {
  return *msg->stats_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutomatonInfo::kObjectIdFieldNumber;
const int AutomatonInfo::kAutomatonIdFieldNumber;
const int AutomatonInfo::kHashIdFieldNumber;
const int AutomatonInfo::kRevisionFieldNumber;
const int AutomatonInfo::kStatusFieldNumber;
const int AutomatonInfo::kStateFieldNumber;
const int AutomatonInfo::kPrevStateFieldNumber;
const int AutomatonInfo::kPrevEventFieldNumber;
const int AutomatonInfo::kStatsFieldNumber;
const int AutomatonInfo::kLogsFieldNumber;
const int AutomatonInfo::kVarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutomatonInfo::AutomatonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.AutomatonInfo)
}
AutomatonInfo::AutomatonInfo(const AutomatonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  hash_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash_id().size() > 0) {
    hash_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_id_);
  }
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.revision().size() > 0) {
    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  prev_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_state().size() > 0) {
    prev_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_state_);
  }
  prev_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_event().size() > 0) {
    prev_event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_event_);
  }
  if (from.has_stats()) {
    stats_ = new ::ric::logic::v3::AutomatonStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.AutomatonInfo)
}

void AutomatonInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_ = nullptr;
}

AutomatonInfo::~AutomatonInfo() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.AutomatonInfo)
  SharedDtor();
}

void AutomatonInfo::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void AutomatonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutomatonInfo& AutomatonInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AutomatonInfo_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void AutomatonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.AutomatonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  vars_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutomatonInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AutomatonInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string hash_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.hash_id");
        object = msg->mutable_hash_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string revision = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.revision");
        object = msg->mutable_revision();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string state = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.state");
        object = msg->mutable_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string prev_state = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.prev_state");
        object = msg->mutable_prev_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string prev_event = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonInfo.prev_event");
        object = msg->mutable_prev_event();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.logic.v3.AutomatonStats stats = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::AutomatonStats::_InternalParse;
        object = msg->mutable_stats();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ric.logic.v3.LogEntry logs = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::logic::v3::LogEntry::_InternalParse;
          object = msg->add_logs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->vars_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutomatonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.AutomatonInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash_id().data(), static_cast<int>(this->hash_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.hash_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string revision = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision().data(), static_cast<int>(this->revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_state().data(), static_cast<int>(this->prev_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.prev_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_event = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_event().data(), static_cast<int>(this->prev_event().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.prev_event"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.AutomatonStats stats = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ric.logic.v3.LogEntry logs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          AutomatonInfo_VarsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              AutomatonInfo_VarsEntry_DoNotUse,
              ::std::string, ::ric::logic::v3::AutomatonVarValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue > > parser(&vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonInfo.VarsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.AutomatonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.AutomatonInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutomatonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.AutomatonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // string automaton_id = 2;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->automaton_id(), output);
  }

  // string hash_id = 3;
  if (this->hash_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash_id().data(), static_cast<int>(this->hash_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.hash_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hash_id(), output);
  }

  // string revision = 4;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->revision(), output);
  }

  // string status = 5;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->status(), output);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->state(), output);
  }

  // string prev_state = 7;
  if (this->prev_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_state().data(), static_cast<int>(this->prev_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.prev_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->prev_state(), output);
  }

  // string prev_event = 8;
  if (this->prev_event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_event().data(), static_cast<int>(this->prev_event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.prev_event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->prev_event(), output);
  }

  // .ric.logic.v3.AutomatonStats stats = 9;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::stats(this), output);
  }

  // repeated .ric.logic.v3.LogEntry logs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->logs(static_cast<int>(i)),
      output);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 11;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.AutomatonInfo.VarsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AutomatonInfo_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<AutomatonInfo_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.AutomatonInfo)
}

::google::protobuf::uint8* AutomatonInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.AutomatonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // string automaton_id = 2;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->automaton_id(), target);
  }

  // string hash_id = 3;
  if (this->hash_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash_id().data(), static_cast<int>(this->hash_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.hash_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hash_id(), target);
  }

  // string revision = 4;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->revision(), target);
  }

  // string status = 5;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->status(), target);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->state(), target);
  }

  // string prev_state = 7;
  if (this->prev_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_state().data(), static_cast<int>(this->prev_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.prev_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->prev_state(), target);
  }

  // string prev_event = 8;
  if (this->prev_event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_event().data(), static_cast<int>(this->prev_event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonInfo.prev_event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->prev_event(), target);
  }

  // .ric.logic.v3.AutomatonStats stats = 9;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::stats(this), target);
  }

  // repeated .ric.logic.v3.LogEntry logs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->logs(static_cast<int>(i)), target);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 11;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.AutomatonInfo.VarsEntry.key");
      }
    };

    if (false &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AutomatonInfo_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<AutomatonInfo_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.AutomatonInfo)
  return target;
}

size_t AutomatonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.AutomatonInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.logic.v3.LogEntry logs = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vars_size());
  {
    ::std::unique_ptr<AutomatonInfo_VarsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
        it = this->vars().begin();
        it != this->vars().end(); ++it) {
      entry.reset(vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 2;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // string hash_id = 3;
  if (this->hash_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash_id());
  }

  // string revision = 4;
  if (this->revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->revision());
  }

  // string status = 5;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string prev_state = 7;
  if (this->prev_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_state());
  }

  // string prev_event = 8;
  if (this->prev_event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_event());
  }

  // .ric.logic.v3.AutomatonStats stats = 9;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutomatonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.AutomatonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AutomatonInfo* source =
      ::google::protobuf::DynamicCastToGenerated<AutomatonInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.AutomatonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.AutomatonInfo)
    MergeFrom(*source);
  }
}

void AutomatonInfo::MergeFrom(const AutomatonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.AutomatonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  vars_.MergeFrom(from.vars_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.hash_id().size() > 0) {

    hash_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_id_);
  }
  if (from.revision().size() > 0) {

    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.prev_state().size() > 0) {

    prev_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_state_);
  }
  if (from.prev_event().size() > 0) {

    prev_event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_event_);
  }
  if (from.has_stats()) {
    mutable_stats()->::ric::logic::v3::AutomatonStats::MergeFrom(from.stats());
  }
}

void AutomatonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.AutomatonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatonInfo::CopyFrom(const AutomatonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.AutomatonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatonInfo::IsInitialized() const {
  return true;
}

void AutomatonInfo::Swap(AutomatonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutomatonInfo::InternalSwap(AutomatonInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&logs_)->InternalSwap(CastToBase(&other->logs_));
  vars_.Swap(&other->vars_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_id_.Swap(&other->hash_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  revision_.Swap(&other->revision_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_state_.Swap(&other->prev_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_event_.Swap(&other->prev_event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stats_, other->stats_);
}

::google::protobuf::Metadata AutomatonInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AutomatonEvent::InitAsDefaultInstance() {
}
class AutomatonEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutomatonEvent::kTypeFieldNumber;
const int AutomatonEvent::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutomatonEvent::AutomatonEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.AutomatonEvent)
}
AutomatonEvent::AutomatonEvent(const AutomatonEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.AutomatonEvent)
}

void AutomatonEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AutomatonEvent::~AutomatonEvent() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.AutomatonEvent)
  SharedDtor();
}

void AutomatonEvent::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AutomatonEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutomatonEvent& AutomatonEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AutomatonEvent_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void AutomatonEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.AutomatonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutomatonEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AutomatonEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonEvent.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string payload = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.AutomatonEvent.payload");
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutomatonEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.AutomatonEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonEvent.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.AutomatonEvent.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.AutomatonEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.AutomatonEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutomatonEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.AutomatonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonEvent.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonEvent.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.AutomatonEvent)
}

::google::protobuf::uint8* AutomatonEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.AutomatonEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonEvent.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.AutomatonEvent.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.AutomatonEvent)
  return target;
}

size_t AutomatonEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.AutomatonEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutomatonEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.AutomatonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AutomatonEvent* source =
      ::google::protobuf::DynamicCastToGenerated<AutomatonEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.AutomatonEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.AutomatonEvent)
    MergeFrom(*source);
  }
}

void AutomatonEvent::MergeFrom(const AutomatonEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.AutomatonEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void AutomatonEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.AutomatonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatonEvent::CopyFrom(const AutomatonEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.AutomatonEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatonEvent::IsInitialized() const {
  return true;
}

void AutomatonEvent::Swap(AutomatonEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutomatonEvent::InternalSwap(AutomatonEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AutomatonEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActionResult::InitAsDefaultInstance() {
}
class ActionResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionResult::kStatusFieldNumber;
const int ActionResult::kPayloadFieldNumber;
const int ActionResult::kMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionResult::ActionResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.ActionResult)
}
ActionResult::ActionResult(const ActionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ms_ = from.ms_;
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.ActionResult)
}

void ActionResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ms_ = 0;
}

ActionResult::~ActionResult() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.ActionResult)
  SharedDtor();
}

void ActionResult::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionResult& ActionResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActionResult_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void ActionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.ActionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ms_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActionResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.ActionResult.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string payload = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.ActionResult.payload");
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 ms = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.ActionResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.ActionResult.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.ActionResult.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.ActionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.ActionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.ActionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.ActionResult.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.ActionResult.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payload(), output);
  }

  // int32 ms = 3;
  if (this->ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.ActionResult)
}

::google::protobuf::uint8* ActionResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.ActionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.ActionResult.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.ActionResult.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }

  // int32 ms = 3;
  if (this->ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.ActionResult)
  return target;
}

size_t ActionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.ActionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  // int32 ms = 3;
  if (this->ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.ActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionResult* source =
      ::google::protobuf::DynamicCastToGenerated<ActionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.ActionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.ActionResult)
    MergeFrom(*source);
  }
}

void ActionResult::MergeFrom(const ActionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.ActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.ms() != 0) {
    set_ms(from.ms());
  }
}

void ActionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.ActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionResult::CopyFrom(const ActionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.ActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionResult::IsInitialized() const {
  return true;
}

void ActionResult::Swap(ActionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionResult::InternalSwap(ActionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ms_, other->ms_);
}

::google::protobuf::Metadata ActionResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogEntry::InitAsDefaultInstance() {
  ::ric::logic::v3::_LogEntry_default_instance_._instance.get_mutable()->event_ = const_cast< ::ric::logic::v3::AutomatonEvent*>(
      ::ric::logic::v3::AutomatonEvent::internal_default_instance());
  ::ric::logic::v3::_LogEntry_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
  ::ric::logic::v3::_LogEntry_default_instance_._instance.get_mutable()->result_ = const_cast< ::ric::logic::v3::ActionResult*>(
      ::ric::logic::v3::ActionResult::internal_default_instance());
}
class LogEntry::HasBitSetters {
 public:
  static const ::ric::logic::v3::AutomatonEvent& event(const LogEntry* msg);
  static const ::ric::logic::v3::UserContext& ctx(const LogEntry* msg);
  static const ::ric::logic::v3::ActionResult& result(const LogEntry* msg);
};

const ::ric::logic::v3::AutomatonEvent&
LogEntry::HasBitSetters::event(const LogEntry* msg) {
  return *msg->event_;
}
const ::ric::logic::v3::UserContext&
LogEntry::HasBitSetters::ctx(const LogEntry* msg) {
  return *msg->ctx_;
}
const ::ric::logic::v3::ActionResult&
LogEntry::HasBitSetters::result(const LogEntry* msg) {
  return *msg->result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kIdFieldNumber;
const int LogEntry::kTsFieldNumber;
const int LogEntry::kObjectIdFieldNumber;
const int LogEntry::kAutomatonIdFieldNumber;
const int LogEntry::kHashIdFieldNumber;
const int LogEntry::kRevisionFieldNumber;
const int LogEntry::kInstanceFieldNumber;
const int LogEntry::kCategoryFieldNumber;
const int LogEntry::kMessageFieldNumber;
const int LogEntry::kEventFieldNumber;
const int LogEntry::kStateFieldNumber;
const int LogEntry::kPrevStateFieldNumber;
const int LogEntry::kCtxFieldNumber;
const int LogEntry::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  hash_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash_id().size() > 0) {
    hash_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_id_);
  }
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.revision().size() > 0) {
    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance().size() > 0) {
    instance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_);
  }
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  prev_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_state().size() > 0) {
    prev_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_state_);
  }
  if (from.has_event()) {
    event_ = new ::ric::logic::v3::AutomatonEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_result()) {
    result_ = new ::ric::logic::v3::ActionResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.LogEntry)
}

void LogEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&event_)) + sizeof(ts_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete result_;
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogEntry_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ts_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 ts = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string object_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string hash_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.hash_id");
        object = msg->mutable_hash_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string revision = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.revision");
        object = msg->mutable_revision();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string instance = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.instance");
        object = msg->mutable_instance();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string category = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.category");
        object = msg->mutable_category();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string message = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.logic.v3.AutomatonEvent event = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::AutomatonEvent::_InternalParse;
        object = msg->mutable_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string state = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.state");
        object = msg->mutable_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string prev_state = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.LogEntry.prev_state");
        object = msg->mutable_prev_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.logic.v3.UserContext ctx = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ric.logic.v3.ActionResult result = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::ActionResult::_InternalParse;
        object = msg->mutable_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.LogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash_id().data(), static_cast<int>(this->hash_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.hash_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string revision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision().data(), static_cast<int>(this->revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance().data(), static_cast<int>(this->instance().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.instance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string category = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.AutomatonEvent event = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_state().data(), static_cast<int>(this->prev_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.LogEntry.prev_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.UserContext ctx = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.ActionResult result = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.LogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ts(), output);
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->object_id(), output);
  }

  // string automaton_id = 4;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->automaton_id(), output);
  }

  // string hash_id = 5;
  if (this->hash_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash_id().data(), static_cast<int>(this->hash_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.hash_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hash_id(), output);
  }

  // string revision = 6;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->revision(), output);
  }

  // string instance = 7;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), static_cast<int>(this->instance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->instance(), output);
  }

  // string category = 8;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->category(), output);
  }

  // string message = 9;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->message(), output);
  }

  // .ric.logic.v3.AutomatonEvent event = 10;
  if (this->has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::event(this), output);
  }

  // string state = 11;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->state(), output);
  }

  // string prev_state = 12;
  if (this->prev_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_state().data(), static_cast<int>(this->prev_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.prev_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->prev_state(), output);
  }

  // .ric.logic.v3.UserContext ctx = 13;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::ctx(this), output);
  }

  // .ric.logic.v3.ActionResult result = 14;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ts(), target);
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object_id(), target);
  }

  // string automaton_id = 4;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->automaton_id(), target);
  }

  // string hash_id = 5;
  if (this->hash_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash_id().data(), static_cast<int>(this->hash_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.hash_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hash_id(), target);
  }

  // string revision = 6;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->revision(), target);
  }

  // string instance = 7;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), static_cast<int>(this->instance().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->instance(), target);
  }

  // string category = 8;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->category(), target);
  }

  // string message = 9;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->message(), target);
  }

  // .ric.logic.v3.AutomatonEvent event = 10;
  if (this->has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::event(this), target);
  }

  // string state = 11;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->state(), target);
  }

  // string prev_state = 12;
  if (this->prev_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_state().data(), static_cast<int>(this->prev_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.LogEntry.prev_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->prev_state(), target);
  }

  // .ric.logic.v3.UserContext ctx = 13;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::ctx(this), target);
  }

  // .ric.logic.v3.ActionResult result = 14;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.LogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string object_id = 3;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 4;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // string hash_id = 5;
  if (this->hash_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash_id());
  }

  // string revision = 6;
  if (this->revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->revision());
  }

  // string instance = 7;
  if (this->instance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance());
  }

  // string category = 8;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // string message = 9;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string state = 11;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string prev_state = 12;
  if (this->prev_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_state());
  }

  // .ric.logic.v3.AutomatonEvent event = 10;
  if (this->has_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // .ric.logic.v3.UserContext ctx = 13;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.logic.v3.ActionResult result = 14;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.hash_id().size() > 0) {

    hash_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_id_);
  }
  if (from.revision().size() > 0) {

    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  if (from.instance().size() > 0) {

    instance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.prev_state().size() > 0) {

    prev_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_state_);
  }
  if (from.has_event()) {
    mutable_event()->::ric::logic::v3::AutomatonEvent::MergeFrom(from.event());
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_result()) {
    mutable_result()->::ric::logic::v3::ActionResult::MergeFrom(from.result());
  }
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_id_.Swap(&other->hash_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  revision_.Swap(&other->revision_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instance_.Swap(&other->instance_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_state_.Swap(&other->prev_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(ctx_, other->ctx_);
  swap(result_, other->result_);
  swap(ts_, other->ts_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WaitCondition::InitAsDefaultInstance() {
}
class WaitCondition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitCondition::kTimeoutFieldNumber;
const int WaitCondition::kEventFieldNumber;
const int WaitCondition::kStateFieldNumber;
const int WaitCondition::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitCondition::WaitCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.WaitCondition)
}
WaitCondition::WaitCondition(const WaitCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timeout().size() > 0) {
    timeout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeout_);
  }
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event().size() > 0) {
    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.WaitCondition)
}

void WaitCondition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WaitCondition::~WaitCondition() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.WaitCondition)
  SharedDtor();
}

void WaitCondition::SharedDtor() {
  timeout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WaitCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitCondition& WaitCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WaitCondition_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void WaitCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.WaitCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WaitCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string timeout = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.WaitCondition.timeout");
        object = msg->mutable_timeout();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string event = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.WaitCondition.event");
        object = msg->mutable_event();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.WaitCondition.state");
        object = msg->mutable_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.WaitCondition.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.WaitCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string timeout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timeout().data(), static_cast<int>(this->timeout().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.WaitCondition.timeout"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), static_cast<int>(this->event().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.WaitCondition.event"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.WaitCondition.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.WaitCondition.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.WaitCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.WaitCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.WaitCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timeout = 1;
  if (this->timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeout().data(), static_cast<int>(this->timeout().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.timeout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->timeout(), output);
  }

  // string event = 2;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->event(), output);
  }

  // string state = 3;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->state(), output);
  }

  // string status = 4;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.WaitCondition)
}

::google::protobuf::uint8* WaitCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.WaitCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timeout = 1;
  if (this->timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeout().data(), static_cast<int>(this->timeout().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.timeout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timeout(), target);
  }

  // string event = 2;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event(), target);
  }

  // string state = 3;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }

  // string status = 4;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitCondition.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.WaitCondition)
  return target;
}

size_t WaitCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.WaitCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timeout = 1;
  if (this->timeout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timeout());
  }

  // string event = 2;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  // string state = 3;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string status = 4;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.WaitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitCondition* source =
      ::google::protobuf::DynamicCastToGenerated<WaitCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.WaitCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.WaitCondition)
    MergeFrom(*source);
  }
}

void WaitCondition::MergeFrom(const WaitCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.WaitCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeout().size() > 0) {

    timeout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeout_);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void WaitCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.WaitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitCondition::CopyFrom(const WaitCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.WaitCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitCondition::IsInitialized() const {
  return true;
}

void WaitCondition::Swap(WaitCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitCondition::InternalSwap(WaitCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  timeout_.Swap(&other->timeout_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WaitCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInstanceInfoRequest::InitAsDefaultInstance() {
}
class GetInstanceInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceInfoRequest::GetInstanceInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.GetInstanceInfoRequest)
}
GetInstanceInfoRequest::GetInstanceInfoRequest(const GetInstanceInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.GetInstanceInfoRequest)
}

void GetInstanceInfoRequest::SharedCtor() {
}

GetInstanceInfoRequest::~GetInstanceInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.GetInstanceInfoRequest)
  SharedDtor();
}

void GetInstanceInfoRequest::SharedDtor() {
}

void GetInstanceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstanceInfoRequest& GetInstanceInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInstanceInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void GetInstanceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.GetInstanceInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInstanceInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInstanceInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInstanceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.GetInstanceInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.GetInstanceInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.GetInstanceInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInstanceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.GetInstanceInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.GetInstanceInfoRequest)
}

::google::protobuf::uint8* GetInstanceInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.GetInstanceInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.GetInstanceInfoRequest)
  return target;
}

size_t GetInstanceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.GetInstanceInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstanceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.GetInstanceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetInstanceInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.GetInstanceInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.GetInstanceInfoRequest)
    MergeFrom(*source);
  }
}

void GetInstanceInfoRequest::MergeFrom(const GetInstanceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.GetInstanceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetInstanceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.GetInstanceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceInfoRequest::CopyFrom(const GetInstanceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.GetInstanceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceInfoRequest::IsInitialized() const {
  return true;
}

void GetInstanceInfoRequest::Swap(GetInstanceInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceInfoRequest::InternalSwap(GetInstanceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetInstanceInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInstanceInfoResponse::InitAsDefaultInstance() {
}
class GetInstanceInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInstanceInfoResponse::kHostnameFieldNumber;
const int GetInstanceInfoResponse::kStatusFieldNumber;
const int GetInstanceInfoResponse::kStartedAtFieldNumber;
const int GetInstanceInfoResponse::kObjectsTotalFieldNumber;
const int GetInstanceInfoResponse::kContainersTotalFieldNumber;
const int GetInstanceInfoResponse::kContainersRunningFieldNumber;
const int GetInstanceInfoResponse::kObjectIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceInfoResponse::GetInstanceInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.GetInstanceInfoResponse)
}
GetInstanceInfoResponse::GetInstanceInfoResponse(const GetInstanceInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      object_ids_(from.object_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&started_at_, &from.started_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&containers_running_) -
    reinterpret_cast<char*>(&started_at_)) + sizeof(containers_running_));
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.GetInstanceInfoResponse)
}

void GetInstanceInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetInstanceInfoResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&containers_running_) -
      reinterpret_cast<char*>(&started_at_)) + sizeof(containers_running_));
}

GetInstanceInfoResponse::~GetInstanceInfoResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.GetInstanceInfoResponse)
  SharedDtor();
}

void GetInstanceInfoResponse::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInstanceInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstanceInfoResponse& GetInstanceInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInstanceInfoResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void GetInstanceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.GetInstanceInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&containers_running_) -
      reinterpret_cast<char*>(&started_at_)) + sizeof(containers_running_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInstanceInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInstanceInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetInstanceInfoResponse.hostname");
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetInstanceInfoResponse.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 started_at = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_started_at(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 objects_total = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_objects_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 containers_total = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_containers_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 containers_running = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_containers_running(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string object_ids = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetInstanceInfoResponse.object_ids");
          object = msg->add_object_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInstanceInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.GetInstanceInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetInstanceInfoResponse.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetInstanceInfoResponse.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 started_at = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &started_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 objects_total = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objects_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 containers_total = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &containers_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 containers_running = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &containers_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string object_ids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_object_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_ids(this->object_ids_size() - 1).data(),
            static_cast<int>(this->object_ids(this->object_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetInstanceInfoResponse.object_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.GetInstanceInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.GetInstanceInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInstanceInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.GetInstanceInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetInstanceInfoResponse.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetInstanceInfoResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // int64 started_at = 3;
  if (this->started_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->started_at(), output);
  }

  // int64 objects_total = 4;
  if (this->objects_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->objects_total(), output);
  }

  // int64 containers_total = 5;
  if (this->containers_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->containers_total(), output);
  }

  // int64 containers_running = 6;
  if (this->containers_running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->containers_running(), output);
  }

  // repeated string object_ids = 7;
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_ids(i).data(), static_cast<int>(this->object_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetInstanceInfoResponse.object_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->object_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.GetInstanceInfoResponse)
}

::google::protobuf::uint8* GetInstanceInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.GetInstanceInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetInstanceInfoResponse.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetInstanceInfoResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // int64 started_at = 3;
  if (this->started_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->started_at(), target);
  }

  // int64 objects_total = 4;
  if (this->objects_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->objects_total(), target);
  }

  // int64 containers_total = 5;
  if (this->containers_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->containers_total(), target);
  }

  // int64 containers_running = 6;
  if (this->containers_running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->containers_running(), target);
  }

  // repeated string object_ids = 7;
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_ids(i).data(), static_cast<int>(this->object_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetInstanceInfoResponse.object_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->object_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.GetInstanceInfoResponse)
  return target;
}

size_t GetInstanceInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.GetInstanceInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string object_ids = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->object_ids_size());
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->object_ids(i));
  }

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // int64 started_at = 3;
  if (this->started_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->started_at());
  }

  // int64 objects_total = 4;
  if (this->objects_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->objects_total());
  }

  // int64 containers_total = 5;
  if (this->containers_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->containers_total());
  }

  // int64 containers_running = 6;
  if (this->containers_running() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->containers_running());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstanceInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.GetInstanceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetInstanceInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.GetInstanceInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.GetInstanceInfoResponse)
    MergeFrom(*source);
  }
}

void GetInstanceInfoResponse::MergeFrom(const GetInstanceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.GetInstanceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.started_at() != 0) {
    set_started_at(from.started_at());
  }
  if (from.objects_total() != 0) {
    set_objects_total(from.objects_total());
  }
  if (from.containers_total() != 0) {
    set_containers_total(from.containers_total());
  }
  if (from.containers_running() != 0) {
    set_containers_running(from.containers_running());
  }
}

void GetInstanceInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.GetInstanceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceInfoResponse::CopyFrom(const GetInstanceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.GetInstanceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceInfoResponse::IsInitialized() const {
  return true;
}

void GetInstanceInfoResponse::Swap(GetInstanceInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceInfoResponse::InternalSwap(GetInstanceInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_ids_.InternalSwap(CastToBase(&other->object_ids_));
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(started_at_, other->started_at_);
  swap(objects_total_, other->objects_total_);
  swap(containers_total_, other->containers_total_);
  swap(containers_running_, other->containers_running_);
}

::google::protobuf::Metadata GetInstanceInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

StartAutomatonRequest_VarsEntry_DoNotUse::StartAutomatonRequest_VarsEntry_DoNotUse() {}
StartAutomatonRequest_VarsEntry_DoNotUse::StartAutomatonRequest_VarsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void StartAutomatonRequest_VarsEntry_DoNotUse::MergeFrom(const StartAutomatonRequest_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StartAutomatonRequest_VarsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[12];
}
void StartAutomatonRequest_VarsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartAutomatonRequest_VarsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      StartAutomatonRequest_VarsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.logic.v3.StartAutomatonRequest.VarsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void StartAutomatonRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_StartAutomatonRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
}
class StartAutomatonRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const StartAutomatonRequest* msg);
};

const ::ric::logic::v3::UserContext&
StartAutomatonRequest::HasBitSetters::ctx(const StartAutomatonRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartAutomatonRequest::kCtxFieldNumber;
const int StartAutomatonRequest::kObjectIdFieldNumber;
const int StartAutomatonRequest::kAutomatonIdFieldNumber;
const int StartAutomatonRequest::kVarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartAutomatonRequest::StartAutomatonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.StartAutomatonRequest)
}
StartAutomatonRequest::StartAutomatonRequest(const StartAutomatonRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.StartAutomatonRequest)
}

void StartAutomatonRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StartAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

StartAutomatonRequest::~StartAutomatonRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.StartAutomatonRequest)
  SharedDtor();
}

void StartAutomatonRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void StartAutomatonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAutomatonRequest& StartAutomatonRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void StartAutomatonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.StartAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartAutomatonRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartAutomatonRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.StartAutomatonRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.StartAutomatonRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->vars_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartAutomatonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.StartAutomatonRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StartAutomatonRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StartAutomatonRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          StartAutomatonRequest_VarsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StartAutomatonRequest_VarsEntry_DoNotUse,
              ::std::string, ::ric::logic::v3::AutomatonVarValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue > > parser(&vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StartAutomatonRequest.VarsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.StartAutomatonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.StartAutomatonRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartAutomatonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.StartAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.StartAutomatonRequest.VarsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StartAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StartAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.StartAutomatonRequest)
}

::google::protobuf::uint8* StartAutomatonRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.StartAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.StartAutomatonRequest.VarsEntry.key");
      }
    };

    if (false &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StartAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<StartAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.StartAutomatonRequest)
  return target;
}

size_t StartAutomatonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.StartAutomatonRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vars_size());
  {
    ::std::unique_ptr<StartAutomatonRequest_VarsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
        it = this->vars().begin();
        it != this->vars().end(); ++it) {
      entry.reset(vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAutomatonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.StartAutomatonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAutomatonRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StartAutomatonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.StartAutomatonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.StartAutomatonRequest)
    MergeFrom(*source);
  }
}

void StartAutomatonRequest::MergeFrom(const StartAutomatonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.StartAutomatonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
}

void StartAutomatonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.StartAutomatonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAutomatonRequest::CopyFrom(const StartAutomatonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.StartAutomatonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAutomatonRequest::IsInitialized() const {
  return true;
}

void StartAutomatonRequest::Swap(StartAutomatonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartAutomatonRequest::InternalSwap(StartAutomatonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata StartAutomatonRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartAutomatonMultiRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_StartAutomatonMultiRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
}
class StartAutomatonMultiRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const StartAutomatonMultiRequest* msg);
};

const ::ric::logic::v3::UserContext&
StartAutomatonMultiRequest::HasBitSetters::ctx(const StartAutomatonMultiRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartAutomatonMultiRequest::kCtxFieldNumber;
const int StartAutomatonMultiRequest::kObjectIdsFieldNumber;
const int StartAutomatonMultiRequest::kAutomatonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartAutomatonMultiRequest::StartAutomatonMultiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.StartAutomatonMultiRequest)
}
StartAutomatonMultiRequest::StartAutomatonMultiRequest(const StartAutomatonMultiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      object_ids_(from.object_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.StartAutomatonMultiRequest)
}

void StartAutomatonMultiRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StartAutomatonMultiRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

StartAutomatonMultiRequest::~StartAutomatonMultiRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.StartAutomatonMultiRequest)
  SharedDtor();
}

void StartAutomatonMultiRequest::SharedDtor() {
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void StartAutomatonMultiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAutomatonMultiRequest& StartAutomatonMultiRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartAutomatonMultiRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void StartAutomatonMultiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.StartAutomatonMultiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartAutomatonMultiRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartAutomatonMultiRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string object_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.logic.v3.StartAutomatonMultiRequest.object_ids");
          object = msg->add_object_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.StartAutomatonMultiRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartAutomatonMultiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.StartAutomatonMultiRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string object_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_object_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_ids(this->object_ids_size() - 1).data(),
            static_cast<int>(this->object_ids(this->object_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StartAutomatonMultiRequest.object_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StartAutomatonMultiRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.StartAutomatonMultiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.StartAutomatonMultiRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartAutomatonMultiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.StartAutomatonMultiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // repeated string object_ids = 2;
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_ids(i).data(), static_cast<int>(this->object_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonMultiRequest.object_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_ids(i), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonMultiRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.StartAutomatonMultiRequest)
}

::google::protobuf::uint8* StartAutomatonMultiRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.StartAutomatonMultiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // repeated string object_ids = 2;
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_ids(i).data(), static_cast<int>(this->object_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonMultiRequest.object_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->object_ids(i), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StartAutomatonMultiRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.StartAutomatonMultiRequest)
  return target;
}

size_t StartAutomatonMultiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.StartAutomatonMultiRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string object_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->object_ids_size());
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->object_ids(i));
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAutomatonMultiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.StartAutomatonMultiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAutomatonMultiRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StartAutomatonMultiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.StartAutomatonMultiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.StartAutomatonMultiRequest)
    MergeFrom(*source);
  }
}

void StartAutomatonMultiRequest::MergeFrom(const StartAutomatonMultiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.StartAutomatonMultiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
}

void StartAutomatonMultiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.StartAutomatonMultiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAutomatonMultiRequest::CopyFrom(const StartAutomatonMultiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.StartAutomatonMultiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAutomatonMultiRequest::IsInitialized() const {
  return true;
}

void StartAutomatonMultiRequest::Swap(StartAutomatonMultiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartAutomatonMultiRequest::InternalSwap(StartAutomatonMultiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_ids_.InternalSwap(CastToBase(&other->object_ids_));
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata StartAutomatonMultiRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartAutomatonResponse::InitAsDefaultInstance() {
  ::ric::logic::v3::_StartAutomatonResponse_default_instance_._instance.get_mutable()->automaton_ = const_cast< ::ric::logic::v3::AutomatonInfo*>(
      ::ric::logic::v3::AutomatonInfo::internal_default_instance());
}
class StartAutomatonResponse::HasBitSetters {
 public:
  static const ::ric::logic::v3::AutomatonInfo& automaton(const StartAutomatonResponse* msg);
};

const ::ric::logic::v3::AutomatonInfo&
StartAutomatonResponse::HasBitSetters::automaton(const StartAutomatonResponse* msg) {
  return *msg->automaton_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartAutomatonResponse::kAutomatonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartAutomatonResponse::StartAutomatonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.StartAutomatonResponse)
}
StartAutomatonResponse::StartAutomatonResponse(const StartAutomatonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_automaton()) {
    automaton_ = new ::ric::logic::v3::AutomatonInfo(*from.automaton_);
  } else {
    automaton_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.StartAutomatonResponse)
}

void StartAutomatonResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StartAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  automaton_ = nullptr;
}

StartAutomatonResponse::~StartAutomatonResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.StartAutomatonResponse)
  SharedDtor();
}

void StartAutomatonResponse::SharedDtor() {
  if (this != internal_default_instance()) delete automaton_;
}

void StartAutomatonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartAutomatonResponse& StartAutomatonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void StartAutomatonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.StartAutomatonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && automaton_ != nullptr) {
    delete automaton_;
  }
  automaton_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartAutomatonResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartAutomatonResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.AutomatonInfo automaton = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::AutomatonInfo::_InternalParse;
        object = msg->mutable_automaton();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartAutomatonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.StartAutomatonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.AutomatonInfo automaton = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_automaton()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.StartAutomatonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.StartAutomatonResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartAutomatonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.StartAutomatonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.AutomatonInfo automaton = 1;
  if (this->has_automaton()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::automaton(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.StartAutomatonResponse)
}

::google::protobuf::uint8* StartAutomatonResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.StartAutomatonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.AutomatonInfo automaton = 1;
  if (this->has_automaton()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::automaton(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.StartAutomatonResponse)
  return target;
}

size_t StartAutomatonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.StartAutomatonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.logic.v3.AutomatonInfo automaton = 1;
  if (this->has_automaton()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *automaton_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAutomatonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.StartAutomatonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAutomatonResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StartAutomatonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.StartAutomatonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.StartAutomatonResponse)
    MergeFrom(*source);
  }
}

void StartAutomatonResponse::MergeFrom(const StartAutomatonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.StartAutomatonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_automaton()) {
    mutable_automaton()->::ric::logic::v3::AutomatonInfo::MergeFrom(from.automaton());
  }
}

void StartAutomatonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.StartAutomatonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAutomatonResponse::CopyFrom(const StartAutomatonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.StartAutomatonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAutomatonResponse::IsInitialized() const {
  return true;
}

void StartAutomatonResponse::Swap(StartAutomatonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartAutomatonResponse::InternalSwap(StartAutomatonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(automaton_, other->automaton_);
}

::google::protobuf::Metadata StartAutomatonResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopAutomatonRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_StopAutomatonRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
}
class StopAutomatonRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const StopAutomatonRequest* msg);
};

const ::ric::logic::v3::UserContext&
StopAutomatonRequest::HasBitSetters::ctx(const StopAutomatonRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopAutomatonRequest::kCtxFieldNumber;
const int StopAutomatonRequest::kObjectIdFieldNumber;
const int StopAutomatonRequest::kAutomatonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopAutomatonRequest::StopAutomatonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.StopAutomatonRequest)
}
StopAutomatonRequest::StopAutomatonRequest(const StopAutomatonRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.StopAutomatonRequest)
}

void StopAutomatonRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

StopAutomatonRequest::~StopAutomatonRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.StopAutomatonRequest)
  SharedDtor();
}

void StopAutomatonRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void StopAutomatonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopAutomatonRequest& StopAutomatonRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void StopAutomatonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.StopAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopAutomatonRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopAutomatonRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.StopAutomatonRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.StopAutomatonRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopAutomatonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.StopAutomatonRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StopAutomatonRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.StopAutomatonRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.StopAutomatonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.StopAutomatonRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopAutomatonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.StopAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StopAutomatonRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StopAutomatonRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.StopAutomatonRequest)
}

::google::protobuf::uint8* StopAutomatonRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.StopAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StopAutomatonRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.StopAutomatonRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.StopAutomatonRequest)
  return target;
}

size_t StopAutomatonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.StopAutomatonRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopAutomatonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.StopAutomatonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopAutomatonRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopAutomatonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.StopAutomatonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.StopAutomatonRequest)
    MergeFrom(*source);
  }
}

void StopAutomatonRequest::MergeFrom(const StopAutomatonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.StopAutomatonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
}

void StopAutomatonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.StopAutomatonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAutomatonRequest::CopyFrom(const StopAutomatonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.StopAutomatonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAutomatonRequest::IsInitialized() const {
  return true;
}

void StopAutomatonRequest::Swap(StopAutomatonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopAutomatonRequest::InternalSwap(StopAutomatonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata StopAutomatonRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

RunAutomatonRequest_VarsEntry_DoNotUse::RunAutomatonRequest_VarsEntry_DoNotUse() {}
RunAutomatonRequest_VarsEntry_DoNotUse::RunAutomatonRequest_VarsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void RunAutomatonRequest_VarsEntry_DoNotUse::MergeFrom(const RunAutomatonRequest_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RunAutomatonRequest_VarsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[17];
}
void RunAutomatonRequest_VarsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunAutomatonRequest_VarsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      RunAutomatonRequest_VarsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.logic.v3.RunAutomatonRequest.VarsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void RunAutomatonRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_RunAutomatonRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
  ::ric::logic::v3::_RunAutomatonRequest_default_instance_._instance.get_mutable()->wait_ = const_cast< ::ric::logic::v3::WaitCondition*>(
      ::ric::logic::v3::WaitCondition::internal_default_instance());
}
class RunAutomatonRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const RunAutomatonRequest* msg);
  static const ::ric::logic::v3::WaitCondition& wait(const RunAutomatonRequest* msg);
};

const ::ric::logic::v3::UserContext&
RunAutomatonRequest::HasBitSetters::ctx(const RunAutomatonRequest* msg) {
  return *msg->ctx_;
}
const ::ric::logic::v3::WaitCondition&
RunAutomatonRequest::HasBitSetters::wait(const RunAutomatonRequest* msg) {
  return *msg->wait_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunAutomatonRequest::kCtxFieldNumber;
const int RunAutomatonRequest::kObjectIdFieldNumber;
const int RunAutomatonRequest::kAutomatonIdFieldNumber;
const int RunAutomatonRequest::kWaitFieldNumber;
const int RunAutomatonRequest::kOnRunningFieldNumber;
const int RunAutomatonRequest::kVarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunAutomatonRequest::RunAutomatonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.RunAutomatonRequest)
}
RunAutomatonRequest::RunAutomatonRequest(const RunAutomatonRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  on_running_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.on_running().size() > 0) {
    on_running_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.on_running_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_wait()) {
    wait_ = new ::ric::logic::v3::WaitCondition(*from.wait_);
  } else {
    wait_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.RunAutomatonRequest)
}

void RunAutomatonRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  on_running_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(wait_));
}

RunAutomatonRequest::~RunAutomatonRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.RunAutomatonRequest)
  SharedDtor();
}

void RunAutomatonRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  on_running_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete wait_;
}

void RunAutomatonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunAutomatonRequest& RunAutomatonRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunAutomatonRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void RunAutomatonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.RunAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  on_running_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wait_ != nullptr) {
    delete wait_;
  }
  wait_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunAutomatonRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunAutomatonRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.RunAutomatonRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.RunAutomatonRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.logic.v3.WaitCondition wait = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::WaitCondition::_InternalParse;
        object = msg->mutable_wait();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string on_running = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.RunAutomatonRequest.on_running");
        object = msg->mutable_on_running();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->vars_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunAutomatonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.RunAutomatonRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.RunAutomatonRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.RunAutomatonRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.WaitCondition wait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wait()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string on_running = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_running()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->on_running().data(), static_cast<int>(this->on_running().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.RunAutomatonRequest.on_running"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          RunAutomatonRequest_VarsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RunAutomatonRequest_VarsEntry_DoNotUse,
              ::std::string, ::ric::logic::v3::AutomatonVarValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue > > parser(&vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.RunAutomatonRequest.VarsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.RunAutomatonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.RunAutomatonRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunAutomatonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.RunAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.RunAutomatonRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.RunAutomatonRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  // .ric.logic.v3.WaitCondition wait = 4;
  if (this->has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::wait(this), output);
  }

  // string on_running = 6;
  if (this->on_running().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->on_running().data(), static_cast<int>(this->on_running().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.RunAutomatonRequest.on_running");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->on_running(), output);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 7;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.RunAutomatonRequest.VarsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RunAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<RunAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.RunAutomatonRequest)
}

::google::protobuf::uint8* RunAutomatonRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.RunAutomatonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.RunAutomatonRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.RunAutomatonRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  // .ric.logic.v3.WaitCondition wait = 4;
  if (this->has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::wait(this), target);
  }

  // string on_running = 6;
  if (this->on_running().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->on_running().data(), static_cast<int>(this->on_running().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.RunAutomatonRequest.on_running");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->on_running(), target);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 7;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.RunAutomatonRequest.VarsEntry.key");
      }
    };

    if (false &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RunAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<RunAutomatonRequest_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.RunAutomatonRequest)
  return target;
}

size_t RunAutomatonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.RunAutomatonRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vars_size());
  {
    ::std::unique_ptr<RunAutomatonRequest_VarsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
        it = this->vars().begin();
        it != this->vars().end(); ++it) {
      entry.reset(vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // string on_running = 6;
  if (this->on_running().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->on_running());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.logic.v3.WaitCondition wait = 4;
  if (this->has_wait()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wait_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunAutomatonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.RunAutomatonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunAutomatonRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RunAutomatonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.RunAutomatonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.RunAutomatonRequest)
    MergeFrom(*source);
  }
}

void RunAutomatonRequest::MergeFrom(const RunAutomatonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.RunAutomatonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.on_running().size() > 0) {

    on_running_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.on_running_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_wait()) {
    mutable_wait()->::ric::logic::v3::WaitCondition::MergeFrom(from.wait());
  }
}

void RunAutomatonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.RunAutomatonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunAutomatonRequest::CopyFrom(const RunAutomatonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.RunAutomatonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunAutomatonRequest::IsInitialized() const {
  return true;
}

void RunAutomatonRequest::Swap(RunAutomatonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunAutomatonRequest::InternalSwap(RunAutomatonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  on_running_.Swap(&other->on_running_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
  swap(wait_, other->wait_);
}

::google::protobuf::Metadata RunAutomatonRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopAutomatonResponse::InitAsDefaultInstance() {
  ::ric::logic::v3::_StopAutomatonResponse_default_instance_._instance.get_mutable()->automaton_ = const_cast< ::ric::logic::v3::AutomatonInfo*>(
      ::ric::logic::v3::AutomatonInfo::internal_default_instance());
}
class StopAutomatonResponse::HasBitSetters {
 public:
  static const ::ric::logic::v3::AutomatonInfo& automaton(const StopAutomatonResponse* msg);
};

const ::ric::logic::v3::AutomatonInfo&
StopAutomatonResponse::HasBitSetters::automaton(const StopAutomatonResponse* msg) {
  return *msg->automaton_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopAutomatonResponse::kAutomatonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopAutomatonResponse::StopAutomatonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.StopAutomatonResponse)
}
StopAutomatonResponse::StopAutomatonResponse(const StopAutomatonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_automaton()) {
    automaton_ = new ::ric::logic::v3::AutomatonInfo(*from.automaton_);
  } else {
    automaton_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.StopAutomatonResponse)
}

void StopAutomatonResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  automaton_ = nullptr;
}

StopAutomatonResponse::~StopAutomatonResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.StopAutomatonResponse)
  SharedDtor();
}

void StopAutomatonResponse::SharedDtor() {
  if (this != internal_default_instance()) delete automaton_;
}

void StopAutomatonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopAutomatonResponse& StopAutomatonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopAutomatonResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void StopAutomatonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.StopAutomatonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && automaton_ != nullptr) {
    delete automaton_;
  }
  automaton_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopAutomatonResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopAutomatonResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.AutomatonInfo automaton = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::AutomatonInfo::_InternalParse;
        object = msg->mutable_automaton();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopAutomatonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.StopAutomatonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.AutomatonInfo automaton = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_automaton()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.StopAutomatonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.StopAutomatonResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopAutomatonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.StopAutomatonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.AutomatonInfo automaton = 1;
  if (this->has_automaton()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::automaton(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.StopAutomatonResponse)
}

::google::protobuf::uint8* StopAutomatonResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.StopAutomatonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.AutomatonInfo automaton = 1;
  if (this->has_automaton()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::automaton(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.StopAutomatonResponse)
  return target;
}

size_t StopAutomatonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.StopAutomatonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ric.logic.v3.AutomatonInfo automaton = 1;
  if (this->has_automaton()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *automaton_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopAutomatonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.StopAutomatonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopAutomatonResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StopAutomatonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.StopAutomatonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.StopAutomatonResponse)
    MergeFrom(*source);
  }
}

void StopAutomatonResponse::MergeFrom(const StopAutomatonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.StopAutomatonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_automaton()) {
    mutable_automaton()->::ric::logic::v3::AutomatonInfo::MergeFrom(from.automaton());
  }
}

void StopAutomatonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.StopAutomatonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAutomatonResponse::CopyFrom(const StopAutomatonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.StopAutomatonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAutomatonResponse::IsInitialized() const {
  return true;
}

void StopAutomatonResponse::Swap(StopAutomatonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopAutomatonResponse::InternalSwap(StopAutomatonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(automaton_, other->automaton_);
}

::google::protobuf::Metadata StopAutomatonResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetAutomatonsRequest::InitAsDefaultInstance() {
}
class GetAutomatonsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutomatonsRequest::kObjectIdsFieldNumber;
const int GetAutomatonsRequest::kAutomatonIdsFieldNumber;
const int GetAutomatonsRequest::kWithLogsFieldNumber;
const int GetAutomatonsRequest::kWatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutomatonsRequest::GetAutomatonsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.GetAutomatonsRequest)
}
GetAutomatonsRequest::GetAutomatonsRequest(const GetAutomatonsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      object_ids_(from.object_ids_),
      automaton_ids_(from.automaton_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&with_logs_, &from.with_logs_,
    static_cast<size_t>(reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&with_logs_)) + sizeof(watch_));
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.GetAutomatonsRequest)
}

void GetAutomatonsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetAutomatonsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  ::memset(&with_logs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watch_) -
      reinterpret_cast<char*>(&with_logs_)) + sizeof(watch_));
}

GetAutomatonsRequest::~GetAutomatonsRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.GetAutomatonsRequest)
  SharedDtor();
}

void GetAutomatonsRequest::SharedDtor() {
}

void GetAutomatonsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAutomatonsRequest& GetAutomatonsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetAutomatonsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void GetAutomatonsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.GetAutomatonsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  automaton_ids_.Clear();
  ::memset(&with_logs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watch_) -
      reinterpret_cast<char*>(&with_logs_)) + sizeof(watch_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAutomatonsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetAutomatonsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string object_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetAutomatonsRequest.object_ids");
          object = msg->add_object_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated string automaton_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetAutomatonsRequest.automaton_ids");
          object = msg->add_automaton_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // bool with_logs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_with_logs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool watch = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_watch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAutomatonsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.GetAutomatonsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string object_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_object_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_ids(this->object_ids_size() - 1).data(),
            static_cast<int>(this->object_ids(this->object_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetAutomatonsRequest.object_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string automaton_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_automaton_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_ids(this->automaton_ids_size() - 1).data(),
            static_cast<int>(this->automaton_ids(this->automaton_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetAutomatonsRequest.automaton_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_logs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_logs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool watch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.GetAutomatonsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.GetAutomatonsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAutomatonsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.GetAutomatonsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string object_ids = 1;
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_ids(i).data(), static_cast<int>(this->object_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetAutomatonsRequest.object_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->object_ids(i), output);
  }

  // repeated string automaton_ids = 2;
  for (int i = 0, n = this->automaton_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_ids(i).data(), static_cast<int>(this->automaton_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetAutomatonsRequest.automaton_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->automaton_ids(i), output);
  }

  // bool with_logs = 3;
  if (this->with_logs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->with_logs(), output);
  }

  // bool watch = 4;
  if (this->watch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->watch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.GetAutomatonsRequest)
}

::google::protobuf::uint8* GetAutomatonsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.GetAutomatonsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string object_ids = 1;
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_ids(i).data(), static_cast<int>(this->object_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetAutomatonsRequest.object_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->object_ids(i), target);
  }

  // repeated string automaton_ids = 2;
  for (int i = 0, n = this->automaton_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_ids(i).data(), static_cast<int>(this->automaton_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetAutomatonsRequest.automaton_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->automaton_ids(i), target);
  }

  // bool with_logs = 3;
  if (this->with_logs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->with_logs(), target);
  }

  // bool watch = 4;
  if (this->watch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->watch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.GetAutomatonsRequest)
  return target;
}

size_t GetAutomatonsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.GetAutomatonsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string object_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->object_ids_size());
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->object_ids(i));
  }

  // repeated string automaton_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->automaton_ids_size());
  for (int i = 0, n = this->automaton_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->automaton_ids(i));
  }

  // bool with_logs = 3;
  if (this->with_logs() != 0) {
    total_size += 1 + 1;
  }

  // bool watch = 4;
  if (this->watch() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAutomatonsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.GetAutomatonsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutomatonsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetAutomatonsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.GetAutomatonsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.GetAutomatonsRequest)
    MergeFrom(*source);
  }
}

void GetAutomatonsRequest::MergeFrom(const GetAutomatonsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.GetAutomatonsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
  automaton_ids_.MergeFrom(from.automaton_ids_);
  if (from.with_logs() != 0) {
    set_with_logs(from.with_logs());
  }
  if (from.watch() != 0) {
    set_watch(from.watch());
  }
}

void GetAutomatonsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.GetAutomatonsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutomatonsRequest::CopyFrom(const GetAutomatonsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.GetAutomatonsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutomatonsRequest::IsInitialized() const {
  return true;
}

void GetAutomatonsRequest::Swap(GetAutomatonsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutomatonsRequest::InternalSwap(GetAutomatonsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_ids_.InternalSwap(CastToBase(&other->object_ids_));
  automaton_ids_.InternalSwap(CastToBase(&other->automaton_ids_));
  swap(with_logs_, other->with_logs_);
  swap(watch_, other->watch_);
}

::google::protobuf::Metadata GetAutomatonsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetAutomatonsResponse::InitAsDefaultInstance() {
}
class GetAutomatonsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutomatonsResponse::kAutomatonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutomatonsResponse::GetAutomatonsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.GetAutomatonsResponse)
}
GetAutomatonsResponse::GetAutomatonsResponse(const GetAutomatonsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      automatons_(from.automatons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.GetAutomatonsResponse)
}

void GetAutomatonsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetAutomatonsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
}

GetAutomatonsResponse::~GetAutomatonsResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.GetAutomatonsResponse)
  SharedDtor();
}

void GetAutomatonsResponse::SharedDtor() {
}

void GetAutomatonsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAutomatonsResponse& GetAutomatonsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetAutomatonsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void GetAutomatonsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.GetAutomatonsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  automatons_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAutomatonsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetAutomatonsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ric.logic.v3.AutomatonInfo automatons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ric::logic::v3::AutomatonInfo::_InternalParse;
          object = msg->add_automatons();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAutomatonsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.GetAutomatonsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ric.logic.v3.AutomatonInfo automatons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_automatons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.GetAutomatonsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.GetAutomatonsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAutomatonsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.GetAutomatonsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.logic.v3.AutomatonInfo automatons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->automatons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->automatons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.GetAutomatonsResponse)
}

::google::protobuf::uint8* GetAutomatonsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.GetAutomatonsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ric.logic.v3.AutomatonInfo automatons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->automatons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->automatons(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.GetAutomatonsResponse)
  return target;
}

size_t GetAutomatonsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.GetAutomatonsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ric.logic.v3.AutomatonInfo automatons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->automatons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->automatons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAutomatonsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.GetAutomatonsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutomatonsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetAutomatonsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.GetAutomatonsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.GetAutomatonsResponse)
    MergeFrom(*source);
  }
}

void GetAutomatonsResponse::MergeFrom(const GetAutomatonsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.GetAutomatonsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  automatons_.MergeFrom(from.automatons_);
}

void GetAutomatonsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.GetAutomatonsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutomatonsResponse::CopyFrom(const GetAutomatonsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.GetAutomatonsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutomatonsResponse::IsInitialized() const {
  return true;
}

void GetAutomatonsResponse::Swap(GetAutomatonsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutomatonsResponse::InternalSwap(GetAutomatonsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&automatons_)->InternalSwap(CastToBase(&other->automatons_));
}

::google::protobuf::Metadata GetAutomatonsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EmitEventRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_EmitEventRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
}
class EmitEventRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const EmitEventRequest* msg);
};

const ::ric::logic::v3::UserContext&
EmitEventRequest::HasBitSetters::ctx(const EmitEventRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmitEventRequest::kCtxFieldNumber;
const int EmitEventRequest::kObjectIdFieldNumber;
const int EmitEventRequest::kAutomatonIdFieldNumber;
const int EmitEventRequest::kEventFieldNumber;
const int EmitEventRequest::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmitEventRequest::EmitEventRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.EmitEventRequest)
}
EmitEventRequest::EmitEventRequest(const EmitEventRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event().size() > 0) {
    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.EmitEventRequest)
}

void EmitEventRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EmitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

EmitEventRequest::~EmitEventRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.EmitEventRequest)
  SharedDtor();
}

void EmitEventRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void EmitEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmitEventRequest& EmitEventRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void EmitEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.EmitEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmitEventRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmitEventRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.EmitEventRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.EmitEventRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string event = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.EmitEventRequest.event");
        object = msg->mutable_event();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string payload = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.EmitEventRequest.payload");
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmitEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.EmitEventRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.EmitEventRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.EmitEventRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), static_cast<int>(this->event().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.EmitEventRequest.event"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.EmitEventRequest.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.EmitEventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.EmitEventRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmitEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.EmitEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  // string event = 4;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->event(), output);
  }

  // string payload = 5;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.EmitEventRequest)
}

::google::protobuf::uint8* EmitEventRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.EmitEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  // string event = 4;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), static_cast<int>(this->event().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event(), target);
  }

  // string payload = 5;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.EmitEventRequest.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.EmitEventRequest)
  return target;
}

size_t EmitEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.EmitEventRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // string event = 4;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  // string payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmitEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.EmitEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmitEventRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EmitEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.EmitEventRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.EmitEventRequest)
    MergeFrom(*source);
  }
}

void EmitEventRequest::MergeFrom(const EmitEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.EmitEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
}

void EmitEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.EmitEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmitEventRequest::CopyFrom(const EmitEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.EmitEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitEventRequest::IsInitialized() const {
  return true;
}

void EmitEventRequest::Swap(EmitEventRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmitEventRequest::InternalSwap(EmitEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_.Swap(&other->event_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata EmitEventRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EmitEventResponse::InitAsDefaultInstance() {
}
class EmitEventResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmitEventResponse::EmitEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.EmitEventResponse)
}
EmitEventResponse::EmitEventResponse(const EmitEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.EmitEventResponse)
}

void EmitEventResponse::SharedCtor() {
}

EmitEventResponse::~EmitEventResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.EmitEventResponse)
  SharedDtor();
}

void EmitEventResponse::SharedDtor() {
}

void EmitEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmitEventResponse& EmitEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void EmitEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.EmitEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmitEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmitEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmitEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.EmitEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.EmitEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.EmitEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmitEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.EmitEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.EmitEventResponse)
}

::google::protobuf::uint8* EmitEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.EmitEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.EmitEventResponse)
  return target;
}

size_t EmitEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.EmitEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmitEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.EmitEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EmitEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<EmitEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.EmitEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.EmitEventResponse)
    MergeFrom(*source);
  }
}

void EmitEventResponse::MergeFrom(const EmitEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.EmitEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmitEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.EmitEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmitEventResponse::CopyFrom(const EmitEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.EmitEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitEventResponse::IsInitialized() const {
  return true;
}

void EmitEventResponse::Swap(EmitEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmitEventResponse::InternalSwap(EmitEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EmitEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WaitEventRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_WaitEventRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
  ::ric::logic::v3::_WaitEventRequest_default_instance_._instance.get_mutable()->wait_ = const_cast< ::ric::logic::v3::WaitCondition*>(
      ::ric::logic::v3::WaitCondition::internal_default_instance());
}
class WaitEventRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const WaitEventRequest* msg);
  static const ::ric::logic::v3::WaitCondition& wait(const WaitEventRequest* msg);
};

const ::ric::logic::v3::UserContext&
WaitEventRequest::HasBitSetters::ctx(const WaitEventRequest* msg) {
  return *msg->ctx_;
}
const ::ric::logic::v3::WaitCondition&
WaitEventRequest::HasBitSetters::wait(const WaitEventRequest* msg) {
  return *msg->wait_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitEventRequest::kCtxFieldNumber;
const int WaitEventRequest::kObjectIdFieldNumber;
const int WaitEventRequest::kAutomatonIdFieldNumber;
const int WaitEventRequest::kWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitEventRequest::WaitEventRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.WaitEventRequest)
}
WaitEventRequest::WaitEventRequest(const WaitEventRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  if (from.has_wait()) {
    wait_ = new ::ric::logic::v3::WaitCondition(*from.wait_);
  } else {
    wait_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.WaitEventRequest)
}

void WaitEventRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WaitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_) -
      reinterpret_cast<char*>(&ctx_)) + sizeof(wait_));
}

WaitEventRequest::~WaitEventRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.WaitEventRequest)
  SharedDtor();
}

void WaitEventRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
  if (this != internal_default_instance()) delete wait_;
}

void WaitEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitEventRequest& WaitEventRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WaitEventRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void WaitEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.WaitEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wait_ != nullptr) {
    delete wait_;
  }
  wait_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitEventRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WaitEventRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.WaitEventRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.WaitEventRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ric.logic.v3.WaitCondition wait = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::WaitCondition::_InternalParse;
        object = msg->mutable_wait();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.WaitEventRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.WaitEventRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.WaitEventRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ric.logic.v3.WaitCondition wait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wait()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.WaitEventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.WaitEventRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.WaitEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitEventRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitEventRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  // .ric.logic.v3.WaitCondition wait = 4;
  if (this->has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::wait(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.WaitEventRequest)
}

::google::protobuf::uint8* WaitEventRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.WaitEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitEventRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.WaitEventRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  // .ric.logic.v3.WaitCondition wait = 4;
  if (this->has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::wait(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.WaitEventRequest)
  return target;
}

size_t WaitEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.WaitEventRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  // .ric.logic.v3.WaitCondition wait = 4;
  if (this->has_wait()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wait_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.WaitEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitEventRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WaitEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.WaitEventRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.WaitEventRequest)
    MergeFrom(*source);
  }
}

void WaitEventRequest::MergeFrom(const WaitEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.WaitEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
  if (from.has_wait()) {
    mutable_wait()->::ric::logic::v3::WaitCondition::MergeFrom(from.wait());
  }
}

void WaitEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.WaitEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitEventRequest::CopyFrom(const WaitEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.WaitEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitEventRequest::IsInitialized() const {
  return true;
}

void WaitEventRequest::Swap(WaitEventRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitEventRequest::InternalSwap(WaitEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
  swap(wait_, other->wait_);
}

::google::protobuf::Metadata WaitEventRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WaitEventResponse::InitAsDefaultInstance() {
}
class WaitEventResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitEventResponse::WaitEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.WaitEventResponse)
}
WaitEventResponse::WaitEventResponse(const WaitEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.WaitEventResponse)
}

void WaitEventResponse::SharedCtor() {
}

WaitEventResponse::~WaitEventResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.WaitEventResponse)
  SharedDtor();
}

void WaitEventResponse::SharedDtor() {
}

void WaitEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitEventResponse& WaitEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WaitEventResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void WaitEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.WaitEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WaitEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.WaitEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.WaitEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.WaitEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.WaitEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.WaitEventResponse)
}

::google::protobuf::uint8* WaitEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.WaitEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.WaitEventResponse)
  return target;
}

size_t WaitEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.WaitEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.WaitEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WaitEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.WaitEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.WaitEventResponse)
    MergeFrom(*source);
  }
}

void WaitEventResponse::MergeFrom(const WaitEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.WaitEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WaitEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.WaitEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitEventResponse::CopyFrom(const WaitEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.WaitEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitEventResponse::IsInitialized() const {
  return true;
}

void WaitEventResponse::Swap(WaitEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitEventResponse::InternalSwap(WaitEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WaitEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRuntimeInfoRequest::InitAsDefaultInstance() {
}
class GetRuntimeInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRuntimeInfoRequest::kObjectIdFieldNumber;
const int GetRuntimeInfoRequest::kAutomatonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRuntimeInfoRequest::GetRuntimeInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.GetRuntimeInfoRequest)
}
GetRuntimeInfoRequest::GetRuntimeInfoRequest(const GetRuntimeInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.GetRuntimeInfoRequest)
}

void GetRuntimeInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRuntimeInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRuntimeInfoRequest::~GetRuntimeInfoRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.GetRuntimeInfoRequest)
  SharedDtor();
}

void GetRuntimeInfoRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRuntimeInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRuntimeInfoRequest& GetRuntimeInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRuntimeInfoRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void GetRuntimeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.GetRuntimeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRuntimeInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRuntimeInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetRuntimeInfoRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.GetRuntimeInfoRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRuntimeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.GetRuntimeInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetRuntimeInfoRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.GetRuntimeInfoRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.GetRuntimeInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.GetRuntimeInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRuntimeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.GetRuntimeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetRuntimeInfoRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_id(), output);
  }

  // string automaton_id = 2;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetRuntimeInfoRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->automaton_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.GetRuntimeInfoRequest)
}

::google::protobuf::uint8* GetRuntimeInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.GetRuntimeInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetRuntimeInfoRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }

  // string automaton_id = 2;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.GetRuntimeInfoRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->automaton_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.GetRuntimeInfoRequest)
  return target;
}

size_t GetRuntimeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.GetRuntimeInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 1;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 2;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRuntimeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.GetRuntimeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRuntimeInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRuntimeInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.GetRuntimeInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.GetRuntimeInfoRequest)
    MergeFrom(*source);
  }
}

void GetRuntimeInfoRequest::MergeFrom(const GetRuntimeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.GetRuntimeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
}

void GetRuntimeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.GetRuntimeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRuntimeInfoRequest::CopyFrom(const GetRuntimeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.GetRuntimeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRuntimeInfoRequest::IsInitialized() const {
  return true;
}

void GetRuntimeInfoRequest::Swap(GetRuntimeInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRuntimeInfoRequest::InternalSwap(GetRuntimeInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetRuntimeInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse() {}
UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::MergeFrom(const UpdateAutomatonVarsRequest_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[27];
}
void UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      UpdateAutomatonVarsRequest_VarsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void UpdateAutomatonVarsRequest::InitAsDefaultInstance() {
  ::ric::logic::v3::_UpdateAutomatonVarsRequest_default_instance_._instance.get_mutable()->ctx_ = const_cast< ::ric::logic::v3::UserContext*>(
      ::ric::logic::v3::UserContext::internal_default_instance());
}
class UpdateAutomatonVarsRequest::HasBitSetters {
 public:
  static const ::ric::logic::v3::UserContext& ctx(const UpdateAutomatonVarsRequest* msg);
};

const ::ric::logic::v3::UserContext&
UpdateAutomatonVarsRequest::HasBitSetters::ctx(const UpdateAutomatonVarsRequest* msg) {
  return *msg->ctx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAutomatonVarsRequest::kCtxFieldNumber;
const int UpdateAutomatonVarsRequest::kObjectIdFieldNumber;
const int UpdateAutomatonVarsRequest::kAutomatonIdFieldNumber;
const int UpdateAutomatonVarsRequest::kVarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAutomatonVarsRequest::UpdateAutomatonVarsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.UpdateAutomatonVarsRequest)
}
UpdateAutomatonVarsRequest::UpdateAutomatonVarsRequest(const UpdateAutomatonVarsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.automaton_id().size() > 0) {
    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    ctx_ = new ::ric::logic::v3::UserContext(*from.ctx_);
  } else {
    ctx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.UpdateAutomatonVarsRequest)
}

void UpdateAutomatonVarsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateAutomatonVarsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctx_ = nullptr;
}

UpdateAutomatonVarsRequest::~UpdateAutomatonVarsRequest() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.UpdateAutomatonVarsRequest)
  SharedDtor();
}

void UpdateAutomatonVarsRequest::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctx_;
}

void UpdateAutomatonVarsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAutomatonVarsRequest& UpdateAutomatonVarsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateAutomatonVarsRequest_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void UpdateAutomatonVarsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  automaton_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateAutomatonVarsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateAutomatonVarsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ric::logic::v3::UserContext::_InternalParse;
        object = msg->mutable_ctx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.UpdateAutomatonVarsRequest.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string automaton_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ric.logic.v3.UpdateAutomatonVarsRequest.automaton_id");
        object = msg->mutable_automaton_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->vars_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateAutomatonVarsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ric.logic.v3.UserContext ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UpdateAutomatonVarsRequest.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string automaton_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_automaton_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UpdateAutomatonVarsRequest.automaton_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          UpdateAutomatonVarsRequest_VarsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              UpdateAutomatonVarsRequest_VarsEntry_DoNotUse,
              ::std::string, ::ric::logic::v3::AutomatonVarValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue > > parser(&vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.UpdateAutomatonVarsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.UpdateAutomatonVarsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateAutomatonVarsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctx(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UpdateAutomatonVarsRequest.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UpdateAutomatonVarsRequest.automaton_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->automaton_id(), output);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateAutomatonVarsRequest_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateAutomatonVarsRequest_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.UpdateAutomatonVarsRequest)
}

::google::protobuf::uint8* UpdateAutomatonVarsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctx(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UpdateAutomatonVarsRequest.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->automaton_id().data(), static_cast<int>(this->automaton_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ric.logic.v3.UpdateAutomatonVarsRequest.automaton_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->automaton_id(), target);
  }

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.UpdateAutomatonVarsRequest.VarsEntry.key");
      }
    };

    if (false &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateAutomatonVarsRequest_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateAutomatonVarsRequest_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.UpdateAutomatonVarsRequest)
  return target;
}

size_t UpdateAutomatonVarsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vars_size());
  {
    ::std::unique_ptr<UpdateAutomatonVarsRequest_VarsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
        it = this->vars().begin();
        it != this->vars().end(); ++it) {
      entry.reset(vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string automaton_id = 3;
  if (this->automaton_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->automaton_id());
  }

  // .ric.logic.v3.UserContext ctx = 1;
  if (this->has_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAutomatonVarsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAutomatonVarsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateAutomatonVarsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.UpdateAutomatonVarsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.UpdateAutomatonVarsRequest)
    MergeFrom(*source);
  }
}

void UpdateAutomatonVarsRequest::MergeFrom(const UpdateAutomatonVarsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.automaton_id().size() > 0) {

    automaton_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.automaton_id_);
  }
  if (from.has_ctx()) {
    mutable_ctx()->::ric::logic::v3::UserContext::MergeFrom(from.ctx());
  }
}

void UpdateAutomatonVarsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAutomatonVarsRequest::CopyFrom(const UpdateAutomatonVarsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.UpdateAutomatonVarsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAutomatonVarsRequest::IsInitialized() const {
  return true;
}

void UpdateAutomatonVarsRequest::Swap(UpdateAutomatonVarsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateAutomatonVarsRequest::InternalSwap(UpdateAutomatonVarsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  automaton_id_.Swap(&other->automaton_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctx_, other->ctx_);
}

::google::protobuf::Metadata UpdateAutomatonVarsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// ===================================================================

UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse() {}
UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::MergeFrom(const UpdateAutomatonVarsResponse_VarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[29];
}
void UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      UpdateAutomatonVarsResponse_VarsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void UpdateAutomatonVarsResponse::InitAsDefaultInstance() {
}
class UpdateAutomatonVarsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAutomatonVarsResponse::kVarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAutomatonVarsResponse::UpdateAutomatonVarsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ric.logic.v3.UpdateAutomatonVarsResponse)
}
UpdateAutomatonVarsResponse::UpdateAutomatonVarsResponse(const UpdateAutomatonVarsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vars_.MergeFrom(from.vars_);
  // @@protoc_insertion_point(copy_constructor:ric.logic.v3.UpdateAutomatonVarsResponse)
}

void UpdateAutomatonVarsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateAutomatonVarsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
}

UpdateAutomatonVarsResponse::~UpdateAutomatonVarsResponse() {
  // @@protoc_insertion_point(destructor:ric.logic.v3.UpdateAutomatonVarsResponse)
  SharedDtor();
}

void UpdateAutomatonVarsResponse::SharedDtor() {
}

void UpdateAutomatonVarsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAutomatonVarsResponse& UpdateAutomatonVarsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateAutomatonVarsResponse_ric_2dlogic_2dv3_2friclogicv3_2eproto.base);
  return *internal_default_instance();
}


void UpdateAutomatonVarsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateAutomatonVarsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateAutomatonVarsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->vars_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateAutomatonVarsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ric.logic.v3.AutomatonVarValue> vars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          UpdateAutomatonVarsResponse_VarsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              UpdateAutomatonVarsResponse_VarsEntry_DoNotUse,
              ::std::string, ::ric::logic::v3::AutomatonVarValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue > > parser(&vars_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ric.logic.v3.UpdateAutomatonVarsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ric.logic.v3.UpdateAutomatonVarsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateAutomatonVarsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 1;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateAutomatonVarsResponse_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateAutomatonVarsResponse_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ric.logic.v3.UpdateAutomatonVarsResponse)
}

::google::protobuf::uint8* UpdateAutomatonVarsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 1;
  if (!this->vars().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ric.logic.v3.UpdateAutomatonVarsResponse.VarsEntry.key");
      }
    };

    if (false &&
        this->vars().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vars().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UpdateAutomatonVarsResponse_VarsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vars_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<UpdateAutomatonVarsResponse_VarsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
          it = this->vars().begin();
          it != this->vars().end(); ++it) {
        entry.reset(vars_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ric.logic.v3.UpdateAutomatonVarsResponse)
  return target;
}

size_t UpdateAutomatonVarsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ric.logic.v3.AutomatonVarValue> vars = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vars_size());
  {
    ::std::unique_ptr<UpdateAutomatonVarsResponse_VarsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ric::logic::v3::AutomatonVarValue >::const_iterator
        it = this->vars().begin();
        it != this->vars().end(); ++it) {
      entry.reset(vars_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAutomatonVarsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAutomatonVarsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateAutomatonVarsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ric.logic.v3.UpdateAutomatonVarsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ric.logic.v3.UpdateAutomatonVarsResponse)
    MergeFrom(*source);
  }
}

void UpdateAutomatonVarsResponse::MergeFrom(const UpdateAutomatonVarsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
}

void UpdateAutomatonVarsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAutomatonVarsResponse::CopyFrom(const UpdateAutomatonVarsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ric.logic.v3.UpdateAutomatonVarsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAutomatonVarsResponse::IsInitialized() const {
  return true;
}

void UpdateAutomatonVarsResponse::Swap(UpdateAutomatonVarsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateAutomatonVarsResponse::InternalSwap(UpdateAutomatonVarsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vars_.Swap(&other->vars_);
}

::google::protobuf::Metadata UpdateAutomatonVarsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ric_2dlogic_2dv3_2friclogicv3_2eproto);
  return ::file_level_metadata_ric_2dlogic_2dv3_2friclogicv3_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v3
}  // namespace logic
}  // namespace ric
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ric::logic::v3::UserContext* Arena::CreateMaybeMessage< ::ric::logic::v3::UserContext >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::UserContext >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StatsCounter* Arena::CreateMaybeMessage< ::ric::logic::v3::StatsCounter >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StatsCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::AutomatonStats* Arena::CreateMaybeMessage< ::ric::logic::v3::AutomatonStats >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::AutomatonStats >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::AutomatonVarValue* Arena::CreateMaybeMessage< ::ric::logic::v3::AutomatonVarValue >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::AutomatonVarValue >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::AutomatonInfo_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::AutomatonInfo* Arena::CreateMaybeMessage< ::ric::logic::v3::AutomatonInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::AutomatonInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::AutomatonEvent* Arena::CreateMaybeMessage< ::ric::logic::v3::AutomatonEvent >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::AutomatonEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::ActionResult* Arena::CreateMaybeMessage< ::ric::logic::v3::ActionResult >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::ActionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::LogEntry* Arena::CreateMaybeMessage< ::ric::logic::v3::LogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::WaitCondition* Arena::CreateMaybeMessage< ::ric::logic::v3::WaitCondition >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::WaitCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::GetInstanceInfoRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::GetInstanceInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::GetInstanceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::GetInstanceInfoResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::GetInstanceInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::GetInstanceInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StartAutomatonRequest_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StartAutomatonRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::StartAutomatonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StartAutomatonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StartAutomatonMultiRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::StartAutomatonMultiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StartAutomatonMultiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StartAutomatonResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::StartAutomatonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StartAutomatonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StopAutomatonRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::StopAutomatonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StopAutomatonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::RunAutomatonRequest_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::RunAutomatonRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::RunAutomatonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::RunAutomatonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::StopAutomatonResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::StopAutomatonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::StopAutomatonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::GetAutomatonsRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::GetAutomatonsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::GetAutomatonsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::GetAutomatonsResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::GetAutomatonsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::GetAutomatonsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::EmitEventRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::EmitEventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::EmitEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::EmitEventResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::EmitEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::EmitEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::WaitEventRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::WaitEventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::WaitEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::WaitEventResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::WaitEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::WaitEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::GetRuntimeInfoRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::GetRuntimeInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::GetRuntimeInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::UpdateAutomatonVarsRequest_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::UpdateAutomatonVarsRequest* Arena::CreateMaybeMessage< ::ric::logic::v3::UpdateAutomatonVarsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::UpdateAutomatonVarsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::UpdateAutomatonVarsResponse_VarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ric::logic::v3::UpdateAutomatonVarsResponse* Arena::CreateMaybeMessage< ::ric::logic::v3::UpdateAutomatonVarsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ric::logic::v3::UpdateAutomatonVarsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
