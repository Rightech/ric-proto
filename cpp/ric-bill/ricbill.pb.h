// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-bill/ricbill.proto

#ifndef PROTOBUF_INCLUDED_ric_2dbill_2fricbill_2eproto
#define PROTOBUF_INCLUDED_ric_2dbill_2fricbill_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dbill_2fricbill_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dbill_2fricbill_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dbill_2fricbill_2eproto();
namespace ric {
namespace bill {
class DryRun;
class DryRunDefaultTypeInternal;
extern DryRunDefaultTypeInternal _DryRun_default_instance_;
class ReceiptRequest;
class ReceiptRequestDefaultTypeInternal;
extern ReceiptRequestDefaultTypeInternal _ReceiptRequest_default_instance_;
class ReceiptResponse;
class ReceiptResponseDefaultTypeInternal;
extern ReceiptResponseDefaultTypeInternal _ReceiptResponse_default_instance_;
class SetupRequest;
class SetupRequestDefaultTypeInternal;
extern SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
class SetupResponse;
class SetupResponseDefaultTypeInternal;
extern SetupResponseDefaultTypeInternal _SetupResponse_default_instance_;
class SubscriptionRequest;
class SubscriptionRequestDefaultTypeInternal;
extern SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
class SubscriptionResponse;
class SubscriptionResponseDefaultTypeInternal;
extern SubscriptionResponseDefaultTypeInternal _SubscriptionResponse_default_instance_;
class UserContext;
class UserContextDefaultTypeInternal;
extern UserContextDefaultTypeInternal _UserContext_default_instance_;
}  // namespace bill
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::bill::DryRun* Arena::CreateMaybeMessage<::ric::bill::DryRun>(Arena*);
template<> ::ric::bill::ReceiptRequest* Arena::CreateMaybeMessage<::ric::bill::ReceiptRequest>(Arena*);
template<> ::ric::bill::ReceiptResponse* Arena::CreateMaybeMessage<::ric::bill::ReceiptResponse>(Arena*);
template<> ::ric::bill::SetupRequest* Arena::CreateMaybeMessage<::ric::bill::SetupRequest>(Arena*);
template<> ::ric::bill::SetupResponse* Arena::CreateMaybeMessage<::ric::bill::SetupResponse>(Arena*);
template<> ::ric::bill::SubscriptionRequest* Arena::CreateMaybeMessage<::ric::bill::SubscriptionRequest>(Arena*);
template<> ::ric::bill::SubscriptionResponse* Arena::CreateMaybeMessage<::ric::bill::SubscriptionResponse>(Arena*);
template<> ::ric::bill::UserContext* Arena::CreateMaybeMessage<::ric::bill::UserContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace bill {

// ===================================================================

class UserContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.UserContext) */ {
 public:
  UserContext();
  virtual ~UserContext();

  UserContext(const UserContext& from);

  inline UserContext& operator=(const UserContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserContext(UserContext&& from) noexcept
    : UserContext() {
    *this = ::std::move(from);
  }

  inline UserContext& operator=(UserContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserContext* internal_default_instance() {
    return reinterpret_cast<const UserContext*>(
               &_UserContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserContext* other);
  friend void swap(UserContext& a, UserContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserContext* New() const final {
    return CreateMaybeMessage<UserContext>(nullptr);
  }

  UserContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserContext& from);
  void MergeFrom(const UserContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string span_id = 3;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 3;
  const ::std::string& span_id() const;
  void set_span_id(const ::std::string& value);
  #if LANG_CXX11
  void set_span_id(::std::string&& value);
  #endif
  void set_span_id(const char* value);
  void set_span_id(const char* value, size_t size);
  ::std::string* mutable_span_id();
  ::std::string* release_span_id();
  void set_allocated_span_id(::std::string* span_id);

  // @@protoc_insertion_point(class_scope:ric.bill.UserContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr span_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class SetupRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.SetupRequest) */ {
 public:
  SetupRequest();
  virtual ~SetupRequest();

  SetupRequest(const SetupRequest& from);

  inline SetupRequest& operator=(const SetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetupRequest(SetupRequest&& from) noexcept
    : SetupRequest() {
    *this = ::std::move(from);
  }

  inline SetupRequest& operator=(SetupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupRequest* internal_default_instance() {
    return reinterpret_cast<const SetupRequest*>(
               &_SetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetupRequest* other);
  friend void swap(SetupRequest& a, SetupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetupRequest* New() const final {
    return CreateMaybeMessage<SetupRequest>(nullptr);
  }

  SetupRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetupRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetupRequest& from);
  void MergeFrom(const SetupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ric.bill.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::bill::UserContext& ctx() const;
  ::ric::bill::UserContext* release_ctx();
  ::ric::bill::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::bill::UserContext* ctx);

  // @@protoc_insertion_point(class_scope:ric.bill.SetupRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ric::bill::UserContext* ctx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class SetupResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.SetupResponse) */ {
 public:
  SetupResponse();
  virtual ~SetupResponse();

  SetupResponse(const SetupResponse& from);

  inline SetupResponse& operator=(const SetupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetupResponse(SetupResponse&& from) noexcept
    : SetupResponse() {
    *this = ::std::move(from);
  }

  inline SetupResponse& operator=(SetupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupResponse* internal_default_instance() {
    return reinterpret_cast<const SetupResponse*>(
               &_SetupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetupResponse* other);
  friend void swap(SetupResponse& a, SetupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetupResponse* New() const final {
    return CreateMaybeMessage<SetupResponse>(nullptr);
  }

  SetupResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetupResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetupResponse& from);
  void MergeFrom(const SetupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string binding_id = 1;
  void clear_binding_id();
  static const int kBindingIdFieldNumber = 1;
  const ::std::string& binding_id() const;
  void set_binding_id(const ::std::string& value);
  #if LANG_CXX11
  void set_binding_id(::std::string&& value);
  #endif
  void set_binding_id(const char* value);
  void set_binding_id(const char* value, size_t size);
  ::std::string* mutable_binding_id();
  ::std::string* release_binding_id();
  void set_allocated_binding_id(::std::string* binding_id);

  // string widget_params = 2;
  void clear_widget_params();
  static const int kWidgetParamsFieldNumber = 2;
  const ::std::string& widget_params() const;
  void set_widget_params(const ::std::string& value);
  #if LANG_CXX11
  void set_widget_params(::std::string&& value);
  #endif
  void set_widget_params(const char* value);
  void set_widget_params(const char* value, size_t size);
  ::std::string* mutable_widget_params();
  ::std::string* release_widget_params();
  void set_allocated_widget_params(::std::string* widget_params);

  // @@protoc_insertion_point(class_scope:ric.bill.SetupResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr binding_id_;
  ::google::protobuf::internal::ArenaStringPtr widget_params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class DryRun final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.DryRun) */ {
 public:
  DryRun();
  virtual ~DryRun();

  DryRun(const DryRun& from);

  inline DryRun& operator=(const DryRun& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DryRun(DryRun&& from) noexcept
    : DryRun() {
    *this = ::std::move(from);
  }

  inline DryRun& operator=(DryRun&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DryRun& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DryRun* internal_default_instance() {
    return reinterpret_cast<const DryRun*>(
               &_DryRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DryRun* other);
  friend void swap(DryRun& a, DryRun& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DryRun* New() const final {
    return CreateMaybeMessage<DryRun>(nullptr);
  }

  DryRun* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DryRun>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DryRun& from);
  void MergeFrom(const DryRun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DryRun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string messages = 4;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  const ::std::string& messages(int index) const;
  ::std::string* mutable_messages(int index);
  void set_messages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_messages(int index, ::std::string&& value);
  #endif
  void set_messages(int index, const char* value);
  void set_messages(int index, const char* value, size_t size);
  ::std::string* add_messages();
  void add_messages(const ::std::string& value);
  #if LANG_CXX11
  void add_messages(::std::string&& value);
  #endif
  void add_messages(const char* value);
  void add_messages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& messages() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_messages();

  // string amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // string currency = 2;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  const ::std::string& currency() const;
  void set_currency(const ::std::string& value);
  #if LANG_CXX11
  void set_currency(::std::string&& value);
  #endif
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  ::std::string* mutable_currency();
  ::std::string* release_currency();
  void set_allocated_currency(::std::string* currency);

  // int64 next_pay = 3;
  void clear_next_pay();
  static const int kNextPayFieldNumber = 3;
  ::google::protobuf::int64 next_pay() const;
  void set_next_pay(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.bill.DryRun)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> messages_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr currency_;
  ::google::protobuf::int64 next_pay_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.SubscriptionRequest) */ {
 public:
  SubscriptionRequest();
  virtual ~SubscriptionRequest();

  SubscriptionRequest(const SubscriptionRequest& from);

  inline SubscriptionRequest& operator=(const SubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscriptionRequest(SubscriptionRequest&& from) noexcept
    : SubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline SubscriptionRequest& operator=(SubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionRequest*>(
               &_SubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SubscriptionRequest* other);
  friend void swap(SubscriptionRequest& a, SubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionRequest* New() const final {
    return CreateMaybeMessage<SubscriptionRequest>(nullptr);
  }

  SubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscriptionRequest& from);
  void MergeFrom(const SubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string license_id = 2;
  void clear_license_id();
  static const int kLicenseIdFieldNumber = 2;
  const ::std::string& license_id() const;
  void set_license_id(const ::std::string& value);
  #if LANG_CXX11
  void set_license_id(::std::string&& value);
  #endif
  void set_license_id(const char* value);
  void set_license_id(const char* value, size_t size);
  ::std::string* mutable_license_id();
  ::std::string* release_license_id();
  void set_allocated_license_id(::std::string* license_id);

  // string params = 4;
  void clear_params();
  static const int kParamsFieldNumber = 4;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // string group_id = 5;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 5;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // .ric.bill.UserContext ctx = 1;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 1;
  const ::ric::bill::UserContext& ctx() const;
  ::ric::bill::UserContext* release_ctx();
  ::ric::bill::UserContext* mutable_ctx();
  void set_allocated_ctx(::ric::bill::UserContext* ctx);

  // bool dry_run = 3;
  void clear_dry_run();
  static const int kDryRunFieldNumber = 3;
  bool dry_run() const;
  void set_dry_run(bool value);

  // @@protoc_insertion_point(class_scope:ric.bill.SubscriptionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr license_id_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::ric::bill::UserContext* ctx_;
  bool dry_run_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.SubscriptionResponse) */ {
 public:
  SubscriptionResponse();
  virtual ~SubscriptionResponse();

  SubscriptionResponse(const SubscriptionResponse& from);

  inline SubscriptionResponse& operator=(const SubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscriptionResponse(SubscriptionResponse&& from) noexcept
    : SubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline SubscriptionResponse& operator=(SubscriptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscriptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const SubscriptionResponse*>(
               &_SubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SubscriptionResponse* other);
  friend void swap(SubscriptionResponse& a, SubscriptionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionResponse* New() const final {
    return CreateMaybeMessage<SubscriptionResponse>(nullptr);
  }

  SubscriptionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscriptionResponse& from);
  void MergeFrom(const SubscriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string payment_id = 1;
  void clear_payment_id();
  static const int kPaymentIdFieldNumber = 1;
  const ::std::string& payment_id() const;
  void set_payment_id(const ::std::string& value);
  #if LANG_CXX11
  void set_payment_id(::std::string&& value);
  #endif
  void set_payment_id(const char* value);
  void set_payment_id(const char* value, size_t size);
  ::std::string* mutable_payment_id();
  ::std::string* release_payment_id();
  void set_allocated_payment_id(::std::string* payment_id);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // .ric.bill.DryRun dry_run = 3;
  bool has_dry_run() const;
  void clear_dry_run();
  static const int kDryRunFieldNumber = 3;
  const ::ric::bill::DryRun& dry_run() const;
  ::ric::bill::DryRun* release_dry_run();
  ::ric::bill::DryRun* mutable_dry_run();
  void set_allocated_dry_run(::ric::bill::DryRun* dry_run);

  // @@protoc_insertion_point(class_scope:ric.bill.SubscriptionResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payment_id_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  ::ric::bill::DryRun* dry_run_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class ReceiptRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.ReceiptRequest) */ {
 public:
  ReceiptRequest();
  virtual ~ReceiptRequest();

  ReceiptRequest(const ReceiptRequest& from);

  inline ReceiptRequest& operator=(const ReceiptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceiptRequest(ReceiptRequest&& from) noexcept
    : ReceiptRequest() {
    *this = ::std::move(from);
  }

  inline ReceiptRequest& operator=(ReceiptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReceiptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceiptRequest* internal_default_instance() {
    return reinterpret_cast<const ReceiptRequest*>(
               &_ReceiptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReceiptRequest* other);
  friend void swap(ReceiptRequest& a, ReceiptRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceiptRequest* New() const final {
    return CreateMaybeMessage<ReceiptRequest>(nullptr);
  }

  ReceiptRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReceiptRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReceiptRequest& from);
  void MergeFrom(const ReceiptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiptRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string payment_id = 1;
  void clear_payment_id();
  static const int kPaymentIdFieldNumber = 1;
  const ::std::string& payment_id() const;
  void set_payment_id(const ::std::string& value);
  #if LANG_CXX11
  void set_payment_id(::std::string&& value);
  #endif
  void set_payment_id(const char* value);
  void set_payment_id(const char* value, size_t size);
  ::std::string* mutable_payment_id();
  ::std::string* release_payment_id();
  void set_allocated_payment_id(::std::string* payment_id);

  // string payment_gate = 2;
  void clear_payment_gate();
  static const int kPaymentGateFieldNumber = 2;
  const ::std::string& payment_gate() const;
  void set_payment_gate(const ::std::string& value);
  #if LANG_CXX11
  void set_payment_gate(::std::string&& value);
  #endif
  void set_payment_gate(const char* value);
  void set_payment_gate(const char* value, size_t size);
  ::std::string* mutable_payment_gate();
  ::std::string* release_payment_gate();
  void set_allocated_payment_gate(::std::string* payment_gate);

  // string params = 3;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:ric.bill.ReceiptRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payment_id_;
  ::google::protobuf::internal::ArenaStringPtr payment_gate_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// -------------------------------------------------------------------

class ReceiptResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.bill.ReceiptResponse) */ {
 public:
  ReceiptResponse();
  virtual ~ReceiptResponse();

  ReceiptResponse(const ReceiptResponse& from);

  inline ReceiptResponse& operator=(const ReceiptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceiptResponse(ReceiptResponse&& from) noexcept
    : ReceiptResponse() {
    *this = ::std::move(from);
  }

  inline ReceiptResponse& operator=(ReceiptResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReceiptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceiptResponse* internal_default_instance() {
    return reinterpret_cast<const ReceiptResponse*>(
               &_ReceiptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReceiptResponse* other);
  friend void swap(ReceiptResponse& a, ReceiptResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceiptResponse* New() const final {
    return CreateMaybeMessage<ReceiptResponse>(nullptr);
  }

  ReceiptResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReceiptResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReceiptResponse& from);
  void MergeFrom(const ReceiptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiptResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.bill.ReceiptResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dbill_2fricbill_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserContext

// string group_id = 1;
inline void UserContext::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::group_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.UserContext.group_id)
  return group_id_.GetNoArena();
}
inline void UserContext::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.UserContext.group_id)
}
#if LANG_CXX11
inline void UserContext::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.UserContext.group_id)
}
#endif
inline void UserContext::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.UserContext.group_id)
}
inline void UserContext::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.UserContext.group_id)
}
inline ::std::string* UserContext::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.UserContext.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.bill.UserContext.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.UserContext.group_id)
}

// string user_id = 2;
inline void UserContext::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::user_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.UserContext.user_id)
  return user_id_.GetNoArena();
}
inline void UserContext::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.UserContext.user_id)
}
#if LANG_CXX11
inline void UserContext::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.UserContext.user_id)
}
#endif
inline void UserContext::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.UserContext.user_id)
}
inline void UserContext::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.UserContext.user_id)
}
inline ::std::string* UserContext::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.UserContext.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_user_id() {
  // @@protoc_insertion_point(field_release:ric.bill.UserContext.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.UserContext.user_id)
}

// string span_id = 3;
inline void UserContext::clear_span_id() {
  span_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::span_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.UserContext.span_id)
  return span_id_.GetNoArena();
}
inline void UserContext::set_span_id(const ::std::string& value) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.UserContext.span_id)
}
#if LANG_CXX11
inline void UserContext::set_span_id(::std::string&& value) {
  
  span_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.UserContext.span_id)
}
#endif
inline void UserContext::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.UserContext.span_id)
}
inline void UserContext::set_span_id(const char* value, size_t size) {
  
  span_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.UserContext.span_id)
}
inline ::std::string* UserContext::mutable_span_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.UserContext.span_id)
  return span_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_span_id() {
  // @@protoc_insertion_point(field_release:ric.bill.UserContext.span_id)
  
  return span_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_span_id(::std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), span_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.UserContext.span_id)
}

// -------------------------------------------------------------------

// SetupRequest

// .ric.bill.UserContext ctx = 1;
inline bool SetupRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void SetupRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::bill::UserContext& SetupRequest::ctx() const {
  const ::ric::bill::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.bill.SetupRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::bill::UserContext*>(
      &::ric::bill::_UserContext_default_instance_);
}
inline ::ric::bill::UserContext* SetupRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.bill.SetupRequest.ctx)
  
  ::ric::bill::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::bill::UserContext* SetupRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::bill::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.bill.SetupRequest.ctx)
  return ctx_;
}
inline void SetupRequest::set_allocated_ctx(::ric::bill::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SetupRequest.ctx)
}

// -------------------------------------------------------------------

// SetupResponse

// string binding_id = 1;
inline void SetupResponse::clear_binding_id() {
  binding_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupResponse::binding_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.SetupResponse.binding_id)
  return binding_id_.GetNoArena();
}
inline void SetupResponse::set_binding_id(const ::std::string& value) {
  
  binding_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SetupResponse.binding_id)
}
#if LANG_CXX11
inline void SetupResponse::set_binding_id(::std::string&& value) {
  
  binding_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SetupResponse.binding_id)
}
#endif
inline void SetupResponse::set_binding_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binding_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SetupResponse.binding_id)
}
inline void SetupResponse::set_binding_id(const char* value, size_t size) {
  
  binding_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SetupResponse.binding_id)
}
inline ::std::string* SetupResponse::mutable_binding_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SetupResponse.binding_id)
  return binding_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupResponse::release_binding_id() {
  // @@protoc_insertion_point(field_release:ric.bill.SetupResponse.binding_id)
  
  return binding_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupResponse::set_allocated_binding_id(::std::string* binding_id) {
  if (binding_id != nullptr) {
    
  } else {
    
  }
  binding_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binding_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SetupResponse.binding_id)
}

// string widget_params = 2;
inline void SetupResponse::clear_widget_params() {
  widget_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupResponse::widget_params() const {
  // @@protoc_insertion_point(field_get:ric.bill.SetupResponse.widget_params)
  return widget_params_.GetNoArena();
}
inline void SetupResponse::set_widget_params(const ::std::string& value) {
  
  widget_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SetupResponse.widget_params)
}
#if LANG_CXX11
inline void SetupResponse::set_widget_params(::std::string&& value) {
  
  widget_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SetupResponse.widget_params)
}
#endif
inline void SetupResponse::set_widget_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  widget_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SetupResponse.widget_params)
}
inline void SetupResponse::set_widget_params(const char* value, size_t size) {
  
  widget_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SetupResponse.widget_params)
}
inline ::std::string* SetupResponse::mutable_widget_params() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SetupResponse.widget_params)
  return widget_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupResponse::release_widget_params() {
  // @@protoc_insertion_point(field_release:ric.bill.SetupResponse.widget_params)
  
  return widget_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupResponse::set_allocated_widget_params(::std::string* widget_params) {
  if (widget_params != nullptr) {
    
  } else {
    
  }
  widget_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), widget_params);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SetupResponse.widget_params)
}

// -------------------------------------------------------------------

// DryRun

// string amount = 1;
inline void DryRun::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DryRun::amount() const {
  // @@protoc_insertion_point(field_get:ric.bill.DryRun.amount)
  return amount_.GetNoArena();
}
inline void DryRun::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.DryRun.amount)
}
#if LANG_CXX11
inline void DryRun::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.DryRun.amount)
}
#endif
inline void DryRun::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.DryRun.amount)
}
inline void DryRun::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.DryRun.amount)
}
inline ::std::string* DryRun::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.DryRun.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DryRun::release_amount() {
  // @@protoc_insertion_point(field_release:ric.bill.DryRun.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DryRun::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.DryRun.amount)
}

// string currency = 2;
inline void DryRun::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DryRun::currency() const {
  // @@protoc_insertion_point(field_get:ric.bill.DryRun.currency)
  return currency_.GetNoArena();
}
inline void DryRun::set_currency(const ::std::string& value) {
  
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.DryRun.currency)
}
#if LANG_CXX11
inline void DryRun::set_currency(::std::string&& value) {
  
  currency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.DryRun.currency)
}
#endif
inline void DryRun::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.DryRun.currency)
}
inline void DryRun::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.DryRun.currency)
}
inline ::std::string* DryRun::mutable_currency() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.DryRun.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DryRun::release_currency() {
  // @@protoc_insertion_point(field_release:ric.bill.DryRun.currency)
  
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DryRun::set_allocated_currency(::std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.DryRun.currency)
}

// int64 next_pay = 3;
inline void DryRun::clear_next_pay() {
  next_pay_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 DryRun::next_pay() const {
  // @@protoc_insertion_point(field_get:ric.bill.DryRun.next_pay)
  return next_pay_;
}
inline void DryRun::set_next_pay(::google::protobuf::int64 value) {
  
  next_pay_ = value;
  // @@protoc_insertion_point(field_set:ric.bill.DryRun.next_pay)
}

// repeated string messages = 4;
inline int DryRun::messages_size() const {
  return messages_.size();
}
inline void DryRun::clear_messages() {
  messages_.Clear();
}
inline const ::std::string& DryRun::messages(int index) const {
  // @@protoc_insertion_point(field_get:ric.bill.DryRun.messages)
  return messages_.Get(index);
}
inline ::std::string* DryRun::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:ric.bill.DryRun.messages)
  return messages_.Mutable(index);
}
inline void DryRun::set_messages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.bill.DryRun.messages)
  messages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DryRun::set_messages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.bill.DryRun.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DryRun::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.bill.DryRun.messages)
}
inline void DryRun::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.bill.DryRun.messages)
}
inline ::std::string* DryRun::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:ric.bill.DryRun.messages)
  return messages_.Add();
}
inline void DryRun::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.bill.DryRun.messages)
}
#if LANG_CXX11
inline void DryRun::add_messages(::std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.bill.DryRun.messages)
}
#endif
inline void DryRun::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.bill.DryRun.messages)
}
inline void DryRun::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.bill.DryRun.messages)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DryRun::messages() const {
  // @@protoc_insertion_point(field_list:ric.bill.DryRun.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DryRun::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:ric.bill.DryRun.messages)
  return &messages_;
}

// -------------------------------------------------------------------

// SubscriptionRequest

// .ric.bill.UserContext ctx = 1;
inline bool SubscriptionRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void SubscriptionRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::bill::UserContext& SubscriptionRequest::ctx() const {
  const ::ric::bill::UserContext* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::bill::UserContext*>(
      &::ric::bill::_UserContext_default_instance_);
}
inline ::ric::bill::UserContext* SubscriptionRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionRequest.ctx)
  
  ::ric::bill::UserContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::bill::UserContext* SubscriptionRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::bill::UserContext>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionRequest.ctx)
  return ctx_;
}
inline void SubscriptionRequest::set_allocated_ctx(::ric::bill::UserContext* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionRequest.ctx)
}

// string license_id = 2;
inline void SubscriptionRequest::clear_license_id() {
  license_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionRequest::license_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionRequest.license_id)
  return license_id_.GetNoArena();
}
inline void SubscriptionRequest::set_license_id(const ::std::string& value) {
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SubscriptionRequest.license_id)
}
#if LANG_CXX11
inline void SubscriptionRequest::set_license_id(::std::string&& value) {
  
  license_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SubscriptionRequest.license_id)
}
#endif
inline void SubscriptionRequest::set_license_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SubscriptionRequest.license_id)
}
inline void SubscriptionRequest::set_license_id(const char* value, size_t size) {
  
  license_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SubscriptionRequest.license_id)
}
inline ::std::string* SubscriptionRequest::mutable_license_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionRequest.license_id)
  return license_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionRequest::release_license_id() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionRequest.license_id)
  
  return license_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionRequest::set_allocated_license_id(::std::string* license_id) {
  if (license_id != nullptr) {
    
  } else {
    
  }
  license_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionRequest.license_id)
}

// bool dry_run = 3;
inline void SubscriptionRequest::clear_dry_run() {
  dry_run_ = false;
}
inline bool SubscriptionRequest::dry_run() const {
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionRequest.dry_run)
  return dry_run_;
}
inline void SubscriptionRequest::set_dry_run(bool value) {
  
  dry_run_ = value;
  // @@protoc_insertion_point(field_set:ric.bill.SubscriptionRequest.dry_run)
}

// string params = 4;
inline void SubscriptionRequest::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionRequest::params() const {
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionRequest.params)
  return params_.GetNoArena();
}
inline void SubscriptionRequest::set_params(const ::std::string& value) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SubscriptionRequest.params)
}
#if LANG_CXX11
inline void SubscriptionRequest::set_params(::std::string&& value) {
  
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SubscriptionRequest.params)
}
#endif
inline void SubscriptionRequest::set_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SubscriptionRequest.params)
}
inline void SubscriptionRequest::set_params(const char* value, size_t size) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SubscriptionRequest.params)
}
inline ::std::string* SubscriptionRequest::mutable_params() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionRequest.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionRequest::release_params() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionRequest.params)
  
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionRequest::set_allocated_params(::std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionRequest.params)
}

// string group_id = 5;
inline void SubscriptionRequest::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionRequest::group_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionRequest.group_id)
  return group_id_.GetNoArena();
}
inline void SubscriptionRequest::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SubscriptionRequest.group_id)
}
#if LANG_CXX11
inline void SubscriptionRequest::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SubscriptionRequest.group_id)
}
#endif
inline void SubscriptionRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SubscriptionRequest.group_id)
}
inline void SubscriptionRequest::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SubscriptionRequest.group_id)
}
inline ::std::string* SubscriptionRequest::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionRequest.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionRequest.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionRequest::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionRequest.group_id)
}

// -------------------------------------------------------------------

// SubscriptionResponse

// string payment_id = 1;
inline void SubscriptionResponse::clear_payment_id() {
  payment_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionResponse::payment_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionResponse.payment_id)
  return payment_id_.GetNoArena();
}
inline void SubscriptionResponse::set_payment_id(const ::std::string& value) {
  
  payment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SubscriptionResponse.payment_id)
}
#if LANG_CXX11
inline void SubscriptionResponse::set_payment_id(::std::string&& value) {
  
  payment_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SubscriptionResponse.payment_id)
}
#endif
inline void SubscriptionResponse::set_payment_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SubscriptionResponse.payment_id)
}
inline void SubscriptionResponse::set_payment_id(const char* value, size_t size) {
  
  payment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SubscriptionResponse.payment_id)
}
inline ::std::string* SubscriptionResponse::mutable_payment_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionResponse.payment_id)
  return payment_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionResponse::release_payment_id() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionResponse.payment_id)
  
  return payment_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionResponse::set_allocated_payment_id(::std::string* payment_id) {
  if (payment_id != nullptr) {
    
  } else {
    
  }
  payment_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionResponse.payment_id)
}

// string job_id = 2;
inline void SubscriptionResponse::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionResponse::job_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionResponse.job_id)
  return job_id_.GetNoArena();
}
inline void SubscriptionResponse::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.SubscriptionResponse.job_id)
}
#if LANG_CXX11
inline void SubscriptionResponse::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.SubscriptionResponse.job_id)
}
#endif
inline void SubscriptionResponse::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.SubscriptionResponse.job_id)
}
inline void SubscriptionResponse::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.SubscriptionResponse.job_id)
}
inline ::std::string* SubscriptionResponse::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionResponse.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionResponse::release_job_id() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionResponse.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionResponse::set_allocated_job_id(::std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionResponse.job_id)
}

// .ric.bill.DryRun dry_run = 3;
inline bool SubscriptionResponse::has_dry_run() const {
  return this != internal_default_instance() && dry_run_ != nullptr;
}
inline void SubscriptionResponse::clear_dry_run() {
  if (GetArenaNoVirtual() == nullptr && dry_run_ != nullptr) {
    delete dry_run_;
  }
  dry_run_ = nullptr;
}
inline const ::ric::bill::DryRun& SubscriptionResponse::dry_run() const {
  const ::ric::bill::DryRun* p = dry_run_;
  // @@protoc_insertion_point(field_get:ric.bill.SubscriptionResponse.dry_run)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::bill::DryRun*>(
      &::ric::bill::_DryRun_default_instance_);
}
inline ::ric::bill::DryRun* SubscriptionResponse::release_dry_run() {
  // @@protoc_insertion_point(field_release:ric.bill.SubscriptionResponse.dry_run)
  
  ::ric::bill::DryRun* temp = dry_run_;
  dry_run_ = nullptr;
  return temp;
}
inline ::ric::bill::DryRun* SubscriptionResponse::mutable_dry_run() {
  
  if (dry_run_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::bill::DryRun>(GetArenaNoVirtual());
    dry_run_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.bill.SubscriptionResponse.dry_run)
  return dry_run_;
}
inline void SubscriptionResponse::set_allocated_dry_run(::ric::bill::DryRun* dry_run) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dry_run_;
  }
  if (dry_run) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dry_run = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dry_run, submessage_arena);
    }
    
  } else {
    
  }
  dry_run_ = dry_run;
  // @@protoc_insertion_point(field_set_allocated:ric.bill.SubscriptionResponse.dry_run)
}

// -------------------------------------------------------------------

// ReceiptRequest

// string payment_id = 1;
inline void ReceiptRequest::clear_payment_id() {
  payment_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceiptRequest::payment_id() const {
  // @@protoc_insertion_point(field_get:ric.bill.ReceiptRequest.payment_id)
  return payment_id_.GetNoArena();
}
inline void ReceiptRequest::set_payment_id(const ::std::string& value) {
  
  payment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.ReceiptRequest.payment_id)
}
#if LANG_CXX11
inline void ReceiptRequest::set_payment_id(::std::string&& value) {
  
  payment_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.ReceiptRequest.payment_id)
}
#endif
inline void ReceiptRequest::set_payment_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.ReceiptRequest.payment_id)
}
inline void ReceiptRequest::set_payment_id(const char* value, size_t size) {
  
  payment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.ReceiptRequest.payment_id)
}
inline ::std::string* ReceiptRequest::mutable_payment_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.ReceiptRequest.payment_id)
  return payment_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceiptRequest::release_payment_id() {
  // @@protoc_insertion_point(field_release:ric.bill.ReceiptRequest.payment_id)
  
  return payment_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiptRequest::set_allocated_payment_id(::std::string* payment_id) {
  if (payment_id != nullptr) {
    
  } else {
    
  }
  payment_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_id);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.ReceiptRequest.payment_id)
}

// string payment_gate = 2;
inline void ReceiptRequest::clear_payment_gate() {
  payment_gate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceiptRequest::payment_gate() const {
  // @@protoc_insertion_point(field_get:ric.bill.ReceiptRequest.payment_gate)
  return payment_gate_.GetNoArena();
}
inline void ReceiptRequest::set_payment_gate(const ::std::string& value) {
  
  payment_gate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.ReceiptRequest.payment_gate)
}
#if LANG_CXX11
inline void ReceiptRequest::set_payment_gate(::std::string&& value) {
  
  payment_gate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.ReceiptRequest.payment_gate)
}
#endif
inline void ReceiptRequest::set_payment_gate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_gate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.ReceiptRequest.payment_gate)
}
inline void ReceiptRequest::set_payment_gate(const char* value, size_t size) {
  
  payment_gate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.ReceiptRequest.payment_gate)
}
inline ::std::string* ReceiptRequest::mutable_payment_gate() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.ReceiptRequest.payment_gate)
  return payment_gate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceiptRequest::release_payment_gate() {
  // @@protoc_insertion_point(field_release:ric.bill.ReceiptRequest.payment_gate)
  
  return payment_gate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiptRequest::set_allocated_payment_gate(::std::string* payment_gate) {
  if (payment_gate != nullptr) {
    
  } else {
    
  }
  payment_gate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_gate);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.ReceiptRequest.payment_gate)
}

// string params = 3;
inline void ReceiptRequest::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceiptRequest::params() const {
  // @@protoc_insertion_point(field_get:ric.bill.ReceiptRequest.params)
  return params_.GetNoArena();
}
inline void ReceiptRequest::set_params(const ::std::string& value) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.bill.ReceiptRequest.params)
}
#if LANG_CXX11
inline void ReceiptRequest::set_params(::std::string&& value) {
  
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.bill.ReceiptRequest.params)
}
#endif
inline void ReceiptRequest::set_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.bill.ReceiptRequest.params)
}
inline void ReceiptRequest::set_params(const char* value, size_t size) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.bill.ReceiptRequest.params)
}
inline ::std::string* ReceiptRequest::mutable_params() {
  
  // @@protoc_insertion_point(field_mutable:ric.bill.ReceiptRequest.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceiptRequest::release_params() {
  // @@protoc_insertion_point(field_release:ric.bill.ReceiptRequest.params)
  
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiptRequest::set_allocated_params(::std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:ric.bill.ReceiptRequest.params)
}

// -------------------------------------------------------------------

// ReceiptResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bill
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dbill_2fricbill_2eproto
