// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-handler/richandler.proto

#ifndef PROTOBUF_INCLUDED_ric_2dhandler_2frichandler_2eproto
#define PROTOBUF_INCLUDED_ric_2dhandler_2frichandler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2dhandler_2frichandler_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2dhandler_2frichandler_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2dhandler_2frichandler_2eproto();
namespace ric {
namespace handler {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class ExecRequest;
class ExecRequestDefaultTypeInternal;
extern ExecRequestDefaultTypeInternal _ExecRequest_default_instance_;
class ExecResponse;
class ExecResponseDefaultTypeInternal;
extern ExecResponseDefaultTypeInternal _ExecResponse_default_instance_;
class ExecStats;
class ExecStatsDefaultTypeInternal;
extern ExecStatsDefaultTypeInternal _ExecStats_default_instance_;
class ForceLinksUpdateRequest;
class ForceLinksUpdateRequestDefaultTypeInternal;
extern ForceLinksUpdateRequestDefaultTypeInternal _ForceLinksUpdateRequest_default_instance_;
class GetHandlerStoreRequest;
class GetHandlerStoreRequestDefaultTypeInternal;
extern GetHandlerStoreRequestDefaultTypeInternal _GetHandlerStoreRequest_default_instance_;
class GetHandlerStoreResponse;
class GetHandlerStoreResponseDefaultTypeInternal;
extern GetHandlerStoreResponseDefaultTypeInternal _GetHandlerStoreResponse_default_instance_;
class GetObjectInfoRequest;
class GetObjectInfoRequestDefaultTypeInternal;
extern GetObjectInfoRequestDefaultTypeInternal _GetObjectInfoRequest_default_instance_;
class GetObjectInfoResponse;
class GetObjectInfoResponseDefaultTypeInternal;
extern GetObjectInfoResponseDefaultTypeInternal _GetObjectInfoResponse_default_instance_;
class Handler;
class HandlerDefaultTypeInternal;
extern HandlerDefaultTypeInternal _Handler_default_instance_;
class JsError;
class JsErrorDefaultTypeInternal;
extern JsErrorDefaultTypeInternal _JsError_default_instance_;
class JsStackFrame;
class JsStackFrameDefaultTypeInternal;
extern JsStackFrameDefaultTypeInternal _JsStackFrame_default_instance_;
class LogRecord;
class LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
}  // namespace handler
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::handler::Action* Arena::CreateMaybeMessage<::ric::handler::Action>(Arena*);
template<> ::ric::handler::EmptyResponse* Arena::CreateMaybeMessage<::ric::handler::EmptyResponse>(Arena*);
template<> ::ric::handler::ExecRequest* Arena::CreateMaybeMessage<::ric::handler::ExecRequest>(Arena*);
template<> ::ric::handler::ExecResponse* Arena::CreateMaybeMessage<::ric::handler::ExecResponse>(Arena*);
template<> ::ric::handler::ExecStats* Arena::CreateMaybeMessage<::ric::handler::ExecStats>(Arena*);
template<> ::ric::handler::ForceLinksUpdateRequest* Arena::CreateMaybeMessage<::ric::handler::ForceLinksUpdateRequest>(Arena*);
template<> ::ric::handler::GetHandlerStoreRequest* Arena::CreateMaybeMessage<::ric::handler::GetHandlerStoreRequest>(Arena*);
template<> ::ric::handler::GetHandlerStoreResponse* Arena::CreateMaybeMessage<::ric::handler::GetHandlerStoreResponse>(Arena*);
template<> ::ric::handler::GetObjectInfoRequest* Arena::CreateMaybeMessage<::ric::handler::GetObjectInfoRequest>(Arena*);
template<> ::ric::handler::GetObjectInfoResponse* Arena::CreateMaybeMessage<::ric::handler::GetObjectInfoResponse>(Arena*);
template<> ::ric::handler::Handler* Arena::CreateMaybeMessage<::ric::handler::Handler>(Arena*);
template<> ::ric::handler::JsError* Arena::CreateMaybeMessage<::ric::handler::JsError>(Arena*);
template<> ::ric::handler::JsStackFrame* Arena::CreateMaybeMessage<::ric::handler::JsStackFrame>(Arena*);
template<> ::ric::handler::LogRecord* Arena::CreateMaybeMessage<::ric::handler::LogRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace handler {

// ===================================================================

class ExecRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.ExecRequest) */ {
 public:
  ExecRequest();
  virtual ~ExecRequest();

  ExecRequest(const ExecRequest& from);

  inline ExecRequest& operator=(const ExecRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecRequest(ExecRequest&& from) noexcept
    : ExecRequest() {
    *this = ::std::move(from);
  }

  inline ExecRequest& operator=(ExecRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecRequest* internal_default_instance() {
    return reinterpret_cast<const ExecRequest*>(
               &_ExecRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExecRequest* other);
  friend void swap(ExecRequest& a, ExecRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecRequest* New() const final {
    return CreateMaybeMessage<ExecRequest>(nullptr);
  }

  ExecRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecRequest& from);
  void MergeFrom(const ExecRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string handler_id = 1;
  void clear_handler_id();
  static const int kHandlerIdFieldNumber = 1;
  const ::std::string& handler_id() const;
  void set_handler_id(const ::std::string& value);
  #if LANG_CXX11
  void set_handler_id(::std::string&& value);
  #endif
  void set_handler_id(const char* value);
  void set_handler_id(const char* value, size_t size);
  ::std::string* mutable_handler_id();
  ::std::string* release_handler_id();
  void set_allocated_handler_id(::std::string* handler_id);

  // bytes packet = 2;
  void clear_packet();
  static const int kPacketFieldNumber = 2;
  const ::std::string& packet() const;
  void set_packet(const ::std::string& value);
  #if LANG_CXX11
  void set_packet(::std::string&& value);
  #endif
  void set_packet(const char* value);
  void set_packet(const void* value, size_t size);
  ::std::string* mutable_packet();
  ::std::string* release_packet();
  void set_allocated_packet(::std::string* packet);

  // string user_code = 3;
  void clear_user_code();
  static const int kUserCodeFieldNumber = 3;
  const ::std::string& user_code() const;
  void set_user_code(const ::std::string& value);
  #if LANG_CXX11
  void set_user_code(::std::string&& value);
  #endif
  void set_user_code(const char* value);
  void set_user_code(const char* value, size_t size);
  ::std::string* mutable_user_code();
  ::std::string* release_user_code();
  void set_allocated_user_code(::std::string* user_code);

  // @@protoc_insertion_point(class_scope:ric.handler.ExecRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handler_id_;
  ::google::protobuf::internal::ArenaStringPtr packet_;
  ::google::protobuf::internal::ArenaStringPtr user_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class JsStackFrame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.JsStackFrame) */ {
 public:
  JsStackFrame();
  virtual ~JsStackFrame();

  JsStackFrame(const JsStackFrame& from);

  inline JsStackFrame& operator=(const JsStackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JsStackFrame(JsStackFrame&& from) noexcept
    : JsStackFrame() {
    *this = ::std::move(from);
  }

  inline JsStackFrame& operator=(JsStackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JsStackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JsStackFrame* internal_default_instance() {
    return reinterpret_cast<const JsStackFrame*>(
               &_JsStackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JsStackFrame* other);
  friend void swap(JsStackFrame& a, JsStackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JsStackFrame* New() const final {
    return CreateMaybeMessage<JsStackFrame>(nullptr);
  }

  JsStackFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JsStackFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JsStackFrame& from);
  void MergeFrom(const JsStackFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsStackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string function_name = 1;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 1;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_function_name(::std::string&& value);
  #endif
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // int32 line_number = 2;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 2;
  ::google::protobuf::int32 line_number() const;
  void set_line_number(::google::protobuf::int32 value);

  // int32 column = 3;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  ::google::protobuf::int32 column() const;
  void set_column(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.handler.JsStackFrame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::int32 line_number_;
  ::google::protobuf::int32 column_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class JsError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.JsError) */ {
 public:
  JsError();
  virtual ~JsError();

  JsError(const JsError& from);

  inline JsError& operator=(const JsError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JsError(JsError&& from) noexcept
    : JsError() {
    *this = ::std::move(from);
  }

  inline JsError& operator=(JsError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JsError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JsError* internal_default_instance() {
    return reinterpret_cast<const JsError*>(
               &_JsError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(JsError* other);
  friend void swap(JsError& a, JsError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JsError* New() const final {
    return CreateMaybeMessage<JsError>(nullptr);
  }

  JsError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JsError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JsError& from);
  void MergeFrom(const JsError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.handler.JsStackFrame stack = 4;
  int stack_size() const;
  void clear_stack();
  static const int kStackFieldNumber = 4;
  ::ric::handler::JsStackFrame* mutable_stack(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::handler::JsStackFrame >*
      mutable_stack();
  const ::ric::handler::JsStackFrame& stack(int index) const;
  ::ric::handler::JsStackFrame* add_stack();
  const ::google::protobuf::RepeatedPtrField< ::ric::handler::JsStackFrame >&
      stack() const;

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 line_number = 2;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 2;
  ::google::protobuf::int32 line_number() const;
  void set_line_number(::google::protobuf::int32 value);

  // int32 column = 3;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  ::google::protobuf::int32 column() const;
  void set_column(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.handler.JsError)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::handler::JsStackFrame > stack_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 line_number_;
  ::google::protobuf::int32 column_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class ExecStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.ExecStats) */ {
 public:
  ExecStats();
  virtual ~ExecStats();

  ExecStats(const ExecStats& from);

  inline ExecStats& operator=(const ExecStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecStats(ExecStats&& from) noexcept
    : ExecStats() {
    *this = ::std::move(from);
  }

  inline ExecStats& operator=(ExecStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecStats* internal_default_instance() {
    return reinterpret_cast<const ExecStats*>(
               &_ExecStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExecStats* other);
  friend void swap(ExecStats& a, ExecStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecStats* New() const final {
    return CreateMaybeMessage<ExecStats>(nullptr);
  }

  ExecStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecStats& from);
  void MergeFrom(const ExecStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exec_duration = 12;
  void clear_exec_duration();
  static const int kExecDurationFieldNumber = 12;
  const ::std::string& exec_duration() const;
  void set_exec_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_exec_duration(::std::string&& value);
  #endif
  void set_exec_duration(const char* value);
  void set_exec_duration(const char* value, size_t size);
  ::std::string* mutable_exec_duration();
  ::std::string* release_exec_duration();
  void set_allocated_exec_duration(::std::string* exec_duration);

  // uint64 total_heap_size = 1;
  void clear_total_heap_size();
  static const int kTotalHeapSizeFieldNumber = 1;
  ::google::protobuf::uint64 total_heap_size() const;
  void set_total_heap_size(::google::protobuf::uint64 value);

  // uint64 total_heap_size_executable = 2;
  void clear_total_heap_size_executable();
  static const int kTotalHeapSizeExecutableFieldNumber = 2;
  ::google::protobuf::uint64 total_heap_size_executable() const;
  void set_total_heap_size_executable(::google::protobuf::uint64 value);

  // uint64 total_physical_size = 3;
  void clear_total_physical_size();
  static const int kTotalPhysicalSizeFieldNumber = 3;
  ::google::protobuf::uint64 total_physical_size() const;
  void set_total_physical_size(::google::protobuf::uint64 value);

  // uint64 total_available_size = 4;
  void clear_total_available_size();
  static const int kTotalAvailableSizeFieldNumber = 4;
  ::google::protobuf::uint64 total_available_size() const;
  void set_total_available_size(::google::protobuf::uint64 value);

  // uint64 used_heap_size = 5;
  void clear_used_heap_size();
  static const int kUsedHeapSizeFieldNumber = 5;
  ::google::protobuf::uint64 used_heap_size() const;
  void set_used_heap_size(::google::protobuf::uint64 value);

  // uint64 heap_size_limit = 6;
  void clear_heap_size_limit();
  static const int kHeapSizeLimitFieldNumber = 6;
  ::google::protobuf::uint64 heap_size_limit() const;
  void set_heap_size_limit(::google::protobuf::uint64 value);

  // uint64 malloced_memory = 7;
  void clear_malloced_memory();
  static const int kMallocedMemoryFieldNumber = 7;
  ::google::protobuf::uint64 malloced_memory() const;
  void set_malloced_memory(::google::protobuf::uint64 value);

  // uint64 external_memory = 8;
  void clear_external_memory();
  static const int kExternalMemoryFieldNumber = 8;
  ::google::protobuf::uint64 external_memory() const;
  void set_external_memory(::google::protobuf::uint64 value);

  // uint64 peak_malloced_memory = 9;
  void clear_peak_malloced_memory();
  static const int kPeakMallocedMemoryFieldNumber = 9;
  ::google::protobuf::uint64 peak_malloced_memory() const;
  void set_peak_malloced_memory(::google::protobuf::uint64 value);

  // uint64 number_of_native_contexts = 10;
  void clear_number_of_native_contexts();
  static const int kNumberOfNativeContextsFieldNumber = 10;
  ::google::protobuf::uint64 number_of_native_contexts() const;
  void set_number_of_native_contexts(::google::protobuf::uint64 value);

  // uint64 number_of_detached_contexts = 11;
  void clear_number_of_detached_contexts();
  static const int kNumberOfDetachedContextsFieldNumber = 11;
  ::google::protobuf::uint64 number_of_detached_contexts() const;
  void set_number_of_detached_contexts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ric.handler.ExecStats)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exec_duration_;
  ::google::protobuf::uint64 total_heap_size_;
  ::google::protobuf::uint64 total_heap_size_executable_;
  ::google::protobuf::uint64 total_physical_size_;
  ::google::protobuf::uint64 total_available_size_;
  ::google::protobuf::uint64 used_heap_size_;
  ::google::protobuf::uint64 heap_size_limit_;
  ::google::protobuf::uint64 malloced_memory_;
  ::google::protobuf::uint64 external_memory_;
  ::google::protobuf::uint64 peak_malloced_memory_;
  ::google::protobuf::uint64 number_of_native_contexts_;
  ::google::protobuf::uint64 number_of_detached_contexts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class LogRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.LogRecord) */ {
 public:
  LogRecord();
  virtual ~LogRecord();

  LogRecord(const LogRecord& from);

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRecord(LogRecord&& from) noexcept
    : LogRecord() {
    *this = ::std::move(from);
  }

  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
               &_LogRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LogRecord* other);
  friend void swap(LogRecord& a, LogRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRecord* New() const final {
    return CreateMaybeMessage<LogRecord>(nullptr);
  }

  LogRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string record = 2;
  void clear_record();
  static const int kRecordFieldNumber = 2;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.handler.LogRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::google::protobuf::int64 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class ExecResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.ExecResponse) */ {
 public:
  ExecResponse();
  virtual ~ExecResponse();

  ExecResponse(const ExecResponse& from);

  inline ExecResponse& operator=(const ExecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecResponse(ExecResponse&& from) noexcept
    : ExecResponse() {
    *this = ::std::move(from);
  }

  inline ExecResponse& operator=(ExecResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecResponse* internal_default_instance() {
    return reinterpret_cast<const ExecResponse*>(
               &_ExecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExecResponse* other);
  friend void swap(ExecResponse& a, ExecResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecResponse* New() const final {
    return CreateMaybeMessage<ExecResponse>(nullptr);
  }

  ExecResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecResponse& from);
  void MergeFrom(const ExecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.handler.LogRecord logs = 4;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 4;
  ::ric::handler::LogRecord* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::handler::LogRecord >*
      mutable_logs();
  const ::ric::handler::LogRecord& logs(int index) const;
  ::ric::handler::LogRecord* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::ric::handler::LogRecord >&
      logs() const;

  // bytes result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // .ric.handler.JsError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::ric::handler::JsError& error() const;
  ::ric::handler::JsError* release_error();
  ::ric::handler::JsError* mutable_error();
  void set_allocated_error(::ric::handler::JsError* error);

  // .ric.handler.ExecStats stats = 3;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 3;
  const ::ric::handler::ExecStats& stats() const;
  ::ric::handler::ExecStats* release_stats();
  ::ric::handler::ExecStats* mutable_stats();
  void set_allocated_stats(::ric::handler::ExecStats* stats);

  // @@protoc_insertion_point(class_scope:ric.handler.ExecResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::handler::LogRecord > logs_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::ric::handler::JsError* error_;
  ::ric::handler::ExecStats* stats_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.GetObjectInfoRequest) */ {
 public:
  GetObjectInfoRequest();
  virtual ~GetObjectInfoRequest();

  GetObjectInfoRequest(const GetObjectInfoRequest& from);

  inline GetObjectInfoRequest& operator=(const GetObjectInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoRequest(GetObjectInfoRequest&& from) noexcept
    : GetObjectInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoRequest& operator=(GetObjectInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoRequest*>(
               &_GetObjectInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetObjectInfoRequest* other);
  friend void swap(GetObjectInfoRequest& a, GetObjectInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoRequest* New() const final {
    return CreateMaybeMessage<GetObjectInfoRequest>(nullptr);
  }

  GetObjectInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoRequest& from);
  void MergeFrom(const GetObjectInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.handler.GetObjectInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes params = 2;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const void* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:ric.handler.Action)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class Handler final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.Handler) */ {
 public:
  Handler();
  virtual ~Handler();

  Handler(const Handler& from);

  inline Handler& operator=(const Handler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handler(Handler&& from) noexcept
    : Handler() {
    *this = ::std::move(from);
  }

  inline Handler& operator=(Handler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Handler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handler* internal_default_instance() {
    return reinterpret_cast<const Handler*>(
               &_Handler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Handler* other);
  friend void swap(Handler& a, Handler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handler* New() const final {
    return CreateMaybeMessage<Handler>(nullptr);
  }

  Handler* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Handler>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Handler& from);
  void MergeFrom(const Handler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string user_code = 2;
  void clear_user_code();
  static const int kUserCodeFieldNumber = 2;
  const ::std::string& user_code() const;
  void set_user_code(const ::std::string& value);
  #if LANG_CXX11
  void set_user_code(::std::string&& value);
  #endif
  void set_user_code(const char* value);
  void set_user_code(const char* value, size_t size);
  ::std::string* mutable_user_code();
  ::std::string* release_user_code();
  void set_allocated_user_code(::std::string* user_code);

  // bytes bindings = 3;
  void clear_bindings();
  static const int kBindingsFieldNumber = 3;
  const ::std::string& bindings() const;
  void set_bindings(const ::std::string& value);
  #if LANG_CXX11
  void set_bindings(::std::string&& value);
  #endif
  void set_bindings(const char* value);
  void set_bindings(const void* value, size_t size);
  ::std::string* mutable_bindings();
  ::std::string* release_bindings();
  void set_allocated_bindings(::std::string* bindings);

  // bytes parameters = 4;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::std::string& parameters() const;
  void set_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_parameters(::std::string&& value);
  #endif
  void set_parameters(const char* value);
  void set_parameters(const void* value, size_t size);
  ::std::string* mutable_parameters();
  ::std::string* release_parameters();
  void set_allocated_parameters(::std::string* parameters);

  // @@protoc_insertion_point(class_scope:ric.handler.Handler)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr user_code_;
  ::google::protobuf::internal::ArenaStringPtr bindings_;
  ::google::protobuf::internal::ArenaStringPtr parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class GetObjectInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.GetObjectInfoResponse) */ {
 public:
  GetObjectInfoResponse();
  virtual ~GetObjectInfoResponse();

  GetObjectInfoResponse(const GetObjectInfoResponse& from);

  inline GetObjectInfoResponse& operator=(const GetObjectInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetObjectInfoResponse(GetObjectInfoResponse&& from) noexcept
    : GetObjectInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectInfoResponse& operator=(GetObjectInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetObjectInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectInfoResponse*>(
               &_GetObjectInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetObjectInfoResponse* other);
  friend void swap(GetObjectInfoResponse& a, GetObjectInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetObjectInfoResponse* New() const final {
    return CreateMaybeMessage<GetObjectInfoResponse>(nullptr);
  }

  GetObjectInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetObjectInfoResponse& from);
  void MergeFrom(const GetObjectInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.handler.Action actions = 5;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 5;
  ::ric::handler::Action* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::handler::Action >*
      mutable_actions();
  const ::ric::handler::Action& actions(int index) const;
  ::ric::handler::Action* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::ric::handler::Action >&
      actions() const;

  // repeated .ric.handler.Handler handlers = 6;
  int handlers_size() const;
  void clear_handlers();
  static const int kHandlersFieldNumber = 6;
  ::ric::handler::Handler* mutable_handlers(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::handler::Handler >*
      mutable_handlers();
  const ::ric::handler::Handler& handlers(int index) const;
  ::ric::handler::Handler* add_handlers();
  const ::google::protobuf::RepeatedPtrField< ::ric::handler::Handler >&
      handlers() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes config = 2;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // bytes store = 3;
  void clear_store();
  static const int kStoreFieldNumber = 3;
  const ::std::string& store() const;
  void set_store(const ::std::string& value);
  #if LANG_CXX11
  void set_store(::std::string&& value);
  #endif
  void set_store(const char* value);
  void set_store(const void* value, size_t size);
  ::std::string* mutable_store();
  ::std::string* release_store();
  void set_allocated_store(::std::string* store);

  // int64 last_packet_time = 4;
  void clear_last_packet_time();
  static const int kLastPacketTimeFieldNumber = 4;
  ::google::protobuf::int64 last_packet_time() const;
  void set_last_packet_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.handler.GetObjectInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::handler::Action > actions_;
  ::google::protobuf::RepeatedPtrField< ::ric::handler::Handler > handlers_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::internal::ArenaStringPtr store_;
  ::google::protobuf::int64 last_packet_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class GetHandlerStoreRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.GetHandlerStoreRequest) */ {
 public:
  GetHandlerStoreRequest();
  virtual ~GetHandlerStoreRequest();

  GetHandlerStoreRequest(const GetHandlerStoreRequest& from);

  inline GetHandlerStoreRequest& operator=(const GetHandlerStoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHandlerStoreRequest(GetHandlerStoreRequest&& from) noexcept
    : GetHandlerStoreRequest() {
    *this = ::std::move(from);
  }

  inline GetHandlerStoreRequest& operator=(GetHandlerStoreRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetHandlerStoreRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHandlerStoreRequest* internal_default_instance() {
    return reinterpret_cast<const GetHandlerStoreRequest*>(
               &_GetHandlerStoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetHandlerStoreRequest* other);
  friend void swap(GetHandlerStoreRequest& a, GetHandlerStoreRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHandlerStoreRequest* New() const final {
    return CreateMaybeMessage<GetHandlerStoreRequest>(nullptr);
  }

  GetHandlerStoreRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetHandlerStoreRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetHandlerStoreRequest& from);
  void MergeFrom(const GetHandlerStoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHandlerStoreRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string handler_id = 1;
  void clear_handler_id();
  static const int kHandlerIdFieldNumber = 1;
  const ::std::string& handler_id() const;
  void set_handler_id(const ::std::string& value);
  #if LANG_CXX11
  void set_handler_id(::std::string&& value);
  #endif
  void set_handler_id(const char* value);
  void set_handler_id(const char* value, size_t size);
  ::std::string* mutable_handler_id();
  ::std::string* release_handler_id();
  void set_allocated_handler_id(::std::string* handler_id);

  // @@protoc_insertion_point(class_scope:ric.handler.GetHandlerStoreRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handler_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class GetHandlerStoreResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.GetHandlerStoreResponse) */ {
 public:
  GetHandlerStoreResponse();
  virtual ~GetHandlerStoreResponse();

  GetHandlerStoreResponse(const GetHandlerStoreResponse& from);

  inline GetHandlerStoreResponse& operator=(const GetHandlerStoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHandlerStoreResponse(GetHandlerStoreResponse&& from) noexcept
    : GetHandlerStoreResponse() {
    *this = ::std::move(from);
  }

  inline GetHandlerStoreResponse& operator=(GetHandlerStoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetHandlerStoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHandlerStoreResponse* internal_default_instance() {
    return reinterpret_cast<const GetHandlerStoreResponse*>(
               &_GetHandlerStoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetHandlerStoreResponse* other);
  friend void swap(GetHandlerStoreResponse& a, GetHandlerStoreResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHandlerStoreResponse* New() const final {
    return CreateMaybeMessage<GetHandlerStoreResponse>(nullptr);
  }

  GetHandlerStoreResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetHandlerStoreResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetHandlerStoreResponse& from);
  void MergeFrom(const GetHandlerStoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHandlerStoreResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes store = 1;
  void clear_store();
  static const int kStoreFieldNumber = 1;
  const ::std::string& store() const;
  void set_store(const ::std::string& value);
  #if LANG_CXX11
  void set_store(::std::string&& value);
  #endif
  void set_store(const char* value);
  void set_store(const void* value, size_t size);
  ::std::string* mutable_store();
  ::std::string* release_store();
  void set_allocated_store(::std::string* store);

  // @@protoc_insertion_point(class_scope:ric.handler.GetHandlerStoreResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr store_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class ForceLinksUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.ForceLinksUpdateRequest) */ {
 public:
  ForceLinksUpdateRequest();
  virtual ~ForceLinksUpdateRequest();

  ForceLinksUpdateRequest(const ForceLinksUpdateRequest& from);

  inline ForceLinksUpdateRequest& operator=(const ForceLinksUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForceLinksUpdateRequest(ForceLinksUpdateRequest&& from) noexcept
    : ForceLinksUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ForceLinksUpdateRequest& operator=(ForceLinksUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ForceLinksUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForceLinksUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ForceLinksUpdateRequest*>(
               &_ForceLinksUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ForceLinksUpdateRequest* other);
  friend void swap(ForceLinksUpdateRequest& a, ForceLinksUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceLinksUpdateRequest* New() const final {
    return CreateMaybeMessage<ForceLinksUpdateRequest>(nullptr);
  }

  ForceLinksUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ForceLinksUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ForceLinksUpdateRequest& from);
  void MergeFrom(const ForceLinksUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForceLinksUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // @@protoc_insertion_point(class_scope:ric.handler.ForceLinksUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.handler.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(EmptyResponse* other);
  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.handler.EmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2dhandler_2frichandler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecRequest

// string handler_id = 1;
inline void ExecRequest::clear_handler_id() {
  handler_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecRequest::handler_id() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecRequest.handler_id)
  return handler_id_.GetNoArena();
}
inline void ExecRequest::set_handler_id(const ::std::string& value) {
  
  handler_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.ExecRequest.handler_id)
}
#if LANG_CXX11
inline void ExecRequest::set_handler_id(::std::string&& value) {
  
  handler_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.ExecRequest.handler_id)
}
#endif
inline void ExecRequest::set_handler_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handler_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.ExecRequest.handler_id)
}
inline void ExecRequest::set_handler_id(const char* value, size_t size) {
  
  handler_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.ExecRequest.handler_id)
}
inline ::std::string* ExecRequest::mutable_handler_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecRequest.handler_id)
  return handler_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecRequest::release_handler_id() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecRequest.handler_id)
  
  return handler_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecRequest::set_allocated_handler_id(::std::string* handler_id) {
  if (handler_id != nullptr) {
    
  } else {
    
  }
  handler_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handler_id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecRequest.handler_id)
}

// bytes packet = 2;
inline void ExecRequest::clear_packet() {
  packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecRequest::packet() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecRequest.packet)
  return packet_.GetNoArena();
}
inline void ExecRequest::set_packet(const ::std::string& value) {
  
  packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.ExecRequest.packet)
}
#if LANG_CXX11
inline void ExecRequest::set_packet(::std::string&& value) {
  
  packet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.ExecRequest.packet)
}
#endif
inline void ExecRequest::set_packet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.ExecRequest.packet)
}
inline void ExecRequest::set_packet(const void* value, size_t size) {
  
  packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.ExecRequest.packet)
}
inline ::std::string* ExecRequest::mutable_packet() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecRequest.packet)
  return packet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecRequest::release_packet() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecRequest.packet)
  
  return packet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecRequest::set_allocated_packet(::std::string* packet) {
  if (packet != nullptr) {
    
  } else {
    
  }
  packet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecRequest.packet)
}

// string user_code = 3;
inline void ExecRequest::clear_user_code() {
  user_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecRequest::user_code() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecRequest.user_code)
  return user_code_.GetNoArena();
}
inline void ExecRequest::set_user_code(const ::std::string& value) {
  
  user_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.ExecRequest.user_code)
}
#if LANG_CXX11
inline void ExecRequest::set_user_code(::std::string&& value) {
  
  user_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.ExecRequest.user_code)
}
#endif
inline void ExecRequest::set_user_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.ExecRequest.user_code)
}
inline void ExecRequest::set_user_code(const char* value, size_t size) {
  
  user_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.ExecRequest.user_code)
}
inline ::std::string* ExecRequest::mutable_user_code() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecRequest.user_code)
  return user_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecRequest::release_user_code() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecRequest.user_code)
  
  return user_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecRequest::set_allocated_user_code(::std::string* user_code) {
  if (user_code != nullptr) {
    
  } else {
    
  }
  user_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_code);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecRequest.user_code)
}

// -------------------------------------------------------------------

// JsStackFrame

// string function_name = 1;
inline void JsStackFrame::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JsStackFrame::function_name() const {
  // @@protoc_insertion_point(field_get:ric.handler.JsStackFrame.function_name)
  return function_name_.GetNoArena();
}
inline void JsStackFrame::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.JsStackFrame.function_name)
}
#if LANG_CXX11
inline void JsStackFrame::set_function_name(::std::string&& value) {
  
  function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.JsStackFrame.function_name)
}
#endif
inline void JsStackFrame::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.JsStackFrame.function_name)
}
inline void JsStackFrame::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.JsStackFrame.function_name)
}
inline ::std::string* JsStackFrame::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.JsStackFrame.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JsStackFrame::release_function_name() {
  // @@protoc_insertion_point(field_release:ric.handler.JsStackFrame.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JsStackFrame::set_allocated_function_name(::std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.JsStackFrame.function_name)
}

// int32 line_number = 2;
inline void JsStackFrame::clear_line_number() {
  line_number_ = 0;
}
inline ::google::protobuf::int32 JsStackFrame::line_number() const {
  // @@protoc_insertion_point(field_get:ric.handler.JsStackFrame.line_number)
  return line_number_;
}
inline void JsStackFrame::set_line_number(::google::protobuf::int32 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.JsStackFrame.line_number)
}

// int32 column = 3;
inline void JsStackFrame::clear_column() {
  column_ = 0;
}
inline ::google::protobuf::int32 JsStackFrame::column() const {
  // @@protoc_insertion_point(field_get:ric.handler.JsStackFrame.column)
  return column_;
}
inline void JsStackFrame::set_column(::google::protobuf::int32 value) {
  
  column_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.JsStackFrame.column)
}

// -------------------------------------------------------------------

// JsError

// string message = 1;
inline void JsError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JsError::message() const {
  // @@protoc_insertion_point(field_get:ric.handler.JsError.message)
  return message_.GetNoArena();
}
inline void JsError::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.JsError.message)
}
#if LANG_CXX11
inline void JsError::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.JsError.message)
}
#endif
inline void JsError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.JsError.message)
}
inline void JsError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.JsError.message)
}
inline ::std::string* JsError::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.JsError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JsError::release_message() {
  // @@protoc_insertion_point(field_release:ric.handler.JsError.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JsError::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.JsError.message)
}

// int32 line_number = 2;
inline void JsError::clear_line_number() {
  line_number_ = 0;
}
inline ::google::protobuf::int32 JsError::line_number() const {
  // @@protoc_insertion_point(field_get:ric.handler.JsError.line_number)
  return line_number_;
}
inline void JsError::set_line_number(::google::protobuf::int32 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.JsError.line_number)
}

// int32 column = 3;
inline void JsError::clear_column() {
  column_ = 0;
}
inline ::google::protobuf::int32 JsError::column() const {
  // @@protoc_insertion_point(field_get:ric.handler.JsError.column)
  return column_;
}
inline void JsError::set_column(::google::protobuf::int32 value) {
  
  column_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.JsError.column)
}

// repeated .ric.handler.JsStackFrame stack = 4;
inline int JsError::stack_size() const {
  return stack_.size();
}
inline void JsError::clear_stack() {
  stack_.Clear();
}
inline ::ric::handler::JsStackFrame* JsError::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:ric.handler.JsError.stack)
  return stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::handler::JsStackFrame >*
JsError::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:ric.handler.JsError.stack)
  return &stack_;
}
inline const ::ric::handler::JsStackFrame& JsError::stack(int index) const {
  // @@protoc_insertion_point(field_get:ric.handler.JsError.stack)
  return stack_.Get(index);
}
inline ::ric::handler::JsStackFrame* JsError::add_stack() {
  // @@protoc_insertion_point(field_add:ric.handler.JsError.stack)
  return stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::handler::JsStackFrame >&
JsError::stack() const {
  // @@protoc_insertion_point(field_list:ric.handler.JsError.stack)
  return stack_;
}

// -------------------------------------------------------------------

// ExecStats

// uint64 total_heap_size = 1;
inline void ExecStats::clear_total_heap_size() {
  total_heap_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::total_heap_size() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.total_heap_size)
  return total_heap_size_;
}
inline void ExecStats::set_total_heap_size(::google::protobuf::uint64 value) {
  
  total_heap_size_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.total_heap_size)
}

// uint64 total_heap_size_executable = 2;
inline void ExecStats::clear_total_heap_size_executable() {
  total_heap_size_executable_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::total_heap_size_executable() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.total_heap_size_executable)
  return total_heap_size_executable_;
}
inline void ExecStats::set_total_heap_size_executable(::google::protobuf::uint64 value) {
  
  total_heap_size_executable_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.total_heap_size_executable)
}

// uint64 total_physical_size = 3;
inline void ExecStats::clear_total_physical_size() {
  total_physical_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::total_physical_size() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.total_physical_size)
  return total_physical_size_;
}
inline void ExecStats::set_total_physical_size(::google::protobuf::uint64 value) {
  
  total_physical_size_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.total_physical_size)
}

// uint64 total_available_size = 4;
inline void ExecStats::clear_total_available_size() {
  total_available_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::total_available_size() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.total_available_size)
  return total_available_size_;
}
inline void ExecStats::set_total_available_size(::google::protobuf::uint64 value) {
  
  total_available_size_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.total_available_size)
}

// uint64 used_heap_size = 5;
inline void ExecStats::clear_used_heap_size() {
  used_heap_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::used_heap_size() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.used_heap_size)
  return used_heap_size_;
}
inline void ExecStats::set_used_heap_size(::google::protobuf::uint64 value) {
  
  used_heap_size_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.used_heap_size)
}

// uint64 heap_size_limit = 6;
inline void ExecStats::clear_heap_size_limit() {
  heap_size_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::heap_size_limit() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.heap_size_limit)
  return heap_size_limit_;
}
inline void ExecStats::set_heap_size_limit(::google::protobuf::uint64 value) {
  
  heap_size_limit_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.heap_size_limit)
}

// uint64 malloced_memory = 7;
inline void ExecStats::clear_malloced_memory() {
  malloced_memory_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::malloced_memory() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.malloced_memory)
  return malloced_memory_;
}
inline void ExecStats::set_malloced_memory(::google::protobuf::uint64 value) {
  
  malloced_memory_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.malloced_memory)
}

// uint64 external_memory = 8;
inline void ExecStats::clear_external_memory() {
  external_memory_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::external_memory() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.external_memory)
  return external_memory_;
}
inline void ExecStats::set_external_memory(::google::protobuf::uint64 value) {
  
  external_memory_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.external_memory)
}

// uint64 peak_malloced_memory = 9;
inline void ExecStats::clear_peak_malloced_memory() {
  peak_malloced_memory_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::peak_malloced_memory() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.peak_malloced_memory)
  return peak_malloced_memory_;
}
inline void ExecStats::set_peak_malloced_memory(::google::protobuf::uint64 value) {
  
  peak_malloced_memory_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.peak_malloced_memory)
}

// uint64 number_of_native_contexts = 10;
inline void ExecStats::clear_number_of_native_contexts() {
  number_of_native_contexts_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::number_of_native_contexts() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.number_of_native_contexts)
  return number_of_native_contexts_;
}
inline void ExecStats::set_number_of_native_contexts(::google::protobuf::uint64 value) {
  
  number_of_native_contexts_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.number_of_native_contexts)
}

// uint64 number_of_detached_contexts = 11;
inline void ExecStats::clear_number_of_detached_contexts() {
  number_of_detached_contexts_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExecStats::number_of_detached_contexts() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.number_of_detached_contexts)
  return number_of_detached_contexts_;
}
inline void ExecStats::set_number_of_detached_contexts(::google::protobuf::uint64 value) {
  
  number_of_detached_contexts_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.number_of_detached_contexts)
}

// string exec_duration = 12;
inline void ExecStats::clear_exec_duration() {
  exec_duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecStats::exec_duration() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecStats.exec_duration)
  return exec_duration_.GetNoArena();
}
inline void ExecStats::set_exec_duration(const ::std::string& value) {
  
  exec_duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.ExecStats.exec_duration)
}
#if LANG_CXX11
inline void ExecStats::set_exec_duration(::std::string&& value) {
  
  exec_duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.ExecStats.exec_duration)
}
#endif
inline void ExecStats::set_exec_duration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exec_duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.ExecStats.exec_duration)
}
inline void ExecStats::set_exec_duration(const char* value, size_t size) {
  
  exec_duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.ExecStats.exec_duration)
}
inline ::std::string* ExecStats::mutable_exec_duration() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecStats.exec_duration)
  return exec_duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecStats::release_exec_duration() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecStats.exec_duration)
  
  return exec_duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecStats::set_allocated_exec_duration(::std::string* exec_duration) {
  if (exec_duration != nullptr) {
    
  } else {
    
  }
  exec_duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exec_duration);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecStats.exec_duration)
}

// -------------------------------------------------------------------

// LogRecord

// int64 time = 1;
inline void LogRecord::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LogRecord::time() const {
  // @@protoc_insertion_point(field_get:ric.handler.LogRecord.time)
  return time_;
}
inline void LogRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.LogRecord.time)
}

// string record = 2;
inline void LogRecord::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::record() const {
  // @@protoc_insertion_point(field_get:ric.handler.LogRecord.record)
  return record_.GetNoArena();
}
inline void LogRecord::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.LogRecord.record)
}
#if LANG_CXX11
inline void LogRecord::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.LogRecord.record)
}
#endif
inline void LogRecord::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.LogRecord.record)
}
inline void LogRecord::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.LogRecord.record)
}
inline ::std::string* LogRecord::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.LogRecord.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_record() {
  // @@protoc_insertion_point(field_release:ric.handler.LogRecord.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_record(::std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.LogRecord.record)
}

// -------------------------------------------------------------------

// ExecResponse

// bytes result = 1;
inline void ExecResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecResponse::result() const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecResponse.result)
  return result_.GetNoArena();
}
inline void ExecResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.ExecResponse.result)
}
#if LANG_CXX11
inline void ExecResponse::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.ExecResponse.result)
}
#endif
inline void ExecResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.ExecResponse.result)
}
inline void ExecResponse::set_result(const void* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.ExecResponse.result)
}
inline ::std::string* ExecResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecResponse::release_result() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecResponse.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecResponse::set_allocated_result(::std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecResponse.result)
}

// .ric.handler.JsError error = 2;
inline bool ExecResponse::has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline void ExecResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::ric::handler::JsError& ExecResponse::error() const {
  const ::ric::handler::JsError* p = error_;
  // @@protoc_insertion_point(field_get:ric.handler.ExecResponse.error)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::handler::JsError*>(
      &::ric::handler::_JsError_default_instance_);
}
inline ::ric::handler::JsError* ExecResponse::release_error() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecResponse.error)
  
  ::ric::handler::JsError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::ric::handler::JsError* ExecResponse::mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::handler::JsError>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecResponse.error)
  return error_;
}
inline void ExecResponse::set_allocated_error(::ric::handler::JsError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecResponse.error)
}

// .ric.handler.ExecStats stats = 3;
inline bool ExecResponse::has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline void ExecResponse::clear_stats() {
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::ric::handler::ExecStats& ExecResponse::stats() const {
  const ::ric::handler::ExecStats* p = stats_;
  // @@protoc_insertion_point(field_get:ric.handler.ExecResponse.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::handler::ExecStats*>(
      &::ric::handler::_ExecStats_default_instance_);
}
inline ::ric::handler::ExecStats* ExecResponse::release_stats() {
  // @@protoc_insertion_point(field_release:ric.handler.ExecResponse.stats)
  
  ::ric::handler::ExecStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::ric::handler::ExecStats* ExecResponse::mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::handler::ExecStats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecResponse.stats)
  return stats_;
}
inline void ExecResponse::set_allocated_stats(::ric::handler::ExecStats* stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ExecResponse.stats)
}

// repeated .ric.handler.LogRecord logs = 4;
inline int ExecResponse::logs_size() const {
  return logs_.size();
}
inline void ExecResponse::clear_logs() {
  logs_.Clear();
}
inline ::ric::handler::LogRecord* ExecResponse::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:ric.handler.ExecResponse.logs)
  return logs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::handler::LogRecord >*
ExecResponse::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:ric.handler.ExecResponse.logs)
  return &logs_;
}
inline const ::ric::handler::LogRecord& ExecResponse::logs(int index) const {
  // @@protoc_insertion_point(field_get:ric.handler.ExecResponse.logs)
  return logs_.Get(index);
}
inline ::ric::handler::LogRecord* ExecResponse::add_logs() {
  // @@protoc_insertion_point(field_add:ric.handler.ExecResponse.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::handler::LogRecord >&
ExecResponse::logs() const {
  // @@protoc_insertion_point(field_list:ric.handler.ExecResponse.logs)
  return logs_;
}

// -------------------------------------------------------------------

// GetObjectInfoRequest

// string object_id = 1;
inline void GetObjectInfoRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoRequest.object_id)
  return object_id_.GetNoArena();
}
inline void GetObjectInfoRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.GetObjectInfoRequest.object_id)
}
#if LANG_CXX11
inline void GetObjectInfoRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.GetObjectInfoRequest.object_id)
}
#endif
inline void GetObjectInfoRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.GetObjectInfoRequest.object_id)
}
inline void GetObjectInfoRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.GetObjectInfoRequest.object_id)
}
inline ::std::string* GetObjectInfoRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.GetObjectInfoRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.handler.GetObjectInfoRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.GetObjectInfoRequest.object_id)
}

// -------------------------------------------------------------------

// Action

// string id = 1;
inline void Action::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::id() const {
  // @@protoc_insertion_point(field_get:ric.handler.Action.id)
  return id_.GetNoArena();
}
inline void Action::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.Action.id)
}
#if LANG_CXX11
inline void Action::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.Action.id)
}
#endif
inline void Action::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.Action.id)
}
inline void Action::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.Action.id)
}
inline ::std::string* Action::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.Action.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_id() {
  // @@protoc_insertion_point(field_release:ric.handler.Action.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.Action.id)
}

// bytes params = 2;
inline void Action::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::params() const {
  // @@protoc_insertion_point(field_get:ric.handler.Action.params)
  return params_.GetNoArena();
}
inline void Action::set_params(const ::std::string& value) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.Action.params)
}
#if LANG_CXX11
inline void Action::set_params(::std::string&& value) {
  
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.Action.params)
}
#endif
inline void Action::set_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.Action.params)
}
inline void Action::set_params(const void* value, size_t size) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.Action.params)
}
inline ::std::string* Action::mutable_params() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.Action.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_params() {
  // @@protoc_insertion_point(field_release:ric.handler.Action.params)
  
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_params(::std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.Action.params)
}

// -------------------------------------------------------------------

// Handler

// string id = 1;
inline void Handler::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handler::id() const {
  // @@protoc_insertion_point(field_get:ric.handler.Handler.id)
  return id_.GetNoArena();
}
inline void Handler::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.Handler.id)
}
#if LANG_CXX11
inline void Handler::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.Handler.id)
}
#endif
inline void Handler::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.Handler.id)
}
inline void Handler::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.Handler.id)
}
inline ::std::string* Handler::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.Handler.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handler::release_id() {
  // @@protoc_insertion_point(field_release:ric.handler.Handler.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handler::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.Handler.id)
}

// string user_code = 2;
inline void Handler::clear_user_code() {
  user_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handler::user_code() const {
  // @@protoc_insertion_point(field_get:ric.handler.Handler.user_code)
  return user_code_.GetNoArena();
}
inline void Handler::set_user_code(const ::std::string& value) {
  
  user_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.Handler.user_code)
}
#if LANG_CXX11
inline void Handler::set_user_code(::std::string&& value) {
  
  user_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.Handler.user_code)
}
#endif
inline void Handler::set_user_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.Handler.user_code)
}
inline void Handler::set_user_code(const char* value, size_t size) {
  
  user_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.Handler.user_code)
}
inline ::std::string* Handler::mutable_user_code() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.Handler.user_code)
  return user_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handler::release_user_code() {
  // @@protoc_insertion_point(field_release:ric.handler.Handler.user_code)
  
  return user_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handler::set_allocated_user_code(::std::string* user_code) {
  if (user_code != nullptr) {
    
  } else {
    
  }
  user_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_code);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.Handler.user_code)
}

// bytes bindings = 3;
inline void Handler::clear_bindings() {
  bindings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handler::bindings() const {
  // @@protoc_insertion_point(field_get:ric.handler.Handler.bindings)
  return bindings_.GetNoArena();
}
inline void Handler::set_bindings(const ::std::string& value) {
  
  bindings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.Handler.bindings)
}
#if LANG_CXX11
inline void Handler::set_bindings(::std::string&& value) {
  
  bindings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.Handler.bindings)
}
#endif
inline void Handler::set_bindings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bindings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.Handler.bindings)
}
inline void Handler::set_bindings(const void* value, size_t size) {
  
  bindings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.Handler.bindings)
}
inline ::std::string* Handler::mutable_bindings() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.Handler.bindings)
  return bindings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handler::release_bindings() {
  // @@protoc_insertion_point(field_release:ric.handler.Handler.bindings)
  
  return bindings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handler::set_allocated_bindings(::std::string* bindings) {
  if (bindings != nullptr) {
    
  } else {
    
  }
  bindings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindings);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.Handler.bindings)
}

// bytes parameters = 4;
inline void Handler::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handler::parameters() const {
  // @@protoc_insertion_point(field_get:ric.handler.Handler.parameters)
  return parameters_.GetNoArena();
}
inline void Handler::set_parameters(const ::std::string& value) {
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.Handler.parameters)
}
#if LANG_CXX11
inline void Handler::set_parameters(::std::string&& value) {
  
  parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.Handler.parameters)
}
#endif
inline void Handler::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.Handler.parameters)
}
inline void Handler::set_parameters(const void* value, size_t size) {
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.Handler.parameters)
}
inline ::std::string* Handler::mutable_parameters() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.Handler.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handler::release_parameters() {
  // @@protoc_insertion_point(field_release:ric.handler.Handler.parameters)
  
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handler::set_allocated_parameters(::std::string* parameters) {
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.Handler.parameters)
}

// -------------------------------------------------------------------

// GetObjectInfoResponse

// string id = 1;
inline void GetObjectInfoResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoResponse.id)
  return id_.GetNoArena();
}
inline void GetObjectInfoResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.GetObjectInfoResponse.id)
}
#if LANG_CXX11
inline void GetObjectInfoResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.GetObjectInfoResponse.id)
}
#endif
inline void GetObjectInfoResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.GetObjectInfoResponse.id)
}
inline void GetObjectInfoResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.GetObjectInfoResponse.id)
}
inline ::std::string* GetObjectInfoResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.GetObjectInfoResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoResponse::release_id() {
  // @@protoc_insertion_point(field_release:ric.handler.GetObjectInfoResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoResponse::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.GetObjectInfoResponse.id)
}

// bytes config = 2;
inline void GetObjectInfoResponse::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoResponse::config() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoResponse.config)
  return config_.GetNoArena();
}
inline void GetObjectInfoResponse::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.GetObjectInfoResponse.config)
}
#if LANG_CXX11
inline void GetObjectInfoResponse::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.GetObjectInfoResponse.config)
}
#endif
inline void GetObjectInfoResponse::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.GetObjectInfoResponse.config)
}
inline void GetObjectInfoResponse::set_config(const void* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.GetObjectInfoResponse.config)
}
inline ::std::string* GetObjectInfoResponse::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.GetObjectInfoResponse.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoResponse::release_config() {
  // @@protoc_insertion_point(field_release:ric.handler.GetObjectInfoResponse.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoResponse::set_allocated_config(::std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.GetObjectInfoResponse.config)
}

// bytes store = 3;
inline void GetObjectInfoResponse::clear_store() {
  store_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetObjectInfoResponse::store() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoResponse.store)
  return store_.GetNoArena();
}
inline void GetObjectInfoResponse::set_store(const ::std::string& value) {
  
  store_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.GetObjectInfoResponse.store)
}
#if LANG_CXX11
inline void GetObjectInfoResponse::set_store(::std::string&& value) {
  
  store_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.GetObjectInfoResponse.store)
}
#endif
inline void GetObjectInfoResponse::set_store(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.GetObjectInfoResponse.store)
}
inline void GetObjectInfoResponse::set_store(const void* value, size_t size) {
  
  store_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.GetObjectInfoResponse.store)
}
inline ::std::string* GetObjectInfoResponse::mutable_store() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.GetObjectInfoResponse.store)
  return store_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetObjectInfoResponse::release_store() {
  // @@protoc_insertion_point(field_release:ric.handler.GetObjectInfoResponse.store)
  
  return store_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetObjectInfoResponse::set_allocated_store(::std::string* store) {
  if (store != nullptr) {
    
  } else {
    
  }
  store_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.GetObjectInfoResponse.store)
}

// int64 last_packet_time = 4;
inline void GetObjectInfoResponse::clear_last_packet_time() {
  last_packet_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 GetObjectInfoResponse::last_packet_time() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoResponse.last_packet_time)
  return last_packet_time_;
}
inline void GetObjectInfoResponse::set_last_packet_time(::google::protobuf::int64 value) {
  
  last_packet_time_ = value;
  // @@protoc_insertion_point(field_set:ric.handler.GetObjectInfoResponse.last_packet_time)
}

// repeated .ric.handler.Action actions = 5;
inline int GetObjectInfoResponse::actions_size() const {
  return actions_.size();
}
inline void GetObjectInfoResponse::clear_actions() {
  actions_.Clear();
}
inline ::ric::handler::Action* GetObjectInfoResponse::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:ric.handler.GetObjectInfoResponse.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::handler::Action >*
GetObjectInfoResponse::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:ric.handler.GetObjectInfoResponse.actions)
  return &actions_;
}
inline const ::ric::handler::Action& GetObjectInfoResponse::actions(int index) const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoResponse.actions)
  return actions_.Get(index);
}
inline ::ric::handler::Action* GetObjectInfoResponse::add_actions() {
  // @@protoc_insertion_point(field_add:ric.handler.GetObjectInfoResponse.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::handler::Action >&
GetObjectInfoResponse::actions() const {
  // @@protoc_insertion_point(field_list:ric.handler.GetObjectInfoResponse.actions)
  return actions_;
}

// repeated .ric.handler.Handler handlers = 6;
inline int GetObjectInfoResponse::handlers_size() const {
  return handlers_.size();
}
inline void GetObjectInfoResponse::clear_handlers() {
  handlers_.Clear();
}
inline ::ric::handler::Handler* GetObjectInfoResponse::mutable_handlers(int index) {
  // @@protoc_insertion_point(field_mutable:ric.handler.GetObjectInfoResponse.handlers)
  return handlers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::handler::Handler >*
GetObjectInfoResponse::mutable_handlers() {
  // @@protoc_insertion_point(field_mutable_list:ric.handler.GetObjectInfoResponse.handlers)
  return &handlers_;
}
inline const ::ric::handler::Handler& GetObjectInfoResponse::handlers(int index) const {
  // @@protoc_insertion_point(field_get:ric.handler.GetObjectInfoResponse.handlers)
  return handlers_.Get(index);
}
inline ::ric::handler::Handler* GetObjectInfoResponse::add_handlers() {
  // @@protoc_insertion_point(field_add:ric.handler.GetObjectInfoResponse.handlers)
  return handlers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::handler::Handler >&
GetObjectInfoResponse::handlers() const {
  // @@protoc_insertion_point(field_list:ric.handler.GetObjectInfoResponse.handlers)
  return handlers_;
}

// -------------------------------------------------------------------

// GetHandlerStoreRequest

// string handler_id = 1;
inline void GetHandlerStoreRequest::clear_handler_id() {
  handler_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHandlerStoreRequest::handler_id() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetHandlerStoreRequest.handler_id)
  return handler_id_.GetNoArena();
}
inline void GetHandlerStoreRequest::set_handler_id(const ::std::string& value) {
  
  handler_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.GetHandlerStoreRequest.handler_id)
}
#if LANG_CXX11
inline void GetHandlerStoreRequest::set_handler_id(::std::string&& value) {
  
  handler_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.GetHandlerStoreRequest.handler_id)
}
#endif
inline void GetHandlerStoreRequest::set_handler_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handler_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.GetHandlerStoreRequest.handler_id)
}
inline void GetHandlerStoreRequest::set_handler_id(const char* value, size_t size) {
  
  handler_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.GetHandlerStoreRequest.handler_id)
}
inline ::std::string* GetHandlerStoreRequest::mutable_handler_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.GetHandlerStoreRequest.handler_id)
  return handler_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHandlerStoreRequest::release_handler_id() {
  // @@protoc_insertion_point(field_release:ric.handler.GetHandlerStoreRequest.handler_id)
  
  return handler_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHandlerStoreRequest::set_allocated_handler_id(::std::string* handler_id) {
  if (handler_id != nullptr) {
    
  } else {
    
  }
  handler_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handler_id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.GetHandlerStoreRequest.handler_id)
}

// -------------------------------------------------------------------

// GetHandlerStoreResponse

// bytes store = 1;
inline void GetHandlerStoreResponse::clear_store() {
  store_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHandlerStoreResponse::store() const {
  // @@protoc_insertion_point(field_get:ric.handler.GetHandlerStoreResponse.store)
  return store_.GetNoArena();
}
inline void GetHandlerStoreResponse::set_store(const ::std::string& value) {
  
  store_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.GetHandlerStoreResponse.store)
}
#if LANG_CXX11
inline void GetHandlerStoreResponse::set_store(::std::string&& value) {
  
  store_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.GetHandlerStoreResponse.store)
}
#endif
inline void GetHandlerStoreResponse::set_store(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.GetHandlerStoreResponse.store)
}
inline void GetHandlerStoreResponse::set_store(const void* value, size_t size) {
  
  store_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.GetHandlerStoreResponse.store)
}
inline ::std::string* GetHandlerStoreResponse::mutable_store() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.GetHandlerStoreResponse.store)
  return store_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHandlerStoreResponse::release_store() {
  // @@protoc_insertion_point(field_release:ric.handler.GetHandlerStoreResponse.store)
  
  return store_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHandlerStoreResponse::set_allocated_store(::std::string* store) {
  if (store != nullptr) {
    
  } else {
    
  }
  store_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.GetHandlerStoreResponse.store)
}

// -------------------------------------------------------------------

// ForceLinksUpdateRequest

// string object_id = 1;
inline void ForceLinksUpdateRequest::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForceLinksUpdateRequest::object_id() const {
  // @@protoc_insertion_point(field_get:ric.handler.ForceLinksUpdateRequest.object_id)
  return object_id_.GetNoArena();
}
inline void ForceLinksUpdateRequest::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.handler.ForceLinksUpdateRequest.object_id)
}
#if LANG_CXX11
inline void ForceLinksUpdateRequest::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.handler.ForceLinksUpdateRequest.object_id)
}
#endif
inline void ForceLinksUpdateRequest::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.handler.ForceLinksUpdateRequest.object_id)
}
inline void ForceLinksUpdateRequest::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.handler.ForceLinksUpdateRequest.object_id)
}
inline ::std::string* ForceLinksUpdateRequest::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.handler.ForceLinksUpdateRequest.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForceLinksUpdateRequest::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.handler.ForceLinksUpdateRequest.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForceLinksUpdateRequest::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.handler.ForceLinksUpdateRequest.object_id)
}

// -------------------------------------------------------------------

// EmptyResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace handler
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2dhandler_2frichandler_2eproto
