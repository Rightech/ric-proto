// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ric-handler/richandler.proto

#include "ric-handler/richandler.pb.h"
#include "ric-handler/richandler.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ric {
namespace handler {

static const char* Service_method_names[] = {
  "/ric.handler.Service/Exec",
  "/ric.handler.Service/GetObjectInfo",
  "/ric.handler.Service/ForceLinksUpdate",
};

std::unique_ptr< Service::Stub> Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Service::Stub> stub(new Service::Stub(channel));
  return stub;
}

Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Exec_(Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectInfo_(Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForceLinksUpdate_(Service_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Service::Stub::Exec(::grpc::ClientContext* context, const ::ric::handler::ExecRequest& request, ::ric::handler::ExecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void Service::Stub::experimental_async::Exec(::grpc::ClientContext* context, const ::ric::handler::ExecRequest* request, ::ric::handler::ExecResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void Service::Stub::experimental_async::Exec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::handler::ExecResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::handler::ExecResponse>* Service::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::ric::handler::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::handler::ExecResponse>::Create(channel_.get(), cq, rpcmethod_Exec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::handler::ExecResponse>* Service::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::ric::handler::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::handler::ExecResponse>::Create(channel_.get(), cq, rpcmethod_Exec_, context, request, false);
}

::grpc::Status Service::Stub::GetObjectInfo(::grpc::ClientContext* context, const ::ric::handler::GetObjectInfoRequest& request, ::ric::handler::GetObjectInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectInfo_, context, request, response);
}

void Service::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::ric::handler::GetObjectInfoRequest* request, ::ric::handler::GetObjectInfoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, std::move(f));
}

void Service::Stub::experimental_async::GetObjectInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::handler::GetObjectInfoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObjectInfo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::handler::GetObjectInfoResponse>* Service::Stub::AsyncGetObjectInfoRaw(::grpc::ClientContext* context, const ::ric::handler::GetObjectInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::handler::GetObjectInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::handler::GetObjectInfoResponse>* Service::Stub::PrepareAsyncGetObjectInfoRaw(::grpc::ClientContext* context, const ::ric::handler::GetObjectInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::handler::GetObjectInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectInfo_, context, request, false);
}

::grpc::Status Service::Stub::ForceLinksUpdate(::grpc::ClientContext* context, const ::ric::handler::ForceLinksUpdateRequest& request, ::ric::handler::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ForceLinksUpdate_, context, request, response);
}

void Service::Stub::experimental_async::ForceLinksUpdate(::grpc::ClientContext* context, const ::ric::handler::ForceLinksUpdateRequest* request, ::ric::handler::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ForceLinksUpdate_, context, request, response, std::move(f));
}

void Service::Stub::experimental_async::ForceLinksUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ric::handler::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ForceLinksUpdate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ric::handler::EmptyResponse>* Service::Stub::AsyncForceLinksUpdateRaw(::grpc::ClientContext* context, const ::ric::handler::ForceLinksUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::handler::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_ForceLinksUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ric::handler::EmptyResponse>* Service::Stub::PrepareAsyncForceLinksUpdateRaw(::grpc::ClientContext* context, const ::ric::handler::ForceLinksUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ric::handler::EmptyResponse>::Create(channel_.get(), cq, rpcmethod_ForceLinksUpdate_, context, request, false);
}

Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::ric::handler::ExecRequest, ::ric::handler::ExecResponse>(
          std::mem_fn(&Service::Service::Exec), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::ric::handler::GetObjectInfoRequest, ::ric::handler::GetObjectInfoResponse>(
          std::mem_fn(&Service::Service::GetObjectInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::ric::handler::ForceLinksUpdateRequest, ::ric::handler::EmptyResponse>(
          std::mem_fn(&Service::Service::ForceLinksUpdate), this)));
}

Service::Service::~Service() {
}

::grpc::Status Service::Service::Exec(::grpc::ServerContext* context, const ::ric::handler::ExecRequest* request, ::ric::handler::ExecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetObjectInfo(::grpc::ServerContext* context, const ::ric::handler::GetObjectInfoRequest* request, ::ric::handler::GetObjectInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::ForceLinksUpdate(::grpc::ServerContext* context, const ::ric::handler::ForceLinksUpdateRequest* request, ::ric::handler::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ric
}  // namespace handler

