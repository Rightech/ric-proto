// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ric-action/ricaction.proto

#ifndef PROTOBUF_INCLUDED_ric_2daction_2fricaction_2eproto
#define PROTOBUF_INCLUDED_ric_2daction_2fricaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ric_2daction_2fricaction_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ric_2daction_2fricaction_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ric_2daction_2fricaction_2eproto();
namespace ric {
namespace action {
class CallRequest;
class CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class CallResponse;
class CallResponseDefaultTypeInternal;
extern CallResponseDefaultTypeInternal _CallResponse_default_instance_;
class ContainerStatus;
class ContainerStatusDefaultTypeInternal;
extern ContainerStatusDefaultTypeInternal _ContainerStatus_default_instance_;
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class EventRequest;
class EventRequestDefaultTypeInternal;
extern EventRequestDefaultTypeInternal _EventRequest_default_instance_;
class Function;
class FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class HistoryRequest;
class HistoryRequestDefaultTypeInternal;
extern HistoryRequestDefaultTypeInternal _HistoryRequest_default_instance_;
class HistoryResponse;
class HistoryResponseDefaultTypeInternal;
extern HistoryResponseDefaultTypeInternal _HistoryResponse_default_instance_;
class InfoRequest;
class InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class InfoResponse;
class InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class LastStateRequest;
class LastStateRequestDefaultTypeInternal;
extern LastStateRequestDefaultTypeInternal _LastStateRequest_default_instance_;
class LastStateResponse;
class LastStateResponseDefaultTypeInternal;
extern LastStateResponseDefaultTypeInternal _LastStateResponse_default_instance_;
class LogsRequest;
class LogsRequestDefaultTypeInternal;
extern LogsRequestDefaultTypeInternal _LogsRequest_default_instance_;
class LogsResponse;
class LogsResponseDefaultTypeInternal;
extern LogsResponseDefaultTypeInternal _LogsResponse_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class Pod;
class PodDefaultTypeInternal;
extern PodDefaultTypeInternal _Pod_default_instance_;
class ScaleRequest;
class ScaleRequestDefaultTypeInternal;
extern ScaleRequestDefaultTypeInternal _ScaleRequest_default_instance_;
class Uint64;
class Uint64DefaultTypeInternal;
extern Uint64DefaultTypeInternal _Uint64_default_instance_;
class UpdateOrDeployRequest;
class UpdateOrDeployRequestDefaultTypeInternal;
extern UpdateOrDeployRequestDefaultTypeInternal _UpdateOrDeployRequest_default_instance_;
class UpdateOrDeployResponse;
class UpdateOrDeployResponseDefaultTypeInternal;
extern UpdateOrDeployResponseDefaultTypeInternal _UpdateOrDeployResponse_default_instance_;
}  // namespace action
}  // namespace ric
namespace google {
namespace protobuf {
template<> ::ric::action::CallRequest* Arena::CreateMaybeMessage<::ric::action::CallRequest>(Arena*);
template<> ::ric::action::CallResponse* Arena::CreateMaybeMessage<::ric::action::CallResponse>(Arena*);
template<> ::ric::action::ContainerStatus* Arena::CreateMaybeMessage<::ric::action::ContainerStatus>(Arena*);
template<> ::ric::action::Context* Arena::CreateMaybeMessage<::ric::action::Context>(Arena*);
template<> ::ric::action::DeleteRequest* Arena::CreateMaybeMessage<::ric::action::DeleteRequest>(Arena*);
template<> ::ric::action::EmptyResponse* Arena::CreateMaybeMessage<::ric::action::EmptyResponse>(Arena*);
template<> ::ric::action::EventRequest* Arena::CreateMaybeMessage<::ric::action::EventRequest>(Arena*);
template<> ::ric::action::Function* Arena::CreateMaybeMessage<::ric::action::Function>(Arena*);
template<> ::ric::action::HistoryRequest* Arena::CreateMaybeMessage<::ric::action::HistoryRequest>(Arena*);
template<> ::ric::action::HistoryResponse* Arena::CreateMaybeMessage<::ric::action::HistoryResponse>(Arena*);
template<> ::ric::action::InfoRequest* Arena::CreateMaybeMessage<::ric::action::InfoRequest>(Arena*);
template<> ::ric::action::InfoResponse* Arena::CreateMaybeMessage<::ric::action::InfoResponse>(Arena*);
template<> ::ric::action::LastStateRequest* Arena::CreateMaybeMessage<::ric::action::LastStateRequest>(Arena*);
template<> ::ric::action::LastStateResponse* Arena::CreateMaybeMessage<::ric::action::LastStateResponse>(Arena*);
template<> ::ric::action::LogsRequest* Arena::CreateMaybeMessage<::ric::action::LogsRequest>(Arena*);
template<> ::ric::action::LogsResponse* Arena::CreateMaybeMessage<::ric::action::LogsResponse>(Arena*);
template<> ::ric::action::Options* Arena::CreateMaybeMessage<::ric::action::Options>(Arena*);
template<> ::ric::action::Pod* Arena::CreateMaybeMessage<::ric::action::Pod>(Arena*);
template<> ::ric::action::ScaleRequest* Arena::CreateMaybeMessage<::ric::action::ScaleRequest>(Arena*);
template<> ::ric::action::Uint64* Arena::CreateMaybeMessage<::ric::action::Uint64>(Arena*);
template<> ::ric::action::UpdateOrDeployRequest* Arena::CreateMaybeMessage<::ric::action::UpdateOrDeployRequest>(Arena*);
template<> ::ric::action::UpdateOrDeployResponse* Arena::CreateMaybeMessage<::ric::action::UpdateOrDeployResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ric {
namespace action {

// ===================================================================

class CallRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.CallRequest) */ {
 public:
  CallRequest();
  virtual ~CallRequest();

  CallRequest(const CallRequest& from);

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallRequest(CallRequest&& from) noexcept
    : CallRequest() {
    *this = ::std::move(from);
  }

  inline CallRequest& operator=(CallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CallRequest* other);
  friend void swap(CallRequest& a, CallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallRequest* New() const final {
    return CreateMaybeMessage<CallRequest>(nullptr);
  }

  CallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallRequest& from);
  void MergeFrom(const CallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string content_type = 3;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 3;
  const ::std::string& content_type() const;
  void set_content_type(const ::std::string& value);
  #if LANG_CXX11
  void set_content_type(::std::string&& value);
  #endif
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  ::std::string* mutable_content_type();
  ::std::string* release_content_type();
  void set_allocated_content_type(::std::string* content_type);

  // .ric.action.Context ctx = 4;
  bool has_ctx() const;
  void clear_ctx();
  static const int kCtxFieldNumber = 4;
  const ::ric::action::Context& ctx() const;
  ::ric::action::Context* release_ctx();
  ::ric::action::Context* mutable_ctx();
  void set_allocated_ctx(::ric::action::Context* ctx);

  // @@protoc_insertion_point(class_scope:ric.action.CallRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr content_type_;
  ::ric::action::Context* ctx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class Context final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.Context) */ {
 public:
  Context();
  virtual ~Context();

  Context(const Context& from);

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(Context&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Context* other);
  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return CreateMaybeMessage<Context>(nullptr);
  }

  Context* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 1;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:ric.action.Context)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class ScaleRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.ScaleRequest) */ {
 public:
  ScaleRequest();
  virtual ~ScaleRequest();

  ScaleRequest(const ScaleRequest& from);

  inline ScaleRequest& operator=(const ScaleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScaleRequest(ScaleRequest&& from) noexcept
    : ScaleRequest() {
    *this = ::std::move(from);
  }

  inline ScaleRequest& operator=(ScaleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ScaleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaleRequest* internal_default_instance() {
    return reinterpret_cast<const ScaleRequest*>(
               &_ScaleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ScaleRequest* other);
  friend void swap(ScaleRequest& a, ScaleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScaleRequest* New() const final {
    return CreateMaybeMessage<ScaleRequest>(nullptr);
  }

  ScaleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScaleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScaleRequest& from);
  void MergeFrom(const ScaleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ric.action.Uint64 replicas = 2;
  bool has_replicas() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 2;
  const ::ric::action::Uint64& replicas() const;
  ::ric::action::Uint64* release_replicas();
  ::ric::action::Uint64* mutable_replicas();
  void set_allocated_replicas(::ric::action::Uint64* replicas);

  // @@protoc_insertion_point(class_scope:ric.action.ScaleRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ric::action::Uint64* replicas_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class Uint64 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.Uint64) */ {
 public:
  Uint64();
  virtual ~Uint64();

  Uint64(const Uint64& from);

  inline Uint64& operator=(const Uint64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uint64(Uint64&& from) noexcept
    : Uint64() {
    *this = ::std::move(from);
  }

  inline Uint64& operator=(Uint64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Uint64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uint64* internal_default_instance() {
    return reinterpret_cast<const Uint64*>(
               &_Uint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Uint64* other);
  friend void swap(Uint64& a, Uint64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uint64* New() const final {
    return CreateMaybeMessage<Uint64>(nullptr);
  }

  Uint64* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uint64>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uint64& from);
  void MergeFrom(const Uint64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ric.action.Uint64)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ric.action.DeleteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrDeployRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.UpdateOrDeployRequest) */ {
 public:
  UpdateOrDeployRequest();
  virtual ~UpdateOrDeployRequest();

  UpdateOrDeployRequest(const UpdateOrDeployRequest& from);

  inline UpdateOrDeployRequest& operator=(const UpdateOrDeployRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOrDeployRequest(UpdateOrDeployRequest&& from) noexcept
    : UpdateOrDeployRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrDeployRequest& operator=(UpdateOrDeployRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateOrDeployRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOrDeployRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrDeployRequest*>(
               &_UpdateOrDeployRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UpdateOrDeployRequest* other);
  friend void swap(UpdateOrDeployRequest& a, UpdateOrDeployRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOrDeployRequest* New() const final {
    return CreateMaybeMessage<UpdateOrDeployRequest>(nullptr);
  }

  UpdateOrDeployRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOrDeployRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOrDeployRequest& from);
  void MergeFrom(const UpdateOrDeployRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrDeployRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ric.action.Function func = 2;
  bool has_func() const;
  void clear_func();
  static const int kFuncFieldNumber = 2;
  const ::ric::action::Function& func() const;
  ::ric::action::Function* release_func();
  ::ric::action::Function* mutable_func();
  void set_allocated_func(::ric::action::Function* func);

  // .ric.action.Options opt = 3;
  bool has_opt() const;
  void clear_opt();
  static const int kOptFieldNumber = 3;
  const ::ric::action::Options& opt() const;
  ::ric::action::Options* release_opt();
  ::ric::action::Options* mutable_opt();
  void set_allocated_opt(::ric::action::Options* opt);

  // @@protoc_insertion_point(class_scope:ric.action.UpdateOrDeployRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ric::action::Function* func_;
  ::ric::action::Options* opt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class Function final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.Function) */ {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(Function&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Function& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Function* other);
  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Function* New() const final {
    return CreateMaybeMessage<Function>(nullptr);
  }

  Function* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string envs = 14;
  int envs_size() const;
  void clear_envs();
  static const int kEnvsFieldNumber = 14;
  const ::std::string& envs(int index) const;
  ::std::string* mutable_envs(int index);
  void set_envs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_envs(int index, ::std::string&& value);
  #endif
  void set_envs(int index, const char* value);
  void set_envs(int index, const char* value, size_t size);
  ::std::string* add_envs();
  void add_envs(const ::std::string& value);
  #if LANG_CXX11
  void add_envs(::std::string&& value);
  #endif
  void add_envs(const char* value);
  void add_envs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& envs() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_envs();

  // repeated string labels = 15;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 15;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_labels(int index, ::std::string&& value);
  #endif
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  #if LANG_CXX11
  void add_labels(::std::string&& value);
  #endif
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_labels();

  // repeated string secrets = 16;
  int secrets_size() const;
  void clear_secrets();
  static const int kSecretsFieldNumber = 16;
  const ::std::string& secrets(int index) const;
  ::std::string* mutable_secrets(int index);
  void set_secrets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secrets(int index, ::std::string&& value);
  #endif
  void set_secrets(int index, const char* value);
  void set_secrets(int index, const char* value, size_t size);
  ::std::string* add_secrets();
  void add_secrets(const ::std::string& value);
  #if LANG_CXX11
  void add_secrets(::std::string&& value);
  #endif
  void add_secrets(const char* value);
  void add_secrets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& secrets() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_secrets();

  // string handler = 1;
  void clear_handler();
  static const int kHandlerFieldNumber = 1;
  const ::std::string& handler() const;
  void set_handler(const ::std::string& value);
  #if LANG_CXX11
  void set_handler(::std::string&& value);
  #endif
  void set_handler(const char* value);
  void set_handler(const char* value, size_t size);
  ::std::string* mutable_handler();
  ::std::string* release_handler();
  void set_allocated_handler(::std::string* handler);

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // string deps = 3;
  void clear_deps();
  static const int kDepsFieldNumber = 3;
  const ::std::string& deps() const;
  void set_deps(const ::std::string& value);
  #if LANG_CXX11
  void set_deps(::std::string&& value);
  #endif
  void set_deps(const char* value);
  void set_deps(const char* value, size_t size);
  ::std::string* mutable_deps();
  ::std::string* release_deps();
  void set_allocated_deps(::std::string* deps);

  // string runtime = 4;
  void clear_runtime();
  static const int kRuntimeFieldNumber = 4;
  const ::std::string& runtime() const;
  void set_runtime(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime(::std::string&& value);
  #endif
  void set_runtime(const char* value);
  void set_runtime(const char* value, size_t size);
  ::std::string* mutable_runtime();
  ::std::string* release_runtime();
  void set_allocated_runtime(::std::string* runtime);

  // string runtime_image = 5;
  void clear_runtime_image();
  static const int kRuntimeImageFieldNumber = 5;
  const ::std::string& runtime_image() const;
  void set_runtime_image(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime_image(::std::string&& value);
  #endif
  void set_runtime_image(const char* value);
  void set_runtime_image(const char* value, size_t size);
  ::std::string* mutable_runtime_image();
  ::std::string* release_runtime_image();
  void set_allocated_runtime_image(::std::string* runtime_image);

  // string mem = 6;
  void clear_mem();
  static const int kMemFieldNumber = 6;
  const ::std::string& mem() const;
  void set_mem(const ::std::string& value);
  #if LANG_CXX11
  void set_mem(::std::string&& value);
  #endif
  void set_mem(const char* value);
  void set_mem(const char* value, size_t size);
  ::std::string* mutable_mem();
  ::std::string* release_mem();
  void set_allocated_mem(::std::string* mem);

  // string cpu = 7;
  void clear_cpu();
  static const int kCpuFieldNumber = 7;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string timeout = 8;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 8;
  const ::std::string& timeout() const;
  void set_timeout(const ::std::string& value);
  #if LANG_CXX11
  void set_timeout(::std::string&& value);
  #endif
  void set_timeout(const char* value);
  void set_timeout(const char* value, size_t size);
  ::std::string* mutable_timeout();
  ::std::string* release_timeout();
  void set_allocated_timeout(::std::string* timeout);

  // string image_pull_policy = 9;
  void clear_image_pull_policy();
  static const int kImagePullPolicyFieldNumber = 9;
  const ::std::string& image_pull_policy() const;
  void set_image_pull_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_image_pull_policy(::std::string&& value);
  #endif
  void set_image_pull_policy(const char* value);
  void set_image_pull_policy(const char* value, size_t size);
  ::std::string* mutable_image_pull_policy();
  ::std::string* release_image_pull_policy();
  void set_allocated_image_pull_policy(::std::string* image_pull_policy);

  // string schedule = 10;
  void clear_schedule();
  static const int kScheduleFieldNumber = 10;
  const ::std::string& schedule() const;
  void set_schedule(const ::std::string& value);
  #if LANG_CXX11
  void set_schedule(::std::string&& value);
  #endif
  void set_schedule(const char* value);
  void set_schedule(const char* value, size_t size);
  ::std::string* mutable_schedule();
  ::std::string* release_schedule();
  void set_allocated_schedule(::std::string* schedule);

  // int32 port = 11;
  void clear_port();
  static const int kPortFieldNumber = 11;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 service_port = 12;
  void clear_service_port();
  static const int kServicePortFieldNumber = 12;
  ::google::protobuf::int32 service_port() const;
  void set_service_port(::google::protobuf::int32 value);

  // bool headless = 13;
  void clear_headless();
  static const int kHeadlessFieldNumber = 13;
  bool headless() const;
  void set_headless(bool value);

  // @@protoc_insertion_point(class_scope:ric.action.Function)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> envs_;
  ::google::protobuf::RepeatedPtrField<::std::string> labels_;
  ::google::protobuf::RepeatedPtrField<::std::string> secrets_;
  ::google::protobuf::internal::ArenaStringPtr handler_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr deps_;
  ::google::protobuf::internal::ArenaStringPtr runtime_;
  ::google::protobuf::internal::ArenaStringPtr runtime_image_;
  ::google::protobuf::internal::ArenaStringPtr mem_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr timeout_;
  ::google::protobuf::internal::ArenaStringPtr image_pull_policy_;
  ::google::protobuf::internal::ArenaStringPtr schedule_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 service_port_;
  bool headless_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class Options final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.Options) */ {
 public:
  Options();
  virtual ~Options();

  Options(const Options& from);

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(Options&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Options* other);
  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Options* New() const final {
    return CreateMaybeMessage<Options>(nullptr);
  }

  Options* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Options& from);
  void MergeFrom(const Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string secrets = 1;
  int secrets_size() const;
  void clear_secrets();
  static const int kSecretsFieldNumber = 1;
  const ::std::string& secrets(int index) const;
  ::std::string* mutable_secrets(int index);
  void set_secrets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secrets(int index, ::std::string&& value);
  #endif
  void set_secrets(int index, const char* value);
  void set_secrets(int index, const char* value, size_t size);
  ::std::string* add_secrets();
  void add_secrets(const ::std::string& value);
  #if LANG_CXX11
  void add_secrets(::std::string&& value);
  #endif
  void add_secrets(const char* value);
  void add_secrets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& secrets() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_secrets();

  // @@protoc_insertion_point(class_scope:ric.action.Options)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> secrets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrDeployResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.UpdateOrDeployResponse) */ {
 public:
  UpdateOrDeployResponse();
  virtual ~UpdateOrDeployResponse();

  UpdateOrDeployResponse(const UpdateOrDeployResponse& from);

  inline UpdateOrDeployResponse& operator=(const UpdateOrDeployResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOrDeployResponse(UpdateOrDeployResponse&& from) noexcept
    : UpdateOrDeployResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrDeployResponse& operator=(UpdateOrDeployResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateOrDeployResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOrDeployResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrDeployResponse*>(
               &_UpdateOrDeployResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UpdateOrDeployResponse* other);
  friend void swap(UpdateOrDeployResponse& a, UpdateOrDeployResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOrDeployResponse* New() const final {
    return CreateMaybeMessage<UpdateOrDeployResponse>(nullptr);
  }

  UpdateOrDeployResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOrDeployResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOrDeployResponse& from);
  void MergeFrom(const UpdateOrDeployResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrDeployResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource_version = 2;
  void clear_resource_version();
  static const int kResourceVersionFieldNumber = 2;
  const ::std::string& resource_version() const;
  void set_resource_version(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_version(::std::string&& value);
  #endif
  void set_resource_version(const char* value);
  void set_resource_version(const char* value, size_t size);
  ::std::string* mutable_resource_version();
  ::std::string* release_resource_version();
  void set_allocated_resource_version(::std::string* resource_version);

  // string checksum = 3;
  void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // int64 generation = 1;
  void clear_generation();
  static const int kGenerationFieldNumber = 1;
  ::google::protobuf::int64 generation() const;
  void set_generation(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.action.UpdateOrDeployResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_version_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  ::google::protobuf::int64 generation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class LogsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.LogsRequest) */ {
 public:
  LogsRequest();
  virtual ~LogsRequest();

  LogsRequest(const LogsRequest& from);

  inline LogsRequest& operator=(const LogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogsRequest(LogsRequest&& from) noexcept
    : LogsRequest() {
    *this = ::std::move(from);
  }

  inline LogsRequest& operator=(LogsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogsRequest* internal_default_instance() {
    return reinterpret_cast<const LogsRequest*>(
               &_LogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LogsRequest* other);
  friend void swap(LogsRequest& a, LogsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogsRequest* New() const final {
    return CreateMaybeMessage<LogsRequest>(nullptr);
  }

  LogsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogsRequest& from);
  void MergeFrom(const LogsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string pod_name = 2;
  void clear_pod_name();
  static const int kPodNameFieldNumber = 2;
  const ::std::string& pod_name() const;
  void set_pod_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pod_name(::std::string&& value);
  #endif
  void set_pod_name(const char* value);
  void set_pod_name(const char* value, size_t size);
  ::std::string* mutable_pod_name();
  ::std::string* release_pod_name();
  void set_allocated_pod_name(::std::string* pod_name);

  // string filter_by = 5;
  void clear_filter_by();
  static const int kFilterByFieldNumber = 5;
  const ::std::string& filter_by() const;
  void set_filter_by(const ::std::string& value);
  #if LANG_CXX11
  void set_filter_by(::std::string&& value);
  #endif
  void set_filter_by(const char* value);
  void set_filter_by(const char* value, size_t size);
  ::std::string* mutable_filter_by();
  ::std::string* release_filter_by();
  void set_allocated_filter_by(::std::string* filter_by);

  // int64 tail_lines = 4;
  void clear_tail_lines();
  static const int kTailLinesFieldNumber = 4;
  ::google::protobuf::int64 tail_lines() const;
  void set_tail_lines(::google::protobuf::int64 value);

  // bool follow = 3;
  void clear_follow();
  static const int kFollowFieldNumber = 3;
  bool follow() const;
  void set_follow(bool value);

  // @@protoc_insertion_point(class_scope:ric.action.LogsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pod_name_;
  ::google::protobuf::internal::ArenaStringPtr filter_by_;
  ::google::protobuf::int64 tail_lines_;
  bool follow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class InfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.InfoRequest) */ {
 public:
  InfoRequest();
  virtual ~InfoRequest();

  InfoRequest(const InfoRequest& from);

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(InfoRequest* other);
  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoRequest* New() const final {
    return CreateMaybeMessage<InfoRequest>(nullptr);
  }

  InfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoRequest& from);
  void MergeFrom(const InfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ric.action.InfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class CallResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.CallResponse) */ {
 public:
  CallResponse();
  virtual ~CallResponse();

  CallResponse(const CallResponse& from);

  inline CallResponse& operator=(const CallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallResponse(CallResponse&& from) noexcept
    : CallResponse() {
    *this = ::std::move(from);
  }

  inline CallResponse& operator=(CallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallResponse* internal_default_instance() {
    return reinterpret_cast<const CallResponse*>(
               &_CallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CallResponse* other);
  friend void swap(CallResponse& a, CallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallResponse* New() const final {
    return CreateMaybeMessage<CallResponse>(nullptr);
  }

  CallResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallResponse& from);
  void MergeFrom(const CallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.action.CallResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(EmptyResponse* other);
  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ric.action.EmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class LogsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.LogsResponse) */ {
 public:
  LogsResponse();
  virtual ~LogsResponse();

  LogsResponse(const LogsResponse& from);

  inline LogsResponse& operator=(const LogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogsResponse(LogsResponse&& from) noexcept
    : LogsResponse() {
    *this = ::std::move(from);
  }

  inline LogsResponse& operator=(LogsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogsResponse* internal_default_instance() {
    return reinterpret_cast<const LogsResponse*>(
               &_LogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(LogsResponse* other);
  friend void swap(LogsResponse& a, LogsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogsResponse* New() const final {
    return CreateMaybeMessage<LogsResponse>(nullptr);
  }

  LogsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogsResponse& from);
  void MergeFrom(const LogsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string line = 1;
  void clear_line();
  static const int kLineFieldNumber = 1;
  const ::std::string& line() const;
  void set_line(const ::std::string& value);
  #if LANG_CXX11
  void set_line(::std::string&& value);
  #endif
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  ::std::string* mutable_line();
  ::std::string* release_line();
  void set_allocated_line(::std::string* line);

  // @@protoc_insertion_point(class_scope:ric.action.LogsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr line_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class InfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.InfoResponse) */ {
 public:
  InfoResponse();
  virtual ~InfoResponse();

  InfoResponse(const InfoResponse& from);

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(InfoResponse* other);
  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoResponse* New() const final {
    return CreateMaybeMessage<InfoResponse>(nullptr);
  }

  InfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoResponse& from);
  void MergeFrom(const InfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.action.Pod pods = 1;
  int pods_size() const;
  void clear_pods();
  static const int kPodsFieldNumber = 1;
  ::ric::action::Pod* mutable_pods(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::action::Pod >*
      mutable_pods();
  const ::ric::action::Pod& pods(int index) const;
  ::ric::action::Pod* add_pods();
  const ::google::protobuf::RepeatedPtrField< ::ric::action::Pod >&
      pods() const;

  // @@protoc_insertion_point(class_scope:ric.action.InfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::action::Pod > pods_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class Pod final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.Pod) */ {
 public:
  Pod();
  virtual ~Pod();

  Pod(const Pod& from);

  inline Pod& operator=(const Pod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pod(Pod&& from) noexcept
    : Pod() {
    *this = ::std::move(from);
  }

  inline Pod& operator=(Pod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Pod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pod* internal_default_instance() {
    return reinterpret_cast<const Pod*>(
               &_Pod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Pod* other);
  friend void swap(Pod& a, Pod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pod* New() const final {
    return CreateMaybeMessage<Pod>(nullptr);
  }

  Pod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pod& from);
  void MergeFrom(const Pod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ric.action.ContainerStatus container_statuses = 5;
  int container_statuses_size() const;
  void clear_container_statuses();
  static const int kContainerStatusesFieldNumber = 5;
  ::ric::action::ContainerStatus* mutable_container_statuses(int index);
  ::google::protobuf::RepeatedPtrField< ::ric::action::ContainerStatus >*
      mutable_container_statuses();
  const ::ric::action::ContainerStatus& container_statuses(int index) const;
  ::ric::action::ContainerStatus* add_container_statuses();
  const ::google::protobuf::RepeatedPtrField< ::ric::action::ContainerStatus >&
      container_statuses() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string creation_timestamp = 2;
  void clear_creation_timestamp();
  static const int kCreationTimestampFieldNumber = 2;
  const ::std::string& creation_timestamp() const;
  void set_creation_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_creation_timestamp(::std::string&& value);
  #endif
  void set_creation_timestamp(const char* value);
  void set_creation_timestamp(const char* value, size_t size);
  ::std::string* mutable_creation_timestamp();
  ::std::string* release_creation_timestamp();
  void set_allocated_creation_timestamp(::std::string* creation_timestamp);

  // string phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  const ::std::string& phase() const;
  void set_phase(const ::std::string& value);
  #if LANG_CXX11
  void set_phase(::std::string&& value);
  #endif
  void set_phase(const char* value);
  void set_phase(const char* value, size_t size);
  ::std::string* mutable_phase();
  ::std::string* release_phase();
  void set_allocated_phase(::std::string* phase);

  // string start_time = 4;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // @@protoc_insertion_point(class_scope:ric.action.Pod)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ric::action::ContainerStatus > container_statuses_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr creation_timestamp_;
  ::google::protobuf::internal::ArenaStringPtr phase_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class ContainerStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.ContainerStatus) */ {
 public:
  ContainerStatus();
  virtual ~ContainerStatus();

  ContainerStatus(const ContainerStatus& from);

  inline ContainerStatus& operator=(const ContainerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContainerStatus(ContainerStatus&& from) noexcept
    : ContainerStatus() {
    *this = ::std::move(from);
  }

  inline ContainerStatus& operator=(ContainerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ContainerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContainerStatus* internal_default_instance() {
    return reinterpret_cast<const ContainerStatus*>(
               &_ContainerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ContainerStatus* other);
  friend void swap(ContainerStatus& a, ContainerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContainerStatus* New() const final {
    return CreateMaybeMessage<ContainerStatus>(nullptr);
  }

  ContainerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContainerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContainerStatus& from);
  void MergeFrom(const ContainerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string last_state = 4;
  void clear_last_state();
  static const int kLastStateFieldNumber = 4;
  const ::std::string& last_state() const;
  void set_last_state(const ::std::string& value);
  #if LANG_CXX11
  void set_last_state(::std::string&& value);
  #endif
  void set_last_state(const char* value);
  void set_last_state(const char* value, size_t size);
  ::std::string* mutable_last_state();
  ::std::string* release_last_state();
  void set_allocated_last_state(::std::string* last_state);

  // bool ready = 1;
  void clear_ready();
  static const int kReadyFieldNumber = 1;
  bool ready() const;
  void set_ready(bool value);

  // int32 restart_count = 2;
  void clear_restart_count();
  static const int kRestartCountFieldNumber = 2;
  ::google::protobuf::int32 restart_count() const;
  void set_restart_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ric.action.ContainerStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr last_state_;
  bool ready_;
  ::google::protobuf::int32 restart_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class HistoryRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.HistoryRequest) */ {
 public:
  HistoryRequest();
  virtual ~HistoryRequest();

  HistoryRequest(const HistoryRequest& from);

  inline HistoryRequest& operator=(const HistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HistoryRequest(HistoryRequest&& from) noexcept
    : HistoryRequest() {
    *this = ::std::move(from);
  }

  inline HistoryRequest& operator=(HistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryRequest* internal_default_instance() {
    return reinterpret_cast<const HistoryRequest*>(
               &_HistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(HistoryRequest* other);
  friend void swap(HistoryRequest& a, HistoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HistoryRequest* New() const final {
    return CreateMaybeMessage<HistoryRequest>(nullptr);
  }

  HistoryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HistoryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HistoryRequest& from);
  void MergeFrom(const HistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string oid = 1;
  void clear_oid();
  static const int kOidFieldNumber = 1;
  const ::std::string& oid() const;
  void set_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_oid(::std::string&& value);
  #endif
  void set_oid(const char* value);
  void set_oid(const char* value, size_t size);
  ::std::string* mutable_oid();
  ::std::string* release_oid();
  void set_allocated_oid(::std::string* oid);

  // string db = 2;
  void clear_db();
  static const int kDbFieldNumber = 2;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // int64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ric.action.HistoryRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr oid_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class HistoryResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.HistoryResponse) */ {
 public:
  HistoryResponse();
  virtual ~HistoryResponse();

  HistoryResponse(const HistoryResponse& from);

  inline HistoryResponse& operator=(const HistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HistoryResponse(HistoryResponse&& from) noexcept
    : HistoryResponse() {
    *this = ::std::move(from);
  }

  inline HistoryResponse& operator=(HistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryResponse* internal_default_instance() {
    return reinterpret_cast<const HistoryResponse*>(
               &_HistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(HistoryResponse* other);
  friend void swap(HistoryResponse& a, HistoryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HistoryResponse* New() const final {
    return CreateMaybeMessage<HistoryResponse>(nullptr);
  }

  HistoryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HistoryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HistoryResponse& from);
  void MergeFrom(const HistoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.action.HistoryResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class EventRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.EventRequest) */ {
 public:
  EventRequest();
  virtual ~EventRequest();

  EventRequest(const EventRequest& from);

  inline EventRequest& operator=(const EventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventRequest(EventRequest&& from) noexcept
    : EventRequest() {
    *this = ::std::move(from);
  }

  inline EventRequest& operator=(EventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventRequest* internal_default_instance() {
    return reinterpret_cast<const EventRequest*>(
               &_EventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(EventRequest* other);
  friend void swap(EventRequest& a, EventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventRequest* New() const final {
    return CreateMaybeMessage<EventRequest>(nullptr);
  }

  EventRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventRequest& from);
  void MergeFrom(const EventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string oid = 1;
  void clear_oid();
  static const int kOidFieldNumber = 1;
  const ::std::string& oid() const;
  void set_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_oid(::std::string&& value);
  #endif
  void set_oid(const char* value);
  void set_oid(const char* value, size_t size);
  ::std::string* mutable_oid();
  ::std::string* release_oid();
  void set_allocated_oid(::std::string* oid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.action.EventRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr oid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class LastStateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.LastStateRequest) */ {
 public:
  LastStateRequest();
  virtual ~LastStateRequest();

  LastStateRequest(const LastStateRequest& from);

  inline LastStateRequest& operator=(const LastStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastStateRequest(LastStateRequest&& from) noexcept
    : LastStateRequest() {
    *this = ::std::move(from);
  }

  inline LastStateRequest& operator=(LastStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LastStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastStateRequest* internal_default_instance() {
    return reinterpret_cast<const LastStateRequest*>(
               &_LastStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(LastStateRequest* other);
  friend void swap(LastStateRequest& a, LastStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastStateRequest* New() const final {
    return CreateMaybeMessage<LastStateRequest>(nullptr);
  }

  LastStateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LastStateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LastStateRequest& from);
  void MergeFrom(const LastStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string oid = 1;
  void clear_oid();
  static const int kOidFieldNumber = 1;
  const ::std::string& oid() const;
  void set_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_oid(::std::string&& value);
  #endif
  void set_oid(const char* value);
  void set_oid(const char* value, size_t size);
  ::std::string* mutable_oid();
  ::std::string* release_oid();
  void set_allocated_oid(::std::string* oid);

  // @@protoc_insertion_point(class_scope:ric.action.LastStateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr oid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// -------------------------------------------------------------------

class LastStateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ric.action.LastStateResponse) */ {
 public:
  LastStateResponse();
  virtual ~LastStateResponse();

  LastStateResponse(const LastStateResponse& from);

  inline LastStateResponse& operator=(const LastStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastStateResponse(LastStateResponse&& from) noexcept
    : LastStateResponse() {
    *this = ::std::move(from);
  }

  inline LastStateResponse& operator=(LastStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LastStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastStateResponse* internal_default_instance() {
    return reinterpret_cast<const LastStateResponse*>(
               &_LastStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(LastStateResponse* other);
  friend void swap(LastStateResponse& a, LastStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastStateResponse* New() const final {
    return CreateMaybeMessage<LastStateResponse>(nullptr);
  }

  LastStateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LastStateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LastStateResponse& from);
  void MergeFrom(const LastStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ric.action.LastStateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ric_2daction_2fricaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallRequest

// string name = 1;
inline void CallRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.CallRequest.name)
  return name_.GetNoArena();
}
inline void CallRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.CallRequest.name)
}
#if LANG_CXX11
inline void CallRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.CallRequest.name)
}
#endif
inline void CallRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.CallRequest.name)
}
inline void CallRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.CallRequest.name)
}
inline ::std::string* CallRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.CallRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.CallRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.CallRequest.name)
}

// bytes data = 2;
inline void CallRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::data() const {
  // @@protoc_insertion_point(field_get:ric.action.CallRequest.data)
  return data_.GetNoArena();
}
inline void CallRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.CallRequest.data)
}
#if LANG_CXX11
inline void CallRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.CallRequest.data)
}
#endif
inline void CallRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.CallRequest.data)
}
inline void CallRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.CallRequest.data)
}
inline ::std::string* CallRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.CallRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_data() {
  // @@protoc_insertion_point(field_release:ric.action.CallRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.action.CallRequest.data)
}

// string content_type = 3;
inline void CallRequest::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::content_type() const {
  // @@protoc_insertion_point(field_get:ric.action.CallRequest.content_type)
  return content_type_.GetNoArena();
}
inline void CallRequest::set_content_type(const ::std::string& value) {
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.CallRequest.content_type)
}
#if LANG_CXX11
inline void CallRequest::set_content_type(::std::string&& value) {
  
  content_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.CallRequest.content_type)
}
#endif
inline void CallRequest::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.CallRequest.content_type)
}
inline void CallRequest::set_content_type(const char* value, size_t size) {
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.CallRequest.content_type)
}
inline ::std::string* CallRequest::mutable_content_type() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.CallRequest.content_type)
  return content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_content_type() {
  // @@protoc_insertion_point(field_release:ric.action.CallRequest.content_type)
  
  return content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_content_type(::std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:ric.action.CallRequest.content_type)
}

// .ric.action.Context ctx = 4;
inline bool CallRequest::has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline void CallRequest::clear_ctx() {
  if (GetArenaNoVirtual() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::ric::action::Context& CallRequest::ctx() const {
  const ::ric::action::Context* p = ctx_;
  // @@protoc_insertion_point(field_get:ric.action.CallRequest.ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::action::Context*>(
      &::ric::action::_Context_default_instance_);
}
inline ::ric::action::Context* CallRequest::release_ctx() {
  // @@protoc_insertion_point(field_release:ric.action.CallRequest.ctx)
  
  ::ric::action::Context* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::ric::action::Context* CallRequest::mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::action::Context>(GetArenaNoVirtual());
    ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.action.CallRequest.ctx)
  return ctx_;
}
inline void CallRequest::set_allocated_ctx(::ric::action::Context* ctx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:ric.action.CallRequest.ctx)
}

// -------------------------------------------------------------------

// Context

// string object_id = 1;
inline void Context::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::object_id() const {
  // @@protoc_insertion_point(field_get:ric.action.Context.object_id)
  return object_id_.GetNoArena();
}
inline void Context::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Context.object_id)
}
#if LANG_CXX11
inline void Context::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Context.object_id)
}
#endif
inline void Context::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Context.object_id)
}
inline void Context::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Context.object_id)
}
inline ::std::string* Context::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Context.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_object_id() {
  // @@protoc_insertion_point(field_release:ric.action.Context.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_object_id(::std::string* object_id) {
  if (object_id != nullptr) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Context.object_id)
}

// string group_id = 2;
inline void Context::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::group_id() const {
  // @@protoc_insertion_point(field_get:ric.action.Context.group_id)
  return group_id_.GetNoArena();
}
inline void Context::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Context.group_id)
}
#if LANG_CXX11
inline void Context::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Context.group_id)
}
#endif
inline void Context::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Context.group_id)
}
inline void Context::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Context.group_id)
}
inline ::std::string* Context::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Context.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_group_id() {
  // @@protoc_insertion_point(field_release:ric.action.Context.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_group_id(::std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Context.group_id)
}

// string user_id = 3;
inline void Context::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Context::user_id() const {
  // @@protoc_insertion_point(field_get:ric.action.Context.user_id)
  return user_id_.GetNoArena();
}
inline void Context::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Context.user_id)
}
#if LANG_CXX11
inline void Context::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Context.user_id)
}
#endif
inline void Context::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Context.user_id)
}
inline void Context::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Context.user_id)
}
inline ::std::string* Context::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Context.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Context::release_user_id() {
  // @@protoc_insertion_point(field_release:ric.action.Context.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Context::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Context.user_id)
}

// -------------------------------------------------------------------

// ScaleRequest

// string name = 1;
inline void ScaleRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScaleRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.ScaleRequest.name)
  return name_.GetNoArena();
}
inline void ScaleRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.ScaleRequest.name)
}
#if LANG_CXX11
inline void ScaleRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.ScaleRequest.name)
}
#endif
inline void ScaleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.ScaleRequest.name)
}
inline void ScaleRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.ScaleRequest.name)
}
inline ::std::string* ScaleRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.ScaleRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScaleRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.ScaleRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScaleRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.ScaleRequest.name)
}

// .ric.action.Uint64 replicas = 2;
inline bool ScaleRequest::has_replicas() const {
  return this != internal_default_instance() && replicas_ != nullptr;
}
inline void ScaleRequest::clear_replicas() {
  if (GetArenaNoVirtual() == nullptr && replicas_ != nullptr) {
    delete replicas_;
  }
  replicas_ = nullptr;
}
inline const ::ric::action::Uint64& ScaleRequest::replicas() const {
  const ::ric::action::Uint64* p = replicas_;
  // @@protoc_insertion_point(field_get:ric.action.ScaleRequest.replicas)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::action::Uint64*>(
      &::ric::action::_Uint64_default_instance_);
}
inline ::ric::action::Uint64* ScaleRequest::release_replicas() {
  // @@protoc_insertion_point(field_release:ric.action.ScaleRequest.replicas)
  
  ::ric::action::Uint64* temp = replicas_;
  replicas_ = nullptr;
  return temp;
}
inline ::ric::action::Uint64* ScaleRequest::mutable_replicas() {
  
  if (replicas_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::action::Uint64>(GetArenaNoVirtual());
    replicas_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.action.ScaleRequest.replicas)
  return replicas_;
}
inline void ScaleRequest::set_allocated_replicas(::ric::action::Uint64* replicas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete replicas_;
  }
  if (replicas) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      replicas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replicas, submessage_arena);
    }
    
  } else {
    
  }
  replicas_ = replicas;
  // @@protoc_insertion_point(field_set_allocated:ric.action.ScaleRequest.replicas)
}

// -------------------------------------------------------------------

// Uint64

// uint64 value = 1;
inline void Uint64::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Uint64::value() const {
  // @@protoc_insertion_point(field_get:ric.action.Uint64.value)
  return value_;
}
inline void Uint64::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ric.action.Uint64.value)
}

// -------------------------------------------------------------------

// DeleteRequest

// string name = 1;
inline void DeleteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.DeleteRequest.name)
  return name_.GetNoArena();
}
inline void DeleteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.DeleteRequest.name)
}
#if LANG_CXX11
inline void DeleteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.DeleteRequest.name)
}
#endif
inline void DeleteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.DeleteRequest.name)
}
inline void DeleteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.DeleteRequest.name)
}
inline ::std::string* DeleteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.DeleteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.DeleteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.DeleteRequest.name)
}

// -------------------------------------------------------------------

// UpdateOrDeployRequest

// string name = 1;
inline void UpdateOrDeployRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOrDeployRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.UpdateOrDeployRequest.name)
  return name_.GetNoArena();
}
inline void UpdateOrDeployRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.UpdateOrDeployRequest.name)
}
#if LANG_CXX11
inline void UpdateOrDeployRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.UpdateOrDeployRequest.name)
}
#endif
inline void UpdateOrDeployRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.UpdateOrDeployRequest.name)
}
inline void UpdateOrDeployRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.UpdateOrDeployRequest.name)
}
inline ::std::string* UpdateOrDeployRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.UpdateOrDeployRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOrDeployRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.UpdateOrDeployRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOrDeployRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.UpdateOrDeployRequest.name)
}

// .ric.action.Function func = 2;
inline bool UpdateOrDeployRequest::has_func() const {
  return this != internal_default_instance() && func_ != nullptr;
}
inline void UpdateOrDeployRequest::clear_func() {
  if (GetArenaNoVirtual() == nullptr && func_ != nullptr) {
    delete func_;
  }
  func_ = nullptr;
}
inline const ::ric::action::Function& UpdateOrDeployRequest::func() const {
  const ::ric::action::Function* p = func_;
  // @@protoc_insertion_point(field_get:ric.action.UpdateOrDeployRequest.func)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::action::Function*>(
      &::ric::action::_Function_default_instance_);
}
inline ::ric::action::Function* UpdateOrDeployRequest::release_func() {
  // @@protoc_insertion_point(field_release:ric.action.UpdateOrDeployRequest.func)
  
  ::ric::action::Function* temp = func_;
  func_ = nullptr;
  return temp;
}
inline ::ric::action::Function* UpdateOrDeployRequest::mutable_func() {
  
  if (func_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::action::Function>(GetArenaNoVirtual());
    func_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.action.UpdateOrDeployRequest.func)
  return func_;
}
inline void UpdateOrDeployRequest::set_allocated_func(::ric::action::Function* func) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete func_;
  }
  if (func) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      func = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, func, submessage_arena);
    }
    
  } else {
    
  }
  func_ = func;
  // @@protoc_insertion_point(field_set_allocated:ric.action.UpdateOrDeployRequest.func)
}

// .ric.action.Options opt = 3;
inline bool UpdateOrDeployRequest::has_opt() const {
  return this != internal_default_instance() && opt_ != nullptr;
}
inline void UpdateOrDeployRequest::clear_opt() {
  if (GetArenaNoVirtual() == nullptr && opt_ != nullptr) {
    delete opt_;
  }
  opt_ = nullptr;
}
inline const ::ric::action::Options& UpdateOrDeployRequest::opt() const {
  const ::ric::action::Options* p = opt_;
  // @@protoc_insertion_point(field_get:ric.action.UpdateOrDeployRequest.opt)
  return p != nullptr ? *p : *reinterpret_cast<const ::ric::action::Options*>(
      &::ric::action::_Options_default_instance_);
}
inline ::ric::action::Options* UpdateOrDeployRequest::release_opt() {
  // @@protoc_insertion_point(field_release:ric.action.UpdateOrDeployRequest.opt)
  
  ::ric::action::Options* temp = opt_;
  opt_ = nullptr;
  return temp;
}
inline ::ric::action::Options* UpdateOrDeployRequest::mutable_opt() {
  
  if (opt_ == nullptr) {
    auto* p = CreateMaybeMessage<::ric::action::Options>(GetArenaNoVirtual());
    opt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ric.action.UpdateOrDeployRequest.opt)
  return opt_;
}
inline void UpdateOrDeployRequest::set_allocated_opt(::ric::action::Options* opt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete opt_;
  }
  if (opt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      opt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opt, submessage_arena);
    }
    
  } else {
    
  }
  opt_ = opt;
  // @@protoc_insertion_point(field_set_allocated:ric.action.UpdateOrDeployRequest.opt)
}

// -------------------------------------------------------------------

// Function

// string handler = 1;
inline void Function::clear_handler() {
  handler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::handler() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.handler)
  return handler_.GetNoArena();
}
inline void Function::set_handler(const ::std::string& value) {
  
  handler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.handler)
}
#if LANG_CXX11
inline void Function::set_handler(::std::string&& value) {
  
  handler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.handler)
}
#endif
inline void Function::set_handler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.handler)
}
inline void Function::set_handler(const char* value, size_t size) {
  
  handler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.handler)
}
inline ::std::string* Function::mutable_handler() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.handler)
  return handler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_handler() {
  // @@protoc_insertion_point(field_release:ric.action.Function.handler)
  
  return handler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_handler(::std::string* handler) {
  if (handler != nullptr) {
    
  } else {
    
  }
  handler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handler);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.handler)
}

// string body = 2;
inline void Function::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::body() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.body)
  return body_.GetNoArena();
}
inline void Function::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.body)
}
#if LANG_CXX11
inline void Function::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.body)
}
#endif
inline void Function::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.body)
}
inline void Function::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.body)
}
inline ::std::string* Function::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_body() {
  // @@protoc_insertion_point(field_release:ric.action.Function.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_body(::std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.body)
}

// string deps = 3;
inline void Function::clear_deps() {
  deps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::deps() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.deps)
  return deps_.GetNoArena();
}
inline void Function::set_deps(const ::std::string& value) {
  
  deps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.deps)
}
#if LANG_CXX11
inline void Function::set_deps(::std::string&& value) {
  
  deps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.deps)
}
#endif
inline void Function::set_deps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.deps)
}
inline void Function::set_deps(const char* value, size_t size) {
  
  deps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.deps)
}
inline ::std::string* Function::mutable_deps() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.deps)
  return deps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_deps() {
  // @@protoc_insertion_point(field_release:ric.action.Function.deps)
  
  return deps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_deps(::std::string* deps) {
  if (deps != nullptr) {
    
  } else {
    
  }
  deps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deps);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.deps)
}

// string runtime = 4;
inline void Function::clear_runtime() {
  runtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::runtime() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.runtime)
  return runtime_.GetNoArena();
}
inline void Function::set_runtime(const ::std::string& value) {
  
  runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.runtime)
}
#if LANG_CXX11
inline void Function::set_runtime(::std::string&& value) {
  
  runtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.runtime)
}
#endif
inline void Function::set_runtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.runtime)
}
inline void Function::set_runtime(const char* value, size_t size) {
  
  runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.runtime)
}
inline ::std::string* Function::mutable_runtime() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.runtime)
  return runtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_runtime() {
  // @@protoc_insertion_point(field_release:ric.action.Function.runtime)
  
  return runtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_runtime(::std::string* runtime) {
  if (runtime != nullptr) {
    
  } else {
    
  }
  runtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.runtime)
}

// string runtime_image = 5;
inline void Function::clear_runtime_image() {
  runtime_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::runtime_image() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.runtime_image)
  return runtime_image_.GetNoArena();
}
inline void Function::set_runtime_image(const ::std::string& value) {
  
  runtime_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.runtime_image)
}
#if LANG_CXX11
inline void Function::set_runtime_image(::std::string&& value) {
  
  runtime_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.runtime_image)
}
#endif
inline void Function::set_runtime_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.runtime_image)
}
inline void Function::set_runtime_image(const char* value, size_t size) {
  
  runtime_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.runtime_image)
}
inline ::std::string* Function::mutable_runtime_image() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.runtime_image)
  return runtime_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_runtime_image() {
  // @@protoc_insertion_point(field_release:ric.action.Function.runtime_image)
  
  return runtime_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_runtime_image(::std::string* runtime_image) {
  if (runtime_image != nullptr) {
    
  } else {
    
  }
  runtime_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_image);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.runtime_image)
}

// string mem = 6;
inline void Function::clear_mem() {
  mem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::mem() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.mem)
  return mem_.GetNoArena();
}
inline void Function::set_mem(const ::std::string& value) {
  
  mem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.mem)
}
#if LANG_CXX11
inline void Function::set_mem(::std::string&& value) {
  
  mem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.mem)
}
#endif
inline void Function::set_mem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.mem)
}
inline void Function::set_mem(const char* value, size_t size) {
  
  mem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.mem)
}
inline ::std::string* Function::mutable_mem() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.mem)
  return mem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_mem() {
  // @@protoc_insertion_point(field_release:ric.action.Function.mem)
  
  return mem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_mem(::std::string* mem) {
  if (mem != nullptr) {
    
  } else {
    
  }
  mem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mem);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.mem)
}

// string cpu = 7;
inline void Function::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::cpu() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.cpu)
  return cpu_.GetNoArena();
}
inline void Function::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.cpu)
}
#if LANG_CXX11
inline void Function::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.cpu)
}
#endif
inline void Function::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.cpu)
}
inline void Function::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.cpu)
}
inline ::std::string* Function::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_cpu() {
  // @@protoc_insertion_point(field_release:ric.action.Function.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_cpu(::std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.cpu)
}

// string timeout = 8;
inline void Function::clear_timeout() {
  timeout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::timeout() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.timeout)
  return timeout_.GetNoArena();
}
inline void Function::set_timeout(const ::std::string& value) {
  
  timeout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.timeout)
}
#if LANG_CXX11
inline void Function::set_timeout(::std::string&& value) {
  
  timeout_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.timeout)
}
#endif
inline void Function::set_timeout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timeout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.timeout)
}
inline void Function::set_timeout(const char* value, size_t size) {
  
  timeout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.timeout)
}
inline ::std::string* Function::mutable_timeout() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.timeout)
  return timeout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_timeout() {
  // @@protoc_insertion_point(field_release:ric.action.Function.timeout)
  
  return timeout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_timeout(::std::string* timeout) {
  if (timeout != nullptr) {
    
  } else {
    
  }
  timeout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeout);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.timeout)
}

// string image_pull_policy = 9;
inline void Function::clear_image_pull_policy() {
  image_pull_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::image_pull_policy() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.image_pull_policy)
  return image_pull_policy_.GetNoArena();
}
inline void Function::set_image_pull_policy(const ::std::string& value) {
  
  image_pull_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.image_pull_policy)
}
#if LANG_CXX11
inline void Function::set_image_pull_policy(::std::string&& value) {
  
  image_pull_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.image_pull_policy)
}
#endif
inline void Function::set_image_pull_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_pull_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.image_pull_policy)
}
inline void Function::set_image_pull_policy(const char* value, size_t size) {
  
  image_pull_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.image_pull_policy)
}
inline ::std::string* Function::mutable_image_pull_policy() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.image_pull_policy)
  return image_pull_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_image_pull_policy() {
  // @@protoc_insertion_point(field_release:ric.action.Function.image_pull_policy)
  
  return image_pull_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_image_pull_policy(::std::string* image_pull_policy) {
  if (image_pull_policy != nullptr) {
    
  } else {
    
  }
  image_pull_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_pull_policy);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.image_pull_policy)
}

// string schedule = 10;
inline void Function::clear_schedule() {
  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::schedule() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.schedule)
  return schedule_.GetNoArena();
}
inline void Function::set_schedule(const ::std::string& value) {
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Function.schedule)
}
#if LANG_CXX11
inline void Function::set_schedule(::std::string&& value) {
  
  schedule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Function.schedule)
}
#endif
inline void Function::set_schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Function.schedule)
}
inline void Function::set_schedule(const char* value, size_t size) {
  
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.schedule)
}
inline ::std::string* Function::mutable_schedule() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Function.schedule)
  return schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_schedule() {
  // @@protoc_insertion_point(field_release:ric.action.Function.schedule)
  
  return schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_schedule(::std::string* schedule) {
  if (schedule != nullptr) {
    
  } else {
    
  }
  schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedule);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Function.schedule)
}

// int32 port = 11;
inline void Function::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Function::port() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.port)
  return port_;
}
inline void Function::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ric.action.Function.port)
}

// int32 service_port = 12;
inline void Function::clear_service_port() {
  service_port_ = 0;
}
inline ::google::protobuf::int32 Function::service_port() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.service_port)
  return service_port_;
}
inline void Function::set_service_port(::google::protobuf::int32 value) {
  
  service_port_ = value;
  // @@protoc_insertion_point(field_set:ric.action.Function.service_port)
}

// bool headless = 13;
inline void Function::clear_headless() {
  headless_ = false;
}
inline bool Function::headless() const {
  // @@protoc_insertion_point(field_get:ric.action.Function.headless)
  return headless_;
}
inline void Function::set_headless(bool value) {
  
  headless_ = value;
  // @@protoc_insertion_point(field_set:ric.action.Function.headless)
}

// repeated string envs = 14;
inline int Function::envs_size() const {
  return envs_.size();
}
inline void Function::clear_envs() {
  envs_.Clear();
}
inline const ::std::string& Function::envs(int index) const {
  // @@protoc_insertion_point(field_get:ric.action.Function.envs)
  return envs_.Get(index);
}
inline ::std::string* Function::mutable_envs(int index) {
  // @@protoc_insertion_point(field_mutable:ric.action.Function.envs)
  return envs_.Mutable(index);
}
inline void Function::set_envs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.action.Function.envs)
  envs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Function::set_envs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.action.Function.envs)
  envs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Function::set_envs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  envs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.action.Function.envs)
}
inline void Function::set_envs(int index, const char* value, size_t size) {
  envs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.envs)
}
inline ::std::string* Function::add_envs() {
  // @@protoc_insertion_point(field_add_mutable:ric.action.Function.envs)
  return envs_.Add();
}
inline void Function::add_envs(const ::std::string& value) {
  envs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.action.Function.envs)
}
#if LANG_CXX11
inline void Function::add_envs(::std::string&& value) {
  envs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.action.Function.envs)
}
#endif
inline void Function::add_envs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  envs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.action.Function.envs)
}
inline void Function::add_envs(const char* value, size_t size) {
  envs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.action.Function.envs)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Function::envs() const {
  // @@protoc_insertion_point(field_list:ric.action.Function.envs)
  return envs_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Function::mutable_envs() {
  // @@protoc_insertion_point(field_mutable_list:ric.action.Function.envs)
  return &envs_;
}

// repeated string labels = 15;
inline int Function::labels_size() const {
  return labels_.size();
}
inline void Function::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& Function::labels(int index) const {
  // @@protoc_insertion_point(field_get:ric.action.Function.labels)
  return labels_.Get(index);
}
inline ::std::string* Function::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:ric.action.Function.labels)
  return labels_.Mutable(index);
}
inline void Function::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.action.Function.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Function::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.action.Function.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Function::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.action.Function.labels)
}
inline void Function::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.labels)
}
inline ::std::string* Function::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:ric.action.Function.labels)
  return labels_.Add();
}
inline void Function::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.action.Function.labels)
}
#if LANG_CXX11
inline void Function::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.action.Function.labels)
}
#endif
inline void Function::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.action.Function.labels)
}
inline void Function::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.action.Function.labels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Function::labels() const {
  // @@protoc_insertion_point(field_list:ric.action.Function.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Function::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:ric.action.Function.labels)
  return &labels_;
}

// repeated string secrets = 16;
inline int Function::secrets_size() const {
  return secrets_.size();
}
inline void Function::clear_secrets() {
  secrets_.Clear();
}
inline const ::std::string& Function::secrets(int index) const {
  // @@protoc_insertion_point(field_get:ric.action.Function.secrets)
  return secrets_.Get(index);
}
inline ::std::string* Function::mutable_secrets(int index) {
  // @@protoc_insertion_point(field_mutable:ric.action.Function.secrets)
  return secrets_.Mutable(index);
}
inline void Function::set_secrets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.action.Function.secrets)
  secrets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Function::set_secrets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.action.Function.secrets)
  secrets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Function::set_secrets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  secrets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.action.Function.secrets)
}
inline void Function::set_secrets(int index, const char* value, size_t size) {
  secrets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.action.Function.secrets)
}
inline ::std::string* Function::add_secrets() {
  // @@protoc_insertion_point(field_add_mutable:ric.action.Function.secrets)
  return secrets_.Add();
}
inline void Function::add_secrets(const ::std::string& value) {
  secrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.action.Function.secrets)
}
#if LANG_CXX11
inline void Function::add_secrets(::std::string&& value) {
  secrets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.action.Function.secrets)
}
#endif
inline void Function::add_secrets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  secrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.action.Function.secrets)
}
inline void Function::add_secrets(const char* value, size_t size) {
  secrets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.action.Function.secrets)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Function::secrets() const {
  // @@protoc_insertion_point(field_list:ric.action.Function.secrets)
  return secrets_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Function::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_list:ric.action.Function.secrets)
  return &secrets_;
}

// -------------------------------------------------------------------

// Options

// repeated string secrets = 1;
inline int Options::secrets_size() const {
  return secrets_.size();
}
inline void Options::clear_secrets() {
  secrets_.Clear();
}
inline const ::std::string& Options::secrets(int index) const {
  // @@protoc_insertion_point(field_get:ric.action.Options.secrets)
  return secrets_.Get(index);
}
inline ::std::string* Options::mutable_secrets(int index) {
  // @@protoc_insertion_point(field_mutable:ric.action.Options.secrets)
  return secrets_.Mutable(index);
}
inline void Options::set_secrets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ric.action.Options.secrets)
  secrets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Options::set_secrets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ric.action.Options.secrets)
  secrets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Options::set_secrets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  secrets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ric.action.Options.secrets)
}
inline void Options::set_secrets(int index, const char* value, size_t size) {
  secrets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ric.action.Options.secrets)
}
inline ::std::string* Options::add_secrets() {
  // @@protoc_insertion_point(field_add_mutable:ric.action.Options.secrets)
  return secrets_.Add();
}
inline void Options::add_secrets(const ::std::string& value) {
  secrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ric.action.Options.secrets)
}
#if LANG_CXX11
inline void Options::add_secrets(::std::string&& value) {
  secrets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ric.action.Options.secrets)
}
#endif
inline void Options::add_secrets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  secrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ric.action.Options.secrets)
}
inline void Options::add_secrets(const char* value, size_t size) {
  secrets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ric.action.Options.secrets)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Options::secrets() const {
  // @@protoc_insertion_point(field_list:ric.action.Options.secrets)
  return secrets_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Options::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_list:ric.action.Options.secrets)
  return &secrets_;
}

// -------------------------------------------------------------------

// UpdateOrDeployResponse

// int64 generation = 1;
inline void UpdateOrDeployResponse::clear_generation() {
  generation_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UpdateOrDeployResponse::generation() const {
  // @@protoc_insertion_point(field_get:ric.action.UpdateOrDeployResponse.generation)
  return generation_;
}
inline void UpdateOrDeployResponse::set_generation(::google::protobuf::int64 value) {
  
  generation_ = value;
  // @@protoc_insertion_point(field_set:ric.action.UpdateOrDeployResponse.generation)
}

// string resource_version = 2;
inline void UpdateOrDeployResponse::clear_resource_version() {
  resource_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOrDeployResponse::resource_version() const {
  // @@protoc_insertion_point(field_get:ric.action.UpdateOrDeployResponse.resource_version)
  return resource_version_.GetNoArena();
}
inline void UpdateOrDeployResponse::set_resource_version(const ::std::string& value) {
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.UpdateOrDeployResponse.resource_version)
}
#if LANG_CXX11
inline void UpdateOrDeployResponse::set_resource_version(::std::string&& value) {
  
  resource_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.UpdateOrDeployResponse.resource_version)
}
#endif
inline void UpdateOrDeployResponse::set_resource_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.UpdateOrDeployResponse.resource_version)
}
inline void UpdateOrDeployResponse::set_resource_version(const char* value, size_t size) {
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.UpdateOrDeployResponse.resource_version)
}
inline ::std::string* UpdateOrDeployResponse::mutable_resource_version() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.UpdateOrDeployResponse.resource_version)
  return resource_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOrDeployResponse::release_resource_version() {
  // @@protoc_insertion_point(field_release:ric.action.UpdateOrDeployResponse.resource_version)
  
  return resource_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOrDeployResponse::set_allocated_resource_version(::std::string* resource_version) {
  if (resource_version != nullptr) {
    
  } else {
    
  }
  resource_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_version);
  // @@protoc_insertion_point(field_set_allocated:ric.action.UpdateOrDeployResponse.resource_version)
}

// string checksum = 3;
inline void UpdateOrDeployResponse::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOrDeployResponse::checksum() const {
  // @@protoc_insertion_point(field_get:ric.action.UpdateOrDeployResponse.checksum)
  return checksum_.GetNoArena();
}
inline void UpdateOrDeployResponse::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.UpdateOrDeployResponse.checksum)
}
#if LANG_CXX11
inline void UpdateOrDeployResponse::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.UpdateOrDeployResponse.checksum)
}
#endif
inline void UpdateOrDeployResponse::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.UpdateOrDeployResponse.checksum)
}
inline void UpdateOrDeployResponse::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.UpdateOrDeployResponse.checksum)
}
inline ::std::string* UpdateOrDeployResponse::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.UpdateOrDeployResponse.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOrDeployResponse::release_checksum() {
  // @@protoc_insertion_point(field_release:ric.action.UpdateOrDeployResponse.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOrDeployResponse::set_allocated_checksum(::std::string* checksum) {
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:ric.action.UpdateOrDeployResponse.checksum)
}

// -------------------------------------------------------------------

// LogsRequest

// string name = 1;
inline void LogsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogsRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.LogsRequest.name)
  return name_.GetNoArena();
}
inline void LogsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.LogsRequest.name)
}
#if LANG_CXX11
inline void LogsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.LogsRequest.name)
}
#endif
inline void LogsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.LogsRequest.name)
}
inline void LogsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.LogsRequest.name)
}
inline ::std::string* LogsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.LogsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogsRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.LogsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogsRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.LogsRequest.name)
}

// string pod_name = 2;
inline void LogsRequest::clear_pod_name() {
  pod_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogsRequest::pod_name() const {
  // @@protoc_insertion_point(field_get:ric.action.LogsRequest.pod_name)
  return pod_name_.GetNoArena();
}
inline void LogsRequest::set_pod_name(const ::std::string& value) {
  
  pod_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.LogsRequest.pod_name)
}
#if LANG_CXX11
inline void LogsRequest::set_pod_name(::std::string&& value) {
  
  pod_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.LogsRequest.pod_name)
}
#endif
inline void LogsRequest::set_pod_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.LogsRequest.pod_name)
}
inline void LogsRequest::set_pod_name(const char* value, size_t size) {
  
  pod_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.LogsRequest.pod_name)
}
inline ::std::string* LogsRequest::mutable_pod_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.LogsRequest.pod_name)
  return pod_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogsRequest::release_pod_name() {
  // @@protoc_insertion_point(field_release:ric.action.LogsRequest.pod_name)
  
  return pod_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogsRequest::set_allocated_pod_name(::std::string* pod_name) {
  if (pod_name != nullptr) {
    
  } else {
    
  }
  pod_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pod_name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.LogsRequest.pod_name)
}

// bool follow = 3;
inline void LogsRequest::clear_follow() {
  follow_ = false;
}
inline bool LogsRequest::follow() const {
  // @@protoc_insertion_point(field_get:ric.action.LogsRequest.follow)
  return follow_;
}
inline void LogsRequest::set_follow(bool value) {
  
  follow_ = value;
  // @@protoc_insertion_point(field_set:ric.action.LogsRequest.follow)
}

// int64 tail_lines = 4;
inline void LogsRequest::clear_tail_lines() {
  tail_lines_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LogsRequest::tail_lines() const {
  // @@protoc_insertion_point(field_get:ric.action.LogsRequest.tail_lines)
  return tail_lines_;
}
inline void LogsRequest::set_tail_lines(::google::protobuf::int64 value) {
  
  tail_lines_ = value;
  // @@protoc_insertion_point(field_set:ric.action.LogsRequest.tail_lines)
}

// string filter_by = 5;
inline void LogsRequest::clear_filter_by() {
  filter_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogsRequest::filter_by() const {
  // @@protoc_insertion_point(field_get:ric.action.LogsRequest.filter_by)
  return filter_by_.GetNoArena();
}
inline void LogsRequest::set_filter_by(const ::std::string& value) {
  
  filter_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.LogsRequest.filter_by)
}
#if LANG_CXX11
inline void LogsRequest::set_filter_by(::std::string&& value) {
  
  filter_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.LogsRequest.filter_by)
}
#endif
inline void LogsRequest::set_filter_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.LogsRequest.filter_by)
}
inline void LogsRequest::set_filter_by(const char* value, size_t size) {
  
  filter_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.LogsRequest.filter_by)
}
inline ::std::string* LogsRequest::mutable_filter_by() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.LogsRequest.filter_by)
  return filter_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogsRequest::release_filter_by() {
  // @@protoc_insertion_point(field_release:ric.action.LogsRequest.filter_by)
  
  return filter_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogsRequest::set_allocated_filter_by(::std::string* filter_by) {
  if (filter_by != nullptr) {
    
  } else {
    
  }
  filter_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter_by);
  // @@protoc_insertion_point(field_set_allocated:ric.action.LogsRequest.filter_by)
}

// -------------------------------------------------------------------

// InfoRequest

// string name = 1;
inline void InfoRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.InfoRequest.name)
  return name_.GetNoArena();
}
inline void InfoRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.InfoRequest.name)
}
#if LANG_CXX11
inline void InfoRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.InfoRequest.name)
}
#endif
inline void InfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.InfoRequest.name)
}
inline void InfoRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.InfoRequest.name)
}
inline ::std::string* InfoRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.InfoRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.InfoRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.InfoRequest.name)
}

// -------------------------------------------------------------------

// CallResponse

// bytes data = 1;
inline void CallResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallResponse::data() const {
  // @@protoc_insertion_point(field_get:ric.action.CallResponse.data)
  return data_.GetNoArena();
}
inline void CallResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.CallResponse.data)
}
#if LANG_CXX11
inline void CallResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.CallResponse.data)
}
#endif
inline void CallResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.CallResponse.data)
}
inline void CallResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.CallResponse.data)
}
inline ::std::string* CallResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.CallResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResponse::release_data() {
  // @@protoc_insertion_point(field_release:ric.action.CallResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResponse::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.action.CallResponse.data)
}

// -------------------------------------------------------------------

// EmptyResponse

// -------------------------------------------------------------------

// LogsResponse

// string line = 1;
inline void LogsResponse::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogsResponse::line() const {
  // @@protoc_insertion_point(field_get:ric.action.LogsResponse.line)
  return line_.GetNoArena();
}
inline void LogsResponse::set_line(const ::std::string& value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.LogsResponse.line)
}
#if LANG_CXX11
inline void LogsResponse::set_line(::std::string&& value) {
  
  line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.LogsResponse.line)
}
#endif
inline void LogsResponse::set_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.LogsResponse.line)
}
inline void LogsResponse::set_line(const char* value, size_t size) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.LogsResponse.line)
}
inline ::std::string* LogsResponse::mutable_line() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.LogsResponse.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogsResponse::release_line() {
  // @@protoc_insertion_point(field_release:ric.action.LogsResponse.line)
  
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogsResponse::set_allocated_line(::std::string* line) {
  if (line != nullptr) {
    
  } else {
    
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:ric.action.LogsResponse.line)
}

// -------------------------------------------------------------------

// InfoResponse

// repeated .ric.action.Pod pods = 1;
inline int InfoResponse::pods_size() const {
  return pods_.size();
}
inline void InfoResponse::clear_pods() {
  pods_.Clear();
}
inline ::ric::action::Pod* InfoResponse::mutable_pods(int index) {
  // @@protoc_insertion_point(field_mutable:ric.action.InfoResponse.pods)
  return pods_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::action::Pod >*
InfoResponse::mutable_pods() {
  // @@protoc_insertion_point(field_mutable_list:ric.action.InfoResponse.pods)
  return &pods_;
}
inline const ::ric::action::Pod& InfoResponse::pods(int index) const {
  // @@protoc_insertion_point(field_get:ric.action.InfoResponse.pods)
  return pods_.Get(index);
}
inline ::ric::action::Pod* InfoResponse::add_pods() {
  // @@protoc_insertion_point(field_add:ric.action.InfoResponse.pods)
  return pods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::action::Pod >&
InfoResponse::pods() const {
  // @@protoc_insertion_point(field_list:ric.action.InfoResponse.pods)
  return pods_;
}

// -------------------------------------------------------------------

// Pod

// string name = 1;
inline void Pod::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pod::name() const {
  // @@protoc_insertion_point(field_get:ric.action.Pod.name)
  return name_.GetNoArena();
}
inline void Pod::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Pod.name)
}
#if LANG_CXX11
inline void Pod::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Pod.name)
}
#endif
inline void Pod::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Pod.name)
}
inline void Pod::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Pod.name)
}
inline ::std::string* Pod::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Pod.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pod::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.Pod.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pod::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Pod.name)
}

// string creation_timestamp = 2;
inline void Pod::clear_creation_timestamp() {
  creation_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pod::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:ric.action.Pod.creation_timestamp)
  return creation_timestamp_.GetNoArena();
}
inline void Pod::set_creation_timestamp(const ::std::string& value) {
  
  creation_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Pod.creation_timestamp)
}
#if LANG_CXX11
inline void Pod::set_creation_timestamp(::std::string&& value) {
  
  creation_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Pod.creation_timestamp)
}
#endif
inline void Pod::set_creation_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creation_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Pod.creation_timestamp)
}
inline void Pod::set_creation_timestamp(const char* value, size_t size) {
  
  creation_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Pod.creation_timestamp)
}
inline ::std::string* Pod::mutable_creation_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Pod.creation_timestamp)
  return creation_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pod::release_creation_timestamp() {
  // @@protoc_insertion_point(field_release:ric.action.Pod.creation_timestamp)
  
  return creation_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pod::set_allocated_creation_timestamp(::std::string* creation_timestamp) {
  if (creation_timestamp != nullptr) {
    
  } else {
    
  }
  creation_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creation_timestamp);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Pod.creation_timestamp)
}

// string phase = 3;
inline void Pod::clear_phase() {
  phase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pod::phase() const {
  // @@protoc_insertion_point(field_get:ric.action.Pod.phase)
  return phase_.GetNoArena();
}
inline void Pod::set_phase(const ::std::string& value) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Pod.phase)
}
#if LANG_CXX11
inline void Pod::set_phase(::std::string&& value) {
  
  phase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Pod.phase)
}
#endif
inline void Pod::set_phase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Pod.phase)
}
inline void Pod::set_phase(const char* value, size_t size) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Pod.phase)
}
inline ::std::string* Pod::mutable_phase() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Pod.phase)
  return phase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pod::release_phase() {
  // @@protoc_insertion_point(field_release:ric.action.Pod.phase)
  
  return phase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pod::set_allocated_phase(::std::string* phase) {
  if (phase != nullptr) {
    
  } else {
    
  }
  phase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phase);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Pod.phase)
}

// string start_time = 4;
inline void Pod::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pod::start_time() const {
  // @@protoc_insertion_point(field_get:ric.action.Pod.start_time)
  return start_time_.GetNoArena();
}
inline void Pod::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.Pod.start_time)
}
#if LANG_CXX11
inline void Pod::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.Pod.start_time)
}
#endif
inline void Pod::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.Pod.start_time)
}
inline void Pod::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.Pod.start_time)
}
inline ::std::string* Pod::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.Pod.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pod::release_start_time() {
  // @@protoc_insertion_point(field_release:ric.action.Pod.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pod::set_allocated_start_time(::std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:ric.action.Pod.start_time)
}

// repeated .ric.action.ContainerStatus container_statuses = 5;
inline int Pod::container_statuses_size() const {
  return container_statuses_.size();
}
inline void Pod::clear_container_statuses() {
  container_statuses_.Clear();
}
inline ::ric::action::ContainerStatus* Pod::mutable_container_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:ric.action.Pod.container_statuses)
  return container_statuses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ric::action::ContainerStatus >*
Pod::mutable_container_statuses() {
  // @@protoc_insertion_point(field_mutable_list:ric.action.Pod.container_statuses)
  return &container_statuses_;
}
inline const ::ric::action::ContainerStatus& Pod::container_statuses(int index) const {
  // @@protoc_insertion_point(field_get:ric.action.Pod.container_statuses)
  return container_statuses_.Get(index);
}
inline ::ric::action::ContainerStatus* Pod::add_container_statuses() {
  // @@protoc_insertion_point(field_add:ric.action.Pod.container_statuses)
  return container_statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ric::action::ContainerStatus >&
Pod::container_statuses() const {
  // @@protoc_insertion_point(field_list:ric.action.Pod.container_statuses)
  return container_statuses_;
}

// -------------------------------------------------------------------

// ContainerStatus

// bool ready = 1;
inline void ContainerStatus::clear_ready() {
  ready_ = false;
}
inline bool ContainerStatus::ready() const {
  // @@protoc_insertion_point(field_get:ric.action.ContainerStatus.ready)
  return ready_;
}
inline void ContainerStatus::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:ric.action.ContainerStatus.ready)
}

// int32 restart_count = 2;
inline void ContainerStatus::clear_restart_count() {
  restart_count_ = 0;
}
inline ::google::protobuf::int32 ContainerStatus::restart_count() const {
  // @@protoc_insertion_point(field_get:ric.action.ContainerStatus.restart_count)
  return restart_count_;
}
inline void ContainerStatus::set_restart_count(::google::protobuf::int32 value) {
  
  restart_count_ = value;
  // @@protoc_insertion_point(field_set:ric.action.ContainerStatus.restart_count)
}

// string state = 3;
inline void ContainerStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerStatus::state() const {
  // @@protoc_insertion_point(field_get:ric.action.ContainerStatus.state)
  return state_.GetNoArena();
}
inline void ContainerStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.ContainerStatus.state)
}
#if LANG_CXX11
inline void ContainerStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.ContainerStatus.state)
}
#endif
inline void ContainerStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.ContainerStatus.state)
}
inline void ContainerStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.ContainerStatus.state)
}
inline ::std::string* ContainerStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.ContainerStatus.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerStatus::release_state() {
  // @@protoc_insertion_point(field_release:ric.action.ContainerStatus.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerStatus::set_allocated_state(::std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:ric.action.ContainerStatus.state)
}

// string last_state = 4;
inline void ContainerStatus::clear_last_state() {
  last_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContainerStatus::last_state() const {
  // @@protoc_insertion_point(field_get:ric.action.ContainerStatus.last_state)
  return last_state_.GetNoArena();
}
inline void ContainerStatus::set_last_state(const ::std::string& value) {
  
  last_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.ContainerStatus.last_state)
}
#if LANG_CXX11
inline void ContainerStatus::set_last_state(::std::string&& value) {
  
  last_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.ContainerStatus.last_state)
}
#endif
inline void ContainerStatus::set_last_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.ContainerStatus.last_state)
}
inline void ContainerStatus::set_last_state(const char* value, size_t size) {
  
  last_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.ContainerStatus.last_state)
}
inline ::std::string* ContainerStatus::mutable_last_state() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.ContainerStatus.last_state)
  return last_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContainerStatus::release_last_state() {
  // @@protoc_insertion_point(field_release:ric.action.ContainerStatus.last_state)
  
  return last_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContainerStatus::set_allocated_last_state(::std::string* last_state) {
  if (last_state != nullptr) {
    
  } else {
    
  }
  last_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_state);
  // @@protoc_insertion_point(field_set_allocated:ric.action.ContainerStatus.last_state)
}

// -------------------------------------------------------------------

// HistoryRequest

// string oid = 1;
inline void HistoryRequest::clear_oid() {
  oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HistoryRequest::oid() const {
  // @@protoc_insertion_point(field_get:ric.action.HistoryRequest.oid)
  return oid_.GetNoArena();
}
inline void HistoryRequest::set_oid(const ::std::string& value) {
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.HistoryRequest.oid)
}
#if LANG_CXX11
inline void HistoryRequest::set_oid(::std::string&& value) {
  
  oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.HistoryRequest.oid)
}
#endif
inline void HistoryRequest::set_oid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.HistoryRequest.oid)
}
inline void HistoryRequest::set_oid(const char* value, size_t size) {
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.HistoryRequest.oid)
}
inline ::std::string* HistoryRequest::mutable_oid() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.HistoryRequest.oid)
  return oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HistoryRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.action.HistoryRequest.oid)
  
  return oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryRequest::set_allocated_oid(::std::string* oid) {
  if (oid != nullptr) {
    
  } else {
    
  }
  oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oid);
  // @@protoc_insertion_point(field_set_allocated:ric.action.HistoryRequest.oid)
}

// string db = 2;
inline void HistoryRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HistoryRequest::db() const {
  // @@protoc_insertion_point(field_get:ric.action.HistoryRequest.db)
  return db_.GetNoArena();
}
inline void HistoryRequest::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.HistoryRequest.db)
}
#if LANG_CXX11
inline void HistoryRequest::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.HistoryRequest.db)
}
#endif
inline void HistoryRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.HistoryRequest.db)
}
inline void HistoryRequest::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.HistoryRequest.db)
}
inline ::std::string* HistoryRequest::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.HistoryRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HistoryRequest::release_db() {
  // @@protoc_insertion_point(field_release:ric.action.HistoryRequest.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryRequest::set_allocated_db(::std::string* db) {
  if (db != nullptr) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:ric.action.HistoryRequest.db)
}

// int64 size = 3;
inline void HistoryRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 HistoryRequest::size() const {
  // @@protoc_insertion_point(field_get:ric.action.HistoryRequest.size)
  return size_;
}
inline void HistoryRequest::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ric.action.HistoryRequest.size)
}

// -------------------------------------------------------------------

// HistoryResponse

// bytes data = 1;
inline void HistoryResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HistoryResponse::data() const {
  // @@protoc_insertion_point(field_get:ric.action.HistoryResponse.data)
  return data_.GetNoArena();
}
inline void HistoryResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.HistoryResponse.data)
}
#if LANG_CXX11
inline void HistoryResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.HistoryResponse.data)
}
#endif
inline void HistoryResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.HistoryResponse.data)
}
inline void HistoryResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.HistoryResponse.data)
}
inline ::std::string* HistoryResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.HistoryResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HistoryResponse::release_data() {
  // @@protoc_insertion_point(field_release:ric.action.HistoryResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HistoryResponse::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.action.HistoryResponse.data)
}

// -------------------------------------------------------------------

// EventRequest

// string oid = 1;
inline void EventRequest::clear_oid() {
  oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventRequest::oid() const {
  // @@protoc_insertion_point(field_get:ric.action.EventRequest.oid)
  return oid_.GetNoArena();
}
inline void EventRequest::set_oid(const ::std::string& value) {
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.EventRequest.oid)
}
#if LANG_CXX11
inline void EventRequest::set_oid(::std::string&& value) {
  
  oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.EventRequest.oid)
}
#endif
inline void EventRequest::set_oid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.EventRequest.oid)
}
inline void EventRequest::set_oid(const char* value, size_t size) {
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.EventRequest.oid)
}
inline ::std::string* EventRequest::mutable_oid() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.EventRequest.oid)
  return oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.action.EventRequest.oid)
  
  return oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventRequest::set_allocated_oid(::std::string* oid) {
  if (oid != nullptr) {
    
  } else {
    
  }
  oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oid);
  // @@protoc_insertion_point(field_set_allocated:ric.action.EventRequest.oid)
}

// string name = 2;
inline void EventRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventRequest::name() const {
  // @@protoc_insertion_point(field_get:ric.action.EventRequest.name)
  return name_.GetNoArena();
}
inline void EventRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.EventRequest.name)
}
#if LANG_CXX11
inline void EventRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.EventRequest.name)
}
#endif
inline void EventRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.EventRequest.name)
}
inline void EventRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.EventRequest.name)
}
inline ::std::string* EventRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.EventRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventRequest::release_name() {
  // @@protoc_insertion_point(field_release:ric.action.EventRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ric.action.EventRequest.name)
}

// bytes data = 3;
inline void EventRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventRequest::data() const {
  // @@protoc_insertion_point(field_get:ric.action.EventRequest.data)
  return data_.GetNoArena();
}
inline void EventRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.EventRequest.data)
}
#if LANG_CXX11
inline void EventRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.EventRequest.data)
}
#endif
inline void EventRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.EventRequest.data)
}
inline void EventRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.EventRequest.data)
}
inline ::std::string* EventRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.EventRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventRequest::release_data() {
  // @@protoc_insertion_point(field_release:ric.action.EventRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.action.EventRequest.data)
}

// -------------------------------------------------------------------

// LastStateRequest

// string oid = 1;
inline void LastStateRequest::clear_oid() {
  oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LastStateRequest::oid() const {
  // @@protoc_insertion_point(field_get:ric.action.LastStateRequest.oid)
  return oid_.GetNoArena();
}
inline void LastStateRequest::set_oid(const ::std::string& value) {
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.LastStateRequest.oid)
}
#if LANG_CXX11
inline void LastStateRequest::set_oid(::std::string&& value) {
  
  oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.LastStateRequest.oid)
}
#endif
inline void LastStateRequest::set_oid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.LastStateRequest.oid)
}
inline void LastStateRequest::set_oid(const char* value, size_t size) {
  
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.LastStateRequest.oid)
}
inline ::std::string* LastStateRequest::mutable_oid() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.LastStateRequest.oid)
  return oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LastStateRequest::release_oid() {
  // @@protoc_insertion_point(field_release:ric.action.LastStateRequest.oid)
  
  return oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LastStateRequest::set_allocated_oid(::std::string* oid) {
  if (oid != nullptr) {
    
  } else {
    
  }
  oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oid);
  // @@protoc_insertion_point(field_set_allocated:ric.action.LastStateRequest.oid)
}

// -------------------------------------------------------------------

// LastStateResponse

// bytes data = 1;
inline void LastStateResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LastStateResponse::data() const {
  // @@protoc_insertion_point(field_get:ric.action.LastStateResponse.data)
  return data_.GetNoArena();
}
inline void LastStateResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ric.action.LastStateResponse.data)
}
#if LANG_CXX11
inline void LastStateResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ric.action.LastStateResponse.data)
}
#endif
inline void LastStateResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ric.action.LastStateResponse.data)
}
inline void LastStateResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ric.action.LastStateResponse.data)
}
inline ::std::string* LastStateResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ric.action.LastStateResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LastStateResponse::release_data() {
  // @@protoc_insertion_point(field_release:ric.action.LastStateResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LastStateResponse::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ric.action.LastStateResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace action
}  // namespace ric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ric_2daction_2fricaction_2eproto
